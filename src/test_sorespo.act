
import logging
import testing
import xml

import yang.adata
import yang.gdata as gdata
import orchestron.ttt
import orchestron.device as odev

import sorespo.layers
import sorespo.layers.y_0 as cfs_layer
from sorespo.devices.CiscoIosXr_24_1_ncs55a1 import root as xr24
from sorespo.devices.JuniperCRPD_23_4R1_9 import root as crpd23

def rfs_for_device(dev):
    return gdata.Container({
        'rfs': gdata.List(["name"], [
            gdata.Container({
                "name": gdata.Leaf("string", dev)
            })
        ])
    })

netinfra1_in = """<data>
    <netinfra xmlns="http://example.com/netinfra">
        <router>
            <name>AMS-CORE-1</name>
            <id>1</id>
            <role>edge</role>
            <asn>65001</asn>
            <mock>cisco-ios-xr</mock>
        </router>
        <router>
            <name>FRA-CORE-1</name>
            <id>2</id>
            <role>core</role>
            <asn>65001</asn>
            <mock>cisco-ios-xr</mock>
        </router>
        <router>
            <name>STO-CORE-1</name>
            <id>3</id>
            <role>core</role>
            <asn>65001</asn>
            <mock>juniper-junos</mock>
        </router>
        <backbone-link>
            <left-router>AMS-CORE-1</left-router>
            <left-interface>GigabitEthernet0/0/0/0</left-interface>
            <right-router>FRA-CORE-1</right-router>
            <right-interface>GigabitEthernet0/0/0/0</right-interface>
        </backbone-link>
    </netinfra>
</data>"""

actor _test_netinfra1(t: testing.AsyncT):
    xml_conf = xml.decode(netinfra1_in)
    input_config = cfs_layer.from_xml(xml_conf)

    dev_mgr = odev.DeviceManager(log_handler=t.log_handler)
    cfs = sorespo.layers.get_layers(dev_mgr)
    rfs = cfs.below().below()
    dev_mgr.on_reconf(lambda dev: rfs.edit_config(rfs_for_device(dev), force=True))
    session = cfs.newsession()

    def cont(_r: value):
        print("Test Config applied successfully", str(_r), err=True)
        # Get XML config for all layers. We do this to check whether the gdata
        # we get from TTT is still valid and can be converted to XML.
        lnext = session
        ln_cfg = None
        for n in range(4):
            ln = lnext.get()
            ln_cfg = ln.to_xmlstr()
            print(f"layer {n}:\n{ln_cfg}", err=True)
            lnext = lnext.below()
        # Return last (device) layer config
        t.success(ln_cfg)

    session.edit_config(input_config, None, cont)

    def fail():
        print("Test Config failed", err=True)
        t.failure(ValueError())
    after 2.5: fail()


l3vpn_in = """<data>
    <netinfra xmlns="http://example.com/netinfra">
        <router>
            <name>AMS-CORE-1</name>
            <id>1</id>
            <role>edge</role>
            <asn>65001</asn>
            <mock>cisco-ios-xr</mock>
        </router>
        <router>
            <name>FRA-CORE-1</name>
            <id>2</id>
            <role>core</role>
            <asn>65001</asn>
            <mock>cisco-ios-xr</mock>
        </router>
        <router>
            <name>STO-CORE-1</name>
            <id>3</id>
            <role>core</role>
            <asn>65001</asn>
            <mock>juniper-junos</mock>
        </router>
        <router>
            <name>LJU-CORE-1</name>
            <id>4</id>
            <role>core</role>
            <asn>65001</asn>
            <mock>juniper-junos</mock>
        </router>
        <backbone-link>
            <left-router>AMS-CORE-1</left-router>
            <left-interface>GigabitEthernet0/0/0/0</left-interface>
            <right-router>FRA-CORE-1</right-router>
            <right-interface>GigabitEthernet0/0/0/0</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>AMS-CORE-1</left-router>
            <left-interface>GigabitEthernet0/0/0/1</left-interface>
            <right-router>STO-CORE-1</right-router>
            <right-interface>eth1</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>FRA-CORE-1</left-router>
            <left-interface>GigabitEthernet0/0/0/1</left-interface>
            <right-router>STO-CORE-1</right-router>
            <right-interface>eth2</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>FRA-CORE-1</left-router>
            <left-interface>GigabitEthernet0/0/0/2</left-interface>
            <right-router>LJU-CORE-1</right-router>
            <right-interface>eth1</right-interface>
        </backbone-link>
        <backbone-link>
            <left-router>STO-CORE-1</left-router>
            <left-interface>eth3</left-interface>
            <right-router>LJU-CORE-1</right-router>
            <right-interface>eth2</right-interface>
        </backbone-link>
    </netinfra>
    <l3vpn-svc xmlns="urn:ietf:params:xml:ns:yang:ietf-l3vpn-svc">
        <vpn-profiles>
            <valid-provider-identifiers />
        </vpn-profiles>
        <vpn-services>
            <vpn-service>
                <vpn-id>acme-65501</vpn-id>
                <customer-name>CUSTOMER-1</customer-name>
            </vpn-service>
        </vpn-services>
        <sites>
            <site>
                <site-id>SITE-1</site-id>
                <management>
                    <type>customer-managed</type>
                </management>
                <locations>
                    <location>
                        <location-id>MAIN</location-id>
                    </location>
                </locations>
                <site-network-accesses>
                    <site-network-access>
                        <site-network-access-id>SNA-1-1</site-network-access-id>
                        <location-reference>MAIN</location-reference>
                        <service>
                            <svc-input-bandwidth>1000000000</svc-input-bandwidth>
                            <svc-output-bandwidth>1000000000</svc-output-bandwidth>
                            <svc-mtu>9000</svc-mtu>
                        </service>
                        <vpn-attachment>
                            <vpn-id>acme-65501</vpn-id>
                        </vpn-attachment>
                        <ip-connection>
                            <ipv4>
                                <address-allocation-type>static-address</address-allocation-type>
                                <addresses>
                                    <provider-address>10.201.1.1</provider-address>
                                    <customer-address>10.201.1.2</customer-address>
                                    <prefix-length>30</prefix-length>
                                </addresses>
                            </ipv4>
                        </ip-connection>
                        <bearer>
                            <bearer-reference>AMS-CORE-1,GigabitEthernet0/0/0/2.100</bearer-reference>
                        </bearer>
                        <routing-protocols>
                            <routing-protocol>
                                <type>bgp</type>
                                <bgp>
                                    <autonomous-system>65501</autonomous-system>
                                    <address-family>ipv4</address-family>
                                </bgp>
                            </routing-protocol>
                        </routing-protocols>
                    </site-network-access>
                </site-network-accesses>
            </site>
            <site>
                <site-id>SITE-2</site-id>
                <management>
                    <type>customer-managed</type>
                </management>
                <locations>
                    <location>
                        <location-id>MAIN</location-id>
                    </location>
                </locations>
                <site-network-accesses>
                    <site-network-access>
                        <site-network-access-id>SNA-2-1</site-network-access-id>
                        <location-reference>MAIN</location-reference>
                        <service>
                            <svc-input-bandwidth>1000000000</svc-input-bandwidth>
                            <svc-output-bandwidth>1000000000</svc-output-bandwidth>
                            <svc-mtu>9000</svc-mtu>
                        </service>
                        <vpn-attachment>
                            <vpn-id>acme-65501</vpn-id>
                        </vpn-attachment>
                        <ip-connection>
                            <ipv4>
                                <address-allocation-type>static-address</address-allocation-type>
                                <addresses>
                                    <provider-address>10.202.1.1</provider-address>
                                    <customer-address>10.202.1.2</customer-address>
                                    <prefix-length>30</prefix-length>
                                </addresses>
                            </ipv4>
                        </ip-connection>
                        <bearer>
                            <bearer-reference>FRA-CORE-1,GigabitEthernet0/0/0/3.100</bearer-reference>
                        </bearer>
                        <routing-protocols>
                            <routing-protocol>
                                <type>bgp</type>
                                <bgp>
                                    <autonomous-system>65501</autonomous-system>
                                    <address-family>ipv4</address-family>
                                </bgp>
                            </routing-protocol>
                        </routing-protocols>
                    </site-network-access>
                </site-network-accesses>
            </site>
            <site>
                <site-id>SITE-3</site-id>
                <management>
                    <type>customer-managed</type>
                </management>
                <locations>
                    <location>
                        <location-id>MAIN</location-id>
                    </location>
                </locations>
                <site-network-accesses>
                    <site-network-access>
                        <site-network-access-id>SNA-3-1</site-network-access-id>
                        <location-reference>MAIN</location-reference>
                        <service>
                            <svc-input-bandwidth>1000000000</svc-input-bandwidth>
                            <svc-output-bandwidth>1000000000</svc-output-bandwidth>
                            <svc-mtu>9000</svc-mtu>
                        </service>
                        <vpn-attachment>
                            <vpn-id>acme-65501</vpn-id>
                        </vpn-attachment>
                        <ip-connection>
                            <ipv4>
                                <address-allocation-type>static-address</address-allocation-type>
                                <addresses>
                                    <provider-address>10.203.1.1</provider-address>
                                    <customer-address>10.203.1.2</customer-address>
                                    <prefix-length>30</prefix-length>
                                </addresses>
                            </ipv4>
                        </ip-connection>
                        <bearer>
                            <bearer-reference>STO-CORE-1,eth4.100</bearer-reference>
                        </bearer>
                        <routing-protocols>
                            <routing-protocol>
                                <type>bgp</type>
                                <bgp>
                                    <autonomous-system>65501</autonomous-system>
                                    <address-family>ipv4</address-family>
                                </bgp>
                            </routing-protocol>
                        </routing-protocols>
                    </site-network-access>
                </site-network-accesses>
            </site>
            <site>
                <site-id>SITE-4</site-id>
                <management>
                    <type>customer-managed</type>
                </management>
                <locations>
                    <location>
                        <location-id>MAIN</location-id>
                    </location>
                </locations>
                <site-network-accesses>
                    <site-network-access>
                        <site-network-access-id>SNA-4-1</site-network-access-id>
                        <location-reference>MAIN</location-reference>
                        <service>
                            <svc-input-bandwidth>1000000000</svc-input-bandwidth>
                            <svc-output-bandwidth>1000000000</svc-output-bandwidth>
                            <svc-mtu>9000</svc-mtu>
                        </service>
                        <vpn-attachment>
                            <vpn-id>acme-65501</vpn-id>
                        </vpn-attachment>
                        <ip-connection>
                            <ipv4>
                                <address-allocation-type>static-address</address-allocation-type>
                                <addresses>
                                    <provider-address>10.204.1.1</provider-address>
                                    <customer-address>10.204.1.2</customer-address>
                                    <prefix-length>30</prefix-length>
                                </addresses>
                            </ipv4>
                        </ip-connection>
                        <bearer>
                            <bearer-reference>LJU-CORE-1,eth3.100</bearer-reference>
                        </bearer>
                        <routing-protocols>
                            <routing-protocol>
                                <type>bgp</type>
                                <bgp>
                                    <autonomous-system>65501</autonomous-system>
                                    <address-family>ipv4</address-family>
                                </bgp>
                            </routing-protocol>
                        </routing-protocols>
                    </site-network-access>
                </site-network-accesses>
            </site>
        </sites>
    </l3vpn-svc>
</data>
"""

actor l3vpn_tester(t: testing.AsyncT, output_formatter: mut(gdata.Node) -> str):
    xml_conf = xml.decode(l3vpn_in)
    input_config = cfs_layer.from_xml(xml_conf)

    dev_mgr = odev.DeviceManager(log_handler=t.log_handler)
    cfs = sorespo.layers.get_layers(dev_mgr)
    rfs = cfs.below().below()
    dev_mgr.on_reconf(lambda dev: rfs.edit_config(rfs_for_device(dev), force=True))
    session = cfs.newsession()

    def cont(_r: value):
        res = session.below().below().below().get()
        output = output_formatter(res)
        print(output)
        t.success(output)

    session.edit_config(input_config, None, cont)

actor _test_l3vpn_svc(t: testing.AsyncT):
    l3vpn_tester(t, lambda n: n.to_xmlstr())

actor _test_l3vpn_svc_json(t: testing.AsyncT):
    l3vpn_tester(t, lambda n: n.to_json())

actor _test_l3vpn_svc_adata(t: testing.AsyncT):
    def _adata_formatter(n: gdata.Node) -> str:
        res = {}
        device_list = n.get_cnt("devices").get_list("device")
        # We must sort the elements to ensure the output is deterministic
        for device_entry in gdata.sorted_elements(device_list.elements, device_list.keys):
            config = device_entry.get_cnt("config")
            device_name = str(device_entry.get_leaf("name").val)
            if device_name == "AMS-CORE-1" or device_name == "FRA-CORE-1":
                config_ad = xr24.from_gdata(config)
                res[device_name] = config_ad.prsrc()
            elif device_name == "STO-CORE-1" or device_name == "LJU-CORE-1":
                config_ad = crpd23.from_gdata(config)
                res[device_name] = config_ad.prsrc()
            else:
                raise ValueError(f"Unknown device {device_name}")

        # Convert the result to a string representation
        text = ""
        for device, adata in res.items():
            indented_lines = "\n".join([" " * 4 + line for line in adata.splitlines()])
            text += f"def adata_{device.replace('-', '_')}():\n{indented_lines}\n\n"
        return text

    l3vpn_tester(t, _adata_formatter)

# TODO: enable once gdata after transform is valid (= sorted where it needs to be)
# def _test_l3vpn_svc_gdata(t: testing.AsyncT):
#     l3vpn_tester(t, lambda n: n.prsrc())
