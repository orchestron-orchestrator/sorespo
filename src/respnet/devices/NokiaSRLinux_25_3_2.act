import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_xml_srl_nokia_system__system__trace_options(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_system__system__management(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__management:
        if n != None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/management')
            res.append('{self_name} = srl_nokia_system__system__management()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__output(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/output')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__output()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/output'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__output(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__input(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/input')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__input()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/input'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__input(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic(yang.adata.MNode):
    output: srl_nokia_system__system__control_plane_traffic__output
    input: srl_nokia_system__system__control_plane_traffic__input

    mut def __init__(self, output: ?srl_nokia_system__system__control_plane_traffic__output=None, input: ?srl_nokia_system__system__control_plane_traffic__input=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.output = output if output is not None else srl_nokia_system__system__control_plane_traffic__output()
        self.input = input if input is not None else srl_nokia_system__system__control_plane_traffic__input()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _output = self.output
        if _output is not None:
            children['output'] = _output.to_gdata()
        _input = self.input
        if _input is not None:
            children['input'] = _input.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_gdata(n.get_opt_cnt('output')), input=srl_nokia_system__system__control_plane_traffic__input.from_gdata(n.get_opt_cnt('input')))
        return srl_nokia_system__system__control_plane_traffic()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic()')
        leaves = []
        _output = self.output
        if _output is not None:
            res.extend(_output.prsrc('{self_name}.output', False).splitlines())
        _input = self.input
        if _input is not None:
            res.extend(_input.prsrc('{self_name}.input', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_output = yang.gdata.from_xml_opt_cnt(node, 'output')
    yang.gdata.maybe_add(children, 'output', from_xml_srl_nokia_system__system__control_plane_traffic__output, child_output)
    child_input = yang.gdata.from_xml_opt_cnt(node, 'input')
    yang.gdata.maybe_add(children, 'input', from_xml_srl_nokia_system__system__control_plane_traffic__input, child_input)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__name__domain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_system__system__name__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_system__system__name(yang.adata.MNode):
    domain_name: ?str
    host_name: ?str

    mut def __init__(self, domain_name: ?str, host_name: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:system-name'
        self.domain_name = domain_name
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _domain_name = self.domain_name
        if _domain_name is not None:
            children['domain-name'] = yang.gdata.Leaf('string', _domain_name)
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__name:
        if n != None:
            return srl_nokia_system__system__name(domain_name=n.get_opt_str('domain-name'), host_name=n.get_opt_str('host-name'))
        return srl_nokia_system__system__name()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/name')
            res.append('{self_name} = srl_nokia_system__system__name()')
        leaves = []
        _domain_name = self.domain_name
        if _domain_name is not None:
            leaves.append('{self_name}.domain_name = {repr(_domain_name)}')
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/name'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__name(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_domain_name = yang.gdata.from_xml_opt_str(node, 'domain-name')
    yang.gdata.maybe_add(children, 'domain-name', from_xml_srl_nokia_system__system__name__domain_name, child_domain_name)
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_srl_nokia_system__system__name__host_name, child_host_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

class srl_nokia_system__system(yang.adata.MNode):
    trace_options: list[str]
    management: srl_nokia_system__system__management
    control_plane_traffic: srl_nokia_system__system__control_plane_traffic
    name: srl_nokia_system__system__name

    mut def __init__(self, trace_options: ?list[str]=None, management: ?srl_nokia_system__system__management=None, control_plane_traffic: ?srl_nokia_system__system__control_plane_traffic=None, name: ?srl_nokia_system__system__name=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.trace_options = trace_options if trace_options is not None else []
        self.management = management if management is not None else srl_nokia_system__system__management()
        self.control_plane_traffic = control_plane_traffic if control_plane_traffic is not None else srl_nokia_system__system__control_plane_traffic()
        self.name = name if name is not None else srl_nokia_system__system__name()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace-options'] = yang.gdata.LeafList('enumeration', self.trace_options)
        _management = self.management
        if _management is not None:
            children['management'] = _management.to_gdata()
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system:
        if n != None:
            return srl_nokia_system__system(trace_options=n.get_opt_strs('trace-options'), management=srl_nokia_system__system__management.from_gdata(n.get_opt_cnt('management')), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_gdata(n.get_opt_cnt('control-plane-traffic')), name=srl_nokia_system__system__name.from_gdata(n.get_opt_cnt('name')))
        return srl_nokia_system__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system')
            res.append('{self_name} = srl_nokia_system__system()')
        leaves = []
        _trace_options = self.trace_options
        if _trace_options is not None:
            leaves.append('{self_name}.trace_options = {repr(_trace_options)}')
        _management = self.management
        if _management is not None:
            res.extend(_management.prsrc('{self_name}.management', False).splitlines())
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            res.extend(_control_plane_traffic.prsrc('{self_name}.control_plane_traffic', False).splitlines())
        _name = self.name
        if _name is not None:
            res.extend(_name.prsrc('{self_name}.name', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace_options = yang.gdata.from_xml_opt_strs(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_system__system__trace_options, child_trace_options)
    child_management = yang.gdata.from_xml_opt_cnt(node, 'management')
    yang.gdata.maybe_add(children, 'management', from_xml_srl_nokia_system__system__management, child_management)
    child_control_plane_traffic = yang.gdata.from_xml_opt_cnt(node, 'control-plane-traffic')
    yang.gdata.maybe_add(children, 'control-plane-traffic', from_xml_srl_nokia_system__system__control_plane_traffic, child_control_plane_traffic)
    child_name = yang.gdata.from_xml_opt_cnt(node, 'name', 'urn:nokia.com:srlinux:chassis:system-name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_system__system__name, child_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

class srl_nokia_platform__platform(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:chassis:platform'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform:
        if n != None:
            return srl_nokia_platform__platform()
        return srl_nokia_platform__platform()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /platform')
            res.append('{self_name} = srl_nokia_platform__platform()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /platform'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_platform__platform(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

mut def from_xml_srl_nokia_interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__num_physical_channels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_interfaces__interface__breakout_mode__num_breakout_ports(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__breakout_mode__breakout_port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__breakout_mode(yang.adata.MNode):
    num_breakout_ports: ?str
    breakout_port_speed: ?str

    mut def __init__(self, num_breakout_ports: ?str, breakout_port_speed: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.num_breakout_ports = num_breakout_ports
        self.breakout_port_speed = breakout_port_speed

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _num_breakout_ports = self.num_breakout_ports
        if _num_breakout_ports is not None:
            children['num-breakout-ports'] = yang.gdata.Leaf('enumeration', _num_breakout_ports)
        _breakout_port_speed = self.breakout_port_speed
        if _breakout_port_speed is not None:
            children['breakout-port-speed'] = yang.gdata.Leaf('enumeration', _breakout_port_speed)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__breakout_mode:
        if n != None:
            return srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports=n.get_opt_str('num-breakout-ports'), breakout_port_speed=n.get_opt_str('breakout-port-speed'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/breakout-mode')
            res.append('{self_name} = srl_nokia_interfaces__interface__breakout_mode()')
        leaves = []
        _num_breakout_ports = self.num_breakout_ports
        if _num_breakout_ports is not None:
            leaves.append('{self_name}.num_breakout_ports = {repr(_num_breakout_ports)}')
        _breakout_port_speed = self.breakout_port_speed
        if _breakout_port_speed is not None:
            leaves.append('{self_name}.breakout_port_speed = {repr(_breakout_port_speed)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/breakout-mode'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__breakout_mode(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_num_breakout_ports = yang.gdata.from_xml_opt_str(node, 'num-breakout-ports')
    yang.gdata.maybe_add(children, 'num-breakout-ports', from_xml_srl_nokia_interfaces__interface__breakout_mode__num_breakout_ports, child_num_breakout_ports)
    child_breakout_port_speed = yang.gdata.from_xml_opt_str(node, 'breakout-port-speed')
    yang.gdata.maybe_add(children, 'breakout-port-speed', from_xml_srl_nokia_interfaces__interface__breakout_mode__breakout_port_speed, child_breakout_port_speed)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__loopback_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__swap_src_dst_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__functional_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__tx_laser(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__ddm_events(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__forward_error_correction(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__transceiver(yang.adata.MNode):
    functional_type: ?str
    tx_laser: ?bool
    ddm_events: ?bool
    forward_error_correction: ?str

    mut def __init__(self, functional_type: ?str, tx_laser: ?bool, ddm_events: ?bool, forward_error_correction: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.functional_type = functional_type
        self.tx_laser = tx_laser
        self.ddm_events = ddm_events
        self.forward_error_correction = forward_error_correction

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _functional_type = self.functional_type
        if _functional_type is not None:
            children['functional-type'] = yang.gdata.Leaf('identityref', _functional_type)
        _tx_laser = self.tx_laser
        if _tx_laser is not None:
            children['tx-laser'] = yang.gdata.Leaf('boolean', _tx_laser)
        _ddm_events = self.ddm_events
        if _ddm_events is not None:
            children['ddm-events'] = yang.gdata.Leaf('boolean', _ddm_events)
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            children['forward-error-correction'] = yang.gdata.Leaf('enumeration', _forward_error_correction)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver(functional_type=n.get_opt_str('functional-type'), tx_laser=n.get_opt_bool('tx-laser'), ddm_events=n.get_opt_bool('ddm-events'), forward_error_correction=n.get_opt_str('forward-error-correction'))
        return srl_nokia_interfaces__interface__transceiver()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/transceiver')
            res.append('{self_name} = srl_nokia_interfaces__interface__transceiver()')
        leaves = []
        _functional_type = self.functional_type
        if _functional_type is not None:
            leaves.append('{self_name}.functional_type = {repr(_functional_type)}')
        _tx_laser = self.tx_laser
        if _tx_laser is not None:
            leaves.append('{self_name}.tx_laser = {repr(_tx_laser)}')
        _ddm_events = self.ddm_events
        if _ddm_events is not None:
            leaves.append('{self_name}.ddm_events = {repr(_ddm_events)}')
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            leaves.append('{self_name}.forward_error_correction = {repr(_forward_error_correction)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/transceiver'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__transceiver(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_functional_type = yang.gdata.from_xml_opt_str(node, 'functional-type')
    yang.gdata.maybe_add(children, 'functional-type', from_xml_srl_nokia_interfaces__interface__transceiver__functional_type, child_functional_type)
    child_tx_laser = yang.gdata.from_xml_opt_bool(node, 'tx-laser')
    yang.gdata.maybe_add(children, 'tx-laser', from_xml_srl_nokia_interfaces__interface__transceiver__tx_laser, child_tx_laser)
    child_ddm_events = yang.gdata.from_xml_opt_bool(node, 'ddm-events')
    yang.gdata.maybe_add(children, 'ddm-events', from_xml_srl_nokia_interfaces__interface__transceiver__ddm_events, child_ddm_events)
    child_forward_error_correction = yang.gdata.from_xml_opt_str(node, 'forward-error-correction')
    yang.gdata.maybe_add(children, 'forward-error-correction', from_xml_srl_nokia_interfaces__interface__transceiver__forward_error_correction, child_forward_error_correction)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__aggregate_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__forwarding_viable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__auto_negotiate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__duplex_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__dac_link_training(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_interfaces__interface__ethernet__flow_control(yang.adata.MNode):
    receive: ?bool
    transmit: ?bool

    mut def __init__(self, receive: ?bool, transmit: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.receive = receive
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('boolean', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__flow_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__flow_control(receive=n.get_opt_bool('receive'), transmit=n.get_opt_bool('transmit'))
        return srl_nokia_interfaces__interface__ethernet__flow_control()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/flow-control')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__flow_control()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _transmit = self.transmit
        if _transmit is not None:
            leaves.append('{self_name}.transmit = {repr(_transmit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/flow-control'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_bool(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__receive, child_receive)
    child_transmit = yang.gdata.from_xml_opt_bool(node, 'transmit')
    yang.gdata.maybe_add(children, 'transmit', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__transmit, child_transmit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__lacp_port_priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__mac_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction__fec_option(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__forward_error_correction(yang.adata.MNode):
    fec_option: ?str

    mut def __init__(self, fec_option: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.fec_option = fec_option

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fec_option = self.fec_option
        if _fec_option is not None:
            children['fec-option'] = yang.gdata.Leaf('enumeration', _fec_option)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__forward_error_correction:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__forward_error_correction(fec_option=n.get_opt_str('fec-option'))
        return srl_nokia_interfaces__interface__ethernet__forward_error_correction()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/forward-error-correction')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__forward_error_correction()')
        leaves = []
        _fec_option = self.fec_option
        if _fec_option is not None:
            leaves.append('{self_name}.fec_option = {repr(_fec_option)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/forward-error-correction'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_fec_option = yang.gdata.from_xml_opt_str(node, 'fec-option')
    yang.gdata.maybe_add(children, 'fec-option', from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction__fec_option, child_fec_option)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_asymmetry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping__disable_ip_timestamping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_interfaces__interface__ethernet__ptp_timestamping(yang.adata.MNode):
    disable_ip_timestamping: ?bool

    mut def __init__(self, disable_ip_timestamping: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.disable_ip_timestamping = disable_ip_timestamping

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_ip_timestamping = self.disable_ip_timestamping
        if _disable_ip_timestamping is not None:
            children['disable-ip-timestamping'] = yang.gdata.Leaf('boolean', _disable_ip_timestamping)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__ptp_timestamping(disable_ip_timestamping=n.get_opt_bool('disable-ip-timestamping'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/ptp-timestamping')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__ptp_timestamping()')
        leaves = []
        _disable_ip_timestamping = self.disable_ip_timestamping
        if _disable_ip_timestamping is not None:
            leaves.append('{self_name}.disable_ip_timestamping = {repr(_disable_ip_timestamping)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/ptp-timestamping'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable_ip_timestamping = yang.gdata.from_xml_opt_bool(node, 'disable-ip-timestamping')
    yang.gdata.maybe_add(children, 'disable-ip-timestamping', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping__disable_ip_timestamping, child_disable_ip_timestamping)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__standby_signaling(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__link_loss_forwarding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__reload_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__up(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__down(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__hold_time(yang.adata.MNode):
    up: ?int
    down: ?int

    mut def __init__(self, up: ?int, down: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.up = up
        self.down = down

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _up = self.up
        if _up is not None:
            children['up'] = yang.gdata.Leaf('uint32', _up)
        _down = self.down
        if _down is not None:
            children['down'] = yang.gdata.Leaf('uint32', _down)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__hold_time:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__hold_time(up=n.get_opt_int('up'), down=n.get_opt_int('down'))
        return srl_nokia_interfaces__interface__ethernet__hold_time()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/hold-time')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__hold_time()')
        leaves = []
        _up = self.up
        if _up is not None:
            leaves.append('{self_name}.up = {repr(_up)}')
        _down = self.down
        if _down is not None:
            leaves.append('{self_name}.down = {repr(_down)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/hold-time'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_up = yang.gdata.from_xml_opt_int(node, 'up')
    yang.gdata.maybe_add(children, 'up', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__up, child_up)
    child_down = yang.gdata.from_xml_opt_int(node, 'down')
    yang.gdata.maybe_add(children, 'down', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__down, child_down)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor/signal-degrade')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor/signal-degrade'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__multiplier, child_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor/signal-failure')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor/signal-failure'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__multiplier, child_multiplier)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__crc_monitor(yang.adata.MNode):
    admin_state: ?str
    window_size: ?int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure

    mut def __init__(self, admin_state: ?str, window_size: ?int, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.window_size = window_size
        self.signal_degrade = signal_degrade if signal_degrade is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()
        self.signal_failure = signal_failure if signal_failure is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _window_size = self.window_size
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor(admin_state=n.get_opt_str('admin-state'), window_size=n.get_opt_int('window-size'), signal_degrade=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade.from_gdata(n.get_opt_cnt('signal-degrade')), signal_failure=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure.from_gdata(n.get_opt_cnt('signal-failure')))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _window_size = self.window_size
        if _window_size is not None:
            leaves.append('{self_name}.window_size = {repr(_window_size)}')
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            res.extend(_signal_degrade.prsrc('{self_name}.signal_degrade', False).splitlines())
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            res.extend(_signal_failure.prsrc('{self_name}.signal_failure', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__admin_state, child_admin_state)
    child_window_size = yang.gdata.from_xml_opt_int(node, 'window-size')
    yang.gdata.maybe_add(children, 'window-size', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__window_size, child_window_size)
    child_signal_degrade = yang.gdata.from_xml_opt_cnt(node, 'signal-degrade')
    yang.gdata.maybe_add(children, 'signal-degrade', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade, child_signal_degrade)
    child_signal_failure = yang.gdata.from_xml_opt_cnt(node, 'signal-failure')
    yang.gdata.maybe_add(children, 'signal-failure', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure, child_signal_failure)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor/signal-degrade')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor/signal-degrade'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__multiplier, child_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor/signal-failure')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor/signal-failure'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__multiplier, child_multiplier)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor(yang.adata.MNode):
    admin_state: ?str
    window_size: ?int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure

    mut def __init__(self, admin_state: ?str, window_size: ?int, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.window_size = window_size
        self.signal_degrade = signal_degrade if signal_degrade is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()
        self.signal_failure = signal_failure if signal_failure is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _window_size = self.window_size
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor(admin_state=n.get_opt_str('admin-state'), window_size=n.get_opt_int('window-size'), signal_degrade=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade.from_gdata(n.get_opt_cnt('signal-degrade')), signal_failure=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure.from_gdata(n.get_opt_cnt('signal-failure')))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _window_size = self.window_size
        if _window_size is not None:
            leaves.append('{self_name}.window_size = {repr(_window_size)}')
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            res.extend(_signal_degrade.prsrc('{self_name}.signal_degrade', False).splitlines())
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            res.extend(_signal_failure.prsrc('{self_name}.signal_failure', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__admin_state, child_admin_state)
    child_window_size = yang.gdata.from_xml_opt_int(node, 'window-size')
    yang.gdata.maybe_add(children, 'window-size', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__window_size, child_window_size)
    child_signal_degrade = yang.gdata.from_xml_opt_cnt(node, 'signal-degrade')
    yang.gdata.maybe_add(children, 'signal-degrade', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade, child_signal_degrade)
    child_signal_failure = yang.gdata.from_xml_opt_cnt(node, 'signal-failure')
    yang.gdata.maybe_add(children, 'signal-failure', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure, child_signal_failure)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(yang.adata.MNode):
    admin_state: ?str
    half_life: ?int
    max_suppress_time: ?int
    reuse_threshold: ?int
    suppress_threshold: ?int

    mut def __init__(self, admin_state: ?str, half_life: ?int, max_suppress_time: ?int, reuse_threshold: ?int, suppress_threshold: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.half_life = half_life
        self.max_suppress_time = max_suppress_time
        self.reuse_threshold = reuse_threshold
        self.suppress_threshold = suppress_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _half_life = self.half_life
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint32', _half_life)
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint32', _max_suppress_time)
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint32', _reuse_threshold)
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint32', _suppress_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__exponential_port_dampening:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(admin_state=n.get_opt_str('admin-state'), half_life=n.get_opt_int('half-life'), max_suppress_time=n.get_opt_int('max-suppress-time'), reuse_threshold=n.get_opt_int('reuse-threshold'), suppress_threshold=n.get_opt_int('suppress-threshold'))
        return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/exponential-port-dampening')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _half_life = self.half_life
        if _half_life is not None:
            leaves.append('{self_name}.half_life = {repr(_half_life)}')
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            leaves.append('{self_name}.max_suppress_time = {repr(_max_suppress_time)}')
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            leaves.append('{self_name}.reuse_threshold = {repr(_reuse_threshold)}')
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            leaves.append('{self_name}.suppress_threshold = {repr(_suppress_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/exponential-port-dampening'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__admin_state, child_admin_state)
    child_half_life = yang.gdata.from_xml_opt_int(node, 'half-life')
    yang.gdata.maybe_add(children, 'half-life', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__half_life, child_half_life)
    child_max_suppress_time = yang.gdata.from_xml_opt_int(node, 'max-suppress-time')
    yang.gdata.maybe_add(children, 'max-suppress-time', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_suppress_time, child_max_suppress_time)
    child_reuse_threshold = yang.gdata.from_xml_opt_int(node, 'reuse-threshold')
    yang.gdata.maybe_add(children, 'reuse-threshold', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__reuse_threshold, child_reuse_threshold)
    child_suppress_threshold = yang.gdata.from_xml_opt_int(node, 'suppress-threshold')
    yang.gdata.maybe_add(children, 'suppress-threshold', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__suppress_threshold, child_suppress_threshold)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__units(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__broadcast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__multicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__unknown_unicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__rising_threshold_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__storm_control(yang.adata.MNode):
    units: ?str
    broadcast_rate: ?int
    multicast_rate: ?int
    unknown_unicast_rate: ?int
    rising_threshold_action: ?str

    mut def __init__(self, units: ?str, broadcast_rate: ?int, multicast_rate: ?int, unknown_unicast_rate: ?int, rising_threshold_action: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.units = units
        self.broadcast_rate = broadcast_rate
        self.multicast_rate = multicast_rate
        self.unknown_unicast_rate = unknown_unicast_rate
        self.rising_threshold_action = rising_threshold_action

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _units = self.units
        if _units is not None:
            children['units'] = yang.gdata.Leaf('enumeration', _units)
        _broadcast_rate = self.broadcast_rate
        if _broadcast_rate is not None:
            children['broadcast-rate'] = yang.gdata.Leaf('uint32', _broadcast_rate)
        _multicast_rate = self.multicast_rate
        if _multicast_rate is not None:
            children['multicast-rate'] = yang.gdata.Leaf('uint32', _multicast_rate)
        _unknown_unicast_rate = self.unknown_unicast_rate
        if _unknown_unicast_rate is not None:
            children['unknown-unicast-rate'] = yang.gdata.Leaf('uint32', _unknown_unicast_rate)
        _rising_threshold_action = self.rising_threshold_action
        if _rising_threshold_action is not None:
            children['rising-threshold-action'] = yang.gdata.Leaf('enumeration', _rising_threshold_action)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__storm_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__storm_control(units=n.get_opt_str('units'), broadcast_rate=n.get_opt_int('broadcast-rate'), multicast_rate=n.get_opt_int('multicast-rate'), unknown_unicast_rate=n.get_opt_int('unknown-unicast-rate'), rising_threshold_action=n.get_opt_str('rising-threshold-action'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/storm-control')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__storm_control()')
        leaves = []
        _units = self.units
        if _units is not None:
            leaves.append('{self_name}.units = {repr(_units)}')
        _broadcast_rate = self.broadcast_rate
        if _broadcast_rate is not None:
            leaves.append('{self_name}.broadcast_rate = {repr(_broadcast_rate)}')
        _multicast_rate = self.multicast_rate
        if _multicast_rate is not None:
            leaves.append('{self_name}.multicast_rate = {repr(_multicast_rate)}')
        _unknown_unicast_rate = self.unknown_unicast_rate
        if _unknown_unicast_rate is not None:
            leaves.append('{self_name}.unknown_unicast_rate = {repr(_unknown_unicast_rate)}')
        _rising_threshold_action = self.rising_threshold_action
        if _rising_threshold_action is not None:
            leaves.append('{self_name}.rising_threshold_action = {repr(_rising_threshold_action)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/storm-control'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_units = yang.gdata.from_xml_opt_str(node, 'units')
    yang.gdata.maybe_add(children, 'units', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__units, child_units)
    child_broadcast_rate = yang.gdata.from_xml_opt_int(node, 'broadcast-rate')
    yang.gdata.maybe_add(children, 'broadcast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__broadcast_rate, child_broadcast_rate)
    child_multicast_rate = yang.gdata.from_xml_opt_int(node, 'multicast-rate')
    yang.gdata.maybe_add(children, 'multicast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__multicast_rate, child_multicast_rate)
    child_unknown_unicast_rate = yang.gdata.from_xml_opt_int(node, 'unknown-unicast-rate')
    yang.gdata.maybe_add(children, 'unknown-unicast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__unknown_unicast_rate, child_unknown_unicast_rate)
    child_rising_threshold_action = yang.gdata.from_xml_opt_str(node, 'rising-threshold-action')
    yang.gdata.maybe_add(children, 'rising-threshold-action', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__rising_threshold_action, child_rising_threshold_action)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__synce__ssm(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__synce__ssm:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce__ssm(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_interfaces__interface__ethernet__synce__ssm()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/synce/ssm')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__synce__ssm()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/synce/ssm'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__synce(yang.adata.MNode):
    ssm: srl_nokia_interfaces__interface__ethernet__synce__ssm

    mut def __init__(self, ssm: ?srl_nokia_interfaces__interface__ethernet__synce__ssm=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ssm = ssm if ssm is not None else srl_nokia_interfaces__interface__ethernet__synce__ssm()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ssm = self.ssm
        if _ssm is not None:
            children['ssm'] = _ssm.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__synce:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce(ssm=srl_nokia_interfaces__interface__ethernet__synce__ssm.from_gdata(n.get_opt_cnt('ssm')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/synce')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__synce()')
        leaves = []
        _ssm = self.ssm
        if _ssm is not None:
            res.extend(_ssm.prsrc('{self_name}.ssm', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/synce'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ssm = yang.gdata.from_xml_opt_cnt(node, 'ssm')
    yang.gdata.maybe_add(children, 'ssm', from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm, child_ssm)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface__ethernet(yang.adata.MNode):
    aggregate_id: ?str
    forwarding_viable: ?bool
    auto_negotiate: ?bool
    duplex_mode: ?str
    dac_link_training: ?bool
    flow_control: srl_nokia_interfaces__interface__ethernet__flow_control
    lacp_port_priority: ?int
    port_speed: ?str
    mac_address: ?str
    forward_error_correction: srl_nokia_interfaces__interface__ethernet__forward_error_correction
    ptp_asymmetry: ?int
    ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping
    standby_signaling: ?str
    link_loss_forwarding: ?bool
    reload_delay: ?int
    hold_time: srl_nokia_interfaces__interface__ethernet__hold_time
    crc_monitor: srl_nokia_interfaces__interface__ethernet__crc_monitor
    symbol_monitor: srl_nokia_interfaces__interface__ethernet__symbol_monitor
    exponential_port_dampening: srl_nokia_interfaces__interface__ethernet__exponential_port_dampening
    storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control
    synce: ?srl_nokia_interfaces__interface__ethernet__synce

    mut def __init__(self, aggregate_id: ?str, forwarding_viable: ?bool, auto_negotiate: ?bool, duplex_mode: ?str, dac_link_training: ?bool, flow_control: ?srl_nokia_interfaces__interface__ethernet__flow_control=None, lacp_port_priority: ?int, port_speed: ?str, mac_address: ?str, forward_error_correction: ?srl_nokia_interfaces__interface__ethernet__forward_error_correction=None, ptp_asymmetry: ?int, ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping=None, standby_signaling: ?str, link_loss_forwarding: ?bool, reload_delay: ?int, hold_time: ?srl_nokia_interfaces__interface__ethernet__hold_time=None, crc_monitor: ?srl_nokia_interfaces__interface__ethernet__crc_monitor=None, symbol_monitor: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor=None, exponential_port_dampening: ?srl_nokia_interfaces__interface__ethernet__exponential_port_dampening=None, storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control=None, synce: ?srl_nokia_interfaces__interface__ethernet__synce=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.aggregate_id = aggregate_id
        self.forwarding_viable = forwarding_viable
        self.auto_negotiate = auto_negotiate
        self.duplex_mode = duplex_mode
        self.dac_link_training = dac_link_training
        self.flow_control = flow_control if flow_control is not None else srl_nokia_interfaces__interface__ethernet__flow_control()
        self.lacp_port_priority = lacp_port_priority
        self.port_speed = port_speed
        self.mac_address = mac_address
        self.forward_error_correction = forward_error_correction if forward_error_correction is not None else srl_nokia_interfaces__interface__ethernet__forward_error_correction()
        self.ptp_asymmetry = ptp_asymmetry
        self.ptp_timestamping = ptp_timestamping
        self.standby_signaling = standby_signaling
        self.link_loss_forwarding = link_loss_forwarding
        self.reload_delay = reload_delay
        self.hold_time = hold_time if hold_time is not None else srl_nokia_interfaces__interface__ethernet__hold_time()
        self.crc_monitor = crc_monitor if crc_monitor is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor()
        self.symbol_monitor = symbol_monitor if symbol_monitor is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor()
        self.exponential_port_dampening = exponential_port_dampening if exponential_port_dampening is not None else srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()
        self.storm_control = storm_control
        self.synce = synce

    mut def create_ptp_timestamping(self):
        res = srl_nokia_interfaces__interface__ethernet__ptp_timestamping()
        self.ptp_timestamping = res
        return res

    mut def create_storm_control(self):
        res = srl_nokia_interfaces__interface__ethernet__storm_control()
        self.storm_control = res
        return res

    mut def create_synce(self):
        res = srl_nokia_interfaces__interface__ethernet__synce()
        self.synce = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _aggregate_id = self.aggregate_id
        if _aggregate_id is not None:
            children['aggregate-id'] = yang.gdata.Leaf('leafref', _aggregate_id)
        _forwarding_viable = self.forwarding_viable
        if _forwarding_viable is not None:
            children['forwarding-viable'] = yang.gdata.Leaf('boolean', _forwarding_viable)
        _auto_negotiate = self.auto_negotiate
        if _auto_negotiate is not None:
            children['auto-negotiate'] = yang.gdata.Leaf('boolean', _auto_negotiate)
        _duplex_mode = self.duplex_mode
        if _duplex_mode is not None:
            children['duplex-mode'] = yang.gdata.Leaf('enumeration', _duplex_mode)
        _dac_link_training = self.dac_link_training
        if _dac_link_training is not None:
            children['dac-link-training'] = yang.gdata.Leaf('boolean', _dac_link_training)
        _flow_control = self.flow_control
        if _flow_control is not None:
            children['flow-control'] = _flow_control.to_gdata()
        _lacp_port_priority = self.lacp_port_priority
        if _lacp_port_priority is not None:
            children['lacp-port-priority'] = yang.gdata.Leaf('uint16', _lacp_port_priority)
        _port_speed = self.port_speed
        if _port_speed is not None:
            children['port-speed'] = yang.gdata.Leaf('enumeration', _port_speed)
        _mac_address = self.mac_address
        if _mac_address is not None:
            children['mac-address'] = yang.gdata.Leaf('string', _mac_address)
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            children['forward-error-correction'] = _forward_error_correction.to_gdata()
        _ptp_asymmetry = self.ptp_asymmetry
        if _ptp_asymmetry is not None:
            children['ptp-asymmetry'] = yang.gdata.Leaf('int32', _ptp_asymmetry)
        _ptp_timestamping = self.ptp_timestamping
        if _ptp_timestamping is not None:
            children['ptp-timestamping'] = _ptp_timestamping.to_gdata()
        _standby_signaling = self.standby_signaling
        if _standby_signaling is not None:
            children['standby-signaling'] = yang.gdata.Leaf('enumeration', _standby_signaling)
        _link_loss_forwarding = self.link_loss_forwarding
        if _link_loss_forwarding is not None:
            children['link-loss-forwarding'] = yang.gdata.Leaf('boolean', _link_loss_forwarding)
        _reload_delay = self.reload_delay
        if _reload_delay is not None:
            children['reload-delay'] = yang.gdata.Leaf('uint32', _reload_delay)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = _hold_time.to_gdata()
        _crc_monitor = self.crc_monitor
        if _crc_monitor is not None:
            children['crc-monitor'] = _crc_monitor.to_gdata()
        _symbol_monitor = self.symbol_monitor
        if _symbol_monitor is not None:
            children['symbol-monitor'] = _symbol_monitor.to_gdata()
        _exponential_port_dampening = self.exponential_port_dampening
        if _exponential_port_dampening is not None:
            children['exponential-port-dampening'] = _exponential_port_dampening.to_gdata()
        _storm_control = self.storm_control
        if _storm_control is not None:
            children['storm-control'] = _storm_control.to_gdata()
        _synce = self.synce
        if _synce is not None:
            children['synce'] = _synce.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet(aggregate_id=n.get_opt_str('aggregate-id'), forwarding_viable=n.get_opt_bool('forwarding-viable'), auto_negotiate=n.get_opt_bool('auto-negotiate'), duplex_mode=n.get_opt_str('duplex-mode'), dac_link_training=n.get_opt_bool('dac-link-training'), flow_control=srl_nokia_interfaces__interface__ethernet__flow_control.from_gdata(n.get_opt_cnt('flow-control')), lacp_port_priority=n.get_opt_int('lacp-port-priority'), port_speed=n.get_opt_str('port-speed'), mac_address=n.get_opt_str('mac-address'), forward_error_correction=srl_nokia_interfaces__interface__ethernet__forward_error_correction.from_gdata(n.get_opt_cnt('forward-error-correction')), ptp_asymmetry=n.get_opt_int('ptp-asymmetry'), ptp_timestamping=srl_nokia_interfaces__interface__ethernet__ptp_timestamping.from_gdata(n.get_opt_cnt('ptp-timestamping')), standby_signaling=n.get_opt_str('standby-signaling'), link_loss_forwarding=n.get_opt_bool('link-loss-forwarding'), reload_delay=n.get_opt_int('reload-delay'), hold_time=srl_nokia_interfaces__interface__ethernet__hold_time.from_gdata(n.get_opt_cnt('hold-time')), crc_monitor=srl_nokia_interfaces__interface__ethernet__crc_monitor.from_gdata(n.get_opt_cnt('crc-monitor')), symbol_monitor=srl_nokia_interfaces__interface__ethernet__symbol_monitor.from_gdata(n.get_opt_cnt('symbol-monitor')), exponential_port_dampening=srl_nokia_interfaces__interface__ethernet__exponential_port_dampening.from_gdata(n.get_opt_cnt('exponential-port-dampening')), storm_control=srl_nokia_interfaces__interface__ethernet__storm_control.from_gdata(n.get_opt_cnt('storm-control')), synce=srl_nokia_interfaces__interface__ethernet__synce.from_gdata(n.get_opt_cnt('synce')))
        return srl_nokia_interfaces__interface__ethernet()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet()')
        leaves = []
        _aggregate_id = self.aggregate_id
        if _aggregate_id is not None:
            leaves.append('{self_name}.aggregate_id = {repr(_aggregate_id)}')
        _forwarding_viable = self.forwarding_viable
        if _forwarding_viable is not None:
            leaves.append('{self_name}.forwarding_viable = {repr(_forwarding_viable)}')
        _auto_negotiate = self.auto_negotiate
        if _auto_negotiate is not None:
            leaves.append('{self_name}.auto_negotiate = {repr(_auto_negotiate)}')
        _duplex_mode = self.duplex_mode
        if _duplex_mode is not None:
            leaves.append('{self_name}.duplex_mode = {repr(_duplex_mode)}')
        _dac_link_training = self.dac_link_training
        if _dac_link_training is not None:
            leaves.append('{self_name}.dac_link_training = {repr(_dac_link_training)}')
        _flow_control = self.flow_control
        if _flow_control is not None:
            res.extend(_flow_control.prsrc('{self_name}.flow_control', False).splitlines())
        _lacp_port_priority = self.lacp_port_priority
        if _lacp_port_priority is not None:
            leaves.append('{self_name}.lacp_port_priority = {repr(_lacp_port_priority)}')
        _port_speed = self.port_speed
        if _port_speed is not None:
            leaves.append('{self_name}.port_speed = {repr(_port_speed)}')
        _mac_address = self.mac_address
        if _mac_address is not None:
            leaves.append('{self_name}.mac_address = {repr(_mac_address)}')
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            res.extend(_forward_error_correction.prsrc('{self_name}.forward_error_correction', False).splitlines())
        _ptp_asymmetry = self.ptp_asymmetry
        if _ptp_asymmetry is not None:
            leaves.append('{self_name}.ptp_asymmetry = {repr(_ptp_asymmetry)}')
        _ptp_timestamping = self.ptp_timestamping
        if _ptp_timestamping is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/ptp-timestamping')
            res.append('ptp_timestamping = {self_name}.create_ptp_timestamping()')
            res.extend(_ptp_timestamping.prsrc('ptp_timestamping', False).splitlines())
        _standby_signaling = self.standby_signaling
        if _standby_signaling is not None:
            leaves.append('{self_name}.standby_signaling = {repr(_standby_signaling)}')
        _link_loss_forwarding = self.link_loss_forwarding
        if _link_loss_forwarding is not None:
            leaves.append('{self_name}.link_loss_forwarding = {repr(_link_loss_forwarding)}')
        _reload_delay = self.reload_delay
        if _reload_delay is not None:
            leaves.append('{self_name}.reload_delay = {repr(_reload_delay)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            res.extend(_hold_time.prsrc('{self_name}.hold_time', False).splitlines())
        _crc_monitor = self.crc_monitor
        if _crc_monitor is not None:
            res.extend(_crc_monitor.prsrc('{self_name}.crc_monitor', False).splitlines())
        _symbol_monitor = self.symbol_monitor
        if _symbol_monitor is not None:
            res.extend(_symbol_monitor.prsrc('{self_name}.symbol_monitor', False).splitlines())
        _exponential_port_dampening = self.exponential_port_dampening
        if _exponential_port_dampening is not None:
            res.extend(_exponential_port_dampening.prsrc('{self_name}.exponential_port_dampening', False).splitlines())
        _storm_control = self.storm_control
        if _storm_control is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/storm-control')
            res.append('storm_control = {self_name}.create_storm_control()')
            res.extend(_storm_control.prsrc('storm_control', False).splitlines())
        _synce = self.synce
        if _synce is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/synce')
            res.append('synce = {self_name}.create_synce()')
            res.extend(_synce.prsrc('synce', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_aggregate_id = yang.gdata.from_xml_opt_str(node, 'aggregate-id')
    yang.gdata.maybe_add(children, 'aggregate-id', from_xml_srl_nokia_interfaces__interface__ethernet__aggregate_id, child_aggregate_id)
    child_forwarding_viable = yang.gdata.from_xml_opt_bool(node, 'forwarding-viable')
    yang.gdata.maybe_add(children, 'forwarding-viable', from_xml_srl_nokia_interfaces__interface__ethernet__forwarding_viable, child_forwarding_viable)
    child_auto_negotiate = yang.gdata.from_xml_opt_bool(node, 'auto-negotiate')
    yang.gdata.maybe_add(children, 'auto-negotiate', from_xml_srl_nokia_interfaces__interface__ethernet__auto_negotiate, child_auto_negotiate)
    child_duplex_mode = yang.gdata.from_xml_opt_str(node, 'duplex-mode')
    yang.gdata.maybe_add(children, 'duplex-mode', from_xml_srl_nokia_interfaces__interface__ethernet__duplex_mode, child_duplex_mode)
    child_dac_link_training = yang.gdata.from_xml_opt_bool(node, 'dac-link-training')
    yang.gdata.maybe_add(children, 'dac-link-training', from_xml_srl_nokia_interfaces__interface__ethernet__dac_link_training, child_dac_link_training)
    child_flow_control = yang.gdata.from_xml_opt_cnt(node, 'flow-control')
    yang.gdata.maybe_add(children, 'flow-control', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control, child_flow_control)
    child_lacp_port_priority = yang.gdata.from_xml_opt_int(node, 'lacp-port-priority')
    yang.gdata.maybe_add(children, 'lacp-port-priority', from_xml_srl_nokia_interfaces__interface__ethernet__lacp_port_priority, child_lacp_port_priority)
    child_port_speed = yang.gdata.from_xml_opt_str(node, 'port-speed')
    yang.gdata.maybe_add(children, 'port-speed', from_xml_srl_nokia_interfaces__interface__ethernet__port_speed, child_port_speed)
    child_mac_address = yang.gdata.from_xml_opt_str(node, 'mac-address')
    yang.gdata.maybe_add(children, 'mac-address', from_xml_srl_nokia_interfaces__interface__ethernet__mac_address, child_mac_address)
    child_forward_error_correction = yang.gdata.from_xml_opt_cnt(node, 'forward-error-correction')
    yang.gdata.maybe_add(children, 'forward-error-correction', from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction, child_forward_error_correction)
    child_ptp_asymmetry = yang.gdata.from_xml_opt_int(node, 'ptp-asymmetry')
    yang.gdata.maybe_add(children, 'ptp-asymmetry', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_asymmetry, child_ptp_asymmetry)
    child_ptp_timestamping = yang.gdata.from_xml_opt_cnt(node, 'ptp-timestamping')
    yang.gdata.maybe_add(children, 'ptp-timestamping', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping, child_ptp_timestamping)
    child_standby_signaling = yang.gdata.from_xml_opt_str(node, 'standby-signaling')
    yang.gdata.maybe_add(children, 'standby-signaling', from_xml_srl_nokia_interfaces__interface__ethernet__standby_signaling, child_standby_signaling)
    child_link_loss_forwarding = yang.gdata.from_xml_opt_bool(node, 'link-loss-forwarding')
    yang.gdata.maybe_add(children, 'link-loss-forwarding', from_xml_srl_nokia_interfaces__interface__ethernet__link_loss_forwarding, child_link_loss_forwarding)
    child_reload_delay = yang.gdata.from_xml_opt_int(node, 'reload-delay')
    yang.gdata.maybe_add(children, 'reload-delay', from_xml_srl_nokia_interfaces__interface__ethernet__reload_delay, child_reload_delay)
    child_hold_time = yang.gdata.from_xml_opt_cnt(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time, child_hold_time)
    child_crc_monitor = yang.gdata.from_xml_opt_cnt(node, 'crc-monitor')
    yang.gdata.maybe_add(children, 'crc-monitor', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor, child_crc_monitor)
    child_symbol_monitor = yang.gdata.from_xml_opt_cnt(node, 'symbol-monitor')
    yang.gdata.maybe_add(children, 'symbol-monitor', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor, child_symbol_monitor)
    child_exponential_port_dampening = yang.gdata.from_xml_opt_cnt(node, 'exponential-port-dampening')
    yang.gdata.maybe_add(children, 'exponential-port-dampening', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening, child_exponential_port_dampening)
    child_storm_control = yang.gdata.from_xml_opt_cnt(node, 'storm-control')
    yang.gdata.maybe_add(children, 'storm-control', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control, child_storm_control)
    child_synce = yang.gdata.from_xml_opt_cnt(node, 'synce')
    yang.gdata.maybe_add(children, 'synce', from_xml_srl_nokia_interfaces__interface__ethernet__synce, child_synce)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__load_balancing__hash_profile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_interfaces__interface__load_balancing(yang.adata.MNode):
    hash_profile: ?str

    mut def __init__(self, hash_profile: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.hash_profile = hash_profile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hash_profile = self.hash_profile
        if _hash_profile is not None:
            children['hash-profile'] = yang.gdata.Leaf('leafref', _hash_profile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__load_balancing:
        if n != None:
            return srl_nokia_interfaces__interface__load_balancing(hash_profile=n.get_opt_str('hash-profile'))
        return srl_nokia_interfaces__interface__load_balancing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/load-balancing')
            res.append('{self_name} = srl_nokia_interfaces__interface__load_balancing()')
        leaves = []
        _hash_profile = self.hash_profile
        if _hash_profile is not None:
            leaves.append('{self_name}.hash_profile = {repr(_hash_profile)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/load-balancing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__load_balancing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hash_profile = yang.gdata.from_xml_opt_str(node, 'hash-profile')
    yang.gdata.maybe_add(children, 'hash-profile', from_xml_srl_nokia_interfaces__interface__load_balancing__hash_profile, child_hash_profile)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__static_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(yang.adata.MNode):
    static_delay: ?value

    mut def __init__(self, static_delay: ?value):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.static_delay = static_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static_delay = self.static_delay
        if _static_delay is not None:
            children['static-delay'] = yang.gdata.Leaf('union', _static_delay)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(static_delay=n.get_opt_value('static-delay'))
        return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/unidirectional-link-delay')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()')
        leaves = []
        _static_delay = self.static_delay
        if _static_delay is not None:
            leaves.append('{self_name}.static_delay = {repr(_static_delay)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/unidirectional-link-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_static_delay = yang.gdata.from_xml_opt_value(node, 'static-delay')
    yang.gdata.maybe_add(children, 'static-delay', from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__static_delay, child_static_delay)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__collect_irb_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__collect_detailed_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(yang.adata.MNode):
    ip_prefix: str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix=n.get_str('ip-prefix'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__address({repr(self.ip_prefix)})')
        leaves = []
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv4__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv4__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix, child_ip_prefix)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(yang.adata.MNode):
    admin_state: ?str
    interface: ?str

    mut def __init__(self, admin_state: ?str, interface: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(admin_state=n.get_opt_str('admin-state'), interface=n.get_opt_str('interface'))
        return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/unnumbered')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/unnumbered'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state, child_admin_state)
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface, child_interface)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__ipv4(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv4__address
    allow_directed_broadcast: ?bool
    unnumbered: srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]=[], allow_directed_broadcast: ?bool, unnumbered: ?srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv4__address(elements=address)
        self.allow_directed_broadcast = allow_directed_broadcast
        self.unnumbered = unnumbered if unnumbered is not None else srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            children['allow-directed-broadcast'] = yang.gdata.Leaf('boolean', _allow_directed_broadcast)
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            children['unnumbered'] = _unnumbered.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv4__address.from_gdata(n.get_opt_list('address')), allow_directed_broadcast=n.get_opt_bool('allow-directed-broadcast'), unnumbered=srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered.from_gdata(n.get_opt_cnt('unnumbered')))
        return srl_nokia_interfaces__interface__subinterface__ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv4/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            leaves.append('{self_name}.allow_directed_broadcast = {repr(_allow_directed_broadcast)}')
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            res.extend(_unnumbered.prsrc('{self_name}.unnumbered', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address, child_address)
    child_allow_directed_broadcast = yang.gdata.from_xml_opt_bool(node, 'allow-directed-broadcast')
    yang.gdata.maybe_add(children, 'allow-directed-broadcast', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast, child_allow_directed_broadcast)
    child_unnumbered = yang.gdata.from_xml_opt_cnt(node, 'unnumbered')
    yang.gdata.maybe_add(children, 'unnumbered', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered, child_unnumbered)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(yang.adata.MNode):
    ip_prefix: str
    type: ?str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, type: ?str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.type = type
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix=n.get_str('ip-prefix'), type=n.get_opt_str('type'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6__address({repr(self.ip_prefix)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv6__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix, child_ip_prefix)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type, child_type)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_interfaces__interface__subinterface__ipv6(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv6__address

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv6__address.from_gdata(n.get_opt_list('address')))
        return srl_nokia_interfaces__interface__subinterface__ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv6/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__virtual_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_interfaces__interface__subinterface__anycast_gw(yang.adata.MNode):
    virtual_router_id: ?int
    anycast_gw_mac: ?str

    mut def __init__(self, virtual_router_id: ?int, anycast_gw_mac: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.virtual_router_id = virtual_router_id
        self.anycast_gw_mac = anycast_gw_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _virtual_router_id = self.virtual_router_id
        if _virtual_router_id is not None:
            children['virtual-router-id'] = yang.gdata.Leaf('uint8', _virtual_router_id)
        _anycast_gw_mac = self.anycast_gw_mac
        if _anycast_gw_mac is not None:
            children['anycast-gw-mac'] = yang.gdata.Leaf('string', _anycast_gw_mac)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__anycast_gw:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__anycast_gw(virtual_router_id=n.get_opt_int('virtual-router-id'), anycast_gw_mac=n.get_opt_str('anycast-gw-mac'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/anycast-gw')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__anycast_gw()')
        leaves = []
        _virtual_router_id = self.virtual_router_id
        if _virtual_router_id is not None:
            leaves.append('{self_name}.virtual_router_id = {repr(_virtual_router_id)}')
        _anycast_gw_mac = self.anycast_gw_mac
        if _anycast_gw_mac is not None:
            leaves.append('{self_name}.anycast_gw_mac = {repr(_anycast_gw_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/anycast-gw'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_virtual_router_id = yang.gdata.from_xml_opt_int(node, 'virtual-router-id')
    yang.gdata.maybe_add(children, 'virtual-router-id', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__virtual_router_id, child_virtual_router_id)
    child_anycast_gw_mac = yang.gdata.from_xml_opt_str(node, 'anycast-gw-mac')
    yang.gdata.maybe_add(children, 'anycast-gw-mac', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac, child_anycast_gw_mac)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, maximum_entries: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.maximum_entries = maximum_entries
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(maximum_entries=n.get_opt_int('maximum-entries'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-limit')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()')
        leaves = []
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            leaves.append('{self_name}.maximum_entries = {repr(_maximum_entries)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_entries = yang.gdata.from_xml_opt_int(node, 'maximum-entries')
    yang.gdata.maybe_add(children, 'maximum-entries', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__maximum_entries, child_maximum_entries)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-learning/aging')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-learning/aging'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: ?str
    aging: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str, aging: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.aging = aging if aging is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _aging = self.aging
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(admin_state=n.get_opt_str('admin-state'), aging=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging.from_gdata(n.get_opt_cnt('aging')))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-learning')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _aging = self.aging
        if _aging is not None:
            res.extend(_aging.prsrc('{self_name}.aging', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-learning'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__admin_state, child_admin_state)
    child_aging = yang.gdata.from_xml_opt_cnt(node, 'aging')
    yang.gdata.maybe_add(children, 'aging', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging, child_aging)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(yang.adata.MNode):
    action_: ?str

    mut def __init__(self, action_: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.action_ = action_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(action_=n.get_opt_str('action'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-duplication')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()')
        leaves = []
        _action_ = self.action_
        if _action_ is not None:
            leaves.append('{self_name}.action_ = {repr(_action_)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-duplication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_action_ = yang.gdata.from_xml_opt_str(node, 'action')
    yang.gdata.maybe_add(children, 'action', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication__action, child_action_)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: ?bool
    mac_limit: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit
    mac_learning: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning
    mac_duplication: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool, mac_limit: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.discard_unknown_src_mac = discard_unknown_src_mac
        self.mac_limit = mac_limit if mac_limit is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()
        self.mac_learning = mac_learning if mac_learning is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()
        self.mac_duplication = mac_duplication if mac_duplication is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__bridge_table:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table(discard_unknown_src_mac=n.get_opt_bool('discard-unknown-src-mac'), mac_limit=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit.from_gdata(n.get_opt_cnt('mac-limit')), mac_learning=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning.from_gdata(n.get_opt_cnt('mac-learning')), mac_duplication=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication.from_gdata(n.get_opt_cnt('mac-duplication')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table()')
        leaves = []
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            leaves.append('{self_name}.discard_unknown_src_mac = {repr(_discard_unknown_src_mac)}')
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            res.extend(_mac_limit.prsrc('{self_name}.mac_limit', False).splitlines())
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            res.extend(_mac_learning.prsrc('{self_name}.mac_learning', False).splitlines())
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            res.extend(_mac_duplication.prsrc('{self_name}.mac_duplication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_discard_unknown_src_mac = yang.gdata.from_xml_opt_bool(node, 'discard-unknown-src-mac')
    yang.gdata.maybe_add(children, 'discard-unknown-src-mac', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__discard_unknown_src_mac, child_discard_unknown_src_mac)
    child_mac_limit = yang.gdata.from_xml_opt_cnt(node, 'mac-limit')
    yang.gdata.maybe_add(children, 'mac-limit', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit, child_mac_limit)
    child_mac_learning = yang.gdata.from_xml_opt_cnt(node, 'mac-learning')
    yang.gdata.maybe_add(children, 'mac-learning', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning, child_mac_learning)
    child_mac_duplication = yang.gdata.from_xml_opt_cnt(node, 'mac-duplication')
    yang.gdata.maybe_add(children, 'mac-duplication', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication, child_mac_duplication)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface__subinterface_entry(yang.adata.MNode):
    index: int
    type: ?str
    description: ?str
    admin_state: ?str
    ip_mtu: ?int
    l2_mtu: ?int
    mpls_mtu: ?int
    unidirectional_link_delay: srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay
    collect_irb_stats: ?bool
    collect_detailed_stats: ?bool
    ipv4: srl_nokia_interfaces__interface__subinterface__ipv4
    ipv6: srl_nokia_interfaces__interface__subinterface__ipv6
    anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw
    bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table

    mut def __init__(self, index: int, type: ?str, description: ?str, admin_state: ?str, ip_mtu: ?int, l2_mtu: ?int, mpls_mtu: ?int, unidirectional_link_delay: ?srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay=None, collect_irb_stats: ?bool, collect_detailed_stats: ?bool, ipv4: ?srl_nokia_interfaces__interface__subinterface__ipv4=None, ipv6: ?srl_nokia_interfaces__interface__subinterface__ipv6=None, anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw=None, bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.index = index
        self.type = type
        self.description = description
        self.admin_state = admin_state
        self.ip_mtu = ip_mtu
        self.l2_mtu = l2_mtu
        self.mpls_mtu = mpls_mtu
        self.unidirectional_link_delay = unidirectional_link_delay if unidirectional_link_delay is not None else srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()
        self.collect_irb_stats = collect_irb_stats
        self.collect_detailed_stats = collect_detailed_stats
        self.ipv4 = ipv4 if ipv4 is not None else srl_nokia_interfaces__interface__subinterface__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else srl_nokia_interfaces__interface__subinterface__ipv6()
        self.anycast_gw = anycast_gw
        self.bridge_table = bridge_table

    mut def create_anycast_gw(self):
        res = srl_nokia_interfaces__interface__subinterface__anycast_gw()
        self.anycast_gw = res
        return res

    mut def create_bridge_table(self):
        res = srl_nokia_interfaces__interface__subinterface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            children['ip-mtu'] = yang.gdata.Leaf('uint16', _ip_mtu)
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            children['l2-mtu'] = yang.gdata.Leaf('uint16', _l2_mtu)
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            children['mpls-mtu'] = yang.gdata.Leaf('uint16', _mpls_mtu)
        _unidirectional_link_delay = self.unidirectional_link_delay
        if _unidirectional_link_delay is not None:
            children['unidirectional-link-delay'] = _unidirectional_link_delay.to_gdata()
        _collect_irb_stats = self.collect_irb_stats
        if _collect_irb_stats is not None:
            children['collect-irb-stats'] = yang.gdata.Leaf('boolean', _collect_irb_stats)
        _collect_detailed_stats = self.collect_detailed_stats
        if _collect_detailed_stats is not None:
            children['collect-detailed-stats'] = yang.gdata.Leaf('boolean', _collect_detailed_stats)
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = _anycast_gw.to_gdata()
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface_entry:
        return srl_nokia_interfaces__interface__subinterface_entry(index=n.get_int('index'), type=n.get_opt_str('type'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), ip_mtu=n.get_opt_int('ip-mtu'), l2_mtu=n.get_opt_int('l2-mtu'), mpls_mtu=n.get_opt_int('mpls-mtu'), unidirectional_link_delay=srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay.from_gdata(n.get_opt_cnt('unidirectional-link-delay')), collect_irb_stats=n.get_opt_bool('collect-irb-stats'), collect_detailed_stats=n.get_opt_bool('collect-detailed-stats'), ipv4=srl_nokia_interfaces__interface__subinterface__ipv4.from_gdata(n.get_opt_cnt('ipv4')), ipv6=srl_nokia_interfaces__interface__subinterface__ipv6.from_gdata(n.get_opt_cnt('ipv6')), anycast_gw=srl_nokia_interfaces__interface__subinterface__anycast_gw.from_gdata(n.get_opt_cnt('anycast-gw')), bridge_table=srl_nokia_interfaces__interface__subinterface__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface({repr(self.index)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            leaves.append('{self_name}.ip_mtu = {repr(_ip_mtu)}')
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            leaves.append('{self_name}.l2_mtu = {repr(_l2_mtu)}')
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            leaves.append('{self_name}.mpls_mtu = {repr(_mpls_mtu)}')
        _unidirectional_link_delay = self.unidirectional_link_delay
        if _unidirectional_link_delay is not None:
            res.extend(_unidirectional_link_delay.prsrc('{self_name}.unidirectional_link_delay', False).splitlines())
        _collect_irb_stats = self.collect_irb_stats
        if _collect_irb_stats is not None:
            leaves.append('{self_name}.collect_irb_stats = {repr(_collect_irb_stats)}')
        _collect_detailed_stats = self.collect_detailed_stats
        if _collect_detailed_stats is not None:
            leaves.append('{self_name}.collect_detailed_stats = {repr(_collect_detailed_stats)}')
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            res.extend(_ipv4.prsrc('{self_name}.ipv4', False).splitlines())
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            res.extend(_ipv6.prsrc('{self_name}.ipv6', False).splitlines())
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            res.append('')
            res.append('# P-container: /interface/subinterface/anycast-gw')
            res.append('anycast_gw = {self_name}.create_anycast_gw()')
            res.extend(_anycast_gw.prsrc('anycast_gw', False).splitlines())
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /interface/subinterface/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'subinterface'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_interfaces__interface__subinterface__index, child_index)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__type, child_type)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__subinterface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__admin_state, child_admin_state)
    child_ip_mtu = yang.gdata.from_xml_opt_int(node, 'ip-mtu')
    yang.gdata.maybe_add(children, 'ip-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu, child_ip_mtu)
    child_l2_mtu = yang.gdata.from_xml_opt_int(node, 'l2-mtu')
    yang.gdata.maybe_add(children, 'l2-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu, child_l2_mtu)
    child_mpls_mtu = yang.gdata.from_xml_opt_int(node, 'mpls-mtu')
    yang.gdata.maybe_add(children, 'mpls-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu, child_mpls_mtu)
    child_unidirectional_link_delay = yang.gdata.from_xml_opt_cnt(node, 'unidirectional-link-delay')
    yang.gdata.maybe_add(children, 'unidirectional-link-delay', from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay, child_unidirectional_link_delay)
    child_collect_irb_stats = yang.gdata.from_xml_opt_bool(node, 'collect-irb-stats')
    yang.gdata.maybe_add(children, 'collect-irb-stats', from_xml_srl_nokia_interfaces__interface__subinterface__collect_irb_stats, child_collect_irb_stats)
    child_collect_detailed_stats = yang.gdata.from_xml_opt_bool(node, 'collect-detailed-stats')
    yang.gdata.maybe_add(children, 'collect-detailed-stats', from_xml_srl_nokia_interfaces__interface__subinterface__collect_detailed_stats, child_collect_detailed_stats)
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6, child_ipv6)
    child_anycast_gw = yang.gdata.from_xml_opt_cnt(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw, child_anycast_gw)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table, child_bridge_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__sflow__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__sflow__ingress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__sflow__egress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__sflow(yang.adata.MNode):
    admin_state: ?str
    ingress_sampling_rate: ?int
    egress_sampling_rate: ?int

    mut def __init__(self, admin_state: ?str, ingress_sampling_rate: ?int, egress_sampling_rate: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.ingress_sampling_rate = ingress_sampling_rate
        self.egress_sampling_rate = egress_sampling_rate

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ingress_sampling_rate = self.ingress_sampling_rate
        if _ingress_sampling_rate is not None:
            children['ingress-sampling-rate'] = yang.gdata.Leaf('uint32', _ingress_sampling_rate)
        _egress_sampling_rate = self.egress_sampling_rate
        if _egress_sampling_rate is not None:
            children['egress-sampling-rate'] = yang.gdata.Leaf('uint32', _egress_sampling_rate)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__sflow:
        if n != None:
            return srl_nokia_interfaces__interface__sflow(admin_state=n.get_opt_str('admin-state'), ingress_sampling_rate=n.get_opt_int('ingress-sampling-rate'), egress_sampling_rate=n.get_opt_int('egress-sampling-rate'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/sflow')
            res.append('{self_name} = srl_nokia_interfaces__interface__sflow()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ingress_sampling_rate = self.ingress_sampling_rate
        if _ingress_sampling_rate is not None:
            leaves.append('{self_name}.ingress_sampling_rate = {repr(_ingress_sampling_rate)}')
        _egress_sampling_rate = self.egress_sampling_rate
        if _egress_sampling_rate is not None:
            leaves.append('{self_name}.egress_sampling_rate = {repr(_egress_sampling_rate)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/sflow'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__sflow(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__sflow__admin_state, child_admin_state)
    child_ingress_sampling_rate = yang.gdata.from_xml_opt_int(node, 'ingress-sampling-rate')
    yang.gdata.maybe_add(children, 'ingress-sampling-rate', from_xml_srl_nokia_interfaces__interface__sflow__ingress_sampling_rate, child_ingress_sampling_rate)
    child_egress_sampling_rate = yang.gdata.from_xml_opt_int(node, 'egress-sampling-rate')
    yang.gdata.maybe_add(children, 'egress-sampling-rate', from_xml_srl_nokia_interfaces__interface__sflow__egress_sampling_rate, child_egress_sampling_rate)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    admin_state: ?str
    num_physical_channels: ?int
    breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode
    mtu: ?int
    loopback_mode: ?str
    swap_src_dst_mac: ?bool
    transceiver: srl_nokia_interfaces__interface__transceiver
    ethernet: srl_nokia_interfaces__interface__ethernet
    load_balancing: srl_nokia_interfaces__interface__load_balancing
    subinterface: srl_nokia_interfaces__interface__subinterface
    sflow: ?srl_nokia_interfaces__interface__sflow

    mut def __init__(self, name: str, description: ?str, admin_state: ?str, num_physical_channels: ?int, breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode=None, mtu: ?int, loopback_mode: ?str, swap_src_dst_mac: ?bool, transceiver: ?srl_nokia_interfaces__interface__transceiver=None, ethernet: ?srl_nokia_interfaces__interface__ethernet=None, load_balancing: ?srl_nokia_interfaces__interface__load_balancing=None, subinterface: list[srl_nokia_interfaces__interface__subinterface_entry]=[], sflow: ?srl_nokia_interfaces__interface__sflow=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.name = name
        self.description = description
        self.admin_state = admin_state
        self.num_physical_channels = num_physical_channels
        self.breakout_mode = breakout_mode
        self.mtu = mtu
        self.loopback_mode = loopback_mode
        self.swap_src_dst_mac = swap_src_dst_mac
        self.transceiver = transceiver if transceiver is not None else srl_nokia_interfaces__interface__transceiver()
        self.ethernet = ethernet if ethernet is not None else srl_nokia_interfaces__interface__ethernet()
        self.load_balancing = load_balancing if load_balancing is not None else srl_nokia_interfaces__interface__load_balancing()
        self.subinterface = srl_nokia_interfaces__interface__subinterface(elements=subinterface)
        self.sflow = sflow

    mut def create_breakout_mode(self, num_breakout_ports, breakout_port_speed):
        res = srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports, breakout_port_speed)
        self.breakout_mode = res
        return res

    mut def create_sflow(self):
        res = srl_nokia_interfaces__interface__sflow()
        self.sflow = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _num_physical_channels = self.num_physical_channels
        if _num_physical_channels is not None:
            children['num-physical-channels'] = yang.gdata.Leaf('uint8', _num_physical_channels)
        _breakout_mode = self.breakout_mode
        if _breakout_mode is not None:
            children['breakout-mode'] = _breakout_mode.to_gdata()
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint16', _mtu)
        _loopback_mode = self.loopback_mode
        if _loopback_mode is not None:
            children['loopback-mode'] = yang.gdata.Leaf('enumeration', _loopback_mode)
        _swap_src_dst_mac = self.swap_src_dst_mac
        if _swap_src_dst_mac is not None:
            children['swap-src-dst-mac'] = yang.gdata.Leaf('boolean', _swap_src_dst_mac)
        _transceiver = self.transceiver
        if _transceiver is not None:
            children['transceiver'] = _transceiver.to_gdata()
        _ethernet = self.ethernet
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            children['load-balancing'] = _load_balancing.to_gdata()
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = _subinterface.to_gdata()
        _sflow = self.sflow
        if _sflow is not None:
            children['sflow'] = _sflow.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface_entry:
        return srl_nokia_interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), num_physical_channels=n.get_opt_int('num-physical-channels'), breakout_mode=srl_nokia_interfaces__interface__breakout_mode.from_gdata(n.get_opt_cnt('breakout-mode')), mtu=n.get_opt_int('mtu'), loopback_mode=n.get_opt_str('loopback-mode'), swap_src_dst_mac=n.get_opt_bool('swap-src-dst-mac'), transceiver=srl_nokia_interfaces__interface__transceiver.from_gdata(n.get_opt_cnt('transceiver')), ethernet=srl_nokia_interfaces__interface__ethernet.from_gdata(n.get_opt_cnt('ethernet')), load_balancing=srl_nokia_interfaces__interface__load_balancing.from_gdata(n.get_opt_cnt('load-balancing')), subinterface=srl_nokia_interfaces__interface__subinterface.from_gdata(n.get_opt_list('subinterface')), sflow=srl_nokia_interfaces__interface__sflow.from_gdata(n.get_opt_cnt('sflow')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface')
            res.append('{self_name} = srl_nokia_interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _num_physical_channels = self.num_physical_channels
        if _num_physical_channels is not None:
            leaves.append('{self_name}.num_physical_channels = {repr(_num_physical_channels)}')
        _breakout_mode = self.breakout_mode
        if _breakout_mode is not None:
            res.append('')
            res.append('# P-container: /interface/breakout-mode')
            res.append('breakout_mode = {self_name}.create_breakout_mode()')
            res.extend(_breakout_mode.prsrc('breakout_mode', False).splitlines())
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _loopback_mode = self.loopback_mode
        if _loopback_mode is not None:
            leaves.append('{self_name}.loopback_mode = {repr(_loopback_mode)}')
        _swap_src_dst_mac = self.swap_src_dst_mac
        if _swap_src_dst_mac is not None:
            leaves.append('{self_name}.swap_src_dst_mac = {repr(_swap_src_dst_mac)}')
        _transceiver = self.transceiver
        if _transceiver is not None:
            res.extend(_transceiver.prsrc('{self_name}.transceiver', False).splitlines())
        _ethernet = self.ethernet
        if _ethernet is not None:
            res.extend(_ethernet.prsrc('{self_name}.ethernet', False).splitlines())
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            res.extend(_load_balancing.prsrc('{self_name}.load_balancing', False).splitlines())
        _subinterface = self.subinterface
        for _element in _subinterface.elements:
            res.append('')
            res.append("# List /interface/subinterface element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'subinterface_element = {self_name}.subinterface.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('subinterface_element', False, list_element=True).splitlines())
        _sflow = self.sflow
        if _sflow is not None:
            res.append('')
            res.append('# P-container: /interface/sflow')
            res.append('sflow = {self_name}.create_sflow()')
            res.extend(_sflow.prsrc('sflow', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__admin_state, child_admin_state)
    child_num_physical_channels = yang.gdata.from_xml_opt_int(node, 'num-physical-channels')
    yang.gdata.maybe_add(children, 'num-physical-channels', from_xml_srl_nokia_interfaces__interface__num_physical_channels, child_num_physical_channels)
    child_breakout_mode = yang.gdata.from_xml_opt_cnt(node, 'breakout-mode')
    yang.gdata.maybe_add(children, 'breakout-mode', from_xml_srl_nokia_interfaces__interface__breakout_mode, child_breakout_mode)
    child_mtu = yang.gdata.from_xml_opt_int(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_srl_nokia_interfaces__interface__mtu, child_mtu)
    child_loopback_mode = yang.gdata.from_xml_opt_str(node, 'loopback-mode')
    yang.gdata.maybe_add(children, 'loopback-mode', from_xml_srl_nokia_interfaces__interface__loopback_mode, child_loopback_mode)
    child_swap_src_dst_mac = yang.gdata.from_xml_opt_bool(node, 'swap-src-dst-mac')
    yang.gdata.maybe_add(children, 'swap-src-dst-mac', from_xml_srl_nokia_interfaces__interface__swap_src_dst_mac, child_swap_src_dst_mac)
    child_transceiver = yang.gdata.from_xml_opt_cnt(node, 'transceiver')
    yang.gdata.maybe_add(children, 'transceiver', from_xml_srl_nokia_interfaces__interface__transceiver, child_transceiver)
    child_ethernet = yang.gdata.from_xml_opt_cnt(node, 'ethernet')
    yang.gdata.maybe_add(children, 'ethernet', from_xml_srl_nokia_interfaces__interface__ethernet, child_ethernet)
    child_load_balancing = yang.gdata.from_xml_opt_cnt(node, 'load-balancing')
    yang.gdata.maybe_add(children, 'load-balancing', from_xml_srl_nokia_interfaces__interface__load_balancing, child_load_balancing)
    child_subinterface = yang.gdata.from_xml_opt_list(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_interfaces__interface__subinterface, child_subinterface)
    child_sflow = yang.gdata.from_xml_opt_cnt(node, 'sflow')
    yang.gdata.maybe_add(children, 'sflow', from_xml_srl_nokia_interfaces__interface__sflow, child_sflow)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

mut def from_xml_srl_nokia_network_instance__network_instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding__forward_received_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__mpls_forwarding(yang.adata.MNode):
    forward_received_packets: ?bool

    mut def __init__(self, forward_received_packets: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.forward_received_packets = forward_received_packets

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forward_received_packets = self.forward_received_packets
        if _forward_received_packets is not None:
            children['forward-received-packets'] = yang.gdata.Leaf('boolean', _forward_received_packets)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__mpls_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__mpls_forwarding(forward_received_packets=n.get_opt_bool('forward-received-packets'))
        return srl_nokia_network_instance__network_instance__mpls_forwarding()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/mpls-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__mpls_forwarding()')
        leaves = []
        _forward_received_packets = self.forward_received_packets
        if _forward_received_packets is not None:
            leaves.append('{self_name}.forward_received_packets = {repr(_forward_received_packets)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/mpls-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forward_received_packets = yang.gdata.from_xml_opt_bool(node, 'forward-received-packets')
    yang.gdata.maybe_add(children, 'forward-received-packets', from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding__forward_received_packets, child_forward_received_packets)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv4_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv6_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__ip_forwarding(yang.adata.MNode):
    receive_ipv4_check: ?bool
    receive_ipv6_check: ?bool

    mut def __init__(self, receive_ipv4_check: ?bool, receive_ipv6_check: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.receive_ipv4_check = receive_ipv4_check
        self.receive_ipv6_check = receive_ipv6_check

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive_ipv4_check = self.receive_ipv4_check
        if _receive_ipv4_check is not None:
            children['receive-ipv4-check'] = yang.gdata.Leaf('boolean', _receive_ipv4_check)
        _receive_ipv6_check = self.receive_ipv6_check
        if _receive_ipv6_check is not None:
            children['receive-ipv6-check'] = yang.gdata.Leaf('boolean', _receive_ipv6_check)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__ip_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding(receive_ipv4_check=n.get_opt_bool('receive-ipv4-check'), receive_ipv6_check=n.get_opt_bool('receive-ipv6-check'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_forwarding()')
        leaves = []
        _receive_ipv4_check = self.receive_ipv4_check
        if _receive_ipv4_check is not None:
            leaves.append('{self_name}.receive_ipv4_check = {repr(_receive_ipv4_check)}')
        _receive_ipv6_check = self.receive_ipv6_check
        if _receive_ipv6_check is not None:
            leaves.append('{self_name}.receive_ipv6_check = {repr(_receive_ipv6_check)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive_ipv4_check = yang.gdata.from_xml_opt_bool(node, 'receive-ipv4-check')
    yang.gdata.maybe_add(children, 'receive-ipv4-check', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv4_check, child_receive_ipv4_check)
    child_receive_ipv6_check = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-check')
    yang.gdata.maybe_add(children, 'receive-ipv6-check', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv6_check, child_receive_ipv6_check)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__hash_buckets_per_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__max_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(yang.adata.MNode):
    ip_prefix: str
    hash_buckets_per_path: ?int
    max_paths: ?int

    mut def __init__(self, ip_prefix: str, hash_buckets_per_path: ?int, max_paths: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.ip_prefix = ip_prefix
        self.hash_buckets_per_path = hash_buckets_per_path
        self.max_paths = max_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        _hash_buckets_per_path = self.hash_buckets_per_path
        if _hash_buckets_per_path is not None:
            children['hash-buckets-per-path'] = yang.gdata.Leaf('uint8', _hash_buckets_per_path)
        _max_paths = self.max_paths
        if _max_paths is not None:
            children['max-paths'] = yang.gdata.Leaf('uint8', _max_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry:
        return srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix=n.get_str('ip-prefix'), hash_buckets_per_path=n.get_opt_int('hash-buckets-per-path'), max_paths=n.get_opt_int('max-paths'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-load-balancing/resilient-hash-prefix')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix({repr(self.ip_prefix)})')
        leaves = []
        _hash_buckets_per_path = self.hash_buckets_per_path
        if _hash_buckets_per_path is not None:
            leaves.append('{self_name}.hash_buckets_per_path = {repr(_hash_buckets_per_path)}')
        _max_paths = self.max_paths
        if _max_paths is not None:
            leaves.append('{self_name}.max_paths = {repr(_max_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-load-balancing/resilient-hash-prefix'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'resilient-hash-prefix'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__ip_prefix, child_ip_prefix)
    child_hash_buckets_per_path = yang.gdata.from_xml_opt_int(node, 'hash-buckets-per-path')
    yang.gdata.maybe_add(children, 'hash-buckets-per-path', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__hash_buckets_per_path, child_hash_buckets_per_path)
    child_max_paths = yang.gdata.from_xml_opt_int(node, 'max-paths')
    yang.gdata.maybe_add(children, 'max-paths', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__max_paths, child_max_paths)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_network_instance__network_instance__ip_load_balancing(yang.adata.MNode):
    resilient_hash_prefix: srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix

    mut def __init__(self, resilient_hash_prefix: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.resilient_hash_prefix = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(elements=resilient_hash_prefix)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _resilient_hash_prefix = self.resilient_hash_prefix
        if _resilient_hash_prefix is not None:
            children['resilient-hash-prefix'] = _resilient_hash_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_load_balancing(resilient_hash_prefix=srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix.from_gdata(n.get_opt_list('resilient-hash-prefix')))
        return srl_nokia_network_instance__network_instance__ip_load_balancing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-load-balancing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_load_balancing()')
        leaves = []
        _resilient_hash_prefix = self.resilient_hash_prefix
        for _element in _resilient_hash_prefix.elements:
            res.append('')
            res.append("# List /network-instance/ip-load-balancing/resilient-hash-prefix element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'resilient_hash_prefix_element = {self_name}.resilient_hash_prefix.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('resilient_hash_prefix_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-load-balancing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_resilient_hash_prefix = yang.gdata.from_xml_opt_list(node, 'resilient-hash-prefix')
    yang.gdata.maybe_add(children, 'resilient-hash-prefix', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix, child_resilient_hash_prefix)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface__bridge_table(yang.adata.MNode):
    split_horizon_group: ?str

    mut def __init__(self, split_horizon_group: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.split_horizon_group = split_horizon_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__interface__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__bridge_table(split_horizon_group=n.get_opt_str('split-horizon-group'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface__bridge_table()')
        leaves = []
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            leaves.append('{self_name}.split_horizon_group = {repr(_split_horizon_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_split_horizon_group = yang.gdata.from_xml_opt_str(node, 'split-horizon-group')
    yang.gdata.maybe_add(children, 'split-horizon-group', from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table__split_horizon_group, child_split_horizon_group)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__connection_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface_entry(yang.adata.MNode):
    name: str
    interface_ref: srl_nokia_network_instance__network_instance__interface__interface_ref
    bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table
    connection_point: ?str

    mut def __init__(self, name: str, interface_ref: ?srl_nokia_network_instance__network_instance__interface__interface_ref=None, bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table=None, connection_point: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__interface__interface_ref()
        self.bridge_table = bridge_table
        self.connection_point = connection_point

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__interface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = yang.gdata.Leaf('leafref', _connection_point)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface_entry:
        return srl_nokia_network_instance__network_instance__interface_entry(name=n.get_str('name'), interface_ref=srl_nokia_network_instance__network_instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')), bridge_table=srl_nokia_network_instance__network_instance__interface__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')), connection_point=n.get_opt_str('connection-point'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface({repr(self.name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/interface/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        _connection_point = self.connection_point
        if _connection_point is not None:
            leaves.append('{self_name}.connection_point = {repr(_connection_point)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__interface__name, child_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref, child_interface_ref)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table, child_bridge_table)
    child_connection_point = yang.gdata.from_xml_opt_str(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__interface__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__vxlan_interface_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__vxlan_interface_entry:
        return srl_nokia_network_instance__network_instance__vxlan_interface_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/vxlan-interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__vxlan_interface({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/vxlan-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__vxlan_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__vxlan_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-ipvpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-ipvpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__directly_connected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__directly_connected:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__directly_connected()
        return srl_nokia_network_instance__network_instance__protocols__directly_connected()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/directly-connected')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__directly_connected()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/directly-connected'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/non-stop-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/non-stop-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str
    max_ecmp_hash_buckets_per_next_hop_group: ?int

    mut def __init__(self, admin_state: ?str, max_ecmp_hash_buckets_per_next_hop_group: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_ecmp_hash_buckets_per_next_hop_group = max_ecmp_hash_buckets_per_next_hop_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            children['max-ecmp-hash-buckets-per-next-hop-group'] = yang.gdata.Leaf('uint16', _max_ecmp_hash_buckets_per_next_hop_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(admin_state=n.get_opt_str('admin-state'), max_ecmp_hash_buckets_per_next_hop_group=n.get_opt_int('max-ecmp-hash-buckets-per-next-hop-group'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            leaves.append('{self_name}.max_ecmp_hash_buckets_per_next_hop_group = {repr(_max_ecmp_hash_buckets_per_next_hop_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__admin_state, child_admin_state)
    child_max_ecmp_hash_buckets_per_next_hop_group = yang.gdata.from_xml_opt_int(node, 'max-ecmp-hash-buckets-per-next-hop-group')
    yang.gdata.maybe_add(children, 'max-ecmp-hash-buckets-per-next-hop-group', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group, child_max_ecmp_hash_buckets_per_next_hop_group)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(yang.adata.MNode):
    ignore: ?bool
    suppress: ?bool

    mut def __init__(self, ignore: ?bool, suppress: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ignore = ignore
        self.suppress = suppress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ignore = self.ignore
        if _ignore is not None:
            children['ignore'] = yang.gdata.Leaf('boolean', _ignore)
        _suppress = self.suppress
        if _suppress is not None:
            children['suppress'] = yang.gdata.Leaf('boolean', _suppress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(ignore=n.get_opt_bool('ignore'), suppress=n.get_opt_bool('suppress'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/attached-bit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()')
        leaves = []
        _ignore = self.ignore
        if _ignore is not None:
            leaves.append('{self_name}.ignore = {repr(_ignore)}')
        _suppress = self.suppress
        if _suppress is not None:
            leaves.append('{self_name}.suppress = {repr(_suppress)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/attached-bit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ignore = yang.gdata.from_xml_opt_bool(node, 'ignore')
    yang.gdata.maybe_add(children, 'ignore', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore, child_ignore)
    child_suppress = yang.gdata.from_xml_opt_bool(node, 'suppress')
    yang.gdata.maybe_add(children, 'suppress', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress, child_suppress)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_interlevel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_external(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__set_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__max_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(yang.adata.MNode):
    set_bit: ?bool
    max_metric: ?bool

    mut def __init__(self, set_bit: ?bool, max_metric: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.set_bit = set_bit
        self.max_metric = max_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_bit = self.set_bit
        if _set_bit is not None:
            children['set-bit'] = yang.gdata.Leaf('boolean', _set_bit)
        _max_metric = self.max_metric
        if _max_metric is not None:
            children['max-metric'] = yang.gdata.Leaf('boolean', _max_metric)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(set_bit=n.get_opt_bool('set-bit'), max_metric=n.get_opt_bool('max-metric'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload/immediate')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()')
        leaves = []
        _set_bit = self.set_bit
        if _set_bit is not None:
            leaves.append('{self_name}.set_bit = {repr(_set_bit)}')
        _max_metric = self.max_metric
        if _max_metric is not None:
            leaves.append('{self_name}.max_metric = {repr(_max_metric)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload/immediate'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_set_bit = yang.gdata.from_xml_opt_bool(node, 'set-bit')
    yang.gdata.maybe_add(children, 'set-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__set_bit, child_set_bit)
    child_max_metric = yang.gdata.from_xml_opt_bool(node, 'max-metric')
    yang.gdata.maybe_add(children, 'max-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__max_metric, child_max_metric)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__set_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__max_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(yang.adata.MNode):
    set_bit: ?bool
    max_metric: ?bool
    timeout: ?int

    mut def __init__(self, set_bit: ?bool, max_metric: ?bool, timeout: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.set_bit = set_bit
        self.max_metric = max_metric
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_bit = self.set_bit
        if _set_bit is not None:
            children['set-bit'] = yang.gdata.Leaf('boolean', _set_bit)
        _max_metric = self.max_metric
        if _max_metric is not None:
            children['max-metric'] = yang.gdata.Leaf('boolean', _max_metric)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('uint16', _timeout)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(set_bit=n.get_opt_bool('set-bit'), max_metric=n.get_opt_bool('max-metric'), timeout=n.get_opt_int('timeout'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload/on-boot')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()')
        leaves = []
        _set_bit = self.set_bit
        if _set_bit is not None:
            leaves.append('{self_name}.set_bit = {repr(_set_bit)}')
        _max_metric = self.max_metric
        if _max_metric is not None:
            leaves.append('{self_name}.max_metric = {repr(_max_metric)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload/on-boot'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_set_bit = yang.gdata.from_xml_opt_bool(node, 'set-bit')
    yang.gdata.maybe_add(children, 'set-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__set_bit, child_set_bit)
    child_max_metric = yang.gdata.from_xml_opt_bool(node, 'max-metric')
    yang.gdata.maybe_add(children, 'max-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__max_metric, child_max_metric)
    child_timeout = yang.gdata.from_xml_opt_int(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__timeout, child_timeout)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(yang.adata.MNode):
    advertise_interlevel: ?bool
    advertise_external: ?bool
    immediate: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate
    on_boot: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot

    mut def __init__(self, advertise_interlevel: ?bool, advertise_external: ?bool, immediate: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate=None, on_boot: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.advertise_interlevel = advertise_interlevel
        self.advertise_external = advertise_external
        self.immediate = immediate if immediate is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()
        self.on_boot = on_boot if on_boot is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_interlevel = self.advertise_interlevel
        if _advertise_interlevel is not None:
            children['advertise-interlevel'] = yang.gdata.Leaf('boolean', _advertise_interlevel)
        _advertise_external = self.advertise_external
        if _advertise_external is not None:
            children['advertise-external'] = yang.gdata.Leaf('boolean', _advertise_external)
        _immediate = self.immediate
        if _immediate is not None:
            children['immediate'] = _immediate.to_gdata()
        _on_boot = self.on_boot
        if _on_boot is not None:
            children['on-boot'] = _on_boot.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(advertise_interlevel=n.get_opt_bool('advertise-interlevel'), advertise_external=n.get_opt_bool('advertise-external'), immediate=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate.from_gdata(n.get_opt_cnt('immediate')), on_boot=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot.from_gdata(n.get_opt_cnt('on-boot')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()')
        leaves = []
        _advertise_interlevel = self.advertise_interlevel
        if _advertise_interlevel is not None:
            leaves.append('{self_name}.advertise_interlevel = {repr(_advertise_interlevel)}')
        _advertise_external = self.advertise_external
        if _advertise_external is not None:
            leaves.append('{self_name}.advertise_external = {repr(_advertise_external)}')
        _immediate = self.immediate
        if _immediate is not None:
            res.extend(_immediate.prsrc('{self_name}.immediate', False).splitlines())
        _on_boot = self.on_boot
        if _on_boot is not None:
            res.extend(_on_boot.prsrc('{self_name}.on_boot', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_interlevel = yang.gdata.from_xml_opt_bool(node, 'advertise-interlevel')
    yang.gdata.maybe_add(children, 'advertise-interlevel', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_interlevel, child_advertise_interlevel)
    child_advertise_external = yang.gdata.from_xml_opt_bool(node, 'advertise-external')
    yang.gdata.maybe_add(children, 'advertise-external', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_external, child_advertise_external)
    child_immediate = yang.gdata.from_xml_opt_cnt(node, 'immediate')
    yang.gdata.maybe_add(children, 'immediate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate, child_immediate)
    child_on_boot = yang.gdata.from_xml_opt_cnt(node, 'on-boot')
    yang.gdata.maybe_add(children, 'on-boot', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot, child_on_boot)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__half_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(yang.adata.MNode):
    interval: ?int
    half_lifetime: ?bool

    mut def __init__(self, interval: ?int, half_lifetime: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interval = interval
        self.half_lifetime = half_lifetime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('uint16', _interval)
        _half_lifetime = self.half_lifetime
        if _half_lifetime is not None:
            children['half-lifetime'] = yang.gdata.Leaf('boolean', _half_lifetime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(interval=n.get_opt_int('interval'), half_lifetime=n.get_opt_bool('half-lifetime'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/lsp-refresh')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()')
        leaves = []
        _interval = self.interval
        if _interval is not None:
            leaves.append('{self_name}.interval = {repr(_interval)}')
        _half_lifetime = self.half_lifetime
        if _half_lifetime is not None:
            leaves.append('{self_name}.half_lifetime = {repr(_half_lifetime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/lsp-refresh'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interval = yang.gdata.from_xml_opt_int(node, 'interval')
    yang.gdata.maybe_add(children, 'interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__interval, child_interval)
    child_half_lifetime = yang.gdata.from_xml_opt_bool(node, 'half-lifetime')
    yang.gdata.maybe_add(children, 'half-lifetime', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__half_lifetime, child_half_lifetime)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__initial_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__second_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(yang.adata.MNode):
    initial_wait: ?int
    second_wait: ?int
    max_wait: ?int

    mut def __init__(self, initial_wait: ?int, second_wait: ?int, max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.initial_wait = initial_wait
        self.second_wait = second_wait
        self.max_wait = max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            children['initial-wait'] = yang.gdata.Leaf('uint64', _initial_wait)
        _second_wait = self.second_wait
        if _second_wait is not None:
            children['second-wait'] = yang.gdata.Leaf('uint64', _second_wait)
        _max_wait = self.max_wait
        if _max_wait is not None:
            children['max-wait'] = yang.gdata.Leaf('uint64', _max_wait)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(initial_wait=n.get_opt_int('initial-wait'), second_wait=n.get_opt_int('second-wait'), max_wait=n.get_opt_int('max-wait'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/spf')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()')
        leaves = []
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            leaves.append('{self_name}.initial_wait = {repr(_initial_wait)}')
        _second_wait = self.second_wait
        if _second_wait is not None:
            leaves.append('{self_name}.second_wait = {repr(_second_wait)}')
        _max_wait = self.max_wait
        if _max_wait is not None:
            leaves.append('{self_name}.max_wait = {repr(_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/spf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_initial_wait = yang.gdata.from_xml_opt_int(node, 'initial-wait')
    yang.gdata.maybe_add(children, 'initial-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__initial_wait, child_initial_wait)
    child_second_wait = yang.gdata.from_xml_opt_int(node, 'second-wait')
    yang.gdata.maybe_add(children, 'second-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__second_wait, child_second_wait)
    child_max_wait = yang.gdata.from_xml_opt_int(node, 'max-wait')
    yang.gdata.maybe_add(children, 'max-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__max_wait, child_max_wait)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__initial_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__second_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(yang.adata.MNode):
    initial_wait: ?int
    second_wait: ?int
    max_wait: ?int

    mut def __init__(self, initial_wait: ?int, second_wait: ?int, max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.initial_wait = initial_wait
        self.second_wait = second_wait
        self.max_wait = max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            children['initial-wait'] = yang.gdata.Leaf('uint64', _initial_wait)
        _second_wait = self.second_wait
        if _second_wait is not None:
            children['second-wait'] = yang.gdata.Leaf('uint64', _second_wait)
        _max_wait = self.max_wait
        if _max_wait is not None:
            children['max-wait'] = yang.gdata.Leaf('uint64', _max_wait)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(initial_wait=n.get_opt_int('initial-wait'), second_wait=n.get_opt_int('second-wait'), max_wait=n.get_opt_int('max-wait'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/lsp-generation')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()')
        leaves = []
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            leaves.append('{self_name}.initial_wait = {repr(_initial_wait)}')
        _second_wait = self.second_wait
        if _second_wait is not None:
            leaves.append('{self_name}.second_wait = {repr(_second_wait)}')
        _max_wait = self.max_wait
        if _max_wait is not None:
            leaves.append('{self_name}.max_wait = {repr(_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/lsp-generation'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_initial_wait = yang.gdata.from_xml_opt_int(node, 'initial-wait')
    yang.gdata.maybe_add(children, 'initial-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__initial_wait, child_initial_wait)
    child_second_wait = yang.gdata.from_xml_opt_int(node, 'second-wait')
    yang.gdata.maybe_add(children, 'second-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__second_wait, child_second_wait)
    child_max_wait = yang.gdata.from_xml_opt_int(node, 'max-wait')
    yang.gdata.maybe_add(children, 'max-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__max_wait, child_max_wait)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(yang.adata.MNode):
    lsp_lifetime: ?int
    lsp_refresh: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh
    spf: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf
    lsp_generation: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation

    mut def __init__(self, lsp_lifetime: ?int, lsp_refresh: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh=None, spf: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf=None, lsp_generation: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.lsp_lifetime = lsp_lifetime
        self.lsp_refresh = lsp_refresh if lsp_refresh is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()
        self.spf = spf if spf is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()
        self.lsp_generation = lsp_generation if lsp_generation is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            children['lsp-lifetime'] = yang.gdata.Leaf('uint16', _lsp_lifetime)
        _lsp_refresh = self.lsp_refresh
        if _lsp_refresh is not None:
            children['lsp-refresh'] = _lsp_refresh.to_gdata()
        _spf = self.spf
        if _spf is not None:
            children['spf'] = _spf.to_gdata()
        _lsp_generation = self.lsp_generation
        if _lsp_generation is not None:
            children['lsp-generation'] = _lsp_generation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(lsp_lifetime=n.get_opt_int('lsp-lifetime'), lsp_refresh=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh.from_gdata(n.get_opt_cnt('lsp-refresh')), spf=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf.from_gdata(n.get_opt_cnt('spf')), lsp_generation=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation.from_gdata(n.get_opt_cnt('lsp-generation')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()')
        leaves = []
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            leaves.append('{self_name}.lsp_lifetime = {repr(_lsp_lifetime)}')
        _lsp_refresh = self.lsp_refresh
        if _lsp_refresh is not None:
            res.extend(_lsp_refresh.prsrc('{self_name}.lsp_refresh', False).splitlines())
        _spf = self.spf
        if _spf is not None:
            res.extend(_spf.prsrc('{self_name}.spf', False).splitlines())
        _lsp_generation = self.lsp_generation
        if _lsp_generation is not None:
            res.extend(_lsp_generation.prsrc('{self_name}.lsp_generation', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_lsp_lifetime = yang.gdata.from_xml_opt_int(node, 'lsp-lifetime')
    yang.gdata.maybe_add(children, 'lsp-lifetime', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_lifetime, child_lsp_lifetime)
    child_lsp_refresh = yang.gdata.from_xml_opt_cnt(node, 'lsp-refresh')
    yang.gdata.maybe_add(children, 'lsp-refresh', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh, child_lsp_refresh)
    child_spf = yang.gdata.from_xml_opt_cnt(node, 'spf')
    yang.gdata.maybe_add(children, 'spf', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf, child_spf)
    child_lsp_generation = yang.gdata.from_xml_opt_cnt(node, 'lsp-generation')
    yang.gdata.maybe_add(children, 'lsp-generation', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation, child_lsp_generation)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(yang.adata.MNode):
    lsp_mtu_size: ?int

    mut def __init__(self, lsp_mtu_size: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.lsp_mtu_size = lsp_mtu_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            children['lsp-mtu-size'] = yang.gdata.Leaf('uint16', _lsp_mtu_size)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(lsp_mtu_size=n.get_opt_int('lsp-mtu-size'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()')
        leaves = []
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            leaves.append('{self_name}.lsp_mtu_size = {repr(_lsp_mtu_size)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_lsp_mtu_size = yang.gdata.from_xml_opt_int(node, 'lsp-mtu-size')
    yang.gdata.maybe_add(children, 'lsp-mtu-size', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size, child_lsp_mtu_size)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__multi_topology(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str
    multi_topology: ?bool

    mut def __init__(self, admin_state: ?str, multi_topology: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.multi_topology = multi_topology

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _multi_topology = self.multi_topology
        if _multi_topology is not None:
            children['multi-topology'] = yang.gdata.Leaf('boolean', _multi_topology)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(admin_state=n.get_opt_str('admin-state'), multi_topology=n.get_opt_bool('multi-topology'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _multi_topology = self.multi_topology
        if _multi_topology is not None:
            leaves.append('{self_name}.multi_topology = {repr(_multi_topology)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state, child_admin_state)
    child_multi_topology = yang.gdata.from_xml_opt_bool(node, 'multi-topology')
    yang.gdata.maybe_add(children, 'multi-topology', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__multi_topology, child_multi_topology)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__helper_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__acceptable_duration(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(yang.adata.MNode):
    helper_mode: ?bool
    acceptable_duration: ?int

    mut def __init__(self, helper_mode: ?bool, acceptable_duration: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.helper_mode = helper_mode
        self.acceptable_duration = acceptable_duration

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _helper_mode = self.helper_mode
        if _helper_mode is not None:
            children['helper-mode'] = yang.gdata.Leaf('boolean', _helper_mode)
        _acceptable_duration = self.acceptable_duration
        if _acceptable_duration is not None:
            children['acceptable-duration'] = yang.gdata.Leaf('uint32', _acceptable_duration)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(helper_mode=n.get_opt_bool('helper-mode'), acceptable_duration=n.get_opt_int('acceptable-duration'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()')
        leaves = []
        _helper_mode = self.helper_mode
        if _helper_mode is not None:
            leaves.append('{self_name}.helper_mode = {repr(_helper_mode)}')
        _acceptable_duration = self.acceptable_duration
        if _acceptable_duration is not None:
            leaves.append('{self_name}.acceptable_duration = {repr(_acceptable_duration)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_helper_mode = yang.gdata.from_xml_opt_bool(node, 'helper-mode')
    yang.gdata.maybe_add(children, 'helper-mode', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__helper_mode, child_helper_mode)
    child_acceptable_duration = yang.gdata.from_xml_opt_int(node, 'acceptable-duration')
    yang.gdata.maybe_add(children, 'acceptable-duration', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__acceptable_duration, child_acceptable_duration)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost__reference_bandwidth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(yang.adata.MNode):
    reference_bandwidth: ?int

    mut def __init__(self, reference_bandwidth: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.reference_bandwidth = reference_bandwidth

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _reference_bandwidth = self.reference_bandwidth
        if _reference_bandwidth is not None:
            children['reference-bandwidth'] = yang.gdata.Leaf('uint64', _reference_bandwidth)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(reference_bandwidth=n.get_opt_int('reference-bandwidth'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/auto-cost')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()')
        leaves = []
        _reference_bandwidth = self.reference_bandwidth
        if _reference_bandwidth is not None:
            leaves.append('{self_name}.reference_bandwidth = {repr(_reference_bandwidth)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/auto-cost'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_reference_bandwidth = yang.gdata.from_xml_opt_int(node, 'reference-bandwidth')
    yang.gdata.maybe_add(children, 'reference-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost__reference_bandwidth, child_reference_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__augment_route_table(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(yang.adata.MNode):
    prefix_policy: list[str]

    mut def __init__(self, prefix_policy: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.prefix_policy = prefix_policy if prefix_policy is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['prefix-policy'] = yang.gdata.LeafList('leafref', self.prefix_policy, user_order=True)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(prefix_policy=n.get_opt_strs('prefix-policy'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/exclude')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()')
        leaves = []
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            leaves.append('{self_name}.prefix_policy = {repr(_prefix_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/exclude'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_policy = yang.gdata.from_xml_opt_strs(node, 'prefix-policy')
    yang.gdata.maybe_add(children, 'prefix-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude__prefix_policy, child_prefix_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(yang.adata.MNode):
    admin_state: ?str
    preference: ?str

    mut def __init__(self, admin_state: ?str, preference: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.preference = preference

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _preference = self.preference
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('enumeration', _preference)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(admin_state=n.get_opt_str('admin-state'), preference=n.get_opt_str('preference'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/multi-homed-prefix')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _preference = self.preference
        if _preference is not None:
            leaves.append('{self_name}.preference = {repr(_preference)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/multi-homed-prefix'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__admin_state, child_admin_state)
    child_preference = yang.gdata.from_xml_opt_str(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__preference, child_preference)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__max_pq_cost(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__max_pq_nodes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(yang.adata.MNode):
    admin_state: ?str
    max_pq_nodes: ?int

    mut def __init__(self, admin_state: ?str, max_pq_nodes: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_pq_nodes = max_pq_nodes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_pq_nodes = self.max_pq_nodes
        if _max_pq_nodes is not None:
            children['max-pq-nodes'] = yang.gdata.Leaf('uint32', _max_pq_nodes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(admin_state=n.get_opt_str('admin-state'), max_pq_nodes=n.get_opt_int('max-pq-nodes'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa/node-protect')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_pq_nodes = self.max_pq_nodes
        if _max_pq_nodes is not None:
            leaves.append('{self_name}.max_pq_nodes = {repr(_max_pq_nodes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa/node-protect'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__admin_state, child_admin_state)
    child_max_pq_nodes = yang.gdata.from_xml_opt_int(node, 'max-pq-nodes')
    yang.gdata.maybe_add(children, 'max-pq-nodes', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__max_pq_nodes, child_max_pq_nodes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(yang.adata.MNode):
    admin_state: ?str
    max_pq_cost: ?int
    node_protect: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect

    mut def __init__(self, admin_state: ?str, max_pq_cost: ?int, node_protect: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_pq_cost = max_pq_cost
        self.node_protect = node_protect if node_protect is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_pq_cost = self.max_pq_cost
        if _max_pq_cost is not None:
            children['max-pq-cost'] = yang.gdata.Leaf('uint32', _max_pq_cost)
        _node_protect = self.node_protect
        if _node_protect is not None:
            children['node-protect'] = _node_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(admin_state=n.get_opt_str('admin-state'), max_pq_cost=n.get_opt_int('max-pq-cost'), node_protect=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect.from_gdata(n.get_opt_cnt('node-protect')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_pq_cost = self.max_pq_cost
        if _max_pq_cost is not None:
            leaves.append('{self_name}.max_pq_cost = {repr(_max_pq_cost)}')
        _node_protect = self.node_protect
        if _node_protect is not None:
            res.extend(_node_protect.prsrc('{self_name}.node_protect', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__admin_state, child_admin_state)
    child_max_pq_cost = yang.gdata.from_xml_opt_int(node, 'max-pq-cost')
    yang.gdata.maybe_add(children, 'max-pq-cost', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__max_pq_cost, child_max_pq_cost)
    child_node_protect = yang.gdata.from_xml_opt_cnt(node, 'node-protect')
    yang.gdata.maybe_add(children, 'node-protect', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect, child_node_protect)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__max_sr_policy_lfa_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa/node-protect')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa/node-protect'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(yang.adata.MNode):
    admin_state: ?str
    max_sr_policy_lfa_labels: ?int
    node_protect: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect

    mut def __init__(self, admin_state: ?str, max_sr_policy_lfa_labels: ?int, node_protect: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_sr_policy_lfa_labels = max_sr_policy_lfa_labels
        self.node_protect = node_protect if node_protect is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_sr_policy_lfa_labels = self.max_sr_policy_lfa_labels
        if _max_sr_policy_lfa_labels is not None:
            children['max-sr-policy-lfa-labels'] = yang.gdata.Leaf('uint32', _max_sr_policy_lfa_labels)
        _node_protect = self.node_protect
        if _node_protect is not None:
            children['node-protect'] = _node_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(admin_state=n.get_opt_str('admin-state'), max_sr_policy_lfa_labels=n.get_opt_int('max-sr-policy-lfa-labels'), node_protect=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect.from_gdata(n.get_opt_cnt('node-protect')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_sr_policy_lfa_labels = self.max_sr_policy_lfa_labels
        if _max_sr_policy_lfa_labels is not None:
            leaves.append('{self_name}.max_sr_policy_lfa_labels = {repr(_max_sr_policy_lfa_labels)}')
        _node_protect = self.node_protect
        if _node_protect is not None:
            res.extend(_node_protect.prsrc('{self_name}.node_protect', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__admin_state, child_admin_state)
    child_max_sr_policy_lfa_labels = yang.gdata.from_xml_opt_int(node, 'max-sr-policy-lfa-labels')
    yang.gdata.maybe_add(children, 'max-sr-policy-lfa-labels', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__max_sr_policy_lfa_labels, child_max_sr_policy_lfa_labels)
    child_node_protect = yang.gdata.from_xml_opt_cnt(node, 'node-protect')
    yang.gdata.maybe_add(children, 'node-protect', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect, child_node_protect)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(yang.adata.MNode):
    admin_state: ?str
    augment_route_table: ?bool
    exclude: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude
    multi_homed_prefix: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix
    remote_lfa: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa
    ti_lfa: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa

    mut def __init__(self, admin_state: ?str, augment_route_table: ?bool, exclude: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude=None, multi_homed_prefix: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix=None, remote_lfa: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa=None, ti_lfa: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.augment_route_table = augment_route_table
        self.exclude = exclude if exclude is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()
        self.multi_homed_prefix = multi_homed_prefix if multi_homed_prefix is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()
        self.remote_lfa = remote_lfa if remote_lfa is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()
        self.ti_lfa = ti_lfa if ti_lfa is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _augment_route_table = self.augment_route_table
        if _augment_route_table is not None:
            children['augment-route-table'] = yang.gdata.Leaf('boolean', _augment_route_table)
        _exclude = self.exclude
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        _multi_homed_prefix = self.multi_homed_prefix
        if _multi_homed_prefix is not None:
            children['multi-homed-prefix'] = _multi_homed_prefix.to_gdata()
        _remote_lfa = self.remote_lfa
        if _remote_lfa is not None:
            children['remote-lfa'] = _remote_lfa.to_gdata()
        _ti_lfa = self.ti_lfa
        if _ti_lfa is not None:
            children['ti-lfa'] = _ti_lfa.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(admin_state=n.get_opt_str('admin-state'), augment_route_table=n.get_opt_bool('augment-route-table'), exclude=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude.from_gdata(n.get_opt_cnt('exclude')), multi_homed_prefix=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix.from_gdata(n.get_opt_cnt('multi-homed-prefix')), remote_lfa=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa.from_gdata(n.get_opt_cnt('remote-lfa')), ti_lfa=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa.from_gdata(n.get_opt_cnt('ti-lfa')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _augment_route_table = self.augment_route_table
        if _augment_route_table is not None:
            leaves.append('{self_name}.augment_route_table = {repr(_augment_route_table)}')
        _exclude = self.exclude
        if _exclude is not None:
            res.extend(_exclude.prsrc('{self_name}.exclude', False).splitlines())
        _multi_homed_prefix = self.multi_homed_prefix
        if _multi_homed_prefix is not None:
            res.extend(_multi_homed_prefix.prsrc('{self_name}.multi_homed_prefix', False).splitlines())
        _remote_lfa = self.remote_lfa
        if _remote_lfa is not None:
            res.extend(_remote_lfa.prsrc('{self_name}.remote_lfa', False).splitlines())
        _ti_lfa = self.ti_lfa
        if _ti_lfa is not None:
            res.extend(_ti_lfa.prsrc('{self_name}.ti_lfa', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__admin_state, child_admin_state)
    child_augment_route_table = yang.gdata.from_xml_opt_bool(node, 'augment-route-table')
    yang.gdata.maybe_add(children, 'augment-route-table', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__augment_route_table, child_augment_route_table)
    child_exclude = yang.gdata.from_xml_opt_cnt(node, 'exclude')
    yang.gdata.maybe_add(children, 'exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude, child_exclude)
    child_multi_homed_prefix = yang.gdata.from_xml_opt_cnt(node, 'multi-homed-prefix')
    yang.gdata.maybe_add(children, 'multi-homed-prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix, child_multi_homed_prefix)
    child_remote_lfa = yang.gdata.from_xml_opt_cnt(node, 'remote-lfa')
    yang.gdata.maybe_add(children, 'remote-lfa', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa, child_remote_lfa)
    child_ti_lfa = yang.gdata.from_xml_opt_cnt(node, 'ti-lfa')
    yang.gdata.maybe_add(children, 'ti-lfa', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa, child_ti_lfa)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key, child_key)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(yang.adata.MNode):
    ip_prefix: str
    route_tag: ?int

    mut def __init__(self, ip_prefix: str, route_tag: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ip_prefix = ip_prefix
        self.route_tag = route_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        _route_tag = self.route_tag
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(ip_prefix=n.get_str('ip-prefix'), route_tag=n.get_opt_int('route-tag'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address({repr(self.ip_prefix)})')
        leaves = []
        _route_tag = self.route_tag
        if _route_tag is not None:
            leaves.append('{self_name}.route_tag = {repr(_route_tag)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'summary-address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__ip_prefix, child_ip_prefix)
    child_route_tag = yang.gdata.from_xml_opt_int(node, 'route-tag')
    yang.gdata.maybe_add(children, 'route-tag', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__route_tag, child_route_tag)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(yang.adata.MNode):
    summary_address: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address

    mut def __init__(self, summary_address: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.summary_address = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(elements=summary_address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _summary_address = self.summary_address
        if _summary_address is not None:
            children['summary-address'] = _summary_address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(summary_address=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address.from_gdata(n.get_opt_list('summary-address')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()')
        leaves = []
        _summary_address = self.summary_address
        for _element in _summary_address.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'summary_address_element = {self_name}.summary_address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('summary_address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_summary_address = yang.gdata.from_xml_opt_list(node, 'summary-address')
    yang.gdata.maybe_add(children, 'summary-address', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address, child_summary_address)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(yang.adata.MNode):
    level1_to_level2: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2

    mut def __init__(self, level1_to_level2: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level1_to_level2 = level1_to_level2 if level1_to_level2 is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level1_to_level2 = self.level1_to_level2
        if _level1_to_level2 is not None:
            children['level1-to-level2'] = _level1_to_level2.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(level1_to_level2=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2.from_gdata(n.get_opt_cnt('level1-to-level2')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()')
        leaves = []
        _level1_to_level2 = self.level1_to_level2
        if _level1_to_level2 is not None:
            res.extend(_level1_to_level2.prsrc('{self_name}.level1_to_level2', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_level1_to_level2 = yang.gdata.from_xml_opt_cnt(node, 'level1-to-level2')
    yang.gdata.maybe_add(children, 'level1-to-level2', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2, child_level1_to_level2)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids__all_interfaces(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(yang.adata.MNode):
    all_interfaces: ?bool

    mut def __init__(self, all_interfaces: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.all_interfaces = all_interfaces

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_interfaces = self.all_interfaces
        if _all_interfaces is not None:
            children['all-interfaces'] = yang.gdata.Leaf('boolean', _all_interfaces)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(all_interfaces=n.get_opt_bool('all-interfaces'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()')
        leaves = []
        _all_interfaces = self.all_interfaces
        if _all_interfaces is not None:
            leaves.append('{self_name}.all_interfaces = {repr(_all_interfaces)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_all_interfaces = yang.gdata.from_xml_opt_bool(node, 'all-interfaces')
    yang.gdata.maybe_add(children, 'all-interfaces', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids__all_interfaces, child_all_interfaces)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__advertise_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(yang.adata.MNode):
    advertise_capability: ?bool
    transmit: ?str

    mut def __init__(self, advertise_capability: ?bool, transmit: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.advertise_capability = advertise_capability
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_capability = self.advertise_capability
        if _advertise_capability is not None:
            children['advertise-capability'] = yang.gdata.Leaf('boolean', _advertise_capability)
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('enumeration', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(advertise_capability=n.get_opt_bool('advertise-capability'), transmit=n.get_opt_str('transmit'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/entropy-label')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()')
        leaves = []
        _advertise_capability = self.advertise_capability
        if _advertise_capability is not None:
            leaves.append('{self_name}.advertise_capability = {repr(_advertise_capability)}')
        _transmit = self.transmit
        if _transmit is not None:
            leaves.append('{self_name}.transmit = {repr(_transmit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/entropy-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_capability = yang.gdata.from_xml_opt_bool(node, 'advertise-capability')
    yang.gdata.maybe_add(children, 'advertise-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__advertise_capability, child_advertise_capability)
    child_transmit = yang.gdata.from_xml_opt_str(node, 'transmit')
    yang.gdata.maybe_add(children, 'transmit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__transmit, child_transmit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_bmi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_erld(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(yang.adata.MNode):
    override_bmi: ?int
    override_erld: ?int

    mut def __init__(self, override_bmi: ?int, override_erld: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.override_bmi = override_bmi
        self.override_erld = override_erld

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _override_bmi = self.override_bmi
        if _override_bmi is not None:
            children['override-bmi'] = yang.gdata.Leaf('int32', _override_bmi)
        _override_erld = self.override_erld
        if _override_erld is not None:
            children['override-erld'] = yang.gdata.Leaf('int32', _override_erld)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(override_bmi=n.get_opt_int('override-bmi'), override_erld=n.get_opt_int('override-erld'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/maximum-sid-depth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()')
        leaves = []
        _override_bmi = self.override_bmi
        if _override_bmi is not None:
            leaves.append('{self_name}.override_bmi = {repr(_override_bmi)}')
        _override_erld = self.override_erld
        if _override_erld is not None:
            leaves.append('{self_name}.override_erld = {repr(_override_erld)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/maximum-sid-depth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_override_bmi = yang.gdata.from_xml_opt_int(node, 'override-bmi')
    yang.gdata.maybe_add(children, 'override-bmi', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_bmi, child_override_bmi)
    child_override_erld = yang.gdata.from_xml_opt_int(node, 'override-erld')
    yang.gdata.maybe_add(children, 'override-erld', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_erld, child_override_erld)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__static_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__adjacency_sid_hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(yang.adata.MNode):
    dynamic_adjacency_sids: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids
    entropy_label: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label
    maximum_sid_depth: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth
    static_label_block: ?str
    adjacency_sid_hold_time: ?value

    mut def __init__(self, dynamic_adjacency_sids: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids=None, entropy_label: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label=None, maximum_sid_depth: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth=None, static_label_block: ?str, adjacency_sid_hold_time: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.dynamic_adjacency_sids = dynamic_adjacency_sids if dynamic_adjacency_sids is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()
        self.entropy_label = entropy_label if entropy_label is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()
        self.maximum_sid_depth = maximum_sid_depth if maximum_sid_depth is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()
        self.static_label_block = static_label_block
        self.adjacency_sid_hold_time = adjacency_sid_hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_adjacency_sids = self.dynamic_adjacency_sids
        if _dynamic_adjacency_sids is not None:
            children['dynamic-adjacency-sids'] = _dynamic_adjacency_sids.to_gdata()
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            children['entropy-label'] = _entropy_label.to_gdata()
        _maximum_sid_depth = self.maximum_sid_depth
        if _maximum_sid_depth is not None:
            children['maximum-sid-depth'] = _maximum_sid_depth.to_gdata()
        _static_label_block = self.static_label_block
        if _static_label_block is not None:
            children['static-label-block'] = yang.gdata.Leaf('leafref', _static_label_block)
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            children['adjacency-sid-hold-time'] = yang.gdata.Leaf('union', _adjacency_sid_hold_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(dynamic_adjacency_sids=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids.from_gdata(n.get_opt_cnt('dynamic-adjacency-sids')), entropy_label=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label.from_gdata(n.get_opt_cnt('entropy-label')), maximum_sid_depth=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth.from_gdata(n.get_opt_cnt('maximum-sid-depth')), static_label_block=n.get_opt_str('static-label-block'), adjacency_sid_hold_time=n.get_opt_value('adjacency-sid-hold-time'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls()')
        leaves = []
        _dynamic_adjacency_sids = self.dynamic_adjacency_sids
        if _dynamic_adjacency_sids is not None:
            res.extend(_dynamic_adjacency_sids.prsrc('{self_name}.dynamic_adjacency_sids', False).splitlines())
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            res.extend(_entropy_label.prsrc('{self_name}.entropy_label', False).splitlines())
        _maximum_sid_depth = self.maximum_sid_depth
        if _maximum_sid_depth is not None:
            res.extend(_maximum_sid_depth.prsrc('{self_name}.maximum_sid_depth', False).splitlines())
        _static_label_block = self.static_label_block
        if _static_label_block is not None:
            leaves.append('{self_name}.static_label_block = {repr(_static_label_block)}')
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            leaves.append('{self_name}.adjacency_sid_hold_time = {repr(_adjacency_sid_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_dynamic_adjacency_sids = yang.gdata.from_xml_opt_cnt(node, 'dynamic-adjacency-sids')
    yang.gdata.maybe_add(children, 'dynamic-adjacency-sids', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids, child_dynamic_adjacency_sids)
    child_entropy_label = yang.gdata.from_xml_opt_cnt(node, 'entropy-label')
    yang.gdata.maybe_add(children, 'entropy-label', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label, child_entropy_label)
    child_maximum_sid_depth = yang.gdata.from_xml_opt_cnt(node, 'maximum-sid-depth')
    yang.gdata.maybe_add(children, 'maximum-sid-depth', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth, child_maximum_sid_depth)
    child_static_label_block = yang.gdata.from_xml_opt_str(node, 'static-label-block')
    yang.gdata.maybe_add(children, 'static-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__static_label_block, child_static_label_block)
    child_adjacency_sid_hold_time = yang.gdata.from_xml_opt_value(node, 'adjacency-sid-hold-time')
    yang.gdata.maybe_add(children, 'adjacency-sid-hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__adjacency_sid_hold_time, child_adjacency_sid_hold_time)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__adjacency_sid_hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(yang.adata.MNode):
    admin_state: ?str
    adjacency_sid_hold_time: ?value

    mut def __init__(self, admin_state: ?str, adjacency_sid_hold_time: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.adjacency_sid_hold_time = adjacency_sid_hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            children['adjacency-sid-hold-time'] = yang.gdata.Leaf('union', _adjacency_sid_hold_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(admin_state=n.get_opt_str('admin-state'), adjacency_sid_hold_time=n.get_opt_value('adjacency-sid-hold-time'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/srv6')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            leaves.append('{self_name}.adjacency_sid_hold_time = {repr(_adjacency_sid_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/srv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__admin_state, child_admin_state)
    child_adjacency_sid_hold_time = yang.gdata.from_xml_opt_value(node, 'adjacency-sid-hold-time')
    yang.gdata.maybe_add(children, 'adjacency-sid-hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__adjacency_sid_hold_time, child_adjacency_sid_hold_time)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(yang.adata.MNode):
    mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls
    srv6: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6

    mut def __init__(self, mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls=None, srv6: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.mpls = mpls
        self.srv6 = srv6 if srv6 is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()

    mut def create_mpls(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls()
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        _srv6 = self.srv6
        if _srv6 is not None:
            children['srv6'] = _srv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(mpls=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls.from_gdata(n.get_opt_cnt('mpls')), srv6=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6.from_gdata(n.get_opt_cnt('srv6')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()')
        leaves = []
        _mpls = self.mpls
        if _mpls is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/segment-routing/mpls')
            res.append('mpls = {self_name}.create_mpls()')
            res.extend(_mpls.prsrc('mpls', False).splitlines())
        _srv6 = self.srv6
        if _srv6 is not None:
            res.extend(_srv6.prsrc('{self_name}.srv6', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls, child_mpls)
    child_srv6 = yang.gdata.from_xml_opt_cnt(node, 'srv6')
    yang.gdata.maybe_add(children, 'srv6', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6, child_srv6)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__legacy_link_attribute_advertisement(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv4_te_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv6_te_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(yang.adata.MNode):
    legacy_link_attribute_advertisement: ?bool
    ipv4_te_router_id: ?str
    ipv6_te_router_id: ?str

    mut def __init__(self, legacy_link_attribute_advertisement: ?bool, ipv4_te_router_id: ?str, ipv6_te_router_id: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.legacy_link_attribute_advertisement = legacy_link_attribute_advertisement
        self.ipv4_te_router_id = ipv4_te_router_id
        self.ipv6_te_router_id = ipv6_te_router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _legacy_link_attribute_advertisement = self.legacy_link_attribute_advertisement
        if _legacy_link_attribute_advertisement is not None:
            children['legacy-link-attribute-advertisement'] = yang.gdata.Leaf('boolean', _legacy_link_attribute_advertisement)
        _ipv4_te_router_id = self.ipv4_te_router_id
        if _ipv4_te_router_id is not None:
            children['ipv4-te-router-id'] = yang.gdata.Leaf('string', _ipv4_te_router_id)
        _ipv6_te_router_id = self.ipv6_te_router_id
        if _ipv6_te_router_id is not None:
            children['ipv6-te-router-id'] = yang.gdata.Leaf('string', _ipv6_te_router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(legacy_link_attribute_advertisement=n.get_opt_bool('legacy-link-attribute-advertisement'), ipv4_te_router_id=n.get_opt_str('ipv4-te-router-id'), ipv6_te_router_id=n.get_opt_str('ipv6-te-router-id'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/traffic-engineering')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()')
        leaves = []
        _legacy_link_attribute_advertisement = self.legacy_link_attribute_advertisement
        if _legacy_link_attribute_advertisement is not None:
            leaves.append('{self_name}.legacy_link_attribute_advertisement = {repr(_legacy_link_attribute_advertisement)}')
        _ipv4_te_router_id = self.ipv4_te_router_id
        if _ipv4_te_router_id is not None:
            leaves.append('{self_name}.ipv4_te_router_id = {repr(_ipv4_te_router_id)}')
        _ipv6_te_router_id = self.ipv6_te_router_id
        if _ipv6_te_router_id is not None:
            leaves.append('{self_name}.ipv6_te_router_id = {repr(_ipv6_te_router_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/traffic-engineering'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_legacy_link_attribute_advertisement = yang.gdata.from_xml_opt_bool(node, 'legacy-link-attribute-advertisement')
    yang.gdata.maybe_add(children, 'legacy-link-attribute-advertisement', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__legacy_link_attribute_advertisement, child_legacy_link_attribute_advertisement)
    child_ipv4_te_router_id = yang.gdata.from_xml_opt_str(node, 'ipv4-te-router-id')
    yang.gdata.maybe_add(children, 'ipv4-te-router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv4_te_router_id, child_ipv4_te_router_id)
    child_ipv6_te_router_id = yang.gdata.from_xml_opt_str(node, 'ipv6-te-router-id')
    yang.gdata.maybe_add(children, 'ipv6-te-router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv6_te_router_id, child_ipv6_te_router_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(yang.adata.MNode):
    delay_selection: ?str

    mut def __init__(self, delay_selection: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.delay_selection = delay_selection

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            children['delay-selection'] = yang.gdata.Leaf('enumeration', _delay_selection)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(delay_selection=n.get_opt_str('delay-selection'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/delay')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()')
        leaves = []
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            leaves.append('{self_name}.delay_selection = {repr(_delay_selection)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_delay_selection = yang.gdata.from_xml_opt_str(node, 'delay-selection')
    yang.gdata.maybe_add(children, 'delay-selection', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection, child_delay_selection)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__loopfree_alternate_exclude(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__csnp_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__lsp_pacing_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(yang.adata.MNode):
    csnp_interval: ?int
    lsp_pacing_interval: ?int

    mut def __init__(self, csnp_interval: ?int, lsp_pacing_interval: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_interval = csnp_interval
        self.lsp_pacing_interval = lsp_pacing_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_interval = self.csnp_interval
        if _csnp_interval is not None:
            children['csnp-interval'] = yang.gdata.Leaf('uint16', _csnp_interval)
        _lsp_pacing_interval = self.lsp_pacing_interval
        if _lsp_pacing_interval is not None:
            children['lsp-pacing-interval'] = yang.gdata.Leaf('uint64', _lsp_pacing_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(csnp_interval=n.get_opt_int('csnp-interval'), lsp_pacing_interval=n.get_opt_int('lsp-pacing-interval'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()')
        leaves = []
        _csnp_interval = self.csnp_interval
        if _csnp_interval is not None:
            leaves.append('{self_name}.csnp_interval = {repr(_csnp_interval)}')
        _lsp_pacing_interval = self.lsp_pacing_interval
        if _lsp_pacing_interval is not None:
            leaves.append('{self_name}.lsp_pacing_interval = {repr(_lsp_pacing_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_interval = yang.gdata.from_xml_opt_int(node, 'csnp-interval')
    yang.gdata.maybe_add(children, 'csnp-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__csnp_interval, child_csnp_interval)
    child_lsp_pacing_interval = yang.gdata.from_xml_opt_int(node, 'lsp-pacing-interval')
    yang.gdata.maybe_add(children, 'lsp-pacing-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__lsp_pacing_interval, child_lsp_pacing_interval)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(yang.adata.MNode):
    index: ?int

    mut def __init__(self, index: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(index=n.get_opt_int('index'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid()')
        leaves = []
        _index = self.index
        if _index is not None:
            leaves.append('{self_name}.index = {repr(_index)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(yang.adata.MNode):
    index: ?int

    mut def __init__(self, index: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(index=n.get_opt_int('index'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid()')
        leaves = []
        _index = self.index
        if _index is not None:
            leaves.append('{self_name}.index = {repr(_index)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__assignment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(yang.adata.MNode):
    assignment: ?str
    static: ?int

    mut def __init__(self, assignment: ?str, static: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.assignment = assignment
        self.static = static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _assignment = self.assignment
        if _assignment is not None:
            children['assignment'] = yang.gdata.Leaf('enumeration', _assignment)
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('uint32', _static)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(assignment=n.get_opt_str('assignment'), static=n.get_opt_int('static'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid()')
        leaves = []
        _assignment = self.assignment
        if _assignment is not None:
            leaves.append('{self_name}.assignment = {repr(_assignment)}')
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_assignment = yang.gdata.from_xml_opt_str(node, 'assignment')
    yang.gdata.maybe_add(children, 'assignment', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__assignment, child_assignment)
    child_static = yang.gdata.from_xml_opt_int(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__static, child_static)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__assignment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(yang.adata.MNode):
    assignment: ?str
    static: ?int

    mut def __init__(self, assignment: ?str, static: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.assignment = assignment
        self.static = static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _assignment = self.assignment
        if _assignment is not None:
            children['assignment'] = yang.gdata.Leaf('enumeration', _assignment)
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('uint32', _static)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(assignment=n.get_opt_str('assignment'), static=n.get_opt_int('static'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid()')
        leaves = []
        _assignment = self.assignment
        if _assignment is not None:
            leaves.append('{self_name}.assignment = {repr(_assignment)}')
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_assignment = yang.gdata.from_xml_opt_str(node, 'assignment')
    yang.gdata.maybe_add(children, 'assignment', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__assignment, child_assignment)
    child_static = yang.gdata.from_xml_opt_int(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__static, child_static)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(yang.adata.MNode):
    ipv4_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid
    ipv6_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid
    ipv4_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid
    ipv6_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid

    mut def __init__(self, ipv4_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid=None, ipv6_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid=None, ipv4_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid=None, ipv6_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ipv4_node_sid = ipv4_node_sid
        self.ipv6_node_sid = ipv6_node_sid
        self.ipv4_adjacency_sid = ipv4_adjacency_sid
        self.ipv6_adjacency_sid = ipv6_adjacency_sid

    mut def create_ipv4_node_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid()
        self.ipv4_node_sid = res
        return res

    mut def create_ipv6_node_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid()
        self.ipv6_node_sid = res
        return res

    mut def create_ipv4_adjacency_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid()
        self.ipv4_adjacency_sid = res
        return res

    mut def create_ipv6_adjacency_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid()
        self.ipv6_adjacency_sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_node_sid = self.ipv4_node_sid
        if _ipv4_node_sid is not None:
            children['ipv4-node-sid'] = _ipv4_node_sid.to_gdata()
        _ipv6_node_sid = self.ipv6_node_sid
        if _ipv6_node_sid is not None:
            children['ipv6-node-sid'] = _ipv6_node_sid.to_gdata()
        _ipv4_adjacency_sid = self.ipv4_adjacency_sid
        if _ipv4_adjacency_sid is not None:
            children['ipv4-adjacency-sid'] = _ipv4_adjacency_sid.to_gdata()
        _ipv6_adjacency_sid = self.ipv6_adjacency_sid
        if _ipv6_adjacency_sid is not None:
            children['ipv6-adjacency-sid'] = _ipv6_adjacency_sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(ipv4_node_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid.from_gdata(n.get_opt_cnt('ipv4-node-sid')), ipv6_node_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid.from_gdata(n.get_opt_cnt('ipv6-node-sid')), ipv4_adjacency_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid.from_gdata(n.get_opt_cnt('ipv4-adjacency-sid')), ipv6_adjacency_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid.from_gdata(n.get_opt_cnt('ipv6-adjacency-sid')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()')
        leaves = []
        _ipv4_node_sid = self.ipv4_node_sid
        if _ipv4_node_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid')
            res.append('ipv4_node_sid = {self_name}.create_ipv4_node_sid()')
            res.extend(_ipv4_node_sid.prsrc('ipv4_node_sid', False).splitlines())
        _ipv6_node_sid = self.ipv6_node_sid
        if _ipv6_node_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid')
            res.append('ipv6_node_sid = {self_name}.create_ipv6_node_sid()')
            res.extend(_ipv6_node_sid.prsrc('ipv6_node_sid', False).splitlines())
        _ipv4_adjacency_sid = self.ipv4_adjacency_sid
        if _ipv4_adjacency_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid')
            res.append('ipv4_adjacency_sid = {self_name}.create_ipv4_adjacency_sid()')
            res.extend(_ipv4_adjacency_sid.prsrc('ipv4_adjacency_sid', False).splitlines())
        _ipv6_adjacency_sid = self.ipv6_adjacency_sid
        if _ipv6_adjacency_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid')
            res.append('ipv6_adjacency_sid = {self_name}.create_ipv6_adjacency_sid()')
            res.extend(_ipv6_adjacency_sid.prsrc('ipv6_adjacency_sid', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_node_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv4-node-sid')
    yang.gdata.maybe_add(children, 'ipv4-node-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid, child_ipv4_node_sid)
    child_ipv6_node_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv6-node-sid')
    yang.gdata.maybe_add(children, 'ipv6-node-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid, child_ipv6_node_sid)
    child_ipv4_adjacency_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv4-adjacency-sid')
    yang.gdata.maybe_add(children, 'ipv4-adjacency-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid, child_ipv4_adjacency_sid)
    child_ipv6_adjacency_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv6-adjacency-sid')
    yang.gdata.maybe_add(children, 'ipv6-adjacency-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid, child_ipv6_adjacency_sid)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(yang.adata.MNode):
    mpls: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls

    mut def __init__(self, mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.mpls = mpls if mpls is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(mpls=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls.from_gdata(n.get_opt_cnt('mpls')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing()')
        leaves = []
        _mpls = self.mpls
        if _mpls is not None:
            res.extend(_mpls.prsrc('{self_name}.mpls', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls, child_mpls)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp__load_balancing_weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(yang.adata.MNode):
    load_balancing_weight: ?value

    mut def __init__(self, load_balancing_weight: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.load_balancing_weight = load_balancing_weight

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _load_balancing_weight = self.load_balancing_weight
        if _load_balancing_weight is not None:
            children['load-balancing-weight'] = yang.gdata.Leaf('union', _load_balancing_weight)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(load_balancing_weight=n.get_opt_value('load-balancing-weight'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()')
        leaves = []
        _load_balancing_weight = self.load_balancing_weight
        if _load_balancing_weight is not None:
            leaves.append('{self_name}.load_balancing_weight = {repr(_load_balancing_weight)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_load_balancing_weight = yang.gdata.from_xml_opt_value(node, 'load-balancing-weight')
    yang.gdata.maybe_add(children, 'load-balancing-weight', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp__load_balancing_weight, child_load_balancing_weight)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(yang.adata.MNode):
    hello_interval: ?int
    hello_multiplier: ?int

    mut def __init__(self, hello_interval: ?int, hello_multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_interval = hello_interval
        self.hello_multiplier = hello_multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            children['hello-interval'] = yang.gdata.Leaf('uint32', _hello_interval)
        _hello_multiplier = self.hello_multiplier
        if _hello_multiplier is not None:
            children['hello-multiplier'] = yang.gdata.Leaf('uint8', _hello_multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(hello_interval=n.get_opt_int('hello-interval'), hello_multiplier=n.get_opt_int('hello-multiplier'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()')
        leaves = []
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            leaves.append('{self_name}.hello_interval = {repr(_hello_interval)}')
        _hello_multiplier = self.hello_multiplier
        if _hello_multiplier is not None:
            leaves.append('{self_name}.hello_multiplier = {repr(_hello_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_interval = yang.gdata.from_xml_opt_int(node, 'hello-interval')
    yang.gdata.maybe_add(children, 'hello-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_interval, child_hello_interval)
    child_hello_multiplier = yang.gdata.from_xml_opt_int(node, 'hello-multiplier')
    yang.gdata.maybe_add(children, 'hello-multiplier', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_multiplier, child_hello_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(yang.adata.MNode):
    level_number: int
    disable: ?bool
    ipv6_unicast_metric: ?int
    metric: ?int
    priority: ?int
    passive: ?bool
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication

    mut def __init__(self, level_number: int, disable: ?bool, ipv6_unicast_metric: ?int, metric: ?int, priority: ?int, passive: ?bool, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.disable = disable
        self.ipv6_unicast_metric = ipv6_unicast_metric
        self.metric = metric
        self.priority = priority
        self.passive = passive
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('boolean', _disable)
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            children['ipv6-unicast-metric'] = yang.gdata.Leaf('uint32', _ipv6_unicast_metric)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('uint8', _priority)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number=n.get_int('level-number'), disable=n.get_opt_bool('disable'), ipv6_unicast_metric=n.get_opt_int('ipv6-unicast-metric'), metric=n.get_opt_int('metric'), priority=n.get_opt_int('priority'), passive=n.get_opt_bool('passive'), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers.from_gdata(n.get_opt_cnt('timers')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level({repr(self.level_number)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            leaves.append('{self_name}.ipv6_unicast_metric = {repr(_ipv6_unicast_metric)}')
        _metric = self.metric
        if _metric is not None:
            leaves.append('{self_name}.metric = {repr(_metric)}')
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number, child_level_number)
    child_disable = yang.gdata.from_xml_opt_bool(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable, child_disable)
    child_ipv6_unicast_metric = yang.gdata.from_xml_opt_int(node, 'ipv6-unicast-metric')
    yang.gdata.maybe_add(children, 'ipv6-unicast-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric, child_ipv6_unicast_metric)
    child_metric = yang.gdata.from_xml_opt_int(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric, child_metric)
    child_priority = yang.gdata.from_xml_opt_int(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority, child_priority)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive, child_passive)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers, child_timers)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(yang.adata.MNode):
    interface_name: str
    interface_ref: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref
    admin_state: ?str
    circuit_type: ?str
    delay: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay
    hello_padding: ?str
    passive: ?bool
    loopfree_alternate_exclude: ?bool
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options
    segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication

    mut def __init__(self, interface_name: str, interface_ref: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref=None, admin_state: ?str, circuit_type: ?str, delay: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay=None, hello_padding: ?str, passive: ?bool, loopfree_alternate_exclude: ?bool, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options=None, segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing=None, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp=None, level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]=[], authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface_name = interface_name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()
        self.admin_state = admin_state
        self.circuit_type = circuit_type
        self.delay = delay if delay is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()
        self.hello_padding = hello_padding
        self.passive = passive
        self.loopfree_alternate_exclude = loopfree_alternate_exclude
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()
        self.segment_routing = segment_routing
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(elements=level)
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    mut def create_segment_routing(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing()
        self.segment_routing = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        _delay = self.delay
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            children['loopfree-alternate-exclude'] = yang.gdata.Leaf('boolean', _loopfree_alternate_exclude)
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name=n.get_str('interface-name'), interface_ref=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')), admin_state=n.get_opt_str('admin-state'), circuit_type=n.get_opt_str('circuit-type'), delay=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay.from_gdata(n.get_opt_cnt('delay')), hello_padding=n.get_opt_str('hello-padding'), passive=n.get_opt_bool('passive'), loopfree_alternate_exclude=n.get_opt_bool('loopfree-alternate-exclude'), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers.from_gdata(n.get_opt_cnt('timers')), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options.from_gdata(n.get_opt_cnt('trace-options')), segment_routing=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing.from_gdata(n.get_opt_cnt('segment-routing')), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level.from_gdata(n.get_opt_list('level')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface({repr(self.interface_name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            leaves.append('{self_name}.circuit_type = {repr(_circuit_type)}')
        _delay = self.delay
        if _delay is not None:
            res.extend(_delay.prsrc('{self_name}.delay', False).splitlines())
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            leaves.append('{self_name}.loopfree_alternate_exclude = {repr(_loopfree_alternate_exclude)}')
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing')
            res.append('segment_routing = {self_name}.create_segment_routing()')
            res.extend(_segment_routing.prsrc('segment_routing', False).splitlines())
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name, child_interface_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref, child_interface_ref)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state, child_admin_state)
    child_circuit_type = yang.gdata.from_xml_opt_str(node, 'circuit-type')
    yang.gdata.maybe_add(children, 'circuit-type', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type, child_circuit_type)
    child_delay = yang.gdata.from_xml_opt_cnt(node, 'delay')
    yang.gdata.maybe_add(children, 'delay', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay, child_delay)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding, child_hello_padding)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive, child_passive)
    child_loopfree_alternate_exclude = yang.gdata.from_xml_opt_bool(node, 'loopfree-alternate-exclude')
    yang.gdata.maybe_add(children, 'loopfree-alternate-exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__loopfree_alternate_exclude, child_loopfree_alternate_exclude)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers, child_timers)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast, child_ipv6_unicast)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options, child_trace_options)
    child_segment_routing = yang.gdata.from_xml_opt_cnt(node, 'segment-routing')
    yang.gdata.maybe_add(children, 'segment-routing', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing, child_segment_routing)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp, child_weighted_ecmp)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level, child_level)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['interface-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(yang.adata.MNode):
    external: ?int
    internal: ?int

    mut def __init__(self, external: ?int, internal: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.external = external
        self.internal = internal

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _external = self.external
        if _external is not None:
            children['external'] = yang.gdata.Leaf('uint8', _external)
        _internal = self.internal
        if _internal is not None:
            children['internal'] = yang.gdata.Leaf('uint8', _internal)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(external=n.get_opt_int('external'), internal=n.get_opt_int('internal'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/route-preference')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()')
        leaves = []
        _external = self.external
        if _external is not None:
            leaves.append('{self_name}.external = {repr(_external)}')
        _internal = self.internal
        if _internal is not None:
            leaves.append('{self_name}.internal = {repr(_internal)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/route-preference'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_external = yang.gdata.from_xml_opt_int(node, 'external')
    yang.gdata.maybe_add(children, 'external', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external, child_external)
    child_internal = yang.gdata.from_xml_opt_int(node, 'internal')
    yang.gdata.maybe_add(children, 'internal', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal, child_internal)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(yang.adata.MNode):
    level_number: int
    metric_style: ?str
    loopfree_alternate_exclude: ?bool
    route_preference: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication

    mut def __init__(self, level_number: int, metric_style: ?str, loopfree_alternate_exclude: ?bool, route_preference: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.metric_style = metric_style
        self.loopfree_alternate_exclude = loopfree_alternate_exclude
        self.route_preference = route_preference if route_preference is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _metric_style = self.metric_style
        if _metric_style is not None:
            children['metric-style'] = yang.gdata.Leaf('enumeration', _metric_style)
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            children['loopfree-alternate-exclude'] = yang.gdata.Leaf('boolean', _loopfree_alternate_exclude)
        _route_preference = self.route_preference
        if _route_preference is not None:
            children['route-preference'] = _route_preference.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number=n.get_int('level-number'), metric_style=n.get_opt_str('metric-style'), loopfree_alternate_exclude=n.get_opt_bool('loopfree-alternate-exclude'), route_preference=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference.from_gdata(n.get_opt_cnt('route-preference')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options.from_gdata(n.get_opt_cnt('trace-options')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level({repr(self.level_number)})')
        leaves = []
        _metric_style = self.metric_style
        if _metric_style is not None:
            leaves.append('{self_name}.metric_style = {repr(_metric_style)}')
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            leaves.append('{self_name}.loopfree_alternate_exclude = {repr(_loopfree_alternate_exclude)}')
        _route_preference = self.route_preference
        if _route_preference is not None:
            res.extend(_route_preference.prsrc('{self_name}.route_preference', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number, child_level_number)
    child_metric_style = yang.gdata.from_xml_opt_str(node, 'metric-style')
    yang.gdata.maybe_add(children, 'metric-style', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style, child_metric_style)
    child_loopfree_alternate_exclude = yang.gdata.from_xml_opt_bool(node, 'loopfree-alternate-exclude')
    yang.gdata.maybe_add(children, 'loopfree-alternate-exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude, child_loopfree_alternate_exclude)
    child_route_preference = yang.gdata.from_xml_opt_cnt(node, 'route-preference')
    yang.gdata.maybe_add(children, 'route-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference, child_route_preference)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options, child_trace_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(yang.adata.MNode):
    name: str
    admin_state: ?str
    instance_id: ?int
    net: list[str]
    level_capability: ?str
    max_ecmp_paths: ?int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp
    poi_tlv: ?bool
    iid_tlv: ?bool
    advertise_router_capability: ?bool
    prefix_attributes_tlv: ?bool
    export_policy: ?str
    hello_padding: ?str
    enable_csnp_on_p2p_links: ?bool
    attached_bit: srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit
    overload: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__isis__instance__transport
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart
    auto_cost: srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost
    loopfree_alternate: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication
    inter_level_propagation_policies: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies
    segment_routing: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing
    traffic_engineering: srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering
    interface: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__level

    mut def __init__(self, name: str, admin_state: ?str, instance_id: ?int, net: ?list[str]=None, level_capability: ?str, max_ecmp_paths: ?int, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp=None, poi_tlv: ?bool, iid_tlv: ?bool, advertise_router_capability: ?bool, prefix_attributes_tlv: ?bool, export_policy: ?str, hello_padding: ?str, enable_csnp_on_p2p_links: ?bool, attached_bit: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit=None, overload: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload=None, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__transport=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart=None, auto_cost: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost=None, loopfree_alternate: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication=None, inter_level_propagation_policies: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies=None, segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing=None, traffic_engineering: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering=None, interface: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]=[], level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.name = name
        self.admin_state = admin_state
        self.instance_id = instance_id
        self.net = net if net is not None else []
        self.level_capability = level_capability
        self.max_ecmp_paths = max_ecmp_paths
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()
        self.poi_tlv = poi_tlv
        self.iid_tlv = iid_tlv
        self.advertise_router_capability = advertise_router_capability
        self.prefix_attributes_tlv = prefix_attributes_tlv
        self.export_policy = export_policy
        self.hello_padding = hello_padding
        self.enable_csnp_on_p2p_links = enable_csnp_on_p2p_links
        self.attached_bit = attached_bit if attached_bit is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()
        self.overload = overload if overload is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()
        self.auto_cost = auto_cost if auto_cost is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()
        self.loopfree_alternate = loopfree_alternate if loopfree_alternate is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()
        self.inter_level_propagation_policies = inter_level_propagation_policies if inter_level_propagation_policies is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()
        self.segment_routing = segment_routing if segment_routing is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()
        self.traffic_engineering = traffic_engineering if traffic_engineering is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()
        self.interface = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(elements=interface)
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__level(elements=level)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _instance_id = self.instance_id
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('uint32', _instance_id)
        children['net'] = yang.gdata.LeafList('string', self.net)
        _level_capability = self.level_capability
        if _level_capability is not None:
            children['level-capability'] = yang.gdata.Leaf('enumeration', _level_capability)
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            children['max-ecmp-paths'] = yang.gdata.Leaf('uint8', _max_ecmp_paths)
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            children['poi-tlv'] = yang.gdata.Leaf('boolean', _poi_tlv)
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            children['iid-tlv'] = yang.gdata.Leaf('boolean', _iid_tlv)
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            children['advertise-router-capability'] = yang.gdata.Leaf('boolean', _advertise_router_capability)
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            children['prefix-attributes-tlv'] = yang.gdata.Leaf('boolean', _prefix_attributes_tlv)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            children['enable-csnp-on-p2p-links'] = yang.gdata.Leaf('boolean', _enable_csnp_on_p2p_links)
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            children['attached-bit'] = _attached_bit.to_gdata()
        _overload = self.overload
        if _overload is not None:
            children['overload'] = _overload.to_gdata()
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _auto_cost = self.auto_cost
        if _auto_cost is not None:
            children['auto-cost'] = _auto_cost.to_gdata()
        _loopfree_alternate = self.loopfree_alternate
        if _loopfree_alternate is not None:
            children['loopfree-alternate'] = _loopfree_alternate.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _inter_level_propagation_policies = self.inter_level_propagation_policies
        if _inter_level_propagation_policies is not None:
            children['inter-level-propagation-policies'] = _inter_level_propagation_policies.to_gdata()
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        _traffic_engineering = self.traffic_engineering
        if _traffic_engineering is not None:
            children['traffic-engineering'] = _traffic_engineering.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name=n.get_str('name'), admin_state=n.get_opt_str('admin-state'), instance_id=n.get_opt_int('instance-id'), net=n.get_opt_strs('net'), level_capability=n.get_opt_str('level-capability'), max_ecmp_paths=n.get_opt_int('max-ecmp-paths'), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')), poi_tlv=n.get_opt_bool('poi-tlv'), iid_tlv=n.get_opt_bool('iid-tlv'), advertise_router_capability=n.get_opt_bool('advertise-router-capability'), prefix_attributes_tlv=n.get_opt_bool('prefix-attributes-tlv'), export_policy=n.get_opt_str('export-policy'), hello_padding=n.get_opt_str('hello-padding'), enable_csnp_on_p2p_links=n.get_opt_bool('enable-csnp-on-p2p-links'), attached_bit=srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit.from_gdata(n.get_opt_cnt('attached-bit')), overload=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload.from_gdata(n.get_opt_cnt('overload')), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers.from_gdata(n.get_opt_cnt('timers')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options.from_gdata(n.get_opt_cnt('trace-options')), transport=srl_nokia_network_instance__network_instance__protocols__isis__instance__transport.from_gdata(n.get_opt_cnt('transport')), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), auto_cost=srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost.from_gdata(n.get_opt_cnt('auto-cost')), loopfree_alternate=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate.from_gdata(n.get_opt_cnt('loopfree-alternate')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication.from_gdata(n.get_opt_cnt('authentication')), inter_level_propagation_policies=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies.from_gdata(n.get_opt_cnt('inter-level-propagation-policies')), segment_routing=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing.from_gdata(n.get_opt_cnt('segment-routing')), traffic_engineering=srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering.from_gdata(n.get_opt_cnt('traffic-engineering')), interface=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface.from_gdata(n.get_opt_list('interface')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__level.from_gdata(n.get_opt_list('level')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance({repr(self.name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _instance_id = self.instance_id
        if _instance_id is not None:
            leaves.append('{self_name}.instance_id = {repr(_instance_id)}')
        _net = self.net
        if _net is not None:
            leaves.append('{self_name}.net = {repr(_net)}')
        _level_capability = self.level_capability
        if _level_capability is not None:
            leaves.append('{self_name}.level_capability = {repr(_level_capability)}')
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            leaves.append('{self_name}.max_ecmp_paths = {repr(_max_ecmp_paths)}')
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            leaves.append('{self_name}.poi_tlv = {repr(_poi_tlv)}')
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            leaves.append('{self_name}.iid_tlv = {repr(_iid_tlv)}')
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            leaves.append('{self_name}.advertise_router_capability = {repr(_advertise_router_capability)}')
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            leaves.append('{self_name}.prefix_attributes_tlv = {repr(_prefix_attributes_tlv)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            leaves.append('{self_name}.enable_csnp_on_p2p_links = {repr(_enable_csnp_on_p2p_links)}')
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            res.extend(_attached_bit.prsrc('{self_name}.attached_bit', False).splitlines())
        _overload = self.overload
        if _overload is not None:
            res.extend(_overload.prsrc('{self_name}.overload', False).splitlines())
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _auto_cost = self.auto_cost
        if _auto_cost is not None:
            res.extend(_auto_cost.prsrc('{self_name}.auto_cost', False).splitlines())
        _loopfree_alternate = self.loopfree_alternate
        if _loopfree_alternate is not None:
            res.extend(_loopfree_alternate.prsrc('{self_name}.loopfree_alternate', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _inter_level_propagation_policies = self.inter_level_propagation_policies
        if _inter_level_propagation_policies is not None:
            res.extend(_inter_level_propagation_policies.prsrc('{self_name}.inter_level_propagation_policies', False).splitlines())
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            res.extend(_segment_routing.prsrc('{self_name}.segment_routing', False).splitlines())
        _traffic_engineering = self.traffic_engineering
        if _traffic_engineering is not None:
            res.extend(_traffic_engineering.prsrc('{self_name}.traffic_engineering', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface element: {_element.to_gdata().key_str(['interface-name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.interface_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name, child_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state, child_admin_state)
    child_instance_id = yang.gdata.from_xml_opt_int(node, 'instance-id')
    yang.gdata.maybe_add(children, 'instance-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id, child_instance_id)
    child_net = yang.gdata.from_xml_opt_strs(node, 'net')
    yang.gdata.maybe_add(children, 'net', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net, child_net)
    child_level_capability = yang.gdata.from_xml_opt_str(node, 'level-capability')
    yang.gdata.maybe_add(children, 'level-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability, child_level_capability)
    child_max_ecmp_paths = yang.gdata.from_xml_opt_int(node, 'max-ecmp-paths')
    yang.gdata.maybe_add(children, 'max-ecmp-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths, child_max_ecmp_paths)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp, child_weighted_ecmp)
    child_poi_tlv = yang.gdata.from_xml_opt_bool(node, 'poi-tlv')
    yang.gdata.maybe_add(children, 'poi-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv, child_poi_tlv)
    child_iid_tlv = yang.gdata.from_xml_opt_bool(node, 'iid-tlv')
    yang.gdata.maybe_add(children, 'iid-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv, child_iid_tlv)
    child_advertise_router_capability = yang.gdata.from_xml_opt_bool(node, 'advertise-router-capability')
    yang.gdata.maybe_add(children, 'advertise-router-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability, child_advertise_router_capability)
    child_prefix_attributes_tlv = yang.gdata.from_xml_opt_bool(node, 'prefix-attributes-tlv')
    yang.gdata.maybe_add(children, 'prefix-attributes-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv, child_prefix_attributes_tlv)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy, child_export_policy)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding, child_hello_padding)
    child_enable_csnp_on_p2p_links = yang.gdata.from_xml_opt_bool(node, 'enable-csnp-on-p2p-links')
    yang.gdata.maybe_add(children, 'enable-csnp-on-p2p-links', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links, child_enable_csnp_on_p2p_links)
    child_attached_bit = yang.gdata.from_xml_opt_cnt(node, 'attached-bit')
    yang.gdata.maybe_add(children, 'attached-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit, child_attached_bit)
    child_overload = yang.gdata.from_xml_opt_cnt(node, 'overload')
    yang.gdata.maybe_add(children, 'overload', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload, child_overload)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers, child_timers)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options, child_trace_options)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport, child_transport)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast, child_ipv6_unicast)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart, child_graceful_restart)
    child_auto_cost = yang.gdata.from_xml_opt_cnt(node, 'auto-cost')
    yang.gdata.maybe_add(children, 'auto-cost', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost, child_auto_cost)
    child_loopfree_alternate = yang.gdata.from_xml_opt_cnt(node, 'loopfree-alternate')
    yang.gdata.maybe_add(children, 'loopfree-alternate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate, child_loopfree_alternate)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication, child_authentication)
    child_inter_level_propagation_policies = yang.gdata.from_xml_opt_cnt(node, 'inter-level-propagation-policies')
    yang.gdata.maybe_add(children, 'inter-level-propagation-policies', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies, child_inter_level_propagation_policies)
    child_segment_routing = yang.gdata.from_xml_opt_cnt(node, 'segment-routing')
    yang.gdata.maybe_add(children, 'segment-routing', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing, child_segment_routing)
    child_traffic_engineering = yang.gdata.from_xml_opt_cnt(node, 'traffic-engineering')
    yang.gdata.maybe_add(children, 'traffic-engineering', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering, child_traffic_engineering)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface, child_interface)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level, child_level)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis(yang.adata.MNode):
    non_stop_forwarding: srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding
    dynamic_label_block: ?str
    instance: srl_nokia_network_instance__network_instance__protocols__isis__instance

    mut def __init__(self, non_stop_forwarding: ?srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding=None, dynamic_label_block: ?str, instance: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.non_stop_forwarding = non_stop_forwarding if non_stop_forwarding is not None else srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()
        self.dynamic_label_block = dynamic_label_block
        self.instance = srl_nokia_network_instance__network_instance__protocols__isis__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _non_stop_forwarding = self.non_stop_forwarding
        if _non_stop_forwarding is not None:
            children['non-stop-forwarding'] = _non_stop_forwarding.to_gdata()
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis(non_stop_forwarding=srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding.from_gdata(n.get_opt_cnt('non-stop-forwarding')), dynamic_label_block=n.get_opt_str('dynamic-label-block'), instance=srl_nokia_network_instance__network_instance__protocols__isis__instance.from_gdata(n.get_opt_list('instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis()')
        leaves = []
        _non_stop_forwarding = self.non_stop_forwarding
        if _non_stop_forwarding is not None:
            res.extend(_non_stop_forwarding.prsrc('{self_name}.non_stop_forwarding', False).splitlines())
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            leaves.append('{self_name}.dynamic_label_block = {repr(_dynamic_label_block)}')
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_non_stop_forwarding = yang.gdata.from_xml_opt_cnt(node, 'non-stop-forwarding')
    yang.gdata.maybe_add(children, 'non-stop-forwarding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding, child_non_stop_forwarding)
    child_dynamic_label_block = yang.gdata.from_xml_opt_str(node, 'dynamic-label-block')
    yang.gdata.maybe_add(children, 'dynamic-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__dynamic_label_block, child_dynamic_label_block)
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance, child_instance)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

class srl_nokia_network_instance__network_instance__protocols(yang.adata.MNode):
    bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn
    bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn
    directly_connected: srl_nokia_network_instance__network_instance__protocols__directly_connected
    isis: ?srl_nokia_network_instance__network_instance__protocols__isis

    mut def __init__(self, bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn=None, directly_connected: ?srl_nokia_network_instance__network_instance__protocols__directly_connected=None, isis: ?srl_nokia_network_instance__network_instance__protocols__isis=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.bgp_evpn = bgp_evpn
        self.bgp_ipvpn = bgp_ipvpn
        self.directly_connected = directly_connected if directly_connected is not None else srl_nokia_network_instance__network_instance__protocols__directly_connected()
        self.isis = isis

    mut def create_bgp_evpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        self.bgp_evpn = res
        return res

    mut def create_bgp_ipvpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        self.bgp_ipvpn = res
        return res

    mut def create_isis(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis()
        self.isis = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            children['bgp-evpn'] = _bgp_evpn.to_gdata()
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            children['directly-connected'] = _directly_connected.to_gdata()
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols(bgp_evpn=srl_nokia_network_instance__network_instance__protocols__bgp_evpn.from_gdata(n.get_opt_cnt('bgp-evpn')), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn.from_gdata(n.get_opt_cnt('bgp-ipvpn')), directly_connected=srl_nokia_network_instance__network_instance__protocols__directly_connected.from_gdata(n.get_opt_cnt('directly-connected')), isis=srl_nokia_network_instance__network_instance__protocols__isis.from_gdata(n.get_opt_cnt('isis')))
        return srl_nokia_network_instance__network_instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols()')
        leaves = []
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn')
            res.append('bgp_evpn = {self_name}.create_bgp_evpn()')
            res.extend(_bgp_evpn.prsrc('bgp_evpn', False).splitlines())
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-ipvpn')
            res.append('bgp_ipvpn = {self_name}.create_bgp_ipvpn()')
            res.extend(_bgp_ipvpn.prsrc('bgp_ipvpn', False).splitlines())
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            res.extend(_directly_connected.prsrc('{self_name}.directly_connected', False).splitlines())
        _isis = self.isis
        if _isis is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis')
            res.append('isis = {self_name}.create_isis()')
            res.extend(_isis.prsrc('isis', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_evpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-evpn')
    yang.gdata.maybe_add(children, 'bgp-evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn, child_bgp_evpn)
    child_bgp_ipvpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-ipvpn')
    yang.gdata.maybe_add(children, 'bgp-ipvpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn, child_bgp_ipvpn)
    child_directly_connected = yang.gdata.from_xml_opt_cnt(node, 'directly-connected')
    yang.gdata.maybe_add(children, 'directly-connected', from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected, child_directly_connected)
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis', 'urn:nokia.com:srlinux:isis:isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_srl_nokia_network_instance__network_instance__protocols__isis, child_isis)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, maximum_entries: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.maximum_entries = maximum_entries
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(maximum_entries=n.get_opt_int('maximum-entries'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-limit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()')
        leaves = []
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            leaves.append('{self_name}.maximum_entries = {repr(_maximum_entries)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_entries = yang.gdata.from_xml_opt_int(node, 'maximum-entries')
    yang.gdata.maybe_add(children, 'maximum-entries', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__maximum_entries, child_maximum_entries)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-learning/aging')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-learning/aging'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: ?str
    aging: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str, aging: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.admin_state = admin_state
        self.aging = aging if aging is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _aging = self.aging
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(admin_state=n.get_opt_str('admin-state'), aging=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging.from_gdata(n.get_opt_cnt('aging')))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-learning')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _aging = self.aging
        if _aging is not None:
            res.extend(_aging.prsrc('{self_name}.aging', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-learning'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__admin_state, child_admin_state)
    child_aging = yang.gdata.from_xml_opt_cnt(node, 'aging')
    yang.gdata.maybe_add(children, 'aging', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging, child_aging)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(yang.adata.MNode):
    action_: ?str

    mut def __init__(self, action_: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.action_ = action_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(action_=n.get_opt_str('action'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-duplication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()')
        leaves = []
        _action_ = self.action_
        if _action_ is not None:
            leaves.append('{self_name}.action_ = {repr(_action_)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-duplication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_action_ = yang.gdata.from_xml_opt_str(node, 'action')
    yang.gdata.maybe_add(children, 'action', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication__action, child_action_)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: ?bool
    split_horizon_group: ?str
    mac_limit: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit
    mac_learning: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning
    mac_duplication: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool, split_horizon_group: ?str, mac_limit: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.discard_unknown_src_mac = discard_unknown_src_mac
        self.split_horizon_group = split_horizon_group
        self.mac_limit = mac_limit if mac_limit is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()
        self.mac_learning = mac_learning if mac_learning is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()
        self.mac_duplication = mac_duplication if mac_duplication is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__connection_point__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table(discard_unknown_src_mac=n.get_opt_bool('discard-unknown-src-mac'), split_horizon_group=n.get_opt_str('split-horizon-group'), mac_limit=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit.from_gdata(n.get_opt_cnt('mac-limit')), mac_learning=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning.from_gdata(n.get_opt_cnt('mac-learning')), mac_duplication=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication.from_gdata(n.get_opt_cnt('mac-duplication')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table()')
        leaves = []
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            leaves.append('{self_name}.discard_unknown_src_mac = {repr(_discard_unknown_src_mac)}')
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            leaves.append('{self_name}.split_horizon_group = {repr(_split_horizon_group)}')
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            res.extend(_mac_limit.prsrc('{self_name}.mac_limit', False).splitlines())
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            res.extend(_mac_learning.prsrc('{self_name}.mac_learning', False).splitlines())
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            res.extend(_mac_duplication.prsrc('{self_name}.mac_duplication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_discard_unknown_src_mac = yang.gdata.from_xml_opt_bool(node, 'discard-unknown-src-mac')
    yang.gdata.maybe_add(children, 'discard-unknown-src-mac', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__discard_unknown_src_mac, child_discard_unknown_src_mac)
    child_split_horizon_group = yang.gdata.from_xml_opt_str(node, 'split-horizon-group')
    yang.gdata.maybe_add(children, 'split-horizon-group', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__split_horizon_group, child_split_horizon_group)
    child_mac_limit = yang.gdata.from_xml_opt_cnt(node, 'mac-limit')
    yang.gdata.maybe_add(children, 'mac-limit', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit, child_mac_limit)
    child_mac_learning = yang.gdata.from_xml_opt_cnt(node, 'mac-learning')
    yang.gdata.maybe_add(children, 'mac-learning', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning, child_mac_learning)
    child_mac_duplication = yang.gdata.from_xml_opt_cnt(node, 'mac-duplication')
    yang.gdata.maybe_add(children, 'mac-duplication', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication, child_mac_duplication)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__connection_point_entry(yang.adata.MNode):
    name: str
    bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table

    mut def __init__(self, name: str, bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.bridge_table = bridge_table

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__connection_point__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point_entry:
        return srl_nokia_network_instance__network_instance__connection_point_entry(name=n.get_str('name'), bridge_table=srl_nokia_network_instance__network_instance__connection_point__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point({repr(self.name)})')
        leaves = []
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/connection-point/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__connection_point(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__connection_point_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'connection-point'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__connection_point_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__connection_point_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__connection_point_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__connection_point__name, child_name)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table, child_bridge_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__connection_point_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance_entry(yang.adata.MNode):
    name: str
    type: ?str
    admin_state: ?str
    description: ?str
    router_id: ?str
    mpls_forwarding: srl_nokia_network_instance__network_instance__mpls_forwarding
    ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding
    ip_load_balancing: srl_nokia_network_instance__network_instance__ip_load_balancing
    interface: srl_nokia_network_instance__network_instance__interface
    vxlan_interface: srl_nokia_network_instance__network_instance__vxlan_interface
    protocols: srl_nokia_network_instance__network_instance__protocols
    connection_point: srl_nokia_network_instance__network_instance__connection_point

    mut def __init__(self, name: str, type: ?str, admin_state: ?str, description: ?str, router_id: ?str, mpls_forwarding: ?srl_nokia_network_instance__network_instance__mpls_forwarding=None, ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding=None, ip_load_balancing: ?srl_nokia_network_instance__network_instance__ip_load_balancing=None, interface: list[srl_nokia_network_instance__network_instance__interface_entry]=[], vxlan_interface: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]=[], protocols: ?srl_nokia_network_instance__network_instance__protocols=None, connection_point: list[srl_nokia_network_instance__network_instance__connection_point_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.type = type
        self.admin_state = admin_state
        self.description = description
        self.router_id = router_id
        self.mpls_forwarding = mpls_forwarding if mpls_forwarding is not None else srl_nokia_network_instance__network_instance__mpls_forwarding()
        self.ip_forwarding = ip_forwarding
        self.ip_load_balancing = ip_load_balancing if ip_load_balancing is not None else srl_nokia_network_instance__network_instance__ip_load_balancing()
        self.interface = srl_nokia_network_instance__network_instance__interface(elements=interface)
        self.vxlan_interface = srl_nokia_network_instance__network_instance__vxlan_interface(elements=vxlan_interface)
        self.protocols = protocols if protocols is not None else srl_nokia_network_instance__network_instance__protocols()
        self.connection_point = srl_nokia_network_instance__network_instance__connection_point(elements=connection_point)

    mut def create_ip_forwarding(self):
        res = srl_nokia_network_instance__network_instance__ip_forwarding()
        self.ip_forwarding = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        _mpls_forwarding = self.mpls_forwarding
        if _mpls_forwarding is not None:
            children['mpls-forwarding'] = _mpls_forwarding.to_gdata()
        _ip_forwarding = self.ip_forwarding
        if _ip_forwarding is not None:
            children['ip-forwarding'] = _ip_forwarding.to_gdata()
        _ip_load_balancing = self.ip_load_balancing
        if _ip_load_balancing is not None:
            children['ip-load-balancing'] = _ip_load_balancing.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = _connection_point.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance_entry:
        return srl_nokia_network_instance__network_instance_entry(name=n.get_str('name'), type=n.get_opt_str('type'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), router_id=n.get_opt_str('router-id'), mpls_forwarding=srl_nokia_network_instance__network_instance__mpls_forwarding.from_gdata(n.get_opt_cnt('mpls-forwarding')), ip_forwarding=srl_nokia_network_instance__network_instance__ip_forwarding.from_gdata(n.get_opt_cnt('ip-forwarding')), ip_load_balancing=srl_nokia_network_instance__network_instance__ip_load_balancing.from_gdata(n.get_opt_cnt('ip-load-balancing')), interface=srl_nokia_network_instance__network_instance__interface.from_gdata(n.get_opt_list('interface')), vxlan_interface=srl_nokia_network_instance__network_instance__vxlan_interface.from_gdata(n.get_opt_list('vxlan-interface')), protocols=srl_nokia_network_instance__network_instance__protocols.from_gdata(n.get_opt_cnt('protocols')), connection_point=srl_nokia_network_instance__network_instance__connection_point.from_gdata(n.get_opt_list('connection-point')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance({repr(self.name)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _mpls_forwarding = self.mpls_forwarding
        if _mpls_forwarding is not None:
            res.extend(_mpls_forwarding.prsrc('{self_name}.mpls_forwarding', False).splitlines())
        _ip_forwarding = self.ip_forwarding
        if _ip_forwarding is not None:
            res.append('')
            res.append('# P-container: /network-instance/ip-forwarding')
            res.append('ip_forwarding = {self_name}.create_ip_forwarding()')
            res.extend(_ip_forwarding.prsrc('ip_forwarding', False).splitlines())
        _ip_load_balancing = self.ip_load_balancing
        if _ip_load_balancing is not None:
            res.extend(_ip_load_balancing.prsrc('{self_name}.ip_load_balancing', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _vxlan_interface = self.vxlan_interface
        for _element in _vxlan_interface.elements:
            res.append('')
            res.append("# List /network-instance/vxlan-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'vxlan_interface_element = {self_name}.vxlan_interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vxlan_interface_element', False, list_element=True).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        _connection_point = self.connection_point
        for _element in _connection_point.elements:
            res.append('')
            res.append("# List /network-instance/connection-point element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'connection_point_element = {self_name}.connection_point.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('connection_point_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'network-instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__name, child_name)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_network_instance__network_instance__type, child_type)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__description, child_description)
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_srl_nokia_network_instance__network_instance__router_id, child_router_id)
    child_mpls_forwarding = yang.gdata.from_xml_opt_cnt(node, 'mpls-forwarding')
    yang.gdata.maybe_add(children, 'mpls-forwarding', from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding, child_mpls_forwarding)
    child_ip_forwarding = yang.gdata.from_xml_opt_cnt(node, 'ip-forwarding')
    yang.gdata.maybe_add(children, 'ip-forwarding', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding, child_ip_forwarding)
    child_ip_load_balancing = yang.gdata.from_xml_opt_cnt(node, 'ip-load-balancing')
    yang.gdata.maybe_add(children, 'ip-load-balancing', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing, child_ip_load_balancing)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface, child_interface)
    child_vxlan_interface = yang.gdata.from_xml_opt_list(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface, child_vxlan_interface)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_srl_nokia_network_instance__network_instance__protocols, child_protocols)
    child_connection_point = yang.gdata.from_xml_opt_list(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

class root(yang.adata.MNode):
    system: srl_nokia_system__system
    platform: srl_nokia_platform__platform
    interface: srl_nokia_interfaces__interface
    network_instance: srl_nokia_network_instance__network_instance

    mut def __init__(self, system: ?srl_nokia_system__system=None, platform: ?srl_nokia_platform__platform=None, interface: list[srl_nokia_interfaces__interface_entry]=[], network_instance: list[srl_nokia_network_instance__network_instance_entry]=[]):
        self._ns = ''
        self.system = system if system is not None else srl_nokia_system__system()
        self.platform = platform if platform is not None else srl_nokia_platform__platform()
        self.interface = srl_nokia_interfaces__interface(elements=interface)
        self.network_instance = srl_nokia_network_instance__network_instance(elements=network_instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _platform = self.platform
        if _platform is not None:
            children['platform'] = _platform.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _network_instance = self.network_instance
        if _network_instance is not None:
            children['network-instance'] = _network_instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(system=srl_nokia_system__system.from_gdata(n.get_opt_cnt('system')), platform=srl_nokia_platform__platform.from_gdata(n.get_opt_cnt('platform')), interface=srl_nokia_interfaces__interface.from_gdata(n.get_opt_list('interface')), network_instance=srl_nokia_network_instance__network_instance.from_gdata(n.get_opt_list('network-instance')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _platform = self.platform
        if _platform is not None:
            res.extend(_platform.prsrc('{self_name}.platform', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _network_instance = self.network_instance
        for _element in _network_instance.elements:
            res.append('')
            res.append("# List /network-instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'network_instance_element = {self_name}.network_instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('network_instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system', 'urn:nokia.com:srlinux:general:system')
    yang.gdata.maybe_add(children, 'system', from_xml_srl_nokia_system__system, child_system)
    child_platform = yang.gdata.from_xml_opt_cnt(node, 'platform', 'urn:nokia.com:srlinux:chassis:platform')
    yang.gdata.maybe_add(children, 'platform', from_xml_srl_nokia_platform__platform, child_platform)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface', 'urn:nokia.com:srlinux:chassis:interfaces')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface, child_interface)
    child_network_instance = yang.gdata.from_xml_opt_list(node, 'network-instance', 'urn:nokia.com:srlinux:net-inst:network-instance')
    yang.gdata.maybe_add(children, 'network-instance', from_xml_srl_nokia_network_instance__network_instance, child_network_instance)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'urn:nokia.com:srlinux:chassis:interfaces',
    'urn:nokia.com:srlinux:chassis:platform',
    'urn:nokia.com:srlinux:chassis:system-name',
    'urn:nokia.com:srlinux:general:system',
    'urn:nokia.com:srlinux:isis:isis',
    'urn:nokia.com:srlinux:net-inst:network-instance',
}
