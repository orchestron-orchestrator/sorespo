import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


class srl_nokia_tunnel__tunnel(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:vxlan:tunnel', module='srl_nokia-tunnel')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel__tunnel:
        if n != None:
            return srl_nokia_tunnel__tunnel()
        return srl_nokia_tunnel__tunnel()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel')
            res.append('{self_name} = srl_nokia_tunnel__tunnel()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel__tunnel(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:vxlan:tunnel', module='srl_nokia-tunnel')

mut def from_xml_srl_nokia_system__system__trace_options(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_system__system__management(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__management:
        if n != None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/management')
            res.append('{self_name} = srl_nokia_system__system__management()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__output(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/output')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__output()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/output'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__output(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__input(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/input')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__input()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/input'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__input(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic(yang.adata.MNode):
    output: srl_nokia_system__system__control_plane_traffic__output
    input: srl_nokia_system__system__control_plane_traffic__input

    mut def __init__(self, output: ?srl_nokia_system__system__control_plane_traffic__output=None, input: ?srl_nokia_system__system__control_plane_traffic__input=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.output = output if output is not None else srl_nokia_system__system__control_plane_traffic__output()
        self.input = input if input is not None else srl_nokia_system__system__control_plane_traffic__input()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _output = self.output
        if _output is not None:
            children['output'] = _output.to_gdata()
        _input = self.input
        if _input is not None:
            children['input'] = _input.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_gdata(n.get_opt_cnt('output')), input=srl_nokia_system__system__control_plane_traffic__input.from_gdata(n.get_opt_cnt('input')))
        return srl_nokia_system__system__control_plane_traffic()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic()')
        leaves = []
        _output = self.output
        if _output is not None:
            res.extend(_output.prsrc('{self_name}.output', False).splitlines())
        _input = self.input
        if _input is not None:
            res.extend(_input.prsrc('{self_name}.input', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_output = yang.gdata.from_xml_opt_cnt(node, 'output')
    yang.gdata.maybe_add(children, 'output', from_xml_srl_nokia_system__system__control_plane_traffic__output, child_output)
    child_input = yang.gdata.from_xml_opt_cnt(node, 'input')
    yang.gdata.maybe_add(children, 'input', from_xml_srl_nokia_system__system__control_plane_traffic__input, child_input)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__protocols__bgp__restart_max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_system__system__protocols__bgp(yang.adata.MNode):
    restart_max_wait: ?int

    mut def __init__(self, restart_max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.restart_max_wait = restart_max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restart_max_wait = self.restart_max_wait
        if _restart_max_wait is not None:
            children['restart-max-wait'] = yang.gdata.Leaf('uint16', _restart_max_wait)
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_system__system__protocols__bgp:
        if n != None:
            return srl_nokia_system__system__protocols__bgp(restart_max_wait=n.get_opt_int('restart-max-wait'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/protocols/bgp')
            res.append('{self_name} = srl_nokia_system__system__protocols__bgp()')
        leaves = []
        _restart_max_wait = self.restart_max_wait
        if _restart_max_wait is not None:
            leaves.append('{self_name}.restart_max_wait = {repr(_restart_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_restart_max_wait = yang.gdata.from_xml_opt_int(node, 'restart-max-wait')
    yang.gdata.maybe_add(children, 'restart-max-wait', from_xml_srl_nokia_system__system__protocols__bgp__restart_max_wait, child_restart_max_wait)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

class srl_nokia_system__system__protocols(yang.adata.MNode):
    bgp: ?srl_nokia_system__system__protocols__bgp

    mut def __init__(self, bgp: ?srl_nokia_system__system__protocols__bgp=None):
        self._ns = 'urn:nokia.com:srlinux:general:system-protocols'
        self.bgp = bgp

    mut def create_bgp(self):
        res = srl_nokia_system__system__protocols__bgp()
        self.bgp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system-protocols', module='srl_nokia-system-protocols')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__protocols:
        if n != None:
            return srl_nokia_system__system__protocols(bgp=srl_nokia_system__system__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')))
        return srl_nokia_system__system__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/protocols')
            res.append('{self_name} = srl_nokia_system__system__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.append('')
            res.append('# P-container: /system/protocols/bgp')
            res.append('bgp = {self_name}.create_bgp()')
            res.extend(_bgp.prsrc('bgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp', 'urn:nokia.com:srlinux:bgp:bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_srl_nokia_system__system__protocols__bgp, child_bgp)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system-protocols', module='srl_nokia-system-protocols')

mut def from_xml_srl_nokia_system__system__name__domain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_system__system__name__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_system__system__name(yang.adata.MNode):
    domain_name: ?str
    host_name: ?str

    mut def __init__(self, domain_name: ?str, host_name: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:system-name'
        self.domain_name = domain_name
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _domain_name = self.domain_name
        if _domain_name is not None:
            children['domain-name'] = yang.gdata.Leaf('string', _domain_name)
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__name:
        if n != None:
            return srl_nokia_system__system__name(domain_name=n.get_opt_str('domain-name'), host_name=n.get_opt_str('host-name'))
        return srl_nokia_system__system__name()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/name')
            res.append('{self_name} = srl_nokia_system__system__name()')
        leaves = []
        _domain_name = self.domain_name
        if _domain_name is not None:
            leaves.append('{self_name}.domain_name = {repr(_domain_name)}')
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/name'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__name(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_domain_name = yang.gdata.from_xml_opt_str(node, 'domain-name')
    yang.gdata.maybe_add(children, 'domain-name', from_xml_srl_nokia_system__system__name__domain_name, child_domain_name)
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_srl_nokia_system__system__name__host_name, child_host_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

class srl_nokia_system__system(yang.adata.MNode):
    trace_options: list[str]
    management: srl_nokia_system__system__management
    control_plane_traffic: srl_nokia_system__system__control_plane_traffic
    protocols: srl_nokia_system__system__protocols
    name: srl_nokia_system__system__name

    mut def __init__(self, trace_options: ?list[str]=None, management: ?srl_nokia_system__system__management=None, control_plane_traffic: ?srl_nokia_system__system__control_plane_traffic=None, protocols: ?srl_nokia_system__system__protocols=None, name: ?srl_nokia_system__system__name=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.trace_options = trace_options if trace_options is not None else []
        self.management = management if management is not None else srl_nokia_system__system__management()
        self.control_plane_traffic = control_plane_traffic if control_plane_traffic is not None else srl_nokia_system__system__control_plane_traffic()
        self.protocols = protocols if protocols is not None else srl_nokia_system__system__protocols()
        self.name = name if name is not None else srl_nokia_system__system__name()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace-options'] = yang.gdata.LeafList('enumeration', self.trace_options)
        _management = self.management
        if _management is not None:
            children['management'] = _management.to_gdata()
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system:
        if n != None:
            return srl_nokia_system__system(trace_options=n.get_opt_strs('trace-options'), management=srl_nokia_system__system__management.from_gdata(n.get_opt_cnt('management')), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_gdata(n.get_opt_cnt('control-plane-traffic')), protocols=srl_nokia_system__system__protocols.from_gdata(n.get_opt_cnt('protocols')), name=srl_nokia_system__system__name.from_gdata(n.get_opt_cnt('name')))
        return srl_nokia_system__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system')
            res.append('{self_name} = srl_nokia_system__system()')
        leaves = []
        _trace_options = self.trace_options
        if _trace_options is not None:
            leaves.append('{self_name}.trace_options = {repr(_trace_options)}')
        _management = self.management
        if _management is not None:
            res.extend(_management.prsrc('{self_name}.management', False).splitlines())
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            res.extend(_control_plane_traffic.prsrc('{self_name}.control_plane_traffic', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        _name = self.name
        if _name is not None:
            res.extend(_name.prsrc('{self_name}.name', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace_options = yang.gdata.from_xml_opt_strs(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_system__system__trace_options, child_trace_options)
    child_management = yang.gdata.from_xml_opt_cnt(node, 'management')
    yang.gdata.maybe_add(children, 'management', from_xml_srl_nokia_system__system__management, child_management)
    child_control_plane_traffic = yang.gdata.from_xml_opt_cnt(node, 'control-plane-traffic')
    yang.gdata.maybe_add(children, 'control-plane-traffic', from_xml_srl_nokia_system__system__control_plane_traffic, child_control_plane_traffic)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols', 'urn:nokia.com:srlinux:general:system-protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_srl_nokia_system__system__protocols, child_protocols)
    child_name = yang.gdata.from_xml_opt_cnt(node, 'name', 'urn:nokia.com:srlinux:chassis:system-name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_system__system__name, child_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

class srl_nokia_platform__platform(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:chassis:platform'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform:
        if n != None:
            return srl_nokia_platform__platform()
        return srl_nokia_platform__platform()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /platform')
            res.append('{self_name} = srl_nokia_platform__platform()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /platform'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_platform__platform(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

mut def from_xml_srl_nokia_interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__num_physical_channels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_interfaces__interface__breakout_mode__num_breakout_ports(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__breakout_mode__breakout_port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__breakout_mode(yang.adata.MNode):
    num_breakout_ports: ?str
    breakout_port_speed: ?str

    mut def __init__(self, num_breakout_ports: ?str, breakout_port_speed: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.num_breakout_ports = num_breakout_ports
        self.breakout_port_speed = breakout_port_speed

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _num_breakout_ports = self.num_breakout_ports
        if _num_breakout_ports is not None:
            children['num-breakout-ports'] = yang.gdata.Leaf('enumeration', _num_breakout_ports)
        _breakout_port_speed = self.breakout_port_speed
        if _breakout_port_speed is not None:
            children['breakout-port-speed'] = yang.gdata.Leaf('enumeration', _breakout_port_speed)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__breakout_mode:
        if n != None:
            return srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports=n.get_opt_str('num-breakout-ports'), breakout_port_speed=n.get_opt_str('breakout-port-speed'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/breakout-mode')
            res.append('{self_name} = srl_nokia_interfaces__interface__breakout_mode()')
        leaves = []
        _num_breakout_ports = self.num_breakout_ports
        if _num_breakout_ports is not None:
            leaves.append('{self_name}.num_breakout_ports = {repr(_num_breakout_ports)}')
        _breakout_port_speed = self.breakout_port_speed
        if _breakout_port_speed is not None:
            leaves.append('{self_name}.breakout_port_speed = {repr(_breakout_port_speed)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/breakout-mode'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__breakout_mode(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_num_breakout_ports = yang.gdata.from_xml_opt_str(node, 'num-breakout-ports')
    yang.gdata.maybe_add(children, 'num-breakout-ports', from_xml_srl_nokia_interfaces__interface__breakout_mode__num_breakout_ports, child_num_breakout_ports)
    child_breakout_port_speed = yang.gdata.from_xml_opt_str(node, 'breakout-port-speed')
    yang.gdata.maybe_add(children, 'breakout-port-speed', from_xml_srl_nokia_interfaces__interface__breakout_mode__breakout_port_speed, child_breakout_port_speed)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__loopback_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__swap_src_dst_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__functional_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__tx_laser(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__ddm_events(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__transceiver__forward_error_correction(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__transceiver(yang.adata.MNode):
    functional_type: ?str
    tx_laser: ?bool
    ddm_events: ?bool
    forward_error_correction: ?str

    mut def __init__(self, functional_type: ?str, tx_laser: ?bool, ddm_events: ?bool, forward_error_correction: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.functional_type = functional_type
        self.tx_laser = tx_laser
        self.ddm_events = ddm_events
        self.forward_error_correction = forward_error_correction

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _functional_type = self.functional_type
        if _functional_type is not None:
            children['functional-type'] = yang.gdata.Leaf('identityref', _functional_type)
        _tx_laser = self.tx_laser
        if _tx_laser is not None:
            children['tx-laser'] = yang.gdata.Leaf('boolean', _tx_laser)
        _ddm_events = self.ddm_events
        if _ddm_events is not None:
            children['ddm-events'] = yang.gdata.Leaf('boolean', _ddm_events)
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            children['forward-error-correction'] = yang.gdata.Leaf('enumeration', _forward_error_correction)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__transceiver:
        if n != None:
            return srl_nokia_interfaces__interface__transceiver(functional_type=n.get_opt_str('functional-type'), tx_laser=n.get_opt_bool('tx-laser'), ddm_events=n.get_opt_bool('ddm-events'), forward_error_correction=n.get_opt_str('forward-error-correction'))
        return srl_nokia_interfaces__interface__transceiver()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/transceiver')
            res.append('{self_name} = srl_nokia_interfaces__interface__transceiver()')
        leaves = []
        _functional_type = self.functional_type
        if _functional_type is not None:
            leaves.append('{self_name}.functional_type = {repr(_functional_type)}')
        _tx_laser = self.tx_laser
        if _tx_laser is not None:
            leaves.append('{self_name}.tx_laser = {repr(_tx_laser)}')
        _ddm_events = self.ddm_events
        if _ddm_events is not None:
            leaves.append('{self_name}.ddm_events = {repr(_ddm_events)}')
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            leaves.append('{self_name}.forward_error_correction = {repr(_forward_error_correction)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/transceiver'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__transceiver(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_functional_type = yang.gdata.from_xml_opt_str(node, 'functional-type')
    yang.gdata.maybe_add(children, 'functional-type', from_xml_srl_nokia_interfaces__interface__transceiver__functional_type, child_functional_type)
    child_tx_laser = yang.gdata.from_xml_opt_bool(node, 'tx-laser')
    yang.gdata.maybe_add(children, 'tx-laser', from_xml_srl_nokia_interfaces__interface__transceiver__tx_laser, child_tx_laser)
    child_ddm_events = yang.gdata.from_xml_opt_bool(node, 'ddm-events')
    yang.gdata.maybe_add(children, 'ddm-events', from_xml_srl_nokia_interfaces__interface__transceiver__ddm_events, child_ddm_events)
    child_forward_error_correction = yang.gdata.from_xml_opt_str(node, 'forward-error-correction')
    yang.gdata.maybe_add(children, 'forward-error-correction', from_xml_srl_nokia_interfaces__interface__transceiver__forward_error_correction, child_forward_error_correction)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__aggregate_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__forwarding_viable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__auto_negotiate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__duplex_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__dac_link_training(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_interfaces__interface__ethernet__flow_control(yang.adata.MNode):
    receive: ?bool
    transmit: ?bool

    mut def __init__(self, receive: ?bool, transmit: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.receive = receive
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('boolean', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__flow_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__flow_control(receive=n.get_opt_bool('receive'), transmit=n.get_opt_bool('transmit'))
        return srl_nokia_interfaces__interface__ethernet__flow_control()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/flow-control')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__flow_control()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _transmit = self.transmit
        if _transmit is not None:
            leaves.append('{self_name}.transmit = {repr(_transmit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/flow-control'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__flow_control(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_bool(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__receive, child_receive)
    child_transmit = yang.gdata.from_xml_opt_bool(node, 'transmit')
    yang.gdata.maybe_add(children, 'transmit', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control__transmit, child_transmit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__lacp_port_priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__port_speed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__mac_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction__fec_option(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__forward_error_correction(yang.adata.MNode):
    fec_option: ?str

    mut def __init__(self, fec_option: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.fec_option = fec_option

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _fec_option = self.fec_option
        if _fec_option is not None:
            children['fec-option'] = yang.gdata.Leaf('enumeration', _fec_option)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__forward_error_correction:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__forward_error_correction(fec_option=n.get_opt_str('fec-option'))
        return srl_nokia_interfaces__interface__ethernet__forward_error_correction()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/forward-error-correction')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__forward_error_correction()')
        leaves = []
        _fec_option = self.fec_option
        if _fec_option is not None:
            leaves.append('{self_name}.fec_option = {repr(_fec_option)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/forward-error-correction'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_fec_option = yang.gdata.from_xml_opt_str(node, 'fec-option')
    yang.gdata.maybe_add(children, 'fec-option', from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction__fec_option, child_fec_option)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_asymmetry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping__disable_ip_timestamping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_interfaces__interface__ethernet__ptp_timestamping(yang.adata.MNode):
    disable_ip_timestamping: ?bool

    mut def __init__(self, disable_ip_timestamping: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.disable_ip_timestamping = disable_ip_timestamping

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable_ip_timestamping = self.disable_ip_timestamping
        if _disable_ip_timestamping is not None:
            children['disable-ip-timestamping'] = yang.gdata.Leaf('boolean', _disable_ip_timestamping)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__ptp_timestamping(disable_ip_timestamping=n.get_opt_bool('disable-ip-timestamping'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/ptp-timestamping')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__ptp_timestamping()')
        leaves = []
        _disable_ip_timestamping = self.disable_ip_timestamping
        if _disable_ip_timestamping is not None:
            leaves.append('{self_name}.disable_ip_timestamping = {repr(_disable_ip_timestamping)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/ptp-timestamping'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable_ip_timestamping = yang.gdata.from_xml_opt_bool(node, 'disable-ip-timestamping')
    yang.gdata.maybe_add(children, 'disable-ip-timestamping', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping__disable_ip_timestamping, child_disable_ip_timestamping)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__standby_signaling(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__link_loss_forwarding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__reload_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__up(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__down(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__hold_time(yang.adata.MNode):
    up: ?int
    down: ?int

    mut def __init__(self, up: ?int, down: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.up = up
        self.down = down

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _up = self.up
        if _up is not None:
            children['up'] = yang.gdata.Leaf('uint32', _up)
        _down = self.down
        if _down is not None:
            children['down'] = yang.gdata.Leaf('uint32', _down)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__hold_time:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__hold_time(up=n.get_opt_int('up'), down=n.get_opt_int('down'))
        return srl_nokia_interfaces__interface__ethernet__hold_time()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/hold-time')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__hold_time()')
        leaves = []
        _up = self.up
        if _up is not None:
            leaves.append('{self_name}.up = {repr(_up)}')
        _down = self.down
        if _down is not None:
            leaves.append('{self_name}.down = {repr(_down)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/hold-time'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__hold_time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_up = yang.gdata.from_xml_opt_int(node, 'up')
    yang.gdata.maybe_add(children, 'up', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__up, child_up)
    child_down = yang.gdata.from_xml_opt_int(node, 'down')
    yang.gdata.maybe_add(children, 'down', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time__down, child_down)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor/signal-degrade')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor/signal-degrade'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade__multiplier, child_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor/signal-failure')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor/signal-failure'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure__multiplier, child_multiplier)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__crc_monitor(yang.adata.MNode):
    admin_state: ?str
    window_size: ?int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure

    mut def __init__(self, admin_state: ?str, window_size: ?int, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.window_size = window_size
        self.signal_degrade = signal_degrade if signal_degrade is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade()
        self.signal_failure = signal_failure if signal_failure is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _window_size = self.window_size
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__crc_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__crc_monitor(admin_state=n.get_opt_str('admin-state'), window_size=n.get_opt_int('window-size'), signal_degrade=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade.from_gdata(n.get_opt_cnt('signal-degrade')), signal_failure=srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure.from_gdata(n.get_opt_cnt('signal-failure')))
        return srl_nokia_interfaces__interface__ethernet__crc_monitor()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/crc-monitor')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__crc_monitor()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _window_size = self.window_size
        if _window_size is not None:
            leaves.append('{self_name}.window_size = {repr(_window_size)}')
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            res.extend(_signal_degrade.prsrc('{self_name}.signal_degrade', False).splitlines())
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            res.extend(_signal_failure.prsrc('{self_name}.signal_failure', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/crc-monitor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__admin_state, child_admin_state)
    child_window_size = yang.gdata.from_xml_opt_int(node, 'window-size')
    yang.gdata.maybe_add(children, 'window-size', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__window_size, child_window_size)
    child_signal_degrade = yang.gdata.from_xml_opt_cnt(node, 'signal-degrade')
    yang.gdata.maybe_add(children, 'signal-degrade', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_degrade, child_signal_degrade)
    child_signal_failure = yang.gdata.from_xml_opt_cnt(node, 'signal-failure')
    yang.gdata.maybe_add(children, 'signal-failure', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor__signal_failure, child_signal_failure)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__window_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor/signal-degrade')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor/signal-degrade'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade__multiplier, child_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__exponent(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(yang.adata.MNode):
    exponent: ?int
    multiplier: ?int

    mut def __init__(self, exponent: ?int, multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.exponent = exponent
        self.multiplier = multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _exponent = self.exponent
        if _exponent is not None:
            children['exponent'] = yang.gdata.Leaf('uint32', _exponent)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('uint32', _multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(exponent=n.get_opt_int('exponent'), multiplier=n.get_opt_int('multiplier'))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor/signal-failure')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()')
        leaves = []
        _exponent = self.exponent
        if _exponent is not None:
            leaves.append('{self_name}.exponent = {repr(_exponent)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor/signal-failure'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_exponent = yang.gdata.from_xml_opt_int(node, 'exponent')
    yang.gdata.maybe_add(children, 'exponent', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__exponent, child_exponent)
    child_multiplier = yang.gdata.from_xml_opt_int(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure__multiplier, child_multiplier)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__symbol_monitor(yang.adata.MNode):
    admin_state: ?str
    window_size: ?int
    signal_degrade: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade
    signal_failure: srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure

    mut def __init__(self, admin_state: ?str, window_size: ?int, signal_degrade: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade=None, signal_failure: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.window_size = window_size
        self.signal_degrade = signal_degrade if signal_degrade is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade()
        self.signal_failure = signal_failure if signal_failure is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _window_size = self.window_size
        if _window_size is not None:
            children['window-size'] = yang.gdata.Leaf('uint32', _window_size)
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            children['signal-degrade'] = _signal_degrade.to_gdata()
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            children['signal-failure'] = _signal_failure.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__symbol_monitor:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__symbol_monitor(admin_state=n.get_opt_str('admin-state'), window_size=n.get_opt_int('window-size'), signal_degrade=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade.from_gdata(n.get_opt_cnt('signal-degrade')), signal_failure=srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure.from_gdata(n.get_opt_cnt('signal-failure')))
        return srl_nokia_interfaces__interface__ethernet__symbol_monitor()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/symbol-monitor')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__symbol_monitor()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _window_size = self.window_size
        if _window_size is not None:
            leaves.append('{self_name}.window_size = {repr(_window_size)}')
        _signal_degrade = self.signal_degrade
        if _signal_degrade is not None:
            res.extend(_signal_degrade.prsrc('{self_name}.signal_degrade', False).splitlines())
        _signal_failure = self.signal_failure
        if _signal_failure is not None:
            res.extend(_signal_failure.prsrc('{self_name}.signal_failure', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/symbol-monitor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__admin_state, child_admin_state)
    child_window_size = yang.gdata.from_xml_opt_int(node, 'window-size')
    yang.gdata.maybe_add(children, 'window-size', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__window_size, child_window_size)
    child_signal_degrade = yang.gdata.from_xml_opt_cnt(node, 'signal-degrade')
    yang.gdata.maybe_add(children, 'signal-degrade', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_degrade, child_signal_degrade)
    child_signal_failure = yang.gdata.from_xml_opt_cnt(node, 'signal-failure')
    yang.gdata.maybe_add(children, 'signal-failure', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor__signal_failure, child_signal_failure)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(yang.adata.MNode):
    admin_state: ?str
    half_life: ?int
    max_suppress_time: ?int
    reuse_threshold: ?int
    suppress_threshold: ?int

    mut def __init__(self, admin_state: ?str, half_life: ?int, max_suppress_time: ?int, reuse_threshold: ?int, suppress_threshold: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.half_life = half_life
        self.max_suppress_time = max_suppress_time
        self.reuse_threshold = reuse_threshold
        self.suppress_threshold = suppress_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _half_life = self.half_life
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint32', _half_life)
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint32', _max_suppress_time)
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint32', _reuse_threshold)
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint32', _suppress_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__exponential_port_dampening:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(admin_state=n.get_opt_str('admin-state'), half_life=n.get_opt_int('half-life'), max_suppress_time=n.get_opt_int('max-suppress-time'), reuse_threshold=n.get_opt_int('reuse-threshold'), suppress_threshold=n.get_opt_int('suppress-threshold'))
        return srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/exponential-port-dampening')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _half_life = self.half_life
        if _half_life is not None:
            leaves.append('{self_name}.half_life = {repr(_half_life)}')
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            leaves.append('{self_name}.max_suppress_time = {repr(_max_suppress_time)}')
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            leaves.append('{self_name}.reuse_threshold = {repr(_reuse_threshold)}')
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            leaves.append('{self_name}.suppress_threshold = {repr(_suppress_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/exponential-port-dampening'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__admin_state, child_admin_state)
    child_half_life = yang.gdata.from_xml_opt_int(node, 'half-life')
    yang.gdata.maybe_add(children, 'half-life', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__half_life, child_half_life)
    child_max_suppress_time = yang.gdata.from_xml_opt_int(node, 'max-suppress-time')
    yang.gdata.maybe_add(children, 'max-suppress-time', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__max_suppress_time, child_max_suppress_time)
    child_reuse_threshold = yang.gdata.from_xml_opt_int(node, 'reuse-threshold')
    yang.gdata.maybe_add(children, 'reuse-threshold', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__reuse_threshold, child_reuse_threshold)
    child_suppress_threshold = yang.gdata.from_xml_opt_int(node, 'suppress-threshold')
    yang.gdata.maybe_add(children, 'suppress-threshold', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening__suppress_threshold, child_suppress_threshold)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__units(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__broadcast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__multicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__unknown_unicast_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__rising_threshold_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__storm_control(yang.adata.MNode):
    units: ?str
    broadcast_rate: ?int
    multicast_rate: ?int
    unknown_unicast_rate: ?int
    rising_threshold_action: ?str

    mut def __init__(self, units: ?str, broadcast_rate: ?int, multicast_rate: ?int, unknown_unicast_rate: ?int, rising_threshold_action: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.units = units
        self.broadcast_rate = broadcast_rate
        self.multicast_rate = multicast_rate
        self.unknown_unicast_rate = unknown_unicast_rate
        self.rising_threshold_action = rising_threshold_action

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _units = self.units
        if _units is not None:
            children['units'] = yang.gdata.Leaf('enumeration', _units)
        _broadcast_rate = self.broadcast_rate
        if _broadcast_rate is not None:
            children['broadcast-rate'] = yang.gdata.Leaf('uint32', _broadcast_rate)
        _multicast_rate = self.multicast_rate
        if _multicast_rate is not None:
            children['multicast-rate'] = yang.gdata.Leaf('uint32', _multicast_rate)
        _unknown_unicast_rate = self.unknown_unicast_rate
        if _unknown_unicast_rate is not None:
            children['unknown-unicast-rate'] = yang.gdata.Leaf('uint32', _unknown_unicast_rate)
        _rising_threshold_action = self.rising_threshold_action
        if _rising_threshold_action is not None:
            children['rising-threshold-action'] = yang.gdata.Leaf('enumeration', _rising_threshold_action)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__storm_control:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__storm_control(units=n.get_opt_str('units'), broadcast_rate=n.get_opt_int('broadcast-rate'), multicast_rate=n.get_opt_int('multicast-rate'), unknown_unicast_rate=n.get_opt_int('unknown-unicast-rate'), rising_threshold_action=n.get_opt_str('rising-threshold-action'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/storm-control')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__storm_control()')
        leaves = []
        _units = self.units
        if _units is not None:
            leaves.append('{self_name}.units = {repr(_units)}')
        _broadcast_rate = self.broadcast_rate
        if _broadcast_rate is not None:
            leaves.append('{self_name}.broadcast_rate = {repr(_broadcast_rate)}')
        _multicast_rate = self.multicast_rate
        if _multicast_rate is not None:
            leaves.append('{self_name}.multicast_rate = {repr(_multicast_rate)}')
        _unknown_unicast_rate = self.unknown_unicast_rate
        if _unknown_unicast_rate is not None:
            leaves.append('{self_name}.unknown_unicast_rate = {repr(_unknown_unicast_rate)}')
        _rising_threshold_action = self.rising_threshold_action
        if _rising_threshold_action is not None:
            leaves.append('{self_name}.rising_threshold_action = {repr(_rising_threshold_action)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/storm-control'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__storm_control(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_units = yang.gdata.from_xml_opt_str(node, 'units')
    yang.gdata.maybe_add(children, 'units', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__units, child_units)
    child_broadcast_rate = yang.gdata.from_xml_opt_int(node, 'broadcast-rate')
    yang.gdata.maybe_add(children, 'broadcast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__broadcast_rate, child_broadcast_rate)
    child_multicast_rate = yang.gdata.from_xml_opt_int(node, 'multicast-rate')
    yang.gdata.maybe_add(children, 'multicast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__multicast_rate, child_multicast_rate)
    child_unknown_unicast_rate = yang.gdata.from_xml_opt_int(node, 'unknown-unicast-rate')
    yang.gdata.maybe_add(children, 'unknown-unicast-rate', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__unknown_unicast_rate, child_unknown_unicast_rate)
    child_rising_threshold_action = yang.gdata.from_xml_opt_str(node, 'rising-threshold-action')
    yang.gdata.maybe_add(children, 'rising-threshold-action', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control__rising_threshold_action, child_rising_threshold_action)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__ethernet__synce__ssm(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet__synce__ssm:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce__ssm(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_interfaces__interface__ethernet__synce__ssm()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/synce/ssm')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__synce__ssm()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/synce/ssm'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__ethernet__synce(yang.adata.MNode):
    ssm: srl_nokia_interfaces__interface__ethernet__synce__ssm

    mut def __init__(self, ssm: ?srl_nokia_interfaces__interface__ethernet__synce__ssm=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ssm = ssm if ssm is not None else srl_nokia_interfaces__interface__ethernet__synce__ssm()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ssm = self.ssm
        if _ssm is not None:
            children['ssm'] = _ssm.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__ethernet__synce:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet__synce(ssm=srl_nokia_interfaces__interface__ethernet__synce__ssm.from_gdata(n.get_opt_cnt('ssm')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet/synce')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet__synce()')
        leaves = []
        _ssm = self.ssm
        if _ssm is not None:
            res.extend(_ssm.prsrc('{self_name}.ssm', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet/synce'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet__synce(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ssm = yang.gdata.from_xml_opt_cnt(node, 'ssm')
    yang.gdata.maybe_add(children, 'ssm', from_xml_srl_nokia_interfaces__interface__ethernet__synce__ssm, child_ssm)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface__ethernet(yang.adata.MNode):
    aggregate_id: ?str
    forwarding_viable: ?bool
    auto_negotiate: ?bool
    duplex_mode: ?str
    dac_link_training: ?bool
    flow_control: srl_nokia_interfaces__interface__ethernet__flow_control
    lacp_port_priority: ?int
    port_speed: ?str
    mac_address: ?str
    forward_error_correction: srl_nokia_interfaces__interface__ethernet__forward_error_correction
    ptp_asymmetry: ?int
    ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping
    standby_signaling: ?str
    link_loss_forwarding: ?bool
    reload_delay: ?int
    hold_time: srl_nokia_interfaces__interface__ethernet__hold_time
    crc_monitor: srl_nokia_interfaces__interface__ethernet__crc_monitor
    symbol_monitor: srl_nokia_interfaces__interface__ethernet__symbol_monitor
    exponential_port_dampening: srl_nokia_interfaces__interface__ethernet__exponential_port_dampening
    storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control
    synce: ?srl_nokia_interfaces__interface__ethernet__synce

    mut def __init__(self, aggregate_id: ?str, forwarding_viable: ?bool, auto_negotiate: ?bool, duplex_mode: ?str, dac_link_training: ?bool, flow_control: ?srl_nokia_interfaces__interface__ethernet__flow_control=None, lacp_port_priority: ?int, port_speed: ?str, mac_address: ?str, forward_error_correction: ?srl_nokia_interfaces__interface__ethernet__forward_error_correction=None, ptp_asymmetry: ?int, ptp_timestamping: ?srl_nokia_interfaces__interface__ethernet__ptp_timestamping=None, standby_signaling: ?str, link_loss_forwarding: ?bool, reload_delay: ?int, hold_time: ?srl_nokia_interfaces__interface__ethernet__hold_time=None, crc_monitor: ?srl_nokia_interfaces__interface__ethernet__crc_monitor=None, symbol_monitor: ?srl_nokia_interfaces__interface__ethernet__symbol_monitor=None, exponential_port_dampening: ?srl_nokia_interfaces__interface__ethernet__exponential_port_dampening=None, storm_control: ?srl_nokia_interfaces__interface__ethernet__storm_control=None, synce: ?srl_nokia_interfaces__interface__ethernet__synce=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.aggregate_id = aggregate_id
        self.forwarding_viable = forwarding_viable
        self.auto_negotiate = auto_negotiate
        self.duplex_mode = duplex_mode
        self.dac_link_training = dac_link_training
        self.flow_control = flow_control if flow_control is not None else srl_nokia_interfaces__interface__ethernet__flow_control()
        self.lacp_port_priority = lacp_port_priority
        self.port_speed = port_speed
        self.mac_address = mac_address
        self.forward_error_correction = forward_error_correction if forward_error_correction is not None else srl_nokia_interfaces__interface__ethernet__forward_error_correction()
        self.ptp_asymmetry = ptp_asymmetry
        self.ptp_timestamping = ptp_timestamping
        self.standby_signaling = standby_signaling
        self.link_loss_forwarding = link_loss_forwarding
        self.reload_delay = reload_delay
        self.hold_time = hold_time if hold_time is not None else srl_nokia_interfaces__interface__ethernet__hold_time()
        self.crc_monitor = crc_monitor if crc_monitor is not None else srl_nokia_interfaces__interface__ethernet__crc_monitor()
        self.symbol_monitor = symbol_monitor if symbol_monitor is not None else srl_nokia_interfaces__interface__ethernet__symbol_monitor()
        self.exponential_port_dampening = exponential_port_dampening if exponential_port_dampening is not None else srl_nokia_interfaces__interface__ethernet__exponential_port_dampening()
        self.storm_control = storm_control
        self.synce = synce

    mut def create_ptp_timestamping(self):
        res = srl_nokia_interfaces__interface__ethernet__ptp_timestamping()
        self.ptp_timestamping = res
        return res

    mut def create_storm_control(self):
        res = srl_nokia_interfaces__interface__ethernet__storm_control()
        self.storm_control = res
        return res

    mut def create_synce(self):
        res = srl_nokia_interfaces__interface__ethernet__synce()
        self.synce = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _aggregate_id = self.aggregate_id
        if _aggregate_id is not None:
            children['aggregate-id'] = yang.gdata.Leaf('leafref', _aggregate_id)
        _forwarding_viable = self.forwarding_viable
        if _forwarding_viable is not None:
            children['forwarding-viable'] = yang.gdata.Leaf('boolean', _forwarding_viable)
        _auto_negotiate = self.auto_negotiate
        if _auto_negotiate is not None:
            children['auto-negotiate'] = yang.gdata.Leaf('boolean', _auto_negotiate)
        _duplex_mode = self.duplex_mode
        if _duplex_mode is not None:
            children['duplex-mode'] = yang.gdata.Leaf('enumeration', _duplex_mode)
        _dac_link_training = self.dac_link_training
        if _dac_link_training is not None:
            children['dac-link-training'] = yang.gdata.Leaf('boolean', _dac_link_training)
        _flow_control = self.flow_control
        if _flow_control is not None:
            children['flow-control'] = _flow_control.to_gdata()
        _lacp_port_priority = self.lacp_port_priority
        if _lacp_port_priority is not None:
            children['lacp-port-priority'] = yang.gdata.Leaf('uint16', _lacp_port_priority)
        _port_speed = self.port_speed
        if _port_speed is not None:
            children['port-speed'] = yang.gdata.Leaf('enumeration', _port_speed)
        _mac_address = self.mac_address
        if _mac_address is not None:
            children['mac-address'] = yang.gdata.Leaf('string', _mac_address)
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            children['forward-error-correction'] = _forward_error_correction.to_gdata()
        _ptp_asymmetry = self.ptp_asymmetry
        if _ptp_asymmetry is not None:
            children['ptp-asymmetry'] = yang.gdata.Leaf('int32', _ptp_asymmetry)
        _ptp_timestamping = self.ptp_timestamping
        if _ptp_timestamping is not None:
            children['ptp-timestamping'] = _ptp_timestamping.to_gdata()
        _standby_signaling = self.standby_signaling
        if _standby_signaling is not None:
            children['standby-signaling'] = yang.gdata.Leaf('enumeration', _standby_signaling)
        _link_loss_forwarding = self.link_loss_forwarding
        if _link_loss_forwarding is not None:
            children['link-loss-forwarding'] = yang.gdata.Leaf('boolean', _link_loss_forwarding)
        _reload_delay = self.reload_delay
        if _reload_delay is not None:
            children['reload-delay'] = yang.gdata.Leaf('uint32', _reload_delay)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = _hold_time.to_gdata()
        _crc_monitor = self.crc_monitor
        if _crc_monitor is not None:
            children['crc-monitor'] = _crc_monitor.to_gdata()
        _symbol_monitor = self.symbol_monitor
        if _symbol_monitor is not None:
            children['symbol-monitor'] = _symbol_monitor.to_gdata()
        _exponential_port_dampening = self.exponential_port_dampening
        if _exponential_port_dampening is not None:
            children['exponential-port-dampening'] = _exponential_port_dampening.to_gdata()
        _storm_control = self.storm_control
        if _storm_control is not None:
            children['storm-control'] = _storm_control.to_gdata()
        _synce = self.synce
        if _synce is not None:
            children['synce'] = _synce.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__ethernet:
        if n != None:
            return srl_nokia_interfaces__interface__ethernet(aggregate_id=n.get_opt_str('aggregate-id'), forwarding_viable=n.get_opt_bool('forwarding-viable'), auto_negotiate=n.get_opt_bool('auto-negotiate'), duplex_mode=n.get_opt_str('duplex-mode'), dac_link_training=n.get_opt_bool('dac-link-training'), flow_control=srl_nokia_interfaces__interface__ethernet__flow_control.from_gdata(n.get_opt_cnt('flow-control')), lacp_port_priority=n.get_opt_int('lacp-port-priority'), port_speed=n.get_opt_str('port-speed'), mac_address=n.get_opt_str('mac-address'), forward_error_correction=srl_nokia_interfaces__interface__ethernet__forward_error_correction.from_gdata(n.get_opt_cnt('forward-error-correction')), ptp_asymmetry=n.get_opt_int('ptp-asymmetry'), ptp_timestamping=srl_nokia_interfaces__interface__ethernet__ptp_timestamping.from_gdata(n.get_opt_cnt('ptp-timestamping')), standby_signaling=n.get_opt_str('standby-signaling'), link_loss_forwarding=n.get_opt_bool('link-loss-forwarding'), reload_delay=n.get_opt_int('reload-delay'), hold_time=srl_nokia_interfaces__interface__ethernet__hold_time.from_gdata(n.get_opt_cnt('hold-time')), crc_monitor=srl_nokia_interfaces__interface__ethernet__crc_monitor.from_gdata(n.get_opt_cnt('crc-monitor')), symbol_monitor=srl_nokia_interfaces__interface__ethernet__symbol_monitor.from_gdata(n.get_opt_cnt('symbol-monitor')), exponential_port_dampening=srl_nokia_interfaces__interface__ethernet__exponential_port_dampening.from_gdata(n.get_opt_cnt('exponential-port-dampening')), storm_control=srl_nokia_interfaces__interface__ethernet__storm_control.from_gdata(n.get_opt_cnt('storm-control')), synce=srl_nokia_interfaces__interface__ethernet__synce.from_gdata(n.get_opt_cnt('synce')))
        return srl_nokia_interfaces__interface__ethernet()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/ethernet')
            res.append('{self_name} = srl_nokia_interfaces__interface__ethernet()')
        leaves = []
        _aggregate_id = self.aggregate_id
        if _aggregate_id is not None:
            leaves.append('{self_name}.aggregate_id = {repr(_aggregate_id)}')
        _forwarding_viable = self.forwarding_viable
        if _forwarding_viable is not None:
            leaves.append('{self_name}.forwarding_viable = {repr(_forwarding_viable)}')
        _auto_negotiate = self.auto_negotiate
        if _auto_negotiate is not None:
            leaves.append('{self_name}.auto_negotiate = {repr(_auto_negotiate)}')
        _duplex_mode = self.duplex_mode
        if _duplex_mode is not None:
            leaves.append('{self_name}.duplex_mode = {repr(_duplex_mode)}')
        _dac_link_training = self.dac_link_training
        if _dac_link_training is not None:
            leaves.append('{self_name}.dac_link_training = {repr(_dac_link_training)}')
        _flow_control = self.flow_control
        if _flow_control is not None:
            res.extend(_flow_control.prsrc('{self_name}.flow_control', False).splitlines())
        _lacp_port_priority = self.lacp_port_priority
        if _lacp_port_priority is not None:
            leaves.append('{self_name}.lacp_port_priority = {repr(_lacp_port_priority)}')
        _port_speed = self.port_speed
        if _port_speed is not None:
            leaves.append('{self_name}.port_speed = {repr(_port_speed)}')
        _mac_address = self.mac_address
        if _mac_address is not None:
            leaves.append('{self_name}.mac_address = {repr(_mac_address)}')
        _forward_error_correction = self.forward_error_correction
        if _forward_error_correction is not None:
            res.extend(_forward_error_correction.prsrc('{self_name}.forward_error_correction', False).splitlines())
        _ptp_asymmetry = self.ptp_asymmetry
        if _ptp_asymmetry is not None:
            leaves.append('{self_name}.ptp_asymmetry = {repr(_ptp_asymmetry)}')
        _ptp_timestamping = self.ptp_timestamping
        if _ptp_timestamping is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/ptp-timestamping')
            res.append('ptp_timestamping = {self_name}.create_ptp_timestamping()')
            res.extend(_ptp_timestamping.prsrc('ptp_timestamping', False).splitlines())
        _standby_signaling = self.standby_signaling
        if _standby_signaling is not None:
            leaves.append('{self_name}.standby_signaling = {repr(_standby_signaling)}')
        _link_loss_forwarding = self.link_loss_forwarding
        if _link_loss_forwarding is not None:
            leaves.append('{self_name}.link_loss_forwarding = {repr(_link_loss_forwarding)}')
        _reload_delay = self.reload_delay
        if _reload_delay is not None:
            leaves.append('{self_name}.reload_delay = {repr(_reload_delay)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            res.extend(_hold_time.prsrc('{self_name}.hold_time', False).splitlines())
        _crc_monitor = self.crc_monitor
        if _crc_monitor is not None:
            res.extend(_crc_monitor.prsrc('{self_name}.crc_monitor', False).splitlines())
        _symbol_monitor = self.symbol_monitor
        if _symbol_monitor is not None:
            res.extend(_symbol_monitor.prsrc('{self_name}.symbol_monitor', False).splitlines())
        _exponential_port_dampening = self.exponential_port_dampening
        if _exponential_port_dampening is not None:
            res.extend(_exponential_port_dampening.prsrc('{self_name}.exponential_port_dampening', False).splitlines())
        _storm_control = self.storm_control
        if _storm_control is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/storm-control')
            res.append('storm_control = {self_name}.create_storm_control()')
            res.extend(_storm_control.prsrc('storm_control', False).splitlines())
        _synce = self.synce
        if _synce is not None:
            res.append('')
            res.append('# P-container: /interface/ethernet/synce')
            res.append('synce = {self_name}.create_synce()')
            res.extend(_synce.prsrc('synce', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/ethernet'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__ethernet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_aggregate_id = yang.gdata.from_xml_opt_str(node, 'aggregate-id')
    yang.gdata.maybe_add(children, 'aggregate-id', from_xml_srl_nokia_interfaces__interface__ethernet__aggregate_id, child_aggregate_id)
    child_forwarding_viable = yang.gdata.from_xml_opt_bool(node, 'forwarding-viable')
    yang.gdata.maybe_add(children, 'forwarding-viable', from_xml_srl_nokia_interfaces__interface__ethernet__forwarding_viable, child_forwarding_viable)
    child_auto_negotiate = yang.gdata.from_xml_opt_bool(node, 'auto-negotiate')
    yang.gdata.maybe_add(children, 'auto-negotiate', from_xml_srl_nokia_interfaces__interface__ethernet__auto_negotiate, child_auto_negotiate)
    child_duplex_mode = yang.gdata.from_xml_opt_str(node, 'duplex-mode')
    yang.gdata.maybe_add(children, 'duplex-mode', from_xml_srl_nokia_interfaces__interface__ethernet__duplex_mode, child_duplex_mode)
    child_dac_link_training = yang.gdata.from_xml_opt_bool(node, 'dac-link-training')
    yang.gdata.maybe_add(children, 'dac-link-training', from_xml_srl_nokia_interfaces__interface__ethernet__dac_link_training, child_dac_link_training)
    child_flow_control = yang.gdata.from_xml_opt_cnt(node, 'flow-control')
    yang.gdata.maybe_add(children, 'flow-control', from_xml_srl_nokia_interfaces__interface__ethernet__flow_control, child_flow_control)
    child_lacp_port_priority = yang.gdata.from_xml_opt_int(node, 'lacp-port-priority')
    yang.gdata.maybe_add(children, 'lacp-port-priority', from_xml_srl_nokia_interfaces__interface__ethernet__lacp_port_priority, child_lacp_port_priority)
    child_port_speed = yang.gdata.from_xml_opt_str(node, 'port-speed')
    yang.gdata.maybe_add(children, 'port-speed', from_xml_srl_nokia_interfaces__interface__ethernet__port_speed, child_port_speed)
    child_mac_address = yang.gdata.from_xml_opt_str(node, 'mac-address')
    yang.gdata.maybe_add(children, 'mac-address', from_xml_srl_nokia_interfaces__interface__ethernet__mac_address, child_mac_address)
    child_forward_error_correction = yang.gdata.from_xml_opt_cnt(node, 'forward-error-correction')
    yang.gdata.maybe_add(children, 'forward-error-correction', from_xml_srl_nokia_interfaces__interface__ethernet__forward_error_correction, child_forward_error_correction)
    child_ptp_asymmetry = yang.gdata.from_xml_opt_int(node, 'ptp-asymmetry')
    yang.gdata.maybe_add(children, 'ptp-asymmetry', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_asymmetry, child_ptp_asymmetry)
    child_ptp_timestamping = yang.gdata.from_xml_opt_cnt(node, 'ptp-timestamping')
    yang.gdata.maybe_add(children, 'ptp-timestamping', from_xml_srl_nokia_interfaces__interface__ethernet__ptp_timestamping, child_ptp_timestamping)
    child_standby_signaling = yang.gdata.from_xml_opt_str(node, 'standby-signaling')
    yang.gdata.maybe_add(children, 'standby-signaling', from_xml_srl_nokia_interfaces__interface__ethernet__standby_signaling, child_standby_signaling)
    child_link_loss_forwarding = yang.gdata.from_xml_opt_bool(node, 'link-loss-forwarding')
    yang.gdata.maybe_add(children, 'link-loss-forwarding', from_xml_srl_nokia_interfaces__interface__ethernet__link_loss_forwarding, child_link_loss_forwarding)
    child_reload_delay = yang.gdata.from_xml_opt_int(node, 'reload-delay')
    yang.gdata.maybe_add(children, 'reload-delay', from_xml_srl_nokia_interfaces__interface__ethernet__reload_delay, child_reload_delay)
    child_hold_time = yang.gdata.from_xml_opt_cnt(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_srl_nokia_interfaces__interface__ethernet__hold_time, child_hold_time)
    child_crc_monitor = yang.gdata.from_xml_opt_cnt(node, 'crc-monitor')
    yang.gdata.maybe_add(children, 'crc-monitor', from_xml_srl_nokia_interfaces__interface__ethernet__crc_monitor, child_crc_monitor)
    child_symbol_monitor = yang.gdata.from_xml_opt_cnt(node, 'symbol-monitor')
    yang.gdata.maybe_add(children, 'symbol-monitor', from_xml_srl_nokia_interfaces__interface__ethernet__symbol_monitor, child_symbol_monitor)
    child_exponential_port_dampening = yang.gdata.from_xml_opt_cnt(node, 'exponential-port-dampening')
    yang.gdata.maybe_add(children, 'exponential-port-dampening', from_xml_srl_nokia_interfaces__interface__ethernet__exponential_port_dampening, child_exponential_port_dampening)
    child_storm_control = yang.gdata.from_xml_opt_cnt(node, 'storm-control')
    yang.gdata.maybe_add(children, 'storm-control', from_xml_srl_nokia_interfaces__interface__ethernet__storm_control, child_storm_control)
    child_synce = yang.gdata.from_xml_opt_cnt(node, 'synce')
    yang.gdata.maybe_add(children, 'synce', from_xml_srl_nokia_interfaces__interface__ethernet__synce, child_synce)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__load_balancing__hash_profile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_interfaces__interface__load_balancing(yang.adata.MNode):
    hash_profile: ?str

    mut def __init__(self, hash_profile: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.hash_profile = hash_profile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hash_profile = self.hash_profile
        if _hash_profile is not None:
            children['hash-profile'] = yang.gdata.Leaf('leafref', _hash_profile)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__load_balancing:
        if n != None:
            return srl_nokia_interfaces__interface__load_balancing(hash_profile=n.get_opt_str('hash-profile'))
        return srl_nokia_interfaces__interface__load_balancing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/load-balancing')
            res.append('{self_name} = srl_nokia_interfaces__interface__load_balancing()')
        leaves = []
        _hash_profile = self.hash_profile
        if _hash_profile is not None:
            leaves.append('{self_name}.hash_profile = {repr(_hash_profile)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/load-balancing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__load_balancing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hash_profile = yang.gdata.from_xml_opt_str(node, 'hash-profile')
    yang.gdata.maybe_add(children, 'hash-profile', from_xml_srl_nokia_interfaces__interface__load_balancing__hash_profile, child_hash_profile)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__static_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(yang.adata.MNode):
    static_delay: ?value

    mut def __init__(self, static_delay: ?value):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.static_delay = static_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static_delay = self.static_delay
        if _static_delay is not None:
            children['static-delay'] = yang.gdata.Leaf('union', _static_delay)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(static_delay=n.get_opt_value('static-delay'))
        return srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/unidirectional-link-delay')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()')
        leaves = []
        _static_delay = self.static_delay
        if _static_delay is not None:
            leaves.append('{self_name}.static_delay = {repr(_static_delay)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/unidirectional-link-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_static_delay = yang.gdata.from_xml_opt_value(node, 'static-delay')
    yang.gdata.maybe_add(children, 'static-delay', from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay__static_delay, child_static_delay)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__collect_irb_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__collect_detailed_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(yang.adata.MNode):
    ip_prefix: str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix=n.get_str('ip-prefix'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__address({repr(self.ip_prefix)})')
        leaves = []
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv4__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv4__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix, child_ip_prefix)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(yang.adata.MNode):
    admin_state: ?str
    interface: ?str

    mut def __init__(self, admin_state: ?str, interface: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(admin_state=n.get_opt_str('admin-state'), interface=n.get_opt_str('interface'))
        return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/unnumbered')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/unnumbered'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state, child_admin_state)
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface, child_interface)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__ipv4(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv4__address
    allow_directed_broadcast: ?bool
    unnumbered: srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]=[], allow_directed_broadcast: ?bool, unnumbered: ?srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv4__address(elements=address)
        self.allow_directed_broadcast = allow_directed_broadcast
        self.unnumbered = unnumbered if unnumbered is not None else srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            children['allow-directed-broadcast'] = yang.gdata.Leaf('boolean', _allow_directed_broadcast)
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            children['unnumbered'] = _unnumbered.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv4(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv4__address.from_gdata(n.get_opt_list('address')), allow_directed_broadcast=n.get_opt_bool('allow-directed-broadcast'), unnumbered=srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered.from_gdata(n.get_opt_cnt('unnumbered')))
        return srl_nokia_interfaces__interface__subinterface__ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv4/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            leaves.append('{self_name}.allow_directed_broadcast = {repr(_allow_directed_broadcast)}')
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            res.extend(_unnumbered.prsrc('{self_name}.unnumbered', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address, child_address)
    child_allow_directed_broadcast = yang.gdata.from_xml_opt_bool(node, 'allow-directed-broadcast')
    yang.gdata.maybe_add(children, 'allow-directed-broadcast', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast, child_allow_directed_broadcast)
    child_unnumbered = yang.gdata.from_xml_opt_cnt(node, 'unnumbered')
    yang.gdata.maybe_add(children, 'unnumbered', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered, child_unnumbered)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(yang.adata.MNode):
    ip_prefix: str
    type: ?str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, type: ?str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.type = type
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix=n.get_str('ip-prefix'), type=n.get_opt_str('type'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6__address({repr(self.ip_prefix)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv6__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix, child_ip_prefix)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type, child_type)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_interfaces__interface__subinterface__ipv6(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv6__address

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__ipv6(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv6__address.from_gdata(n.get_opt_list('address')))
        return srl_nokia_interfaces__interface__subinterface__ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv6/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__virtual_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_interfaces__interface__subinterface__anycast_gw(yang.adata.MNode):
    virtual_router_id: ?int
    anycast_gw_mac: ?str

    mut def __init__(self, virtual_router_id: ?int, anycast_gw_mac: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.virtual_router_id = virtual_router_id
        self.anycast_gw_mac = anycast_gw_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _virtual_router_id = self.virtual_router_id
        if _virtual_router_id is not None:
            children['virtual-router-id'] = yang.gdata.Leaf('uint8', _virtual_router_id)
        _anycast_gw_mac = self.anycast_gw_mac
        if _anycast_gw_mac is not None:
            children['anycast-gw-mac'] = yang.gdata.Leaf('string', _anycast_gw_mac)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__anycast_gw:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__anycast_gw(virtual_router_id=n.get_opt_int('virtual-router-id'), anycast_gw_mac=n.get_opt_str('anycast-gw-mac'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/anycast-gw')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__anycast_gw()')
        leaves = []
        _virtual_router_id = self.virtual_router_id
        if _virtual_router_id is not None:
            leaves.append('{self_name}.virtual_router_id = {repr(_virtual_router_id)}')
        _anycast_gw_mac = self.anycast_gw_mac
        if _anycast_gw_mac is not None:
            leaves.append('{self_name}.anycast_gw_mac = {repr(_anycast_gw_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/anycast-gw'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_virtual_router_id = yang.gdata.from_xml_opt_int(node, 'virtual-router-id')
    yang.gdata.maybe_add(children, 'virtual-router-id', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__virtual_router_id, child_virtual_router_id)
    child_anycast_gw_mac = yang.gdata.from_xml_opt_str(node, 'anycast-gw-mac')
    yang.gdata.maybe_add(children, 'anycast-gw-mac', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw__anycast_gw_mac, child_anycast_gw_mac)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, maximum_entries: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.maximum_entries = maximum_entries
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(maximum_entries=n.get_opt_int('maximum-entries'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-limit')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()')
        leaves = []
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            leaves.append('{self_name}.maximum_entries = {repr(_maximum_entries)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_entries = yang.gdata.from_xml_opt_int(node, 'maximum-entries')
    yang.gdata.maybe_add(children, 'maximum-entries', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__maximum_entries, child_maximum_entries)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-learning/aging')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-learning/aging'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: ?str
    aging: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str, aging: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.aging = aging if aging is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _aging = self.aging
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(admin_state=n.get_opt_str('admin-state'), aging=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging.from_gdata(n.get_opt_cnt('aging')))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-learning')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _aging = self.aging
        if _aging is not None:
            res.extend(_aging.prsrc('{self_name}.aging', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-learning'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__admin_state, child_admin_state)
    child_aging = yang.gdata.from_xml_opt_cnt(node, 'aging')
    yang.gdata.maybe_add(children, 'aging', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning__aging, child_aging)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(yang.adata.MNode):
    action_: ?str

    mut def __init__(self, action_: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.action_ = action_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(action_=n.get_opt_str('action'))
        return srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table/mac-duplication')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()')
        leaves = []
        _action_ = self.action_
        if _action_ is not None:
            leaves.append('{self_name}.action_ = {repr(_action_)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table/mac-duplication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_action_ = yang.gdata.from_xml_opt_str(node, 'action')
    yang.gdata.maybe_add(children, 'action', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication__action, child_action_)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: ?bool
    mac_limit: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit
    mac_learning: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning
    mac_duplication: srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool, mac_limit: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.discard_unknown_src_mac = discard_unknown_src_mac
        self.mac_limit = mac_limit if mac_limit is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit()
        self.mac_learning = mac_learning if mac_learning is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning()
        self.mac_duplication = mac_duplication if mac_duplication is not None else srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__bridge_table:
        if n != None:
            return srl_nokia_interfaces__interface__subinterface__bridge_table(discard_unknown_src_mac=n.get_opt_bool('discard-unknown-src-mac'), mac_limit=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit.from_gdata(n.get_opt_cnt('mac-limit')), mac_learning=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning.from_gdata(n.get_opt_cnt('mac-learning')), mac_duplication=srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication.from_gdata(n.get_opt_cnt('mac-duplication')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/bridge-table')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__bridge_table()')
        leaves = []
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            leaves.append('{self_name}.discard_unknown_src_mac = {repr(_discard_unknown_src_mac)}')
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            res.extend(_mac_limit.prsrc('{self_name}.mac_limit', False).splitlines())
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            res.extend(_mac_learning.prsrc('{self_name}.mac_learning', False).splitlines())
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            res.extend(_mac_duplication.prsrc('{self_name}.mac_duplication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_discard_unknown_src_mac = yang.gdata.from_xml_opt_bool(node, 'discard-unknown-src-mac')
    yang.gdata.maybe_add(children, 'discard-unknown-src-mac', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__discard_unknown_src_mac, child_discard_unknown_src_mac)
    child_mac_limit = yang.gdata.from_xml_opt_cnt(node, 'mac-limit')
    yang.gdata.maybe_add(children, 'mac-limit', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_limit, child_mac_limit)
    child_mac_learning = yang.gdata.from_xml_opt_cnt(node, 'mac-learning')
    yang.gdata.maybe_add(children, 'mac-learning', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_learning, child_mac_learning)
    child_mac_duplication = yang.gdata.from_xml_opt_cnt(node, 'mac-duplication')
    yang.gdata.maybe_add(children, 'mac-duplication', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table__mac_duplication, child_mac_duplication)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface__subinterface_entry(yang.adata.MNode):
    index: int
    type: ?str
    description: ?str
    admin_state: ?str
    ip_mtu: ?int
    l2_mtu: ?int
    mpls_mtu: ?int
    unidirectional_link_delay: srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay
    collect_irb_stats: ?bool
    collect_detailed_stats: ?bool
    ipv4: srl_nokia_interfaces__interface__subinterface__ipv4
    ipv6: srl_nokia_interfaces__interface__subinterface__ipv6
    anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw
    bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table

    mut def __init__(self, index: int, type: ?str, description: ?str, admin_state: ?str, ip_mtu: ?int, l2_mtu: ?int, mpls_mtu: ?int, unidirectional_link_delay: ?srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay=None, collect_irb_stats: ?bool, collect_detailed_stats: ?bool, ipv4: ?srl_nokia_interfaces__interface__subinterface__ipv4=None, ipv6: ?srl_nokia_interfaces__interface__subinterface__ipv6=None, anycast_gw: ?srl_nokia_interfaces__interface__subinterface__anycast_gw=None, bridge_table: ?srl_nokia_interfaces__interface__subinterface__bridge_table=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.index = index
        self.type = type
        self.description = description
        self.admin_state = admin_state
        self.ip_mtu = ip_mtu
        self.l2_mtu = l2_mtu
        self.mpls_mtu = mpls_mtu
        self.unidirectional_link_delay = unidirectional_link_delay if unidirectional_link_delay is not None else srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay()
        self.collect_irb_stats = collect_irb_stats
        self.collect_detailed_stats = collect_detailed_stats
        self.ipv4 = ipv4 if ipv4 is not None else srl_nokia_interfaces__interface__subinterface__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else srl_nokia_interfaces__interface__subinterface__ipv6()
        self.anycast_gw = anycast_gw
        self.bridge_table = bridge_table

    mut def create_anycast_gw(self):
        res = srl_nokia_interfaces__interface__subinterface__anycast_gw()
        self.anycast_gw = res
        return res

    mut def create_bridge_table(self):
        res = srl_nokia_interfaces__interface__subinterface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            children['ip-mtu'] = yang.gdata.Leaf('uint16', _ip_mtu)
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            children['l2-mtu'] = yang.gdata.Leaf('uint16', _l2_mtu)
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            children['mpls-mtu'] = yang.gdata.Leaf('uint16', _mpls_mtu)
        _unidirectional_link_delay = self.unidirectional_link_delay
        if _unidirectional_link_delay is not None:
            children['unidirectional-link-delay'] = _unidirectional_link_delay.to_gdata()
        _collect_irb_stats = self.collect_irb_stats
        if _collect_irb_stats is not None:
            children['collect-irb-stats'] = yang.gdata.Leaf('boolean', _collect_irb_stats)
        _collect_detailed_stats = self.collect_detailed_stats
        if _collect_detailed_stats is not None:
            children['collect-detailed-stats'] = yang.gdata.Leaf('boolean', _collect_detailed_stats)
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = _anycast_gw.to_gdata()
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface_entry:
        return srl_nokia_interfaces__interface__subinterface_entry(index=n.get_int('index'), type=n.get_opt_str('type'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), ip_mtu=n.get_opt_int('ip-mtu'), l2_mtu=n.get_opt_int('l2-mtu'), mpls_mtu=n.get_opt_int('mpls-mtu'), unidirectional_link_delay=srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay.from_gdata(n.get_opt_cnt('unidirectional-link-delay')), collect_irb_stats=n.get_opt_bool('collect-irb-stats'), collect_detailed_stats=n.get_opt_bool('collect-detailed-stats'), ipv4=srl_nokia_interfaces__interface__subinterface__ipv4.from_gdata(n.get_opt_cnt('ipv4')), ipv6=srl_nokia_interfaces__interface__subinterface__ipv6.from_gdata(n.get_opt_cnt('ipv6')), anycast_gw=srl_nokia_interfaces__interface__subinterface__anycast_gw.from_gdata(n.get_opt_cnt('anycast-gw')), bridge_table=srl_nokia_interfaces__interface__subinterface__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface({repr(self.index)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            leaves.append('{self_name}.ip_mtu = {repr(_ip_mtu)}')
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            leaves.append('{self_name}.l2_mtu = {repr(_l2_mtu)}')
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            leaves.append('{self_name}.mpls_mtu = {repr(_mpls_mtu)}')
        _unidirectional_link_delay = self.unidirectional_link_delay
        if _unidirectional_link_delay is not None:
            res.extend(_unidirectional_link_delay.prsrc('{self_name}.unidirectional_link_delay', False).splitlines())
        _collect_irb_stats = self.collect_irb_stats
        if _collect_irb_stats is not None:
            leaves.append('{self_name}.collect_irb_stats = {repr(_collect_irb_stats)}')
        _collect_detailed_stats = self.collect_detailed_stats
        if _collect_detailed_stats is not None:
            leaves.append('{self_name}.collect_detailed_stats = {repr(_collect_detailed_stats)}')
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            res.extend(_ipv4.prsrc('{self_name}.ipv4', False).splitlines())
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            res.extend(_ipv6.prsrc('{self_name}.ipv6', False).splitlines())
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            res.append('')
            res.append('# P-container: /interface/subinterface/anycast-gw')
            res.append('anycast_gw = {self_name}.create_anycast_gw()')
            res.extend(_anycast_gw.prsrc('anycast_gw', False).splitlines())
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /interface/subinterface/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'subinterface'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_interfaces__interface__subinterface__index, child_index)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__type, child_type)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__subinterface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__admin_state, child_admin_state)
    child_ip_mtu = yang.gdata.from_xml_opt_int(node, 'ip-mtu')
    yang.gdata.maybe_add(children, 'ip-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu, child_ip_mtu)
    child_l2_mtu = yang.gdata.from_xml_opt_int(node, 'l2-mtu')
    yang.gdata.maybe_add(children, 'l2-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu, child_l2_mtu)
    child_mpls_mtu = yang.gdata.from_xml_opt_int(node, 'mpls-mtu')
    yang.gdata.maybe_add(children, 'mpls-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu, child_mpls_mtu)
    child_unidirectional_link_delay = yang.gdata.from_xml_opt_cnt(node, 'unidirectional-link-delay')
    yang.gdata.maybe_add(children, 'unidirectional-link-delay', from_xml_srl_nokia_interfaces__interface__subinterface__unidirectional_link_delay, child_unidirectional_link_delay)
    child_collect_irb_stats = yang.gdata.from_xml_opt_bool(node, 'collect-irb-stats')
    yang.gdata.maybe_add(children, 'collect-irb-stats', from_xml_srl_nokia_interfaces__interface__subinterface__collect_irb_stats, child_collect_irb_stats)
    child_collect_detailed_stats = yang.gdata.from_xml_opt_bool(node, 'collect-detailed-stats')
    yang.gdata.maybe_add(children, 'collect-detailed-stats', from_xml_srl_nokia_interfaces__interface__subinterface__collect_detailed_stats, child_collect_detailed_stats)
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6, child_ipv6)
    child_anycast_gw = yang.gdata.from_xml_opt_cnt(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__anycast_gw, child_anycast_gw)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_interfaces__interface__subinterface__bridge_table, child_bridge_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__sflow__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__sflow__ingress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__sflow__egress_sampling_rate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_interfaces__interface__sflow(yang.adata.MNode):
    admin_state: ?str
    ingress_sampling_rate: ?int
    egress_sampling_rate: ?int

    mut def __init__(self, admin_state: ?str, ingress_sampling_rate: ?int, egress_sampling_rate: ?int):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.ingress_sampling_rate = ingress_sampling_rate
        self.egress_sampling_rate = egress_sampling_rate

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ingress_sampling_rate = self.ingress_sampling_rate
        if _ingress_sampling_rate is not None:
            children['ingress-sampling-rate'] = yang.gdata.Leaf('uint32', _ingress_sampling_rate)
        _egress_sampling_rate = self.egress_sampling_rate
        if _egress_sampling_rate is not None:
            children['egress-sampling-rate'] = yang.gdata.Leaf('uint32', _egress_sampling_rate)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__sflow:
        if n != None:
            return srl_nokia_interfaces__interface__sflow(admin_state=n.get_opt_str('admin-state'), ingress_sampling_rate=n.get_opt_int('ingress-sampling-rate'), egress_sampling_rate=n.get_opt_int('egress-sampling-rate'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/sflow')
            res.append('{self_name} = srl_nokia_interfaces__interface__sflow()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ingress_sampling_rate = self.ingress_sampling_rate
        if _ingress_sampling_rate is not None:
            leaves.append('{self_name}.ingress_sampling_rate = {repr(_ingress_sampling_rate)}')
        _egress_sampling_rate = self.egress_sampling_rate
        if _egress_sampling_rate is not None:
            leaves.append('{self_name}.egress_sampling_rate = {repr(_egress_sampling_rate)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/sflow'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__sflow(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__sflow__admin_state, child_admin_state)
    child_ingress_sampling_rate = yang.gdata.from_xml_opt_int(node, 'ingress-sampling-rate')
    yang.gdata.maybe_add(children, 'ingress-sampling-rate', from_xml_srl_nokia_interfaces__interface__sflow__ingress_sampling_rate, child_ingress_sampling_rate)
    child_egress_sampling_rate = yang.gdata.from_xml_opt_int(node, 'egress-sampling-rate')
    yang.gdata.maybe_add(children, 'egress-sampling-rate', from_xml_srl_nokia_interfaces__interface__sflow__egress_sampling_rate, child_egress_sampling_rate)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    admin_state: ?str
    num_physical_channels: ?int
    breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode
    mtu: ?int
    loopback_mode: ?str
    swap_src_dst_mac: ?bool
    transceiver: srl_nokia_interfaces__interface__transceiver
    ethernet: srl_nokia_interfaces__interface__ethernet
    load_balancing: srl_nokia_interfaces__interface__load_balancing
    subinterface: srl_nokia_interfaces__interface__subinterface
    sflow: ?srl_nokia_interfaces__interface__sflow

    mut def __init__(self, name: str, description: ?str, admin_state: ?str, num_physical_channels: ?int, breakout_mode: ?srl_nokia_interfaces__interface__breakout_mode=None, mtu: ?int, loopback_mode: ?str, swap_src_dst_mac: ?bool, transceiver: ?srl_nokia_interfaces__interface__transceiver=None, ethernet: ?srl_nokia_interfaces__interface__ethernet=None, load_balancing: ?srl_nokia_interfaces__interface__load_balancing=None, subinterface: list[srl_nokia_interfaces__interface__subinterface_entry]=[], sflow: ?srl_nokia_interfaces__interface__sflow=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.name = name
        self.description = description
        self.admin_state = admin_state
        self.num_physical_channels = num_physical_channels
        self.breakout_mode = breakout_mode
        self.mtu = mtu
        self.loopback_mode = loopback_mode
        self.swap_src_dst_mac = swap_src_dst_mac
        self.transceiver = transceiver if transceiver is not None else srl_nokia_interfaces__interface__transceiver()
        self.ethernet = ethernet if ethernet is not None else srl_nokia_interfaces__interface__ethernet()
        self.load_balancing = load_balancing if load_balancing is not None else srl_nokia_interfaces__interface__load_balancing()
        self.subinterface = srl_nokia_interfaces__interface__subinterface(elements=subinterface)
        self.sflow = sflow

    mut def create_breakout_mode(self, num_breakout_ports, breakout_port_speed):
        res = srl_nokia_interfaces__interface__breakout_mode(num_breakout_ports, breakout_port_speed)
        self.breakout_mode = res
        return res

    mut def create_sflow(self):
        res = srl_nokia_interfaces__interface__sflow()
        self.sflow = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _num_physical_channels = self.num_physical_channels
        if _num_physical_channels is not None:
            children['num-physical-channels'] = yang.gdata.Leaf('uint8', _num_physical_channels)
        _breakout_mode = self.breakout_mode
        if _breakout_mode is not None:
            children['breakout-mode'] = _breakout_mode.to_gdata()
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint16', _mtu)
        _loopback_mode = self.loopback_mode
        if _loopback_mode is not None:
            children['loopback-mode'] = yang.gdata.Leaf('enumeration', _loopback_mode)
        _swap_src_dst_mac = self.swap_src_dst_mac
        if _swap_src_dst_mac is not None:
            children['swap-src-dst-mac'] = yang.gdata.Leaf('boolean', _swap_src_dst_mac)
        _transceiver = self.transceiver
        if _transceiver is not None:
            children['transceiver'] = _transceiver.to_gdata()
        _ethernet = self.ethernet
        if _ethernet is not None:
            children['ethernet'] = _ethernet.to_gdata()
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            children['load-balancing'] = _load_balancing.to_gdata()
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = _subinterface.to_gdata()
        _sflow = self.sflow
        if _sflow is not None:
            children['sflow'] = _sflow.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface_entry:
        return srl_nokia_interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), num_physical_channels=n.get_opt_int('num-physical-channels'), breakout_mode=srl_nokia_interfaces__interface__breakout_mode.from_gdata(n.get_opt_cnt('breakout-mode')), mtu=n.get_opt_int('mtu'), loopback_mode=n.get_opt_str('loopback-mode'), swap_src_dst_mac=n.get_opt_bool('swap-src-dst-mac'), transceiver=srl_nokia_interfaces__interface__transceiver.from_gdata(n.get_opt_cnt('transceiver')), ethernet=srl_nokia_interfaces__interface__ethernet.from_gdata(n.get_opt_cnt('ethernet')), load_balancing=srl_nokia_interfaces__interface__load_balancing.from_gdata(n.get_opt_cnt('load-balancing')), subinterface=srl_nokia_interfaces__interface__subinterface.from_gdata(n.get_opt_list('subinterface')), sflow=srl_nokia_interfaces__interface__sflow.from_gdata(n.get_opt_cnt('sflow')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface')
            res.append('{self_name} = srl_nokia_interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _num_physical_channels = self.num_physical_channels
        if _num_physical_channels is not None:
            leaves.append('{self_name}.num_physical_channels = {repr(_num_physical_channels)}')
        _breakout_mode = self.breakout_mode
        if _breakout_mode is not None:
            res.append('')
            res.append('# P-container: /interface/breakout-mode')
            res.append('breakout_mode = {self_name}.create_breakout_mode()')
            res.extend(_breakout_mode.prsrc('breakout_mode', False).splitlines())
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _loopback_mode = self.loopback_mode
        if _loopback_mode is not None:
            leaves.append('{self_name}.loopback_mode = {repr(_loopback_mode)}')
        _swap_src_dst_mac = self.swap_src_dst_mac
        if _swap_src_dst_mac is not None:
            leaves.append('{self_name}.swap_src_dst_mac = {repr(_swap_src_dst_mac)}')
        _transceiver = self.transceiver
        if _transceiver is not None:
            res.extend(_transceiver.prsrc('{self_name}.transceiver', False).splitlines())
        _ethernet = self.ethernet
        if _ethernet is not None:
            res.extend(_ethernet.prsrc('{self_name}.ethernet', False).splitlines())
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            res.extend(_load_balancing.prsrc('{self_name}.load_balancing', False).splitlines())
        _subinterface = self.subinterface
        for _element in _subinterface.elements:
            res.append('')
            res.append("# List /interface/subinterface element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'subinterface_element = {self_name}.subinterface.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('subinterface_element', False, list_element=True).splitlines())
        _sflow = self.sflow
        if _sflow is not None:
            res.append('')
            res.append('# P-container: /interface/sflow')
            res.append('sflow = {self_name}.create_sflow()')
            res.extend(_sflow.prsrc('sflow', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__admin_state, child_admin_state)
    child_num_physical_channels = yang.gdata.from_xml_opt_int(node, 'num-physical-channels')
    yang.gdata.maybe_add(children, 'num-physical-channels', from_xml_srl_nokia_interfaces__interface__num_physical_channels, child_num_physical_channels)
    child_breakout_mode = yang.gdata.from_xml_opt_cnt(node, 'breakout-mode')
    yang.gdata.maybe_add(children, 'breakout-mode', from_xml_srl_nokia_interfaces__interface__breakout_mode, child_breakout_mode)
    child_mtu = yang.gdata.from_xml_opt_int(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_srl_nokia_interfaces__interface__mtu, child_mtu)
    child_loopback_mode = yang.gdata.from_xml_opt_str(node, 'loopback-mode')
    yang.gdata.maybe_add(children, 'loopback-mode', from_xml_srl_nokia_interfaces__interface__loopback_mode, child_loopback_mode)
    child_swap_src_dst_mac = yang.gdata.from_xml_opt_bool(node, 'swap-src-dst-mac')
    yang.gdata.maybe_add(children, 'swap-src-dst-mac', from_xml_srl_nokia_interfaces__interface__swap_src_dst_mac, child_swap_src_dst_mac)
    child_transceiver = yang.gdata.from_xml_opt_cnt(node, 'transceiver')
    yang.gdata.maybe_add(children, 'transceiver', from_xml_srl_nokia_interfaces__interface__transceiver, child_transceiver)
    child_ethernet = yang.gdata.from_xml_opt_cnt(node, 'ethernet')
    yang.gdata.maybe_add(children, 'ethernet', from_xml_srl_nokia_interfaces__interface__ethernet, child_ethernet)
    child_load_balancing = yang.gdata.from_xml_opt_cnt(node, 'load-balancing')
    yang.gdata.maybe_add(children, 'load-balancing', from_xml_srl_nokia_interfaces__interface__load_balancing, child_load_balancing)
    child_subinterface = yang.gdata.from_xml_opt_list(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_interfaces__interface__subinterface, child_subinterface)
    child_sflow = yang.gdata.from_xml_opt_cnt(node, 'sflow')
    yang.gdata.maybe_add(children, 'sflow', from_xml_srl_nokia_interfaces__interface__sflow, child_sflow)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

mut def from_xml_srl_nokia_network_instance__network_instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding__forward_received_packets(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__mpls_forwarding(yang.adata.MNode):
    forward_received_packets: ?bool

    mut def __init__(self, forward_received_packets: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.forward_received_packets = forward_received_packets

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forward_received_packets = self.forward_received_packets
        if _forward_received_packets is not None:
            children['forward-received-packets'] = yang.gdata.Leaf('boolean', _forward_received_packets)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__mpls_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__mpls_forwarding(forward_received_packets=n.get_opt_bool('forward-received-packets'))
        return srl_nokia_network_instance__network_instance__mpls_forwarding()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/mpls-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__mpls_forwarding()')
        leaves = []
        _forward_received_packets = self.forward_received_packets
        if _forward_received_packets is not None:
            leaves.append('{self_name}.forward_received_packets = {repr(_forward_received_packets)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/mpls-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forward_received_packets = yang.gdata.from_xml_opt_bool(node, 'forward-received-packets')
    yang.gdata.maybe_add(children, 'forward-received-packets', from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding__forward_received_packets, child_forward_received_packets)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv4_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv6_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__ip_forwarding(yang.adata.MNode):
    receive_ipv4_check: ?bool
    receive_ipv6_check: ?bool

    mut def __init__(self, receive_ipv4_check: ?bool, receive_ipv6_check: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.receive_ipv4_check = receive_ipv4_check
        self.receive_ipv6_check = receive_ipv6_check

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive_ipv4_check = self.receive_ipv4_check
        if _receive_ipv4_check is not None:
            children['receive-ipv4-check'] = yang.gdata.Leaf('boolean', _receive_ipv4_check)
        _receive_ipv6_check = self.receive_ipv6_check
        if _receive_ipv6_check is not None:
            children['receive-ipv6-check'] = yang.gdata.Leaf('boolean', _receive_ipv6_check)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__ip_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_forwarding(receive_ipv4_check=n.get_opt_bool('receive-ipv4-check'), receive_ipv6_check=n.get_opt_bool('receive-ipv6-check'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_forwarding()')
        leaves = []
        _receive_ipv4_check = self.receive_ipv4_check
        if _receive_ipv4_check is not None:
            leaves.append('{self_name}.receive_ipv4_check = {repr(_receive_ipv4_check)}')
        _receive_ipv6_check = self.receive_ipv6_check
        if _receive_ipv6_check is not None:
            leaves.append('{self_name}.receive_ipv6_check = {repr(_receive_ipv6_check)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__ip_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive_ipv4_check = yang.gdata.from_xml_opt_bool(node, 'receive-ipv4-check')
    yang.gdata.maybe_add(children, 'receive-ipv4-check', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv4_check, child_receive_ipv4_check)
    child_receive_ipv6_check = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-check')
    yang.gdata.maybe_add(children, 'receive-ipv6-check', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding__receive_ipv6_check, child_receive_ipv6_check)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__hash_buckets_per_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__max_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(yang.adata.MNode):
    ip_prefix: str
    hash_buckets_per_path: ?int
    max_paths: ?int

    mut def __init__(self, ip_prefix: str, hash_buckets_per_path: ?int, max_paths: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.ip_prefix = ip_prefix
        self.hash_buckets_per_path = hash_buckets_per_path
        self.max_paths = max_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        _hash_buckets_per_path = self.hash_buckets_per_path
        if _hash_buckets_per_path is not None:
            children['hash-buckets-per-path'] = yang.gdata.Leaf('uint8', _hash_buckets_per_path)
        _max_paths = self.max_paths
        if _max_paths is not None:
            children['max-paths'] = yang.gdata.Leaf('uint8', _max_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry:
        return srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix=n.get_str('ip-prefix'), hash_buckets_per_path=n.get_opt_int('hash-buckets-per-path'), max_paths=n.get_opt_int('max-paths'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-load-balancing/resilient-hash-prefix')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix({repr(self.ip_prefix)})')
        leaves = []
        _hash_buckets_per_path = self.hash_buckets_per_path
        if _hash_buckets_per_path is not None:
            leaves.append('{self_name}.hash_buckets_per_path = {repr(_hash_buckets_per_path)}')
        _max_paths = self.max_paths
        if _max_paths is not None:
            leaves.append('{self_name}.max_paths = {repr(_max_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-load-balancing/resilient-hash-prefix'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'resilient-hash-prefix'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__ip_prefix, child_ip_prefix)
    child_hash_buckets_per_path = yang.gdata.from_xml_opt_int(node, 'hash-buckets-per-path')
    yang.gdata.maybe_add(children, 'hash-buckets-per-path', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__hash_buckets_per_path, child_hash_buckets_per_path)
    child_max_paths = yang.gdata.from_xml_opt_int(node, 'max-paths')
    yang.gdata.maybe_add(children, 'max-paths', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix__max_paths, child_max_paths)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_network_instance__network_instance__ip_load_balancing(yang.adata.MNode):
    resilient_hash_prefix: srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix

    mut def __init__(self, resilient_hash_prefix: list[srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.resilient_hash_prefix = srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix(elements=resilient_hash_prefix)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _resilient_hash_prefix = self.resilient_hash_prefix
        if _resilient_hash_prefix is not None:
            children['resilient-hash-prefix'] = _resilient_hash_prefix.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__ip_load_balancing:
        if n != None:
            return srl_nokia_network_instance__network_instance__ip_load_balancing(resilient_hash_prefix=srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix.from_gdata(n.get_opt_list('resilient-hash-prefix')))
        return srl_nokia_network_instance__network_instance__ip_load_balancing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/ip-load-balancing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__ip_load_balancing()')
        leaves = []
        _resilient_hash_prefix = self.resilient_hash_prefix
        for _element in _resilient_hash_prefix.elements:
            res.append('')
            res.append("# List /network-instance/ip-load-balancing/resilient-hash-prefix element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'resilient_hash_prefix_element = {self_name}.resilient_hash_prefix.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('resilient_hash_prefix_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/ip-load-balancing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_resilient_hash_prefix = yang.gdata.from_xml_opt_list(node, 'resilient-hash-prefix')
    yang.gdata.maybe_add(children, 'resilient-hash-prefix', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing__resilient_hash_prefix, child_resilient_hash_prefix)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface__bridge_table(yang.adata.MNode):
    split_horizon_group: ?str

    mut def __init__(self, split_horizon_group: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.split_horizon_group = split_horizon_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__interface__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__interface__bridge_table(split_horizon_group=n.get_opt_str('split-horizon-group'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface__bridge_table()')
        leaves = []
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            leaves.append('{self_name}.split_horizon_group = {repr(_split_horizon_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_split_horizon_group = yang.gdata.from_xml_opt_str(node, 'split-horizon-group')
    yang.gdata.maybe_add(children, 'split-horizon-group', from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table__split_horizon_group, child_split_horizon_group)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__connection_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface_entry(yang.adata.MNode):
    name: str
    interface_ref: srl_nokia_network_instance__network_instance__interface__interface_ref
    bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table
    connection_point: ?str

    mut def __init__(self, name: str, interface_ref: ?srl_nokia_network_instance__network_instance__interface__interface_ref=None, bridge_table: ?srl_nokia_network_instance__network_instance__interface__bridge_table=None, connection_point: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__interface__interface_ref()
        self.bridge_table = bridge_table
        self.connection_point = connection_point

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__interface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = yang.gdata.Leaf('leafref', _connection_point)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface_entry:
        return srl_nokia_network_instance__network_instance__interface_entry(name=n.get_str('name'), interface_ref=srl_nokia_network_instance__network_instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')), bridge_table=srl_nokia_network_instance__network_instance__interface__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')), connection_point=n.get_opt_str('connection-point'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface({repr(self.name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/interface/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        _connection_point = self.connection_point
        if _connection_point is not None:
            leaves.append('{self_name}.connection_point = {repr(_connection_point)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__interface__name, child_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref, child_interface_ref)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__interface__bridge_table, child_bridge_table)
    child_connection_point = yang.gdata.from_xml_opt_str(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__interface__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__vxlan_interface_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__vxlan_interface_entry:
        return srl_nokia_network_instance__network_instance__vxlan_interface_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/vxlan-interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__vxlan_interface({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/vxlan-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__vxlan_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__vxlan_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__encapsulation_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__ethernet_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__connection_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry(yang.adata.MNode):
    name: str
    ethernet_tag: ?int
    connection_point: ?str

    mut def __init__(self, name: str, ethernet_tag: ?int, connection_point: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.name = name
        self.ethernet_tag = ethernet_tag
        self.connection_point = connection_point

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _ethernet_tag = self.ethernet_tag
        if _ethernet_tag is not None:
            children['ethernet-tag'] = yang.gdata.Leaf('uint32', _ethernet_tag)
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = yang.gdata.Leaf('leafref', _connection_point)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry(name=n.get_str('name'), ethernet_tag=n.get_opt_int('ethernet-tag'), connection_point=n.get_opt_str('connection-point'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local/local-attachment-circuit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit({repr(self.name)})')
        leaves = []
        _ethernet_tag = self.ethernet_tag
        if _ethernet_tag is not None:
            leaves.append('{self_name}.ethernet_tag = {repr(_ethernet_tag)}')
        _connection_point = self.connection_point
        if _connection_point is not None:
            leaves.append('{self_name}.connection_point = {repr(_connection_point)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local/local-attachment-circuit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self._name = 'local-attachment-circuit'
        self.elements = elements

    mut def create(self, name, ethernet_tag, connection_point):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry(name, ethernet_tag, connection_point)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__name, child_name)
    child_ethernet_tag = yang.gdata.from_xml_opt_int(node, 'ethernet-tag')
    yang.gdata.maybe_add(children, 'ethernet-tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__ethernet_tag, child_ethernet_tag)
    child_connection_point = yang.gdata.from_xml_opt_str(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local(yang.adata.MNode):
    local_attachment_circuit: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit

    mut def __init__(self, local_attachment_circuit: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.local_attachment_circuit = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit(elements=local_attachment_circuit)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local_attachment_circuit = self.local_attachment_circuit
        if _local_attachment_circuit is not None:
            children['local-attachment-circuit'] = _local_attachment_circuit.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local(local_attachment_circuit=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit.from_gdata(n.get_opt_list('local-attachment-circuit')))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local()')
        leaves = []
        _local_attachment_circuit = self.local_attachment_circuit
        for _element in _local_attachment_circuit.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local/local-attachment-circuit element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'local_attachment_circuit_element = {self_name}.local_attachment_circuit.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('local_attachment_circuit_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/local'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_local_attachment_circuit = yang.gdata.from_xml_opt_list(node, 'local-attachment-circuit')
    yang.gdata.maybe_add(children, 'local-attachment-circuit', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local__local_attachment_circuit, child_local_attachment_circuit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__ethernet_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__connection_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry(yang.adata.MNode):
    name: str
    ethernet_tag: ?int
    connection_point: ?str

    mut def __init__(self, name: str, ethernet_tag: ?int, connection_point: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.name = name
        self.ethernet_tag = ethernet_tag
        self.connection_point = connection_point

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _ethernet_tag = self.ethernet_tag
        if _ethernet_tag is not None:
            children['ethernet-tag'] = yang.gdata.Leaf('uint32', _ethernet_tag)
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = yang.gdata.Leaf('leafref', _connection_point)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry(name=n.get_str('name'), ethernet_tag=n.get_opt_int('ethernet-tag'), connection_point=n.get_opt_str('connection-point'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote/remote-attachment-circuit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit({repr(self.name)})')
        leaves = []
        _ethernet_tag = self.ethernet_tag
        if _ethernet_tag is not None:
            leaves.append('{self_name}.ethernet_tag = {repr(_ethernet_tag)}')
        _connection_point = self.connection_point
        if _connection_point is not None:
            leaves.append('{self_name}.connection_point = {repr(_connection_point)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote/remote-attachment-circuit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self._name = 'remote-attachment-circuit'
        self.elements = elements

    mut def create(self, name, ethernet_tag, connection_point):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry(name, ethernet_tag, connection_point)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__name, child_name)
    child_ethernet_tag = yang.gdata.from_xml_opt_int(node, 'ethernet-tag')
    yang.gdata.maybe_add(children, 'ethernet-tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__ethernet_tag, child_ethernet_tag)
    child_connection_point = yang.gdata.from_xml_opt_str(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote(yang.adata.MNode):
    remote_attachment_circuit: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit

    mut def __init__(self, remote_attachment_circuit: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.remote_attachment_circuit = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit(elements=remote_attachment_circuit)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remote_attachment_circuit = self.remote_attachment_circuit
        if _remote_attachment_circuit is not None:
            children['remote-attachment-circuit'] = _remote_attachment_circuit.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote(remote_attachment_circuit=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit.from_gdata(n.get_opt_list('remote-attachment-circuit')))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote()')
        leaves = []
        _remote_attachment_circuit = self.remote_attachment_circuit
        for _element in _remote_attachment_circuit.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote/remote-attachment-circuit element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'remote_attachment_circuit_element = {self_name}.remote_attachment_circuit.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('remote_attachment_circuit_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits/remote'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_remote_attachment_circuit = yang.gdata.from_xml_opt_list(node, 'remote-attachment-circuit')
    yang.gdata.maybe_add(children, 'remote-attachment-circuit', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote__remote_attachment_circuit, child_remote_attachment_circuit)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits(yang.adata.MNode):
    local: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local
    remote: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote

    mut def __init__(self, local: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local=None, remote: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.local = local if local is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local()
        self.remote = remote if remote is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _local = self.local
        if _local is not None:
            children['local'] = _local.to_gdata()
        _remote = self.remote
        if _remote is not None:
            children['remote'] = _remote.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits(local=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local.from_gdata(n.get_opt_cnt('local')), remote=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote.from_gdata(n.get_opt_cnt('remote')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits()')
        leaves = []
        _local = self.local
        if _local is not None:
            res.extend(_local.prsrc('{self_name}.local', False).splitlines())
        _remote = self.remote
        if _remote is not None:
            res.extend(_remote.prsrc('{self_name}.remote', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_local = yang.gdata.from_xml_opt_cnt(node, 'local')
    yang.gdata.maybe_add(children, 'local', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__local, child_local)
    child_remote = yang.gdata.from_xml_opt_cnt(node, 'remote')
    yang.gdata.maybe_add(children, 'remote', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits__remote, child_remote)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vxlan_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__evi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__ecmp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags__set_tag_set(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags(yang.adata.MNode):
    set_tag_set: list[str]

    mut def __init__(self, set_tag_set: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.set_tag_set = set_tag_set if set_tag_set is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['set-tag-set'] = yang.gdata.LeafList('leafref', self.set_tag_set)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags(set_tag_set=n.get_opt_strs('set-tag-set'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/internal-tags')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags()')
        leaves = []
        _set_tag_set = self.set_tag_set
        if _set_tag_set is not None:
            leaves.append('{self_name}.set_tag_set = {repr(_set_tag_set)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/internal-tags'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_set_tag_set = yang.gdata.from_xml_opt_strs(node, 'set-tag-set')
    yang.gdata.maybe_add(children, 'set-tag-set', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags__set_tag_set, child_set_tag_set)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__flow_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table(yang.adata.MNode):
    split_horizon_group: ?str

    mut def __init__(self, split_horizon_group: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.split_horizon_group = split_horizon_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table(split_horizon_group=n.get_opt_str('split-horizon-group'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table()')
        leaves = []
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            leaves.append('{self_name}.split_horizon_group = {repr(_split_horizon_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_split_horizon_group = yang.gdata.from_xml_opt_str(node, 'split-horizon-group')
    yang.gdata.maybe_add(children, 'split-horizon-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table__split_horizon_group, child_split_horizon_group)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/route-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/route-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls(yang.adata.MNode):
    control_word: ?bool
    flow_label: ?bool
    bridge_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table
    route_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution

    mut def __init__(self, control_word: ?bool, flow_label: ?bool, bridge_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table=None, route_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.control_word = control_word
        self.flow_label = flow_label
        self.bridge_table = bridge_table
        self.route_table = route_table
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution()

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table()
        self.bridge_table = res
        return res

    mut def create_route_table(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table()
        self.route_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _control_word = self.control_word
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('boolean', _control_word)
        _flow_label = self.flow_label
        if _flow_label is not None:
            children['flow-label'] = yang.gdata.Leaf('boolean', _flow_label)
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        _route_table = self.route_table
        if _route_table is not None:
            children['route-table'] = _route_table.to_gdata()
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls(control_word=n.get_opt_bool('control-word'), flow_label=n.get_opt_bool('flow-label'), bridge_table=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')), route_table=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table.from_gdata(n.get_opt_cnt('route-table')), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls()')
        leaves = []
        _control_word = self.control_word
        if _control_word is not None:
            leaves.append('{self_name}.control_word = {repr(_control_word)}')
        _flow_label = self.flow_label
        if _flow_label is not None:
            leaves.append('{self_name}.flow_label = {repr(_flow_label)}')
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        _route_table = self.route_table
        if _route_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls/route-table')
            res.append('route_table = {self_name}.create_route_table()')
            res.extend(_route_table.prsrc('route_table', False).splitlines())
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_control_word = yang.gdata.from_xml_opt_bool(node, 'control-word')
    yang.gdata.maybe_add(children, 'control-word', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__control_word, child_control_word)
    child_flow_label = yang.gdata.from_xml_opt_bool(node, 'flow-label')
    yang.gdata.maybe_add(children, 'flow-label', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__flow_label, child_flow_label)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__bridge_table, child_bridge_table)
    child_route_table = yang.gdata.from_xml_opt_cnt(node, 'route-table')
    yang.gdata.maybe_add(children, 'route-table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__route_table, child_route_table)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls__next_hop_resolution, child_next_hop_resolution)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise_arp_nd_only_with_mac_table_entry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise_arp_nd_extended_community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip(yang.adata.MNode):
    advertise: ?bool
    advertise_arp_nd_only_with_mac_table_entry: ?bool
    advertise_arp_nd_extended_community: ?bool

    mut def __init__(self, advertise: ?bool, advertise_arp_nd_only_with_mac_table_entry: ?bool, advertise_arp_nd_extended_community: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.advertise = advertise
        self.advertise_arp_nd_only_with_mac_table_entry = advertise_arp_nd_only_with_mac_table_entry
        self.advertise_arp_nd_extended_community = advertise_arp_nd_extended_community

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise = self.advertise
        if _advertise is not None:
            children['advertise'] = yang.gdata.Leaf('boolean', _advertise)
        _advertise_arp_nd_only_with_mac_table_entry = self.advertise_arp_nd_only_with_mac_table_entry
        if _advertise_arp_nd_only_with_mac_table_entry is not None:
            children['advertise-arp-nd-only-with-mac-table-entry'] = yang.gdata.Leaf('boolean', _advertise_arp_nd_only_with_mac_table_entry)
        _advertise_arp_nd_extended_community = self.advertise_arp_nd_extended_community
        if _advertise_arp_nd_extended_community is not None:
            children['advertise-arp-nd-extended-community'] = yang.gdata.Leaf('boolean', _advertise_arp_nd_extended_community)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip(advertise=n.get_opt_bool('advertise'), advertise_arp_nd_only_with_mac_table_entry=n.get_opt_bool('advertise-arp-nd-only-with-mac-table-entry'), advertise_arp_nd_extended_community=n.get_opt_bool('advertise-arp-nd-extended-community'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/mac-ip')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip()')
        leaves = []
        _advertise = self.advertise
        if _advertise is not None:
            leaves.append('{self_name}.advertise = {repr(_advertise)}')
        _advertise_arp_nd_only_with_mac_table_entry = self.advertise_arp_nd_only_with_mac_table_entry
        if _advertise_arp_nd_only_with_mac_table_entry is not None:
            leaves.append('{self_name}.advertise_arp_nd_only_with_mac_table_entry = {repr(_advertise_arp_nd_only_with_mac_table_entry)}')
        _advertise_arp_nd_extended_community = self.advertise_arp_nd_extended_community
        if _advertise_arp_nd_extended_community is not None:
            leaves.append('{self_name}.advertise_arp_nd_extended_community = {repr(_advertise_arp_nd_extended_community)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/mac-ip'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise = yang.gdata.from_xml_opt_bool(node, 'advertise')
    yang.gdata.maybe_add(children, 'advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise, child_advertise)
    child_advertise_arp_nd_only_with_mac_table_entry = yang.gdata.from_xml_opt_bool(node, 'advertise-arp-nd-only-with-mac-table-entry')
    yang.gdata.maybe_add(children, 'advertise-arp-nd-only-with-mac-table-entry', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise_arp_nd_only_with_mac_table_entry, child_advertise_arp_nd_only_with_mac_table_entry)
    child_advertise_arp_nd_extended_community = yang.gdata.from_xml_opt_bool(node, 'advertise-arp-nd-extended-community')
    yang.gdata.maybe_add(children, 'advertise-arp-nd-extended-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip__advertise_arp_nd_extended_community, child_advertise_arp_nd_extended_community)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast__advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast__originating_ip(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast(yang.adata.MNode):
    advertise: ?bool
    originating_ip: ?str

    mut def __init__(self, advertise: ?bool, originating_ip: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.advertise = advertise
        self.originating_ip = originating_ip

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise = self.advertise
        if _advertise is not None:
            children['advertise'] = yang.gdata.Leaf('boolean', _advertise)
        _originating_ip = self.originating_ip
        if _originating_ip is not None:
            children['originating-ip'] = yang.gdata.Leaf('union', _originating_ip)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast(advertise=n.get_opt_bool('advertise'), originating_ip=n.get_opt_str('originating-ip'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/inclusive-mcast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast()')
        leaves = []
        _advertise = self.advertise
        if _advertise is not None:
            leaves.append('{self_name}.advertise = {repr(_advertise)}')
        _originating_ip = self.originating_ip
        if _originating_ip is not None:
            leaves.append('{self_name}.originating_ip = {repr(_originating_ip)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table/inclusive-mcast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise = yang.gdata.from_xml_opt_bool(node, 'advertise')
    yang.gdata.maybe_add(children, 'advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast__advertise, child_advertise)
    child_originating_ip = yang.gdata.from_xml_opt_str(node, 'originating-ip')
    yang.gdata.maybe_add(children, 'originating-ip', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast__originating_ip, child_originating_ip)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__next_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__vlan_aware_bundle_eth_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table(yang.adata.MNode):
    mac_ip: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip
    inclusive_mcast: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast
    next_hop: ?value
    vlan_aware_bundle_eth_tag: ?int

    mut def __init__(self, mac_ip: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip=None, inclusive_mcast: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast=None, next_hop: ?value, vlan_aware_bundle_eth_tag: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.mac_ip = mac_ip if mac_ip is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip()
        self.inclusive_mcast = inclusive_mcast if inclusive_mcast is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast()
        self.next_hop = next_hop
        self.vlan_aware_bundle_eth_tag = vlan_aware_bundle_eth_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mac_ip = self.mac_ip
        if _mac_ip is not None:
            children['mac-ip'] = _mac_ip.to_gdata()
        _inclusive_mcast = self.inclusive_mcast
        if _inclusive_mcast is not None:
            children['inclusive-mcast'] = _inclusive_mcast.to_gdata()
        _next_hop = self.next_hop
        if _next_hop is not None:
            children['next-hop'] = yang.gdata.Leaf('union', _next_hop)
        _vlan_aware_bundle_eth_tag = self.vlan_aware_bundle_eth_tag
        if _vlan_aware_bundle_eth_tag is not None:
            children['vlan-aware-bundle-eth-tag'] = yang.gdata.Leaf('uint32', _vlan_aware_bundle_eth_tag)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table(mac_ip=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip.from_gdata(n.get_opt_cnt('mac-ip')), inclusive_mcast=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast.from_gdata(n.get_opt_cnt('inclusive-mcast')), next_hop=n.get_opt_value('next-hop'), vlan_aware_bundle_eth_tag=n.get_opt_int('vlan-aware-bundle-eth-tag'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table()')
        leaves = []
        _mac_ip = self.mac_ip
        if _mac_ip is not None:
            res.extend(_mac_ip.prsrc('{self_name}.mac_ip', False).splitlines())
        _inclusive_mcast = self.inclusive_mcast
        if _inclusive_mcast is not None:
            res.extend(_inclusive_mcast.prsrc('{self_name}.inclusive_mcast', False).splitlines())
        _next_hop = self.next_hop
        if _next_hop is not None:
            leaves.append('{self_name}.next_hop = {repr(_next_hop)}')
        _vlan_aware_bundle_eth_tag = self.vlan_aware_bundle_eth_tag
        if _vlan_aware_bundle_eth_tag is not None:
            leaves.append('{self_name}.vlan_aware_bundle_eth_tag = {repr(_vlan_aware_bundle_eth_tag)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mac_ip = yang.gdata.from_xml_opt_cnt(node, 'mac-ip')
    yang.gdata.maybe_add(children, 'mac-ip', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__mac_ip, child_mac_ip)
    child_inclusive_mcast = yang.gdata.from_xml_opt_cnt(node, 'inclusive-mcast')
    yang.gdata.maybe_add(children, 'inclusive-mcast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__inclusive_mcast, child_inclusive_mcast)
    child_next_hop = yang.gdata.from_xml_opt_value(node, 'next-hop')
    yang.gdata.maybe_add(children, 'next-hop', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__next_hop, child_next_hop)
    child_vlan_aware_bundle_eth_tag = yang.gdata.from_xml_opt_int(node, 'vlan-aware-bundle-eth-tag')
    yang.gdata.maybe_add(children, 'vlan-aware-bundle-eth-tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table__vlan_aware_bundle_eth_tag, child_vlan_aware_bundle_eth_tag)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip__advertise_gateway_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip(yang.adata.MNode):
    advertise_gateway_mac: ?bool

    mut def __init__(self, advertise_gateway_mac: ?bool):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.advertise_gateway_mac = advertise_gateway_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_gateway_mac = self.advertise_gateway_mac
        if _advertise_gateway_mac is not None:
            children['advertise-gateway-mac'] = yang.gdata.Leaf('boolean', _advertise_gateway_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip(advertise_gateway_mac=n.get_opt_bool('advertise-gateway-mac'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/mac-ip')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip()')
        leaves = []
        _advertise_gateway_mac = self.advertise_gateway_mac
        if _advertise_gateway_mac is not None:
            leaves.append('{self_name}.advertise_gateway_mac = {repr(_advertise_gateway_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/mac-ip'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_gateway_mac = yang.gdata.from_xml_opt_bool(node, 'advertise-gateway-mac')
    yang.gdata.maybe_add(children, 'advertise-gateway-mac', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip__advertise_gateway_mac, child_advertise_gateway_mac)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise__weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise__maximum_dynamic_weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise(yang.adata.MNode):
    weight: ?value
    maximum_dynamic_weight: ?int

    mut def __init__(self, weight: ?value, maximum_dynamic_weight: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.weight = weight
        self.maximum_dynamic_weight = maximum_dynamic_weight

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weight = self.weight
        if _weight is not None:
            children['weight'] = yang.gdata.Leaf('union', _weight)
        _maximum_dynamic_weight = self.maximum_dynamic_weight
        if _maximum_dynamic_weight is not None:
            children['maximum-dynamic-weight'] = yang.gdata.Leaf('uint32', _maximum_dynamic_weight)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise(weight=n.get_opt_value('weight'), maximum_dynamic_weight=n.get_opt_int('maximum-dynamic-weight'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/advertise')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise()')
        leaves = []
        _weight = self.weight
        if _weight is not None:
            leaves.append('{self_name}.weight = {repr(_weight)}')
        _maximum_dynamic_weight = self.maximum_dynamic_weight
        if _maximum_dynamic_weight is not None:
            leaves.append('{self_name}.maximum_dynamic_weight = {repr(_maximum_dynamic_weight)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/advertise'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_weight = yang.gdata.from_xml_opt_value(node, 'weight')
    yang.gdata.maybe_add(children, 'weight', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise__weight, child_weight)
    child_maximum_dynamic_weight = yang.gdata.from_xml_opt_int(node, 'maximum-dynamic-weight')
    yang.gdata.maybe_add(children, 'maximum-dynamic-weight', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise__maximum_dynamic_weight, child_maximum_dynamic_weight)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str
    max_ecmp_hash_buckets_per_next_hop_group: ?int

    mut def __init__(self, admin_state: ?str, max_ecmp_hash_buckets_per_next_hop_group: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.admin_state = admin_state
        self.max_ecmp_hash_buckets_per_next_hop_group = max_ecmp_hash_buckets_per_next_hop_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            children['max-ecmp-hash-buckets-per-next-hop-group'] = yang.gdata.Leaf('uint16', _max_ecmp_hash_buckets_per_next_hop_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp(admin_state=n.get_opt_str('admin-state'), max_ecmp_hash_buckets_per_next_hop_group=n.get_opt_int('max-ecmp-hash-buckets-per-next-hop-group'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            leaves.append('{self_name}.max_ecmp_hash_buckets_per_next_hop_group = {repr(_max_ecmp_hash_buckets_per_next_hop_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp__admin_state, child_admin_state)
    child_max_ecmp_hash_buckets_per_next_hop_group = yang.gdata.from_xml_opt_int(node, 'max-ecmp-hash-buckets-per-next-hop-group')
    yang.gdata.maybe_add(children, 'max-ecmp-hash-buckets-per-next-hop-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group, child_max_ecmp_hash_buckets_per_next_hop_group)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth(yang.adata.MNode):
    advertise: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp

    mut def __init__(self, advertise: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise=None, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.advertise = advertise
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp()

    mut def create_advertise(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise()
        self.advertise = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise = self.advertise
        if _advertise is not None:
            children['advertise'] = _advertise.to_gdata()
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth(advertise=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise.from_gdata(n.get_opt_cnt('advertise')), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth()')
        leaves = []
        _advertise = self.advertise
        if _advertise is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth/advertise')
            res.append('advertise = {self_name}.create_advertise()')
            res.extend(_advertise.prsrc('advertise', False).splitlines())
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix/evpn-link-bandwidth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise = yang.gdata.from_xml_opt_cnt(node, 'advertise')
    yang.gdata.maybe_add(children, 'advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__advertise, child_advertise)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth__weighted_ecmp, child_weighted_ecmp)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix(yang.adata.MNode):
    evpn_link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth

    mut def __init__(self, evpn_link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.evpn_link_bandwidth = evpn_link_bandwidth if evpn_link_bandwidth is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _evpn_link_bandwidth = self.evpn_link_bandwidth
        if _evpn_link_bandwidth is not None:
            children['evpn-link-bandwidth'] = _evpn_link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix(evpn_link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth.from_gdata(n.get_opt_cnt('evpn-link-bandwidth')))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix()')
        leaves = []
        _evpn_link_bandwidth = self.evpn_link_bandwidth
        if _evpn_link_bandwidth is not None:
            res.extend(_evpn_link_bandwidth.prsrc('{self_name}.evpn_link_bandwidth', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table/ip-prefix'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_evpn_link_bandwidth = yang.gdata.from_xml_opt_cnt(node, 'evpn-link-bandwidth')
    yang.gdata.maybe_add(children, 'evpn-link-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix__evpn_link_bandwidth, child_evpn_link_bandwidth)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table(yang.adata.MNode):
    mac_ip: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip
    ip_prefix: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix

    mut def __init__(self, mac_ip: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip=None, ip_prefix: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.mac_ip = mac_ip if mac_ip is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip()
        self.ip_prefix = ip_prefix if ip_prefix is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mac_ip = self.mac_ip
        if _mac_ip is not None:
            children['mac-ip'] = _mac_ip.to_gdata()
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = _ip_prefix.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table(mac_ip=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip.from_gdata(n.get_opt_cnt('mac-ip')), ip_prefix=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix.from_gdata(n.get_opt_cnt('ip-prefix')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table()')
        leaves = []
        _mac_ip = self.mac_ip
        if _mac_ip is not None:
            res.extend(_mac_ip.prsrc('{self_name}.mac_ip', False).splitlines())
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            res.extend(_ip_prefix.prsrc('{self_name}.ip_prefix', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mac_ip = yang.gdata.from_xml_opt_cnt(node, 'mac-ip')
    yang.gdata.maybe_add(children, 'mac-ip', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__mac_ip, child_mac_ip)
    child_ip_prefix = yang.gdata.from_xml_opt_cnt(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table__ip_prefix, child_ip_prefix)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes(yang.adata.MNode):
    bridge_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table
    route_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table

    mut def __init__(self, bridge_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table=None, route_table: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.bridge_table = bridge_table
        self.route_table = route_table

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table()
        self.bridge_table = res
        return res

    mut def create_route_table(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table()
        self.route_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        _route_table = self.route_table
        if _route_table is not None:
            children['route-table'] = _route_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes(bridge_table=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')), route_table=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table.from_gdata(n.get_opt_cnt('route-table')))
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance/routes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes()')
        leaves = []
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        _route_table = self.route_table
        if _route_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/routes/route-table')
            res.append('route_table = {self_name}.create_route_table()')
            res.extend(_route_table.prsrc('route_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance/routes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__bridge_table, child_bridge_table)
    child_route_table = yang.gdata.from_xml_opt_cnt(node, 'route-table')
    yang.gdata.maybe_add(children, 'route-table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes__route_table, child_route_table)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(yang.adata.MNode):
    id: int
    admin_state: ?str
    encapsulation_type: ?str
    vpws_attachment_circuits: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits
    vxlan_interface: ?str
    evi: ?int
    ecmp: ?int
    internal_tags: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags
    mpls: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls
    routes: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes

    mut def __init__(self, id: int, admin_state: ?str, encapsulation_type: ?str, vpws_attachment_circuits: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits=None, vxlan_interface: ?str, evi: ?int, ecmp: ?int, internal_tags: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags=None, mpls: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls=None, routes: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.id = id
        self.admin_state = admin_state
        self.encapsulation_type = encapsulation_type
        self.vpws_attachment_circuits = vpws_attachment_circuits
        self.vxlan_interface = vxlan_interface
        self.evi = evi
        self.ecmp = ecmp
        self.internal_tags = internal_tags if internal_tags is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags()
        self.mpls = mpls
        self.routes = routes if routes is not None else srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes()

    mut def create_vpws_attachment_circuits(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits()
        self.vpws_attachment_circuits = res
        return res

    mut def create_mpls(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls()
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint8', _id)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _encapsulation_type = self.encapsulation_type
        if _encapsulation_type is not None:
            children['encapsulation-type'] = yang.gdata.Leaf('enumeration', _encapsulation_type)
        _vpws_attachment_circuits = self.vpws_attachment_circuits
        if _vpws_attachment_circuits is not None:
            children['vpws-attachment-circuits'] = _vpws_attachment_circuits.to_gdata()
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = yang.gdata.Leaf('leafref', _vxlan_interface)
        _evi = self.evi
        if _evi is not None:
            children['evi'] = yang.gdata.Leaf('uint32', _evi)
        _ecmp = self.ecmp
        if _ecmp is not None:
            children['ecmp'] = yang.gdata.Leaf('uint32', _ecmp)
        _internal_tags = self.internal_tags
        if _internal_tags is not None:
            children['internal-tags'] = _internal_tags.to_gdata()
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        _routes = self.routes
        if _routes is not None:
            children['routes'] = _routes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(id=n.get_int('id'), admin_state=n.get_opt_str('admin-state'), encapsulation_type=n.get_opt_str('encapsulation-type'), vpws_attachment_circuits=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits.from_gdata(n.get_opt_cnt('vpws-attachment-circuits')), vxlan_interface=n.get_opt_str('vxlan-interface'), evi=n.get_opt_int('evi'), ecmp=n.get_opt_int('ecmp'), internal_tags=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags.from_gdata(n.get_opt_cnt('internal-tags')), mpls=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls.from_gdata(n.get_opt_cnt('mpls')), routes=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes.from_gdata(n.get_opt_cnt('routes')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance({repr(self.id)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _encapsulation_type = self.encapsulation_type
        if _encapsulation_type is not None:
            leaves.append('{self_name}.encapsulation_type = {repr(_encapsulation_type)}')
        _vpws_attachment_circuits = self.vpws_attachment_circuits
        if _vpws_attachment_circuits is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/vpws-attachment-circuits')
            res.append('vpws_attachment_circuits = {self_name}.create_vpws_attachment_circuits()')
            res.extend(_vpws_attachment_circuits.prsrc('vpws_attachment_circuits', False).splitlines())
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            leaves.append('{self_name}.vxlan_interface = {repr(_vxlan_interface)}')
        _evi = self.evi
        if _evi is not None:
            leaves.append('{self_name}.evi = {repr(_evi)}')
        _ecmp = self.ecmp
        if _ecmp is not None:
            leaves.append('{self_name}.ecmp = {repr(_ecmp)}')
        _internal_tags = self.internal_tags
        if _internal_tags is not None:
            res.extend(_internal_tags.prsrc('{self_name}.internal_tags', False).splitlines())
        _mpls = self.mpls
        if _mpls is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn/bgp-instance/mpls')
            res.append('mpls = {self_name}.create_mpls()')
            res.extend(_mpls.prsrc('mpls', False).splitlines())
        _routes = self.routes
        if _routes is not None:
            res.extend(_routes.prsrc('{self_name}.routes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self._name = 'bgp-instance'
        self.elements = elements

    mut def create(self, id, evi):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(id, evi)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements, ns='urn:nokia.com:srlinux:net-inst:bgp-evpn', module='srl_nokia-bgp-evpn')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_id = yang.gdata.from_xml_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__id, child_id)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__admin_state, child_admin_state)
    child_encapsulation_type = yang.gdata.from_xml_opt_str(node, 'encapsulation-type')
    yang.gdata.maybe_add(children, 'encapsulation-type', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__encapsulation_type, child_encapsulation_type)
    child_vpws_attachment_circuits = yang.gdata.from_xml_opt_cnt(node, 'vpws-attachment-circuits')
    yang.gdata.maybe_add(children, 'vpws-attachment-circuits', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vpws_attachment_circuits, child_vpws_attachment_circuits)
    child_vxlan_interface = yang.gdata.from_xml_opt_str(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vxlan_interface, child_vxlan_interface)
    child_evi = yang.gdata.from_xml_opt_int(node, 'evi')
    yang.gdata.maybe_add(children, 'evi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__evi, child_evi)
    child_ecmp = yang.gdata.from_xml_opt_int(node, 'ecmp')
    yang.gdata.maybe_add(children, 'ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__ecmp, child_ecmp)
    child_internal_tags = yang.gdata.from_xml_opt_cnt(node, 'internal-tags')
    yang.gdata.maybe_add(children, 'internal-tags', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__internal_tags, child_internal_tags)
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__mpls, child_mpls)
    child_routes = yang.gdata.from_xml_opt_cnt(node, 'routes')
    yang.gdata.maybe_add(children, 'routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__routes, child_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['id'], elements=elements, ns='urn:nokia.com:srlinux:net-inst:bgp-evpn', module='srl_nokia-bgp-evpn')

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn(yang.adata.MNode):
    bgp_instance: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance

    mut def __init__(self, bgp_instance: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.bgp_instance = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(elements=bgp_instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_instance = self.bgp_instance
        if _bgp_instance is not None:
            children['bgp-instance'] = _bgp_instance.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn(bgp_instance=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance.from_gdata(n.get_opt_list('bgp-instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()')
        leaves = []
        _bgp_instance = self.bgp_instance
        for _element in _bgp_instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-evpn/bgp-instance element: {_element.to_gdata().key_str(['id'])}")
            list_elem = 'bgp_instance_element = {self_name}.bgp_instance.create({repr(_element.id)})'
            res.append(list_elem)
            res.extend(_element.prsrc('bgp_instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_instance = yang.gdata.from_xml_opt_list(node, 'bgp-instance', 'urn:nokia.com:srlinux:net-inst:bgp-evpn')
    yang.gdata.maybe_add(children, 'bgp-instance', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance, child_bgp_instance)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-ipvpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-ipvpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__directly_connected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__directly_connected:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__directly_connected()
        return srl_nokia_network_instance__network_instance__protocols__directly_connected()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/directly-connected')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__directly_connected()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/directly-connected'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/non-stop-forwarding')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/non-stop-forwarding'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str
    max_ecmp_hash_buckets_per_next_hop_group: ?int

    mut def __init__(self, admin_state: ?str, max_ecmp_hash_buckets_per_next_hop_group: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_ecmp_hash_buckets_per_next_hop_group = max_ecmp_hash_buckets_per_next_hop_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            children['max-ecmp-hash-buckets-per-next-hop-group'] = yang.gdata.Leaf('uint16', _max_ecmp_hash_buckets_per_next_hop_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(admin_state=n.get_opt_str('admin-state'), max_ecmp_hash_buckets_per_next_hop_group=n.get_opt_int('max-ecmp-hash-buckets-per-next-hop-group'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            leaves.append('{self_name}.max_ecmp_hash_buckets_per_next_hop_group = {repr(_max_ecmp_hash_buckets_per_next_hop_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__admin_state, child_admin_state)
    child_max_ecmp_hash_buckets_per_next_hop_group = yang.gdata.from_xml_opt_int(node, 'max-ecmp-hash-buckets-per-next-hop-group')
    yang.gdata.maybe_add(children, 'max-ecmp-hash-buckets-per-next-hop-group', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp__max_ecmp_hash_buckets_per_next_hop_group, child_max_ecmp_hash_buckets_per_next_hop_group)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(yang.adata.MNode):
    ignore: ?bool
    suppress: ?bool

    mut def __init__(self, ignore: ?bool, suppress: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ignore = ignore
        self.suppress = suppress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ignore = self.ignore
        if _ignore is not None:
            children['ignore'] = yang.gdata.Leaf('boolean', _ignore)
        _suppress = self.suppress
        if _suppress is not None:
            children['suppress'] = yang.gdata.Leaf('boolean', _suppress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(ignore=n.get_opt_bool('ignore'), suppress=n.get_opt_bool('suppress'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/attached-bit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()')
        leaves = []
        _ignore = self.ignore
        if _ignore is not None:
            leaves.append('{self_name}.ignore = {repr(_ignore)}')
        _suppress = self.suppress
        if _suppress is not None:
            leaves.append('{self_name}.suppress = {repr(_suppress)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/attached-bit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ignore = yang.gdata.from_xml_opt_bool(node, 'ignore')
    yang.gdata.maybe_add(children, 'ignore', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore, child_ignore)
    child_suppress = yang.gdata.from_xml_opt_bool(node, 'suppress')
    yang.gdata.maybe_add(children, 'suppress', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress, child_suppress)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_interlevel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_external(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__set_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__max_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(yang.adata.MNode):
    set_bit: ?bool
    max_metric: ?bool

    mut def __init__(self, set_bit: ?bool, max_metric: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.set_bit = set_bit
        self.max_metric = max_metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_bit = self.set_bit
        if _set_bit is not None:
            children['set-bit'] = yang.gdata.Leaf('boolean', _set_bit)
        _max_metric = self.max_metric
        if _max_metric is not None:
            children['max-metric'] = yang.gdata.Leaf('boolean', _max_metric)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(set_bit=n.get_opt_bool('set-bit'), max_metric=n.get_opt_bool('max-metric'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload/immediate')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()')
        leaves = []
        _set_bit = self.set_bit
        if _set_bit is not None:
            leaves.append('{self_name}.set_bit = {repr(_set_bit)}')
        _max_metric = self.max_metric
        if _max_metric is not None:
            leaves.append('{self_name}.max_metric = {repr(_max_metric)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload/immediate'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_set_bit = yang.gdata.from_xml_opt_bool(node, 'set-bit')
    yang.gdata.maybe_add(children, 'set-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__set_bit, child_set_bit)
    child_max_metric = yang.gdata.from_xml_opt_bool(node, 'max-metric')
    yang.gdata.maybe_add(children, 'max-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate__max_metric, child_max_metric)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__set_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__max_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(yang.adata.MNode):
    set_bit: ?bool
    max_metric: ?bool
    timeout: ?int

    mut def __init__(self, set_bit: ?bool, max_metric: ?bool, timeout: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.set_bit = set_bit
        self.max_metric = max_metric
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _set_bit = self.set_bit
        if _set_bit is not None:
            children['set-bit'] = yang.gdata.Leaf('boolean', _set_bit)
        _max_metric = self.max_metric
        if _max_metric is not None:
            children['max-metric'] = yang.gdata.Leaf('boolean', _max_metric)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('uint16', _timeout)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(set_bit=n.get_opt_bool('set-bit'), max_metric=n.get_opt_bool('max-metric'), timeout=n.get_opt_int('timeout'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload/on-boot')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()')
        leaves = []
        _set_bit = self.set_bit
        if _set_bit is not None:
            leaves.append('{self_name}.set_bit = {repr(_set_bit)}')
        _max_metric = self.max_metric
        if _max_metric is not None:
            leaves.append('{self_name}.max_metric = {repr(_max_metric)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload/on-boot'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_set_bit = yang.gdata.from_xml_opt_bool(node, 'set-bit')
    yang.gdata.maybe_add(children, 'set-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__set_bit, child_set_bit)
    child_max_metric = yang.gdata.from_xml_opt_bool(node, 'max-metric')
    yang.gdata.maybe_add(children, 'max-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__max_metric, child_max_metric)
    child_timeout = yang.gdata.from_xml_opt_int(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot__timeout, child_timeout)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(yang.adata.MNode):
    advertise_interlevel: ?bool
    advertise_external: ?bool
    immediate: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate
    on_boot: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot

    mut def __init__(self, advertise_interlevel: ?bool, advertise_external: ?bool, immediate: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate=None, on_boot: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.advertise_interlevel = advertise_interlevel
        self.advertise_external = advertise_external
        self.immediate = immediate if immediate is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate()
        self.on_boot = on_boot if on_boot is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_interlevel = self.advertise_interlevel
        if _advertise_interlevel is not None:
            children['advertise-interlevel'] = yang.gdata.Leaf('boolean', _advertise_interlevel)
        _advertise_external = self.advertise_external
        if _advertise_external is not None:
            children['advertise-external'] = yang.gdata.Leaf('boolean', _advertise_external)
        _immediate = self.immediate
        if _immediate is not None:
            children['immediate'] = _immediate.to_gdata()
        _on_boot = self.on_boot
        if _on_boot is not None:
            children['on-boot'] = _on_boot.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__overload:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(advertise_interlevel=n.get_opt_bool('advertise-interlevel'), advertise_external=n.get_opt_bool('advertise-external'), immediate=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate.from_gdata(n.get_opt_cnt('immediate')), on_boot=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot.from_gdata(n.get_opt_cnt('on-boot')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/overload')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()')
        leaves = []
        _advertise_interlevel = self.advertise_interlevel
        if _advertise_interlevel is not None:
            leaves.append('{self_name}.advertise_interlevel = {repr(_advertise_interlevel)}')
        _advertise_external = self.advertise_external
        if _advertise_external is not None:
            leaves.append('{self_name}.advertise_external = {repr(_advertise_external)}')
        _immediate = self.immediate
        if _immediate is not None:
            res.extend(_immediate.prsrc('{self_name}.immediate', False).splitlines())
        _on_boot = self.on_boot
        if _on_boot is not None:
            res.extend(_on_boot.prsrc('{self_name}.on_boot', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/overload'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_interlevel = yang.gdata.from_xml_opt_bool(node, 'advertise-interlevel')
    yang.gdata.maybe_add(children, 'advertise-interlevel', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_interlevel, child_advertise_interlevel)
    child_advertise_external = yang.gdata.from_xml_opt_bool(node, 'advertise-external')
    yang.gdata.maybe_add(children, 'advertise-external', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__advertise_external, child_advertise_external)
    child_immediate = yang.gdata.from_xml_opt_cnt(node, 'immediate')
    yang.gdata.maybe_add(children, 'immediate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__immediate, child_immediate)
    child_on_boot = yang.gdata.from_xml_opt_cnt(node, 'on-boot')
    yang.gdata.maybe_add(children, 'on-boot', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload__on_boot, child_on_boot)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__half_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(yang.adata.MNode):
    interval: ?int
    half_lifetime: ?bool

    mut def __init__(self, interval: ?int, half_lifetime: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interval = interval
        self.half_lifetime = half_lifetime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('uint16', _interval)
        _half_lifetime = self.half_lifetime
        if _half_lifetime is not None:
            children['half-lifetime'] = yang.gdata.Leaf('boolean', _half_lifetime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(interval=n.get_opt_int('interval'), half_lifetime=n.get_opt_bool('half-lifetime'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/lsp-refresh')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()')
        leaves = []
        _interval = self.interval
        if _interval is not None:
            leaves.append('{self_name}.interval = {repr(_interval)}')
        _half_lifetime = self.half_lifetime
        if _half_lifetime is not None:
            leaves.append('{self_name}.half_lifetime = {repr(_half_lifetime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/lsp-refresh'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interval = yang.gdata.from_xml_opt_int(node, 'interval')
    yang.gdata.maybe_add(children, 'interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__interval, child_interval)
    child_half_lifetime = yang.gdata.from_xml_opt_bool(node, 'half-lifetime')
    yang.gdata.maybe_add(children, 'half-lifetime', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh__half_lifetime, child_half_lifetime)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__initial_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__second_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(yang.adata.MNode):
    initial_wait: ?int
    second_wait: ?int
    max_wait: ?int

    mut def __init__(self, initial_wait: ?int, second_wait: ?int, max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.initial_wait = initial_wait
        self.second_wait = second_wait
        self.max_wait = max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            children['initial-wait'] = yang.gdata.Leaf('uint64', _initial_wait)
        _second_wait = self.second_wait
        if _second_wait is not None:
            children['second-wait'] = yang.gdata.Leaf('uint64', _second_wait)
        _max_wait = self.max_wait
        if _max_wait is not None:
            children['max-wait'] = yang.gdata.Leaf('uint64', _max_wait)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(initial_wait=n.get_opt_int('initial-wait'), second_wait=n.get_opt_int('second-wait'), max_wait=n.get_opt_int('max-wait'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/spf')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()')
        leaves = []
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            leaves.append('{self_name}.initial_wait = {repr(_initial_wait)}')
        _second_wait = self.second_wait
        if _second_wait is not None:
            leaves.append('{self_name}.second_wait = {repr(_second_wait)}')
        _max_wait = self.max_wait
        if _max_wait is not None:
            leaves.append('{self_name}.max_wait = {repr(_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/spf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_initial_wait = yang.gdata.from_xml_opt_int(node, 'initial-wait')
    yang.gdata.maybe_add(children, 'initial-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__initial_wait, child_initial_wait)
    child_second_wait = yang.gdata.from_xml_opt_int(node, 'second-wait')
    yang.gdata.maybe_add(children, 'second-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__second_wait, child_second_wait)
    child_max_wait = yang.gdata.from_xml_opt_int(node, 'max-wait')
    yang.gdata.maybe_add(children, 'max-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf__max_wait, child_max_wait)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__initial_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__second_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(yang.adata.MNode):
    initial_wait: ?int
    second_wait: ?int
    max_wait: ?int

    mut def __init__(self, initial_wait: ?int, second_wait: ?int, max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.initial_wait = initial_wait
        self.second_wait = second_wait
        self.max_wait = max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            children['initial-wait'] = yang.gdata.Leaf('uint64', _initial_wait)
        _second_wait = self.second_wait
        if _second_wait is not None:
            children['second-wait'] = yang.gdata.Leaf('uint64', _second_wait)
        _max_wait = self.max_wait
        if _max_wait is not None:
            children['max-wait'] = yang.gdata.Leaf('uint64', _max_wait)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(initial_wait=n.get_opt_int('initial-wait'), second_wait=n.get_opt_int('second-wait'), max_wait=n.get_opt_int('max-wait'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers/lsp-generation')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()')
        leaves = []
        _initial_wait = self.initial_wait
        if _initial_wait is not None:
            leaves.append('{self_name}.initial_wait = {repr(_initial_wait)}')
        _second_wait = self.second_wait
        if _second_wait is not None:
            leaves.append('{self_name}.second_wait = {repr(_second_wait)}')
        _max_wait = self.max_wait
        if _max_wait is not None:
            leaves.append('{self_name}.max_wait = {repr(_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers/lsp-generation'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_initial_wait = yang.gdata.from_xml_opt_int(node, 'initial-wait')
    yang.gdata.maybe_add(children, 'initial-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__initial_wait, child_initial_wait)
    child_second_wait = yang.gdata.from_xml_opt_int(node, 'second-wait')
    yang.gdata.maybe_add(children, 'second-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__second_wait, child_second_wait)
    child_max_wait = yang.gdata.from_xml_opt_int(node, 'max-wait')
    yang.gdata.maybe_add(children, 'max-wait', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation__max_wait, child_max_wait)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(yang.adata.MNode):
    lsp_lifetime: ?int
    lsp_refresh: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh
    spf: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf
    lsp_generation: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation

    mut def __init__(self, lsp_lifetime: ?int, lsp_refresh: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh=None, spf: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf=None, lsp_generation: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.lsp_lifetime = lsp_lifetime
        self.lsp_refresh = lsp_refresh if lsp_refresh is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh()
        self.spf = spf if spf is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf()
        self.lsp_generation = lsp_generation if lsp_generation is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            children['lsp-lifetime'] = yang.gdata.Leaf('uint16', _lsp_lifetime)
        _lsp_refresh = self.lsp_refresh
        if _lsp_refresh is not None:
            children['lsp-refresh'] = _lsp_refresh.to_gdata()
        _spf = self.spf
        if _spf is not None:
            children['spf'] = _spf.to_gdata()
        _lsp_generation = self.lsp_generation
        if _lsp_generation is not None:
            children['lsp-generation'] = _lsp_generation.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(lsp_lifetime=n.get_opt_int('lsp-lifetime'), lsp_refresh=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh.from_gdata(n.get_opt_cnt('lsp-refresh')), spf=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf.from_gdata(n.get_opt_cnt('spf')), lsp_generation=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation.from_gdata(n.get_opt_cnt('lsp-generation')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()')
        leaves = []
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            leaves.append('{self_name}.lsp_lifetime = {repr(_lsp_lifetime)}')
        _lsp_refresh = self.lsp_refresh
        if _lsp_refresh is not None:
            res.extend(_lsp_refresh.prsrc('{self_name}.lsp_refresh', False).splitlines())
        _spf = self.spf
        if _spf is not None:
            res.extend(_spf.prsrc('{self_name}.spf', False).splitlines())
        _lsp_generation = self.lsp_generation
        if _lsp_generation is not None:
            res.extend(_lsp_generation.prsrc('{self_name}.lsp_generation', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_lsp_lifetime = yang.gdata.from_xml_opt_int(node, 'lsp-lifetime')
    yang.gdata.maybe_add(children, 'lsp-lifetime', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_lifetime, child_lsp_lifetime)
    child_lsp_refresh = yang.gdata.from_xml_opt_cnt(node, 'lsp-refresh')
    yang.gdata.maybe_add(children, 'lsp-refresh', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_refresh, child_lsp_refresh)
    child_spf = yang.gdata.from_xml_opt_cnt(node, 'spf')
    yang.gdata.maybe_add(children, 'spf', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__spf, child_spf)
    child_lsp_generation = yang.gdata.from_xml_opt_cnt(node, 'lsp-generation')
    yang.gdata.maybe_add(children, 'lsp-generation', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers__lsp_generation, child_lsp_generation)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(yang.adata.MNode):
    lsp_mtu_size: ?int

    mut def __init__(self, lsp_mtu_size: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.lsp_mtu_size = lsp_mtu_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            children['lsp-mtu-size'] = yang.gdata.Leaf('uint16', _lsp_mtu_size)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(lsp_mtu_size=n.get_opt_int('lsp-mtu-size'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()')
        leaves = []
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            leaves.append('{self_name}.lsp_mtu_size = {repr(_lsp_mtu_size)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_lsp_mtu_size = yang.gdata.from_xml_opt_int(node, 'lsp-mtu-size')
    yang.gdata.maybe_add(children, 'lsp-mtu-size', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size, child_lsp_mtu_size)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__multi_topology(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str
    multi_topology: ?bool

    mut def __init__(self, admin_state: ?str, multi_topology: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.multi_topology = multi_topology

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _multi_topology = self.multi_topology
        if _multi_topology is not None:
            children['multi-topology'] = yang.gdata.Leaf('boolean', _multi_topology)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(admin_state=n.get_opt_str('admin-state'), multi_topology=n.get_opt_bool('multi-topology'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _multi_topology = self.multi_topology
        if _multi_topology is not None:
            leaves.append('{self_name}.multi_topology = {repr(_multi_topology)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state, child_admin_state)
    child_multi_topology = yang.gdata.from_xml_opt_bool(node, 'multi-topology')
    yang.gdata.maybe_add(children, 'multi-topology', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__multi_topology, child_multi_topology)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__helper_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__acceptable_duration(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(yang.adata.MNode):
    helper_mode: ?bool
    acceptable_duration: ?int

    mut def __init__(self, helper_mode: ?bool, acceptable_duration: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.helper_mode = helper_mode
        self.acceptable_duration = acceptable_duration

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _helper_mode = self.helper_mode
        if _helper_mode is not None:
            children['helper-mode'] = yang.gdata.Leaf('boolean', _helper_mode)
        _acceptable_duration = self.acceptable_duration
        if _acceptable_duration is not None:
            children['acceptable-duration'] = yang.gdata.Leaf('uint32', _acceptable_duration)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(helper_mode=n.get_opt_bool('helper-mode'), acceptable_duration=n.get_opt_int('acceptable-duration'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()')
        leaves = []
        _helper_mode = self.helper_mode
        if _helper_mode is not None:
            leaves.append('{self_name}.helper_mode = {repr(_helper_mode)}')
        _acceptable_duration = self.acceptable_duration
        if _acceptable_duration is not None:
            leaves.append('{self_name}.acceptable_duration = {repr(_acceptable_duration)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_helper_mode = yang.gdata.from_xml_opt_bool(node, 'helper-mode')
    yang.gdata.maybe_add(children, 'helper-mode', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__helper_mode, child_helper_mode)
    child_acceptable_duration = yang.gdata.from_xml_opt_int(node, 'acceptable-duration')
    yang.gdata.maybe_add(children, 'acceptable-duration', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart__acceptable_duration, child_acceptable_duration)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost__reference_bandwidth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(yang.adata.MNode):
    reference_bandwidth: ?int

    mut def __init__(self, reference_bandwidth: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.reference_bandwidth = reference_bandwidth

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _reference_bandwidth = self.reference_bandwidth
        if _reference_bandwidth is not None:
            children['reference-bandwidth'] = yang.gdata.Leaf('uint64', _reference_bandwidth)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(reference_bandwidth=n.get_opt_int('reference-bandwidth'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/auto-cost')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()')
        leaves = []
        _reference_bandwidth = self.reference_bandwidth
        if _reference_bandwidth is not None:
            leaves.append('{self_name}.reference_bandwidth = {repr(_reference_bandwidth)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/auto-cost'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_reference_bandwidth = yang.gdata.from_xml_opt_int(node, 'reference-bandwidth')
    yang.gdata.maybe_add(children, 'reference-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost__reference_bandwidth, child_reference_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__augment_route_table(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(yang.adata.MNode):
    prefix_policy: list[str]

    mut def __init__(self, prefix_policy: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.prefix_policy = prefix_policy if prefix_policy is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['prefix-policy'] = yang.gdata.LeafList('leafref', self.prefix_policy, user_order=True)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(prefix_policy=n.get_opt_strs('prefix-policy'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/exclude')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()')
        leaves = []
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            leaves.append('{self_name}.prefix_policy = {repr(_prefix_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/exclude'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_policy = yang.gdata.from_xml_opt_strs(node, 'prefix-policy')
    yang.gdata.maybe_add(children, 'prefix-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude__prefix_policy, child_prefix_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(yang.adata.MNode):
    admin_state: ?str
    preference: ?str

    mut def __init__(self, admin_state: ?str, preference: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.preference = preference

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _preference = self.preference
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('enumeration', _preference)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(admin_state=n.get_opt_str('admin-state'), preference=n.get_opt_str('preference'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/multi-homed-prefix')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _preference = self.preference
        if _preference is not None:
            leaves.append('{self_name}.preference = {repr(_preference)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/multi-homed-prefix'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__admin_state, child_admin_state)
    child_preference = yang.gdata.from_xml_opt_str(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix__preference, child_preference)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__max_pq_cost(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__max_pq_nodes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(yang.adata.MNode):
    admin_state: ?str
    max_pq_nodes: ?int

    mut def __init__(self, admin_state: ?str, max_pq_nodes: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_pq_nodes = max_pq_nodes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_pq_nodes = self.max_pq_nodes
        if _max_pq_nodes is not None:
            children['max-pq-nodes'] = yang.gdata.Leaf('uint32', _max_pq_nodes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(admin_state=n.get_opt_str('admin-state'), max_pq_nodes=n.get_opt_int('max-pq-nodes'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa/node-protect')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_pq_nodes = self.max_pq_nodes
        if _max_pq_nodes is not None:
            leaves.append('{self_name}.max_pq_nodes = {repr(_max_pq_nodes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa/node-protect'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__admin_state, child_admin_state)
    child_max_pq_nodes = yang.gdata.from_xml_opt_int(node, 'max-pq-nodes')
    yang.gdata.maybe_add(children, 'max-pq-nodes', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect__max_pq_nodes, child_max_pq_nodes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(yang.adata.MNode):
    admin_state: ?str
    max_pq_cost: ?int
    node_protect: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect

    mut def __init__(self, admin_state: ?str, max_pq_cost: ?int, node_protect: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_pq_cost = max_pq_cost
        self.node_protect = node_protect if node_protect is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_pq_cost = self.max_pq_cost
        if _max_pq_cost is not None:
            children['max-pq-cost'] = yang.gdata.Leaf('uint32', _max_pq_cost)
        _node_protect = self.node_protect
        if _node_protect is not None:
            children['node-protect'] = _node_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(admin_state=n.get_opt_str('admin-state'), max_pq_cost=n.get_opt_int('max-pq-cost'), node_protect=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect.from_gdata(n.get_opt_cnt('node-protect')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_pq_cost = self.max_pq_cost
        if _max_pq_cost is not None:
            leaves.append('{self_name}.max_pq_cost = {repr(_max_pq_cost)}')
        _node_protect = self.node_protect
        if _node_protect is not None:
            res.extend(_node_protect.prsrc('{self_name}.node_protect', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/remote-lfa'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__admin_state, child_admin_state)
    child_max_pq_cost = yang.gdata.from_xml_opt_int(node, 'max-pq-cost')
    yang.gdata.maybe_add(children, 'max-pq-cost', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__max_pq_cost, child_max_pq_cost)
    child_node_protect = yang.gdata.from_xml_opt_cnt(node, 'node-protect')
    yang.gdata.maybe_add(children, 'node-protect', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa__node_protect, child_node_protect)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__max_sr_policy_lfa_labels(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa/node-protect')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa/node-protect'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(yang.adata.MNode):
    admin_state: ?str
    max_sr_policy_lfa_labels: ?int
    node_protect: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect

    mut def __init__(self, admin_state: ?str, max_sr_policy_lfa_labels: ?int, node_protect: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.max_sr_policy_lfa_labels = max_sr_policy_lfa_labels
        self.node_protect = node_protect if node_protect is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _max_sr_policy_lfa_labels = self.max_sr_policy_lfa_labels
        if _max_sr_policy_lfa_labels is not None:
            children['max-sr-policy-lfa-labels'] = yang.gdata.Leaf('uint32', _max_sr_policy_lfa_labels)
        _node_protect = self.node_protect
        if _node_protect is not None:
            children['node-protect'] = _node_protect.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(admin_state=n.get_opt_str('admin-state'), max_sr_policy_lfa_labels=n.get_opt_int('max-sr-policy-lfa-labels'), node_protect=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect.from_gdata(n.get_opt_cnt('node-protect')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _max_sr_policy_lfa_labels = self.max_sr_policy_lfa_labels
        if _max_sr_policy_lfa_labels is not None:
            leaves.append('{self_name}.max_sr_policy_lfa_labels = {repr(_max_sr_policy_lfa_labels)}')
        _node_protect = self.node_protect
        if _node_protect is not None:
            res.extend(_node_protect.prsrc('{self_name}.node_protect', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate/ti-lfa'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__admin_state, child_admin_state)
    child_max_sr_policy_lfa_labels = yang.gdata.from_xml_opt_int(node, 'max-sr-policy-lfa-labels')
    yang.gdata.maybe_add(children, 'max-sr-policy-lfa-labels', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__max_sr_policy_lfa_labels, child_max_sr_policy_lfa_labels)
    child_node_protect = yang.gdata.from_xml_opt_cnt(node, 'node-protect')
    yang.gdata.maybe_add(children, 'node-protect', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa__node_protect, child_node_protect)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(yang.adata.MNode):
    admin_state: ?str
    augment_route_table: ?bool
    exclude: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude
    multi_homed_prefix: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix
    remote_lfa: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa
    ti_lfa: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa

    mut def __init__(self, admin_state: ?str, augment_route_table: ?bool, exclude: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude=None, multi_homed_prefix: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix=None, remote_lfa: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa=None, ti_lfa: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.augment_route_table = augment_route_table
        self.exclude = exclude if exclude is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude()
        self.multi_homed_prefix = multi_homed_prefix if multi_homed_prefix is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix()
        self.remote_lfa = remote_lfa if remote_lfa is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa()
        self.ti_lfa = ti_lfa if ti_lfa is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _augment_route_table = self.augment_route_table
        if _augment_route_table is not None:
            children['augment-route-table'] = yang.gdata.Leaf('boolean', _augment_route_table)
        _exclude = self.exclude
        if _exclude is not None:
            children['exclude'] = _exclude.to_gdata()
        _multi_homed_prefix = self.multi_homed_prefix
        if _multi_homed_prefix is not None:
            children['multi-homed-prefix'] = _multi_homed_prefix.to_gdata()
        _remote_lfa = self.remote_lfa
        if _remote_lfa is not None:
            children['remote-lfa'] = _remote_lfa.to_gdata()
        _ti_lfa = self.ti_lfa
        if _ti_lfa is not None:
            children['ti-lfa'] = _ti_lfa.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(admin_state=n.get_opt_str('admin-state'), augment_route_table=n.get_opt_bool('augment-route-table'), exclude=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude.from_gdata(n.get_opt_cnt('exclude')), multi_homed_prefix=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix.from_gdata(n.get_opt_cnt('multi-homed-prefix')), remote_lfa=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa.from_gdata(n.get_opt_cnt('remote-lfa')), ti_lfa=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa.from_gdata(n.get_opt_cnt('ti-lfa')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/loopfree-alternate')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _augment_route_table = self.augment_route_table
        if _augment_route_table is not None:
            leaves.append('{self_name}.augment_route_table = {repr(_augment_route_table)}')
        _exclude = self.exclude
        if _exclude is not None:
            res.extend(_exclude.prsrc('{self_name}.exclude', False).splitlines())
        _multi_homed_prefix = self.multi_homed_prefix
        if _multi_homed_prefix is not None:
            res.extend(_multi_homed_prefix.prsrc('{self_name}.multi_homed_prefix', False).splitlines())
        _remote_lfa = self.remote_lfa
        if _remote_lfa is not None:
            res.extend(_remote_lfa.prsrc('{self_name}.remote_lfa', False).splitlines())
        _ti_lfa = self.ti_lfa
        if _ti_lfa is not None:
            res.extend(_ti_lfa.prsrc('{self_name}.ti_lfa', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/loopfree-alternate'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__admin_state, child_admin_state)
    child_augment_route_table = yang.gdata.from_xml_opt_bool(node, 'augment-route-table')
    yang.gdata.maybe_add(children, 'augment-route-table', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__augment_route_table, child_augment_route_table)
    child_exclude = yang.gdata.from_xml_opt_cnt(node, 'exclude')
    yang.gdata.maybe_add(children, 'exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__exclude, child_exclude)
    child_multi_homed_prefix = yang.gdata.from_xml_opt_cnt(node, 'multi-homed-prefix')
    yang.gdata.maybe_add(children, 'multi-homed-prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__multi_homed_prefix, child_multi_homed_prefix)
    child_remote_lfa = yang.gdata.from_xml_opt_cnt(node, 'remote-lfa')
    yang.gdata.maybe_add(children, 'remote-lfa', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__remote_lfa, child_remote_lfa)
    child_ti_lfa = yang.gdata.from_xml_opt_cnt(node, 'ti-lfa')
    yang.gdata.maybe_add(children, 'ti-lfa', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate__ti_lfa, child_ti_lfa)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key, child_key)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__route_tag(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(yang.adata.MNode):
    ip_prefix: str
    route_tag: ?int

    mut def __init__(self, ip_prefix: str, route_tag: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ip_prefix = ip_prefix
        self.route_tag = route_tag

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('union', _ip_prefix)
        _route_tag = self.route_tag
        if _route_tag is not None:
            children['route-tag'] = yang.gdata.Leaf('uint32', _route_tag)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(ip_prefix=n.get_str('ip-prefix'), route_tag=n.get_opt_int('route-tag'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address({repr(self.ip_prefix)})')
        leaves = []
        _route_tag = self.route_tag
        if _route_tag is not None:
            leaves.append('{self_name}.route_tag = {repr(_route_tag)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'summary-address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__ip_prefix, child_ip_prefix)
    child_route_tag = yang.gdata.from_xml_opt_int(node, 'route-tag')
    yang.gdata.maybe_add(children, 'route-tag', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address__route_tag, child_route_tag)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(yang.adata.MNode):
    summary_address: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address

    mut def __init__(self, summary_address: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.summary_address = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address(elements=summary_address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _summary_address = self.summary_address
        if _summary_address is not None:
            children['summary-address'] = _summary_address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(summary_address=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address.from_gdata(n.get_opt_list('summary-address')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()')
        leaves = []
        _summary_address = self.summary_address
        for _element in _summary_address.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2/summary-address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'summary_address_element = {self_name}.summary_address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('summary_address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies/level1-to-level2'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_summary_address = yang.gdata.from_xml_opt_list(node, 'summary-address')
    yang.gdata.maybe_add(children, 'summary-address', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2__summary_address, child_summary_address)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(yang.adata.MNode):
    level1_to_level2: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2

    mut def __init__(self, level1_to_level2: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level1_to_level2 = level1_to_level2 if level1_to_level2 is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level1_to_level2 = self.level1_to_level2
        if _level1_to_level2 is not None:
            children['level1-to-level2'] = _level1_to_level2.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(level1_to_level2=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2.from_gdata(n.get_opt_cnt('level1-to-level2')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/inter-level-propagation-policies')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()')
        leaves = []
        _level1_to_level2 = self.level1_to_level2
        if _level1_to_level2 is not None:
            res.extend(_level1_to_level2.prsrc('{self_name}.level1_to_level2', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/inter-level-propagation-policies'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_level1_to_level2 = yang.gdata.from_xml_opt_cnt(node, 'level1-to-level2')
    yang.gdata.maybe_add(children, 'level1-to-level2', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies__level1_to_level2, child_level1_to_level2)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids__all_interfaces(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(yang.adata.MNode):
    all_interfaces: ?bool

    mut def __init__(self, all_interfaces: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.all_interfaces = all_interfaces

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_interfaces = self.all_interfaces
        if _all_interfaces is not None:
            children['all-interfaces'] = yang.gdata.Leaf('boolean', _all_interfaces)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(all_interfaces=n.get_opt_bool('all-interfaces'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()')
        leaves = []
        _all_interfaces = self.all_interfaces
        if _all_interfaces is not None:
            leaves.append('{self_name}.all_interfaces = {repr(_all_interfaces)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/dynamic-adjacency-sids'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_all_interfaces = yang.gdata.from_xml_opt_bool(node, 'all-interfaces')
    yang.gdata.maybe_add(children, 'all-interfaces', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids__all_interfaces, child_all_interfaces)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__advertise_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(yang.adata.MNode):
    advertise_capability: ?bool
    transmit: ?str

    mut def __init__(self, advertise_capability: ?bool, transmit: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.advertise_capability = advertise_capability
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_capability = self.advertise_capability
        if _advertise_capability is not None:
            children['advertise-capability'] = yang.gdata.Leaf('boolean', _advertise_capability)
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('enumeration', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(advertise_capability=n.get_opt_bool('advertise-capability'), transmit=n.get_opt_str('transmit'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/entropy-label')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()')
        leaves = []
        _advertise_capability = self.advertise_capability
        if _advertise_capability is not None:
            leaves.append('{self_name}.advertise_capability = {repr(_advertise_capability)}')
        _transmit = self.transmit
        if _transmit is not None:
            leaves.append('{self_name}.transmit = {repr(_transmit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/entropy-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_capability = yang.gdata.from_xml_opt_bool(node, 'advertise-capability')
    yang.gdata.maybe_add(children, 'advertise-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__advertise_capability, child_advertise_capability)
    child_transmit = yang.gdata.from_xml_opt_str(node, 'transmit')
    yang.gdata.maybe_add(children, 'transmit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label__transmit, child_transmit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_bmi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_erld(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(yang.adata.MNode):
    override_bmi: ?int
    override_erld: ?int

    mut def __init__(self, override_bmi: ?int, override_erld: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.override_bmi = override_bmi
        self.override_erld = override_erld

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _override_bmi = self.override_bmi
        if _override_bmi is not None:
            children['override-bmi'] = yang.gdata.Leaf('int32', _override_bmi)
        _override_erld = self.override_erld
        if _override_erld is not None:
            children['override-erld'] = yang.gdata.Leaf('int32', _override_erld)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(override_bmi=n.get_opt_int('override-bmi'), override_erld=n.get_opt_int('override-erld'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls/maximum-sid-depth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()')
        leaves = []
        _override_bmi = self.override_bmi
        if _override_bmi is not None:
            leaves.append('{self_name}.override_bmi = {repr(_override_bmi)}')
        _override_erld = self.override_erld
        if _override_erld is not None:
            leaves.append('{self_name}.override_erld = {repr(_override_erld)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls/maximum-sid-depth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_override_bmi = yang.gdata.from_xml_opt_int(node, 'override-bmi')
    yang.gdata.maybe_add(children, 'override-bmi', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_bmi, child_override_bmi)
    child_override_erld = yang.gdata.from_xml_opt_int(node, 'override-erld')
    yang.gdata.maybe_add(children, 'override-erld', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth__override_erld, child_override_erld)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__static_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__adjacency_sid_hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(yang.adata.MNode):
    dynamic_adjacency_sids: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids
    entropy_label: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label
    maximum_sid_depth: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth
    static_label_block: ?str
    adjacency_sid_hold_time: ?value

    mut def __init__(self, dynamic_adjacency_sids: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids=None, entropy_label: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label=None, maximum_sid_depth: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth=None, static_label_block: ?str, adjacency_sid_hold_time: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.dynamic_adjacency_sids = dynamic_adjacency_sids if dynamic_adjacency_sids is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids()
        self.entropy_label = entropy_label if entropy_label is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label()
        self.maximum_sid_depth = maximum_sid_depth if maximum_sid_depth is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth()
        self.static_label_block = static_label_block
        self.adjacency_sid_hold_time = adjacency_sid_hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_adjacency_sids = self.dynamic_adjacency_sids
        if _dynamic_adjacency_sids is not None:
            children['dynamic-adjacency-sids'] = _dynamic_adjacency_sids.to_gdata()
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            children['entropy-label'] = _entropy_label.to_gdata()
        _maximum_sid_depth = self.maximum_sid_depth
        if _maximum_sid_depth is not None:
            children['maximum-sid-depth'] = _maximum_sid_depth.to_gdata()
        _static_label_block = self.static_label_block
        if _static_label_block is not None:
            children['static-label-block'] = yang.gdata.Leaf('leafref', _static_label_block)
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            children['adjacency-sid-hold-time'] = yang.gdata.Leaf('union', _adjacency_sid_hold_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(dynamic_adjacency_sids=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids.from_gdata(n.get_opt_cnt('dynamic-adjacency-sids')), entropy_label=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label.from_gdata(n.get_opt_cnt('entropy-label')), maximum_sid_depth=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth.from_gdata(n.get_opt_cnt('maximum-sid-depth')), static_label_block=n.get_opt_str('static-label-block'), adjacency_sid_hold_time=n.get_opt_value('adjacency-sid-hold-time'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls()')
        leaves = []
        _dynamic_adjacency_sids = self.dynamic_adjacency_sids
        if _dynamic_adjacency_sids is not None:
            res.extend(_dynamic_adjacency_sids.prsrc('{self_name}.dynamic_adjacency_sids', False).splitlines())
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            res.extend(_entropy_label.prsrc('{self_name}.entropy_label', False).splitlines())
        _maximum_sid_depth = self.maximum_sid_depth
        if _maximum_sid_depth is not None:
            res.extend(_maximum_sid_depth.prsrc('{self_name}.maximum_sid_depth', False).splitlines())
        _static_label_block = self.static_label_block
        if _static_label_block is not None:
            leaves.append('{self_name}.static_label_block = {repr(_static_label_block)}')
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            leaves.append('{self_name}.adjacency_sid_hold_time = {repr(_adjacency_sid_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_dynamic_adjacency_sids = yang.gdata.from_xml_opt_cnt(node, 'dynamic-adjacency-sids')
    yang.gdata.maybe_add(children, 'dynamic-adjacency-sids', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__dynamic_adjacency_sids, child_dynamic_adjacency_sids)
    child_entropy_label = yang.gdata.from_xml_opt_cnt(node, 'entropy-label')
    yang.gdata.maybe_add(children, 'entropy-label', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__entropy_label, child_entropy_label)
    child_maximum_sid_depth = yang.gdata.from_xml_opt_cnt(node, 'maximum-sid-depth')
    yang.gdata.maybe_add(children, 'maximum-sid-depth', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__maximum_sid_depth, child_maximum_sid_depth)
    child_static_label_block = yang.gdata.from_xml_opt_str(node, 'static-label-block')
    yang.gdata.maybe_add(children, 'static-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__static_label_block, child_static_label_block)
    child_adjacency_sid_hold_time = yang.gdata.from_xml_opt_value(node, 'adjacency-sid-hold-time')
    yang.gdata.maybe_add(children, 'adjacency-sid-hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls__adjacency_sid_hold_time, child_adjacency_sid_hold_time)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__adjacency_sid_hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(yang.adata.MNode):
    admin_state: ?str
    adjacency_sid_hold_time: ?value

    mut def __init__(self, admin_state: ?str, adjacency_sid_hold_time: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.adjacency_sid_hold_time = adjacency_sid_hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            children['adjacency-sid-hold-time'] = yang.gdata.Leaf('union', _adjacency_sid_hold_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(admin_state=n.get_opt_str('admin-state'), adjacency_sid_hold_time=n.get_opt_value('adjacency-sid-hold-time'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing/srv6')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _adjacency_sid_hold_time = self.adjacency_sid_hold_time
        if _adjacency_sid_hold_time is not None:
            leaves.append('{self_name}.adjacency_sid_hold_time = {repr(_adjacency_sid_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing/srv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__admin_state, child_admin_state)
    child_adjacency_sid_hold_time = yang.gdata.from_xml_opt_value(node, 'adjacency-sid-hold-time')
    yang.gdata.maybe_add(children, 'adjacency-sid-hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6__adjacency_sid_hold_time, child_adjacency_sid_hold_time)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(yang.adata.MNode):
    mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls
    srv6: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6

    mut def __init__(self, mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls=None, srv6: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.mpls = mpls
        self.srv6 = srv6 if srv6 is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6()

    mut def create_mpls(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls()
        self.mpls = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        _srv6 = self.srv6
        if _srv6 is not None:
            children['srv6'] = _srv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(mpls=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls.from_gdata(n.get_opt_cnt('mpls')), srv6=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6.from_gdata(n.get_opt_cnt('srv6')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/segment-routing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()')
        leaves = []
        _mpls = self.mpls
        if _mpls is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/segment-routing/mpls')
            res.append('mpls = {self_name}.create_mpls()')
            res.extend(_mpls.prsrc('mpls', False).splitlines())
        _srv6 = self.srv6
        if _srv6 is not None:
            res.extend(_srv6.prsrc('{self_name}.srv6', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/segment-routing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__mpls, child_mpls)
    child_srv6 = yang.gdata.from_xml_opt_cnt(node, 'srv6')
    yang.gdata.maybe_add(children, 'srv6', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing__srv6, child_srv6)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__legacy_link_attribute_advertisement(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv4_te_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv6_te_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(yang.adata.MNode):
    legacy_link_attribute_advertisement: ?bool
    ipv4_te_router_id: ?str
    ipv6_te_router_id: ?str

    mut def __init__(self, legacy_link_attribute_advertisement: ?bool, ipv4_te_router_id: ?str, ipv6_te_router_id: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.legacy_link_attribute_advertisement = legacy_link_attribute_advertisement
        self.ipv4_te_router_id = ipv4_te_router_id
        self.ipv6_te_router_id = ipv6_te_router_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _legacy_link_attribute_advertisement = self.legacy_link_attribute_advertisement
        if _legacy_link_attribute_advertisement is not None:
            children['legacy-link-attribute-advertisement'] = yang.gdata.Leaf('boolean', _legacy_link_attribute_advertisement)
        _ipv4_te_router_id = self.ipv4_te_router_id
        if _ipv4_te_router_id is not None:
            children['ipv4-te-router-id'] = yang.gdata.Leaf('string', _ipv4_te_router_id)
        _ipv6_te_router_id = self.ipv6_te_router_id
        if _ipv6_te_router_id is not None:
            children['ipv6-te-router-id'] = yang.gdata.Leaf('string', _ipv6_te_router_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(legacy_link_attribute_advertisement=n.get_opt_bool('legacy-link-attribute-advertisement'), ipv4_te_router_id=n.get_opt_str('ipv4-te-router-id'), ipv6_te_router_id=n.get_opt_str('ipv6-te-router-id'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/traffic-engineering')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()')
        leaves = []
        _legacy_link_attribute_advertisement = self.legacy_link_attribute_advertisement
        if _legacy_link_attribute_advertisement is not None:
            leaves.append('{self_name}.legacy_link_attribute_advertisement = {repr(_legacy_link_attribute_advertisement)}')
        _ipv4_te_router_id = self.ipv4_te_router_id
        if _ipv4_te_router_id is not None:
            leaves.append('{self_name}.ipv4_te_router_id = {repr(_ipv4_te_router_id)}')
        _ipv6_te_router_id = self.ipv6_te_router_id
        if _ipv6_te_router_id is not None:
            leaves.append('{self_name}.ipv6_te_router_id = {repr(_ipv6_te_router_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/traffic-engineering'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_legacy_link_attribute_advertisement = yang.gdata.from_xml_opt_bool(node, 'legacy-link-attribute-advertisement')
    yang.gdata.maybe_add(children, 'legacy-link-attribute-advertisement', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__legacy_link_attribute_advertisement, child_legacy_link_attribute_advertisement)
    child_ipv4_te_router_id = yang.gdata.from_xml_opt_str(node, 'ipv4-te-router-id')
    yang.gdata.maybe_add(children, 'ipv4-te-router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv4_te_router_id, child_ipv4_te_router_id)
    child_ipv6_te_router_id = yang.gdata.from_xml_opt_str(node, 'ipv6-te-router-id')
    yang.gdata.maybe_add(children, 'ipv6-te-router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering__ipv6_te_router_id, child_ipv6_te_router_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(yang.adata.MNode):
    delay_selection: ?str

    mut def __init__(self, delay_selection: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.delay_selection = delay_selection

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            children['delay-selection'] = yang.gdata.Leaf('enumeration', _delay_selection)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(delay_selection=n.get_opt_str('delay-selection'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/delay')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()')
        leaves = []
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            leaves.append('{self_name}.delay_selection = {repr(_delay_selection)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_delay_selection = yang.gdata.from_xml_opt_str(node, 'delay-selection')
    yang.gdata.maybe_add(children, 'delay-selection', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection, child_delay_selection)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__loopfree_alternate_exclude(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__csnp_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__lsp_pacing_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint64', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(yang.adata.MNode):
    csnp_interval: ?int
    lsp_pacing_interval: ?int

    mut def __init__(self, csnp_interval: ?int, lsp_pacing_interval: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_interval = csnp_interval
        self.lsp_pacing_interval = lsp_pacing_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_interval = self.csnp_interval
        if _csnp_interval is not None:
            children['csnp-interval'] = yang.gdata.Leaf('uint16', _csnp_interval)
        _lsp_pacing_interval = self.lsp_pacing_interval
        if _lsp_pacing_interval is not None:
            children['lsp-pacing-interval'] = yang.gdata.Leaf('uint64', _lsp_pacing_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(csnp_interval=n.get_opt_int('csnp-interval'), lsp_pacing_interval=n.get_opt_int('lsp-pacing-interval'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()')
        leaves = []
        _csnp_interval = self.csnp_interval
        if _csnp_interval is not None:
            leaves.append('{self_name}.csnp_interval = {repr(_csnp_interval)}')
        _lsp_pacing_interval = self.lsp_pacing_interval
        if _lsp_pacing_interval is not None:
            leaves.append('{self_name}.lsp_pacing_interval = {repr(_lsp_pacing_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_interval = yang.gdata.from_xml_opt_int(node, 'csnp-interval')
    yang.gdata.maybe_add(children, 'csnp-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__csnp_interval, child_csnp_interval)
    child_lsp_pacing_interval = yang.gdata.from_xml_opt_int(node, 'lsp-pacing-interval')
    yang.gdata.maybe_add(children, 'lsp-pacing-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers__lsp_pacing_interval, child_lsp_pacing_interval)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(yang.adata.MNode):
    index: ?int

    mut def __init__(self, index: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(index=n.get_opt_int('index'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid()')
        leaves = []
        _index = self.index
        if _index is not None:
            leaves.append('{self_name}.index = {repr(_index)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(yang.adata.MNode):
    index: ?int

    mut def __init__(self, index: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.index = index

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(index=n.get_opt_int('index'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid()')
        leaves = []
        _index = self.index
        if _index is not None:
            leaves.append('{self_name}.index = {repr(_index)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_index = yang.gdata.from_xml_opt_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid__index, child_index)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__assignment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(yang.adata.MNode):
    assignment: ?str
    static: ?int

    mut def __init__(self, assignment: ?str, static: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.assignment = assignment
        self.static = static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _assignment = self.assignment
        if _assignment is not None:
            children['assignment'] = yang.gdata.Leaf('enumeration', _assignment)
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('uint32', _static)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(assignment=n.get_opt_str('assignment'), static=n.get_opt_int('static'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid()')
        leaves = []
        _assignment = self.assignment
        if _assignment is not None:
            leaves.append('{self_name}.assignment = {repr(_assignment)}')
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_assignment = yang.gdata.from_xml_opt_str(node, 'assignment')
    yang.gdata.maybe_add(children, 'assignment', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__assignment, child_assignment)
    child_static = yang.gdata.from_xml_opt_int(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid__static, child_static)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__assignment(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(yang.adata.MNode):
    assignment: ?str
    static: ?int

    mut def __init__(self, assignment: ?str, static: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.assignment = assignment
        self.static = static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _assignment = self.assignment
        if _assignment is not None:
            children['assignment'] = yang.gdata.Leaf('enumeration', _assignment)
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('uint32', _static)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(assignment=n.get_opt_str('assignment'), static=n.get_opt_int('static'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid()')
        leaves = []
        _assignment = self.assignment
        if _assignment is not None:
            leaves.append('{self_name}.assignment = {repr(_assignment)}')
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_assignment = yang.gdata.from_xml_opt_str(node, 'assignment')
    yang.gdata.maybe_add(children, 'assignment', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__assignment, child_assignment)
    child_static = yang.gdata.from_xml_opt_int(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid__static, child_static)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(yang.adata.MNode):
    ipv4_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid
    ipv6_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid
    ipv4_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid
    ipv6_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid

    mut def __init__(self, ipv4_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid=None, ipv6_node_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid=None, ipv4_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid=None, ipv6_adjacency_sid: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ipv4_node_sid = ipv4_node_sid
        self.ipv6_node_sid = ipv6_node_sid
        self.ipv4_adjacency_sid = ipv4_adjacency_sid
        self.ipv6_adjacency_sid = ipv6_adjacency_sid

    mut def create_ipv4_node_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid()
        self.ipv4_node_sid = res
        return res

    mut def create_ipv6_node_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid()
        self.ipv6_node_sid = res
        return res

    mut def create_ipv4_adjacency_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid()
        self.ipv4_adjacency_sid = res
        return res

    mut def create_ipv6_adjacency_sid(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid()
        self.ipv6_adjacency_sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_node_sid = self.ipv4_node_sid
        if _ipv4_node_sid is not None:
            children['ipv4-node-sid'] = _ipv4_node_sid.to_gdata()
        _ipv6_node_sid = self.ipv6_node_sid
        if _ipv6_node_sid is not None:
            children['ipv6-node-sid'] = _ipv6_node_sid.to_gdata()
        _ipv4_adjacency_sid = self.ipv4_adjacency_sid
        if _ipv4_adjacency_sid is not None:
            children['ipv4-adjacency-sid'] = _ipv4_adjacency_sid.to_gdata()
        _ipv6_adjacency_sid = self.ipv6_adjacency_sid
        if _ipv6_adjacency_sid is not None:
            children['ipv6-adjacency-sid'] = _ipv6_adjacency_sid.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(ipv4_node_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid.from_gdata(n.get_opt_cnt('ipv4-node-sid')), ipv6_node_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid.from_gdata(n.get_opt_cnt('ipv6-node-sid')), ipv4_adjacency_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid.from_gdata(n.get_opt_cnt('ipv4-adjacency-sid')), ipv6_adjacency_sid=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid.from_gdata(n.get_opt_cnt('ipv6-adjacency-sid')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing/mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()')
        leaves = []
        _ipv4_node_sid = self.ipv4_node_sid
        if _ipv4_node_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-node-sid')
            res.append('ipv4_node_sid = {self_name}.create_ipv4_node_sid()')
            res.extend(_ipv4_node_sid.prsrc('ipv4_node_sid', False).splitlines())
        _ipv6_node_sid = self.ipv6_node_sid
        if _ipv6_node_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-node-sid')
            res.append('ipv6_node_sid = {self_name}.create_ipv6_node_sid()')
            res.extend(_ipv6_node_sid.prsrc('ipv6_node_sid', False).splitlines())
        _ipv4_adjacency_sid = self.ipv4_adjacency_sid
        if _ipv4_adjacency_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv4-adjacency-sid')
            res.append('ipv4_adjacency_sid = {self_name}.create_ipv4_adjacency_sid()')
            res.extend(_ipv4_adjacency_sid.prsrc('ipv4_adjacency_sid', False).splitlines())
        _ipv6_adjacency_sid = self.ipv6_adjacency_sid
        if _ipv6_adjacency_sid is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls/ipv6-adjacency-sid')
            res.append('ipv6_adjacency_sid = {self_name}.create_ipv6_adjacency_sid()')
            res.extend(_ipv6_adjacency_sid.prsrc('ipv6_adjacency_sid', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_node_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv4-node-sid')
    yang.gdata.maybe_add(children, 'ipv4-node-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_node_sid, child_ipv4_node_sid)
    child_ipv6_node_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv6-node-sid')
    yang.gdata.maybe_add(children, 'ipv6-node-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_node_sid, child_ipv6_node_sid)
    child_ipv4_adjacency_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv4-adjacency-sid')
    yang.gdata.maybe_add(children, 'ipv4-adjacency-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv4_adjacency_sid, child_ipv4_adjacency_sid)
    child_ipv6_adjacency_sid = yang.gdata.from_xml_opt_cnt(node, 'ipv6-adjacency-sid')
    yang.gdata.maybe_add(children, 'ipv6-adjacency-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls__ipv6_adjacency_sid, child_ipv6_adjacency_sid)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(yang.adata.MNode):
    mpls: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls

    mut def __init__(self, mpls: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.mpls = mpls if mpls is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(mpls=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls.from_gdata(n.get_opt_cnt('mpls')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/segment-routing')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing()')
        leaves = []
        _mpls = self.mpls
        if _mpls is not None:
            res.extend(_mpls.prsrc('{self_name}.mpls', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/segment-routing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing__mpls, child_mpls)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp__load_balancing_weight(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(yang.adata.MNode):
    load_balancing_weight: ?value

    mut def __init__(self, load_balancing_weight: ?value):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.load_balancing_weight = load_balancing_weight

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _load_balancing_weight = self.load_balancing_weight
        if _load_balancing_weight is not None:
            children['load-balancing-weight'] = yang.gdata.Leaf('union', _load_balancing_weight)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(load_balancing_weight=n.get_opt_value('load-balancing-weight'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()')
        leaves = []
        _load_balancing_weight = self.load_balancing_weight
        if _load_balancing_weight is not None:
            leaves.append('{self_name}.load_balancing_weight = {repr(_load_balancing_weight)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_load_balancing_weight = yang.gdata.from_xml_opt_value(node, 'load-balancing-weight')
    yang.gdata.maybe_add(children, 'load-balancing-weight', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp__load_balancing_weight, child_load_balancing_weight)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(yang.adata.MNode):
    hello_interval: ?int
    hello_multiplier: ?int

    mut def __init__(self, hello_interval: ?int, hello_multiplier: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_interval = hello_interval
        self.hello_multiplier = hello_multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            children['hello-interval'] = yang.gdata.Leaf('uint32', _hello_interval)
        _hello_multiplier = self.hello_multiplier
        if _hello_multiplier is not None:
            children['hello-multiplier'] = yang.gdata.Leaf('uint8', _hello_multiplier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(hello_interval=n.get_opt_int('hello-interval'), hello_multiplier=n.get_opt_int('hello-multiplier'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()')
        leaves = []
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            leaves.append('{self_name}.hello_interval = {repr(_hello_interval)}')
        _hello_multiplier = self.hello_multiplier
        if _hello_multiplier is not None:
            leaves.append('{self_name}.hello_multiplier = {repr(_hello_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_interval = yang.gdata.from_xml_opt_int(node, 'hello-interval')
    yang.gdata.maybe_add(children, 'hello-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_interval, child_hello_interval)
    child_hello_multiplier = yang.gdata.from_xml_opt_int(node, 'hello-multiplier')
    yang.gdata.maybe_add(children, 'hello-multiplier', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers__hello_multiplier, child_hello_multiplier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(yang.adata.MNode):
    level_number: int
    disable: ?bool
    ipv6_unicast_metric: ?int
    metric: ?int
    priority: ?int
    passive: ?bool
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication

    mut def __init__(self, level_number: int, disable: ?bool, ipv6_unicast_metric: ?int, metric: ?int, priority: ?int, passive: ?bool, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.disable = disable
        self.ipv6_unicast_metric = ipv6_unicast_metric
        self.metric = metric
        self.priority = priority
        self.passive = passive
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('boolean', _disable)
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            children['ipv6-unicast-metric'] = yang.gdata.Leaf('uint32', _ipv6_unicast_metric)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('uint8', _priority)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number=n.get_int('level-number'), disable=n.get_opt_bool('disable'), ipv6_unicast_metric=n.get_opt_int('ipv6-unicast-metric'), metric=n.get_opt_int('metric'), priority=n.get_opt_int('priority'), passive=n.get_opt_bool('passive'), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers.from_gdata(n.get_opt_cnt('timers')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level({repr(self.level_number)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            leaves.append('{self_name}.ipv6_unicast_metric = {repr(_ipv6_unicast_metric)}')
        _metric = self.metric
        if _metric is not None:
            leaves.append('{self_name}.metric = {repr(_metric)}')
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number, child_level_number)
    child_disable = yang.gdata.from_xml_opt_bool(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable, child_disable)
    child_ipv6_unicast_metric = yang.gdata.from_xml_opt_int(node, 'ipv6-unicast-metric')
    yang.gdata.maybe_add(children, 'ipv6-unicast-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric, child_ipv6_unicast_metric)
    child_metric = yang.gdata.from_xml_opt_int(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric, child_metric)
    child_priority = yang.gdata.from_xml_opt_int(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority, child_priority)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive, child_passive)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__timers, child_timers)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(yang.adata.MNode):
    interface_name: str
    interface_ref: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref
    admin_state: ?str
    circuit_type: ?str
    delay: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay
    hello_padding: ?str
    passive: ?bool
    loopfree_alternate_exclude: ?bool
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options
    segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication

    mut def __init__(self, interface_name: str, interface_ref: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref=None, admin_state: ?str, circuit_type: ?str, delay: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay=None, hello_padding: ?str, passive: ?bool, loopfree_alternate_exclude: ?bool, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options=None, segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing=None, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp=None, level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]=[], authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface_name = interface_name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()
        self.admin_state = admin_state
        self.circuit_type = circuit_type
        self.delay = delay if delay is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()
        self.hello_padding = hello_padding
        self.passive = passive
        self.loopfree_alternate_exclude = loopfree_alternate_exclude
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers()
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options()
        self.segment_routing = segment_routing
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp()
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(elements=level)
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    mut def create_segment_routing(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing()
        self.segment_routing = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        _delay = self.delay
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            children['loopfree-alternate-exclude'] = yang.gdata.Leaf('boolean', _loopfree_alternate_exclude)
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name=n.get_str('interface-name'), interface_ref=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')), admin_state=n.get_opt_str('admin-state'), circuit_type=n.get_opt_str('circuit-type'), delay=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay.from_gdata(n.get_opt_cnt('delay')), hello_padding=n.get_opt_str('hello-padding'), passive=n.get_opt_bool('passive'), loopfree_alternate_exclude=n.get_opt_bool('loopfree-alternate-exclude'), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers.from_gdata(n.get_opt_cnt('timers')), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options.from_gdata(n.get_opt_cnt('trace-options')), segment_routing=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing.from_gdata(n.get_opt_cnt('segment-routing')), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level.from_gdata(n.get_opt_list('level')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface({repr(self.interface_name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            leaves.append('{self_name}.circuit_type = {repr(_circuit_type)}')
        _delay = self.delay
        if _delay is not None:
            res.extend(_delay.prsrc('{self_name}.delay', False).splitlines())
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            leaves.append('{self_name}.loopfree_alternate_exclude = {repr(_loopfree_alternate_exclude)}')
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis/instance/interface/segment-routing')
            res.append('segment_routing = {self_name}.create_segment_routing()')
            res.extend(_segment_routing.prsrc('segment_routing', False).splitlines())
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name, child_interface_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref, child_interface_ref)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state, child_admin_state)
    child_circuit_type = yang.gdata.from_xml_opt_str(node, 'circuit-type')
    yang.gdata.maybe_add(children, 'circuit-type', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type, child_circuit_type)
    child_delay = yang.gdata.from_xml_opt_cnt(node, 'delay')
    yang.gdata.maybe_add(children, 'delay', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay, child_delay)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding, child_hello_padding)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive, child_passive)
    child_loopfree_alternate_exclude = yang.gdata.from_xml_opt_bool(node, 'loopfree-alternate-exclude')
    yang.gdata.maybe_add(children, 'loopfree-alternate-exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__loopfree_alternate_exclude, child_loopfree_alternate_exclude)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__timers, child_timers)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast, child_ipv6_unicast)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__trace_options, child_trace_options)
    child_segment_routing = yang.gdata.from_xml_opt_cnt(node, 'segment-routing')
    yang.gdata.maybe_add(children, 'segment-routing', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__segment_routing, child_segment_routing)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__weighted_ecmp, child_weighted_ecmp)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level, child_level)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['interface-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(yang.adata.MNode):
    external: ?int
    internal: ?int

    mut def __init__(self, external: ?int, internal: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.external = external
        self.internal = internal

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _external = self.external
        if _external is not None:
            children['external'] = yang.gdata.Leaf('uint8', _external)
        _internal = self.internal
        if _internal is not None:
            children['internal'] = yang.gdata.Leaf('uint8', _internal)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(external=n.get_opt_int('external'), internal=n.get_opt_int('internal'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/route-preference')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()')
        leaves = []
        _external = self.external
        if _external is not None:
            leaves.append('{self_name}.external = {repr(_external)}')
        _internal = self.internal
        if _internal is not None:
            leaves.append('{self_name}.internal = {repr(_internal)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/route-preference'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_external = yang.gdata.from_xml_opt_int(node, 'external')
    yang.gdata.maybe_add(children, 'external', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external, child_external)
    child_internal = yang.gdata.from_xml_opt_int(node, 'internal')
    yang.gdata.maybe_add(children, 'internal', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal, child_internal)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options__trace(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(yang.adata.MNode):
    trace: list[str]

    mut def __init__(self, trace: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.trace = trace if trace is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace'] = yang.gdata.LeafList('enumeration', self.trace)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(trace=n.get_opt_strs('trace'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()')
        leaves = []
        _trace = self.trace
        if _trace is not None:
            leaves.append('{self_name}.trace = {repr(_trace)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace = yang.gdata.from_xml_opt_strs(node, 'trace')
    yang.gdata.maybe_add(children, 'trace', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options__trace, child_trace)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(yang.adata.MNode):
    level_number: int
    metric_style: ?str
    loopfree_alternate_exclude: ?bool
    route_preference: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication

    mut def __init__(self, level_number: int, metric_style: ?str, loopfree_alternate_exclude: ?bool, route_preference: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.metric_style = metric_style
        self.loopfree_alternate_exclude = loopfree_alternate_exclude
        self.route_preference = route_preference if route_preference is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _metric_style = self.metric_style
        if _metric_style is not None:
            children['metric-style'] = yang.gdata.Leaf('enumeration', _metric_style)
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            children['loopfree-alternate-exclude'] = yang.gdata.Leaf('boolean', _loopfree_alternate_exclude)
        _route_preference = self.route_preference
        if _route_preference is not None:
            children['route-preference'] = _route_preference.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number=n.get_int('level-number'), metric_style=n.get_opt_str('metric-style'), loopfree_alternate_exclude=n.get_opt_bool('loopfree-alternate-exclude'), route_preference=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference.from_gdata(n.get_opt_cnt('route-preference')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options.from_gdata(n.get_opt_cnt('trace-options')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level({repr(self.level_number)})')
        leaves = []
        _metric_style = self.metric_style
        if _metric_style is not None:
            leaves.append('{self_name}.metric_style = {repr(_metric_style)}')
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            leaves.append('{self_name}.loopfree_alternate_exclude = {repr(_loopfree_alternate_exclude)}')
        _route_preference = self.route_preference
        if _route_preference is not None:
            res.extend(_route_preference.prsrc('{self_name}.route_preference', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number, child_level_number)
    child_metric_style = yang.gdata.from_xml_opt_str(node, 'metric-style')
    yang.gdata.maybe_add(children, 'metric-style', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style, child_metric_style)
    child_loopfree_alternate_exclude = yang.gdata.from_xml_opt_bool(node, 'loopfree-alternate-exclude')
    yang.gdata.maybe_add(children, 'loopfree-alternate-exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude, child_loopfree_alternate_exclude)
    child_route_preference = yang.gdata.from_xml_opt_cnt(node, 'route-preference')
    yang.gdata.maybe_add(children, 'route-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference, child_route_preference)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__trace_options, child_trace_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(yang.adata.MNode):
    name: str
    admin_state: ?str
    instance_id: ?int
    net: list[str]
    level_capability: ?str
    max_ecmp_paths: ?int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp
    poi_tlv: ?bool
    iid_tlv: ?bool
    advertise_router_capability: ?bool
    prefix_attributes_tlv: ?bool
    export_policy: ?str
    hello_padding: ?str
    enable_csnp_on_p2p_links: ?bool
    attached_bit: srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit
    overload: srl_nokia_network_instance__network_instance__protocols__isis__instance__overload
    timers: srl_nokia_network_instance__network_instance__protocols__isis__instance__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__isis__instance__transport
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart
    auto_cost: srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost
    loopfree_alternate: srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication
    inter_level_propagation_policies: srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies
    segment_routing: srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing
    traffic_engineering: srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering
    interface: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__level

    mut def __init__(self, name: str, admin_state: ?str, instance_id: ?int, net: ?list[str]=None, level_capability: ?str, max_ecmp_paths: ?int, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp=None, poi_tlv: ?bool, iid_tlv: ?bool, advertise_router_capability: ?bool, prefix_attributes_tlv: ?bool, export_policy: ?str, hello_padding: ?str, enable_csnp_on_p2p_links: ?bool, attached_bit: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit=None, overload: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__overload=None, timers: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__transport=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart=None, auto_cost: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost=None, loopfree_alternate: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication=None, inter_level_propagation_policies: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies=None, segment_routing: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing=None, traffic_engineering: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering=None, interface: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]=[], level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.name = name
        self.admin_state = admin_state
        self.instance_id = instance_id
        self.net = net if net is not None else []
        self.level_capability = level_capability
        self.max_ecmp_paths = max_ecmp_paths
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp()
        self.poi_tlv = poi_tlv
        self.iid_tlv = iid_tlv
        self.advertise_router_capability = advertise_router_capability
        self.prefix_attributes_tlv = prefix_attributes_tlv
        self.export_policy = export_policy
        self.hello_padding = hello_padding
        self.enable_csnp_on_p2p_links = enable_csnp_on_p2p_links
        self.attached_bit = attached_bit if attached_bit is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()
        self.overload = overload if overload is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__overload()
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__timers()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart()
        self.auto_cost = auto_cost if auto_cost is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost()
        self.loopfree_alternate = loopfree_alternate if loopfree_alternate is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()
        self.inter_level_propagation_policies = inter_level_propagation_policies if inter_level_propagation_policies is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies()
        self.segment_routing = segment_routing if segment_routing is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing()
        self.traffic_engineering = traffic_engineering if traffic_engineering is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering()
        self.interface = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(elements=interface)
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__level(elements=level)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _instance_id = self.instance_id
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('uint32', _instance_id)
        children['net'] = yang.gdata.LeafList('string', self.net)
        _level_capability = self.level_capability
        if _level_capability is not None:
            children['level-capability'] = yang.gdata.Leaf('enumeration', _level_capability)
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            children['max-ecmp-paths'] = yang.gdata.Leaf('uint8', _max_ecmp_paths)
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            children['poi-tlv'] = yang.gdata.Leaf('boolean', _poi_tlv)
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            children['iid-tlv'] = yang.gdata.Leaf('boolean', _iid_tlv)
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            children['advertise-router-capability'] = yang.gdata.Leaf('boolean', _advertise_router_capability)
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            children['prefix-attributes-tlv'] = yang.gdata.Leaf('boolean', _prefix_attributes_tlv)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            children['enable-csnp-on-p2p-links'] = yang.gdata.Leaf('boolean', _enable_csnp_on_p2p_links)
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            children['attached-bit'] = _attached_bit.to_gdata()
        _overload = self.overload
        if _overload is not None:
            children['overload'] = _overload.to_gdata()
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _auto_cost = self.auto_cost
        if _auto_cost is not None:
            children['auto-cost'] = _auto_cost.to_gdata()
        _loopfree_alternate = self.loopfree_alternate
        if _loopfree_alternate is not None:
            children['loopfree-alternate'] = _loopfree_alternate.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _inter_level_propagation_policies = self.inter_level_propagation_policies
        if _inter_level_propagation_policies is not None:
            children['inter-level-propagation-policies'] = _inter_level_propagation_policies.to_gdata()
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            children['segment-routing'] = _segment_routing.to_gdata()
        _traffic_engineering = self.traffic_engineering
        if _traffic_engineering is not None:
            children['traffic-engineering'] = _traffic_engineering.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name=n.get_str('name'), admin_state=n.get_opt_str('admin-state'), instance_id=n.get_opt_int('instance-id'), net=n.get_opt_strs('net'), level_capability=n.get_opt_str('level-capability'), max_ecmp_paths=n.get_opt_int('max-ecmp-paths'), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')), poi_tlv=n.get_opt_bool('poi-tlv'), iid_tlv=n.get_opt_bool('iid-tlv'), advertise_router_capability=n.get_opt_bool('advertise-router-capability'), prefix_attributes_tlv=n.get_opt_bool('prefix-attributes-tlv'), export_policy=n.get_opt_str('export-policy'), hello_padding=n.get_opt_str('hello-padding'), enable_csnp_on_p2p_links=n.get_opt_bool('enable-csnp-on-p2p-links'), attached_bit=srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit.from_gdata(n.get_opt_cnt('attached-bit')), overload=srl_nokia_network_instance__network_instance__protocols__isis__instance__overload.from_gdata(n.get_opt_cnt('overload')), timers=srl_nokia_network_instance__network_instance__protocols__isis__instance__timers.from_gdata(n.get_opt_cnt('timers')), trace_options=srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options.from_gdata(n.get_opt_cnt('trace-options')), transport=srl_nokia_network_instance__network_instance__protocols__isis__instance__transport.from_gdata(n.get_opt_cnt('transport')), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), auto_cost=srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost.from_gdata(n.get_opt_cnt('auto-cost')), loopfree_alternate=srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate.from_gdata(n.get_opt_cnt('loopfree-alternate')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication.from_gdata(n.get_opt_cnt('authentication')), inter_level_propagation_policies=srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies.from_gdata(n.get_opt_cnt('inter-level-propagation-policies')), segment_routing=srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing.from_gdata(n.get_opt_cnt('segment-routing')), traffic_engineering=srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering.from_gdata(n.get_opt_cnt('traffic-engineering')), interface=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface.from_gdata(n.get_opt_list('interface')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__level.from_gdata(n.get_opt_list('level')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance({repr(self.name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _instance_id = self.instance_id
        if _instance_id is not None:
            leaves.append('{self_name}.instance_id = {repr(_instance_id)}')
        _net = self.net
        if _net is not None:
            leaves.append('{self_name}.net = {repr(_net)}')
        _level_capability = self.level_capability
        if _level_capability is not None:
            leaves.append('{self_name}.level_capability = {repr(_level_capability)}')
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            leaves.append('{self_name}.max_ecmp_paths = {repr(_max_ecmp_paths)}')
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            leaves.append('{self_name}.poi_tlv = {repr(_poi_tlv)}')
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            leaves.append('{self_name}.iid_tlv = {repr(_iid_tlv)}')
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            leaves.append('{self_name}.advertise_router_capability = {repr(_advertise_router_capability)}')
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            leaves.append('{self_name}.prefix_attributes_tlv = {repr(_prefix_attributes_tlv)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            leaves.append('{self_name}.enable_csnp_on_p2p_links = {repr(_enable_csnp_on_p2p_links)}')
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            res.extend(_attached_bit.prsrc('{self_name}.attached_bit', False).splitlines())
        _overload = self.overload
        if _overload is not None:
            res.extend(_overload.prsrc('{self_name}.overload', False).splitlines())
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _auto_cost = self.auto_cost
        if _auto_cost is not None:
            res.extend(_auto_cost.prsrc('{self_name}.auto_cost', False).splitlines())
        _loopfree_alternate = self.loopfree_alternate
        if _loopfree_alternate is not None:
            res.extend(_loopfree_alternate.prsrc('{self_name}.loopfree_alternate', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _inter_level_propagation_policies = self.inter_level_propagation_policies
        if _inter_level_propagation_policies is not None:
            res.extend(_inter_level_propagation_policies.prsrc('{self_name}.inter_level_propagation_policies', False).splitlines())
        _segment_routing = self.segment_routing
        if _segment_routing is not None:
            res.extend(_segment_routing.prsrc('{self_name}.segment_routing', False).splitlines())
        _traffic_engineering = self.traffic_engineering
        if _traffic_engineering is not None:
            res.extend(_traffic_engineering.prsrc('{self_name}.traffic_engineering', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface element: {_element.to_gdata().key_str(['interface-name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.interface_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name, child_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state, child_admin_state)
    child_instance_id = yang.gdata.from_xml_opt_int(node, 'instance-id')
    yang.gdata.maybe_add(children, 'instance-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id, child_instance_id)
    child_net = yang.gdata.from_xml_opt_strs(node, 'net')
    yang.gdata.maybe_add(children, 'net', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net, child_net)
    child_level_capability = yang.gdata.from_xml_opt_str(node, 'level-capability')
    yang.gdata.maybe_add(children, 'level-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability, child_level_capability)
    child_max_ecmp_paths = yang.gdata.from_xml_opt_int(node, 'max-ecmp-paths')
    yang.gdata.maybe_add(children, 'max-ecmp-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths, child_max_ecmp_paths)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__weighted_ecmp, child_weighted_ecmp)
    child_poi_tlv = yang.gdata.from_xml_opt_bool(node, 'poi-tlv')
    yang.gdata.maybe_add(children, 'poi-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv, child_poi_tlv)
    child_iid_tlv = yang.gdata.from_xml_opt_bool(node, 'iid-tlv')
    yang.gdata.maybe_add(children, 'iid-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv, child_iid_tlv)
    child_advertise_router_capability = yang.gdata.from_xml_opt_bool(node, 'advertise-router-capability')
    yang.gdata.maybe_add(children, 'advertise-router-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability, child_advertise_router_capability)
    child_prefix_attributes_tlv = yang.gdata.from_xml_opt_bool(node, 'prefix-attributes-tlv')
    yang.gdata.maybe_add(children, 'prefix-attributes-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv, child_prefix_attributes_tlv)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy, child_export_policy)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding, child_hello_padding)
    child_enable_csnp_on_p2p_links = yang.gdata.from_xml_opt_bool(node, 'enable-csnp-on-p2p-links')
    yang.gdata.maybe_add(children, 'enable-csnp-on-p2p-links', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links, child_enable_csnp_on_p2p_links)
    child_attached_bit = yang.gdata.from_xml_opt_cnt(node, 'attached-bit')
    yang.gdata.maybe_add(children, 'attached-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit, child_attached_bit)
    child_overload = yang.gdata.from_xml_opt_cnt(node, 'overload')
    yang.gdata.maybe_add(children, 'overload', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__overload, child_overload)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__timers, child_timers)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__trace_options, child_trace_options)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport, child_transport)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast, child_ipv6_unicast)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__graceful_restart, child_graceful_restart)
    child_auto_cost = yang.gdata.from_xml_opt_cnt(node, 'auto-cost')
    yang.gdata.maybe_add(children, 'auto-cost', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__auto_cost, child_auto_cost)
    child_loopfree_alternate = yang.gdata.from_xml_opt_cnt(node, 'loopfree-alternate')
    yang.gdata.maybe_add(children, 'loopfree-alternate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__loopfree_alternate, child_loopfree_alternate)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication, child_authentication)
    child_inter_level_propagation_policies = yang.gdata.from_xml_opt_cnt(node, 'inter-level-propagation-policies')
    yang.gdata.maybe_add(children, 'inter-level-propagation-policies', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__inter_level_propagation_policies, child_inter_level_propagation_policies)
    child_segment_routing = yang.gdata.from_xml_opt_cnt(node, 'segment-routing')
    yang.gdata.maybe_add(children, 'segment-routing', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__segment_routing, child_segment_routing)
    child_traffic_engineering = yang.gdata.from_xml_opt_cnt(node, 'traffic-engineering')
    yang.gdata.maybe_add(children, 'traffic-engineering', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__traffic_engineering, child_traffic_engineering)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface, child_interface)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level, child_level)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis(yang.adata.MNode):
    non_stop_forwarding: srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding
    dynamic_label_block: ?str
    instance: srl_nokia_network_instance__network_instance__protocols__isis__instance

    mut def __init__(self, non_stop_forwarding: ?srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding=None, dynamic_label_block: ?str, instance: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.non_stop_forwarding = non_stop_forwarding if non_stop_forwarding is not None else srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding()
        self.dynamic_label_block = dynamic_label_block
        self.instance = srl_nokia_network_instance__network_instance__protocols__isis__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _non_stop_forwarding = self.non_stop_forwarding
        if _non_stop_forwarding is not None:
            children['non-stop-forwarding'] = _non_stop_forwarding.to_gdata()
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__isis(non_stop_forwarding=srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding.from_gdata(n.get_opt_cnt('non-stop-forwarding')), dynamic_label_block=n.get_opt_str('dynamic-label-block'), instance=srl_nokia_network_instance__network_instance__protocols__isis__instance.from_gdata(n.get_opt_list('instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis()')
        leaves = []
        _non_stop_forwarding = self.non_stop_forwarding
        if _non_stop_forwarding is not None:
            res.extend(_non_stop_forwarding.prsrc('{self_name}.non_stop_forwarding', False).splitlines())
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            leaves.append('{self_name}.dynamic_label_block = {repr(_dynamic_label_block)}')
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_non_stop_forwarding = yang.gdata.from_xml_opt_cnt(node, 'non-stop-forwarding')
    yang.gdata.maybe_add(children, 'non-stop-forwarding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__non_stop_forwarding, child_non_stop_forwarding)
    child_dynamic_label_block = yang.gdata.from_xml_opt_str(node, 'dynamic-label-block')
    yang.gdata.maybe_add(children, 'dynamic-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__dynamic_label_block, child_dynamic_label_block)
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance, child_instance)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__autonomous_system(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as if remove_private_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.extend(_remove_private_as.prsrc('{self_name}.remove_private_as', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as, child_remove_private_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__always_compare_med(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__advertise_inactive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(yang.adata.MNode):
    always_compare_med: ?bool
    advertise_inactive: ?bool

    mut def __init__(self, always_compare_med: ?bool, advertise_inactive: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.always_compare_med = always_compare_med
        self.advertise_inactive = advertise_inactive

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_compare_med = self.always_compare_med
        if _always_compare_med is not None:
            children['always-compare-med'] = yang.gdata.Leaf('boolean', _always_compare_med)
        _advertise_inactive = self.advertise_inactive
        if _advertise_inactive is not None:
            children['advertise-inactive'] = yang.gdata.Leaf('boolean', _advertise_inactive)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(always_compare_med=n.get_opt_bool('always-compare-med'), advertise_inactive=n.get_opt_bool('advertise-inactive'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/best-path-selection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()')
        leaves = []
        _always_compare_med = self.always_compare_med
        if _always_compare_med is not None:
            leaves.append('{self_name}.always_compare_med = {repr(_always_compare_med)}')
        _advertise_inactive = self.advertise_inactive
        if _advertise_inactive is not None:
            leaves.append('{self_name}.advertise_inactive = {repr(_advertise_inactive)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/best-path-selection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_always_compare_med = yang.gdata.from_xml_opt_bool(node, 'always-compare-med')
    yang.gdata.maybe_add(children, 'always-compare-med', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__always_compare_med, child_always_compare_med)
    child_advertise_inactive = yang.gdata.from_xml_opt_bool(node, 'advertise-inactive')
    yang.gdata.maybe_add(children, 'advertise-inactive', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection__advertise_inactive, child_advertise_inactive)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label__transmit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(yang.adata.MNode):
    transmit: ?str

    mut def __init__(self, transmit: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.transmit = transmit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _transmit = self.transmit
        if _transmit is not None:
            children['transmit'] = yang.gdata.Leaf('enumeration', _transmit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(transmit=n.get_opt_str('transmit'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/labeled-unicast/entropy-label')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()')
        leaves = []
        _transmit = self.transmit
        if _transmit is not None:
            leaves.append('{self_name}.transmit = {repr(_transmit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/labeled-unicast/entropy-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_transmit = yang.gdata.from_xml_opt_str(node, 'transmit')
    yang.gdata.maybe_add(children, 'transmit', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label__transmit, child_transmit)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_label_swap(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(yang.adata.MNode):
    program_label_swap: ?bool
    program_route: ?bool

    mut def __init__(self, program_label_swap: ?bool, program_route: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.program_label_swap = program_label_swap
        self.program_route = program_route

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _program_label_swap = self.program_label_swap
        if _program_label_swap is not None:
            children['program-label-swap'] = yang.gdata.Leaf('boolean', _program_label_swap)
        _program_route = self.program_route
        if _program_route is not None:
            children['program-route'] = yang.gdata.Leaf('boolean', _program_route)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(program_label_swap=n.get_opt_bool('program-label-swap'), program_route=n.get_opt_bool('program-route'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/labeled-unicast/selective-labeled-unicast-install')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install()')
        leaves = []
        _program_label_swap = self.program_label_swap
        if _program_label_swap is not None:
            leaves.append('{self_name}.program_label_swap = {repr(_program_label_swap)}')
        _program_route = self.program_route
        if _program_route is not None:
            leaves.append('{self_name}.program_route = {repr(_program_route)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/labeled-unicast/selective-labeled-unicast-install'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_program_label_swap = yang.gdata.from_xml_opt_bool(node, 'program-label-swap')
    yang.gdata.maybe_add(children, 'program-label-swap', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_label_swap, child_program_label_swap)
    child_program_route = yang.gdata.from_xml_opt_bool(node, 'program-route')
    yang.gdata.maybe_add(children, 'program-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install__program_route, child_program_route)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(yang.adata.MNode):
    dynamic_label_block: ?str
    entropy_label: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label
    selective_labeled_unicast_install: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install

    mut def __init__(self, dynamic_label_block: ?str, entropy_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label=None, selective_labeled_unicast_install: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.dynamic_label_block = dynamic_label_block
        self.entropy_label = entropy_label if entropy_label is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label()
        self.selective_labeled_unicast_install = selective_labeled_unicast_install

    mut def create_selective_labeled_unicast_install(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install()
        self.selective_labeled_unicast_install = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            children['entropy-label'] = _entropy_label.to_gdata()
        _selective_labeled_unicast_install = self.selective_labeled_unicast_install
        if _selective_labeled_unicast_install is not None:
            children['selective-labeled-unicast-install'] = _selective_labeled_unicast_install.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(dynamic_label_block=n.get_opt_str('dynamic-label-block'), entropy_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label.from_gdata(n.get_opt_cnt('entropy-label')), selective_labeled_unicast_install=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install.from_gdata(n.get_opt_cnt('selective-labeled-unicast-install')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()')
        leaves = []
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            leaves.append('{self_name}.dynamic_label_block = {repr(_dynamic_label_block)}')
        _entropy_label = self.entropy_label
        if _entropy_label is not None:
            res.extend(_entropy_label.prsrc('{self_name}.entropy_label', False).splitlines())
        _selective_labeled_unicast_install = self.selective_labeled_unicast_install
        if _selective_labeled_unicast_install is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/bgp-label/labeled-unicast/selective-labeled-unicast-install')
            res.append('selective_labeled_unicast_install = {self_name}.create_selective_labeled_unicast_install()')
            res.extend(_selective_labeled_unicast_install.prsrc('selective_labeled_unicast_install', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_dynamic_label_block = yang.gdata.from_xml_opt_str(node, 'dynamic-label-block')
    yang.gdata.maybe_add(children, 'dynamic-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__dynamic_label_block, child_dynamic_label_block)
    child_entropy_label = yang.gdata.from_xml_opt_cnt(node, 'entropy-label')
    yang.gdata.maybe_add(children, 'entropy-label', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__entropy_label, child_entropy_label)
    child_selective_labeled_unicast_install = yang.gdata.from_xml_opt_cnt(node, 'selective-labeled-unicast-install')
    yang.gdata.maybe_add(children, 'selective-labeled-unicast-install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast__selective_labeled_unicast_install, child_selective_labeled_unicast_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn__dynamic_label_block(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(yang.adata.MNode):
    dynamic_label_block: ?str

    mut def __init__(self, dynamic_label_block: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.dynamic_label_block = dynamic_label_block

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            children['dynamic-label-block'] = yang.gdata.Leaf('leafref', _dynamic_label_block)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(dynamic_label_block=n.get_opt_str('dynamic-label-block'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-vpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()')
        leaves = []
        _dynamic_label_block = self.dynamic_label_block
        if _dynamic_label_block is not None:
            leaves.append('{self_name}.dynamic_label_block = {repr(_dynamic_label_block)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_dynamic_label_block = yang.gdata.from_xml_opt_str(node, 'dynamic-label-block')
    yang.gdata.maybe_add(children, 'dynamic-label-block', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn__dynamic_label_block, child_dynamic_label_block)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(yang.adata.MNode):
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution

    mut def __init__(self, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()')
        leaves = []
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label/bgp-ipvpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn__next_hop_resolution, child_next_hop_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(yang.adata.MNode):
    labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast
    bgp_vpn: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn
    bgp_ipvpn: srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn

    mut def __init__(self, labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast=None, bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.labeled_unicast = labeled_unicast if labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast()
        self.bgp_vpn = bgp_vpn if bgp_vpn is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn()
        self.bgp_ipvpn = bgp_ipvpn if bgp_ipvpn is not None else srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _labeled_unicast = self.labeled_unicast
        if _labeled_unicast is not None:
            children['labeled-unicast'] = _labeled_unicast.to_gdata()
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            children['bgp-vpn'] = _bgp_vpn.to_gdata()
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast.from_gdata(n.get_opt_cnt('labeled-unicast')), bgp_vpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn.from_gdata(n.get_opt_cnt('bgp-vpn')), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn.from_gdata(n.get_opt_cnt('bgp-ipvpn')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/bgp-label')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label()')
        leaves = []
        _labeled_unicast = self.labeled_unicast
        if _labeled_unicast is not None:
            res.extend(_labeled_unicast.prsrc('{self_name}.labeled_unicast', False).splitlines())
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            res.extend(_bgp_vpn.prsrc('{self_name}.bgp_vpn', False).splitlines())
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            res.extend(_bgp_ipvpn.prsrc('{self_name}.bgp_ipvpn', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/bgp-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'labeled-unicast')
    yang.gdata.maybe_add(children, 'labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__labeled_unicast, child_labeled_unicast)
    child_bgp_vpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-vpn')
    yang.gdata.maybe_add(children, 'bgp-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_vpn, child_bgp_vpn)
    child_bgp_ipvpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-ipvpn')
    yang.gdata.maybe_add(children, 'bgp-ipvpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label__bgp_ipvpn, child_bgp_ipvpn)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__convergence__min_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__convergence(yang.adata.MNode):
    min_wait_to_advertise: ?int

    mut def __init__(self, min_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.min_wait_to_advertise = min_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _min_wait_to_advertise = self.min_wait_to_advertise
        if _min_wait_to_advertise is not None:
            children['min-wait-to-advertise'] = yang.gdata.Leaf('uint16', _min_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__convergence(min_wait_to_advertise=n.get_opt_int('min-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__convergence()')
        leaves = []
        _min_wait_to_advertise = self.min_wait_to_advertise
        if _min_wait_to_advertise is not None:
            leaves.append('{self_name}.min_wait_to_advertise = {repr(_min_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_min_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'min-wait-to-advertise')
    yang.gdata.maybe_add(children, 'min-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__convergence__min_wait_to_advertise, child_min_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__allowed_peer_as(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(yang.adata.MNode):
    prefix: str
    allowed_peer_as: list[str]
    peer_group: ?str

    mut def __init__(self, prefix: str, allowed_peer_as: ?list[str]=None, peer_group: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix = prefix
        self.allowed_peer_as = allowed_peer_as if allowed_peer_as is not None else []
        self.peer_group = peer_group

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix = self.prefix
        if _prefix is not None:
            children['prefix'] = yang.gdata.Leaf('union', _prefix)
        children['allowed-peer-as'] = yang.gdata.LeafList('string', self.allowed_peer_as, user_order=True)
        _peer_group = self.peer_group
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(prefix=n.get_str('prefix'), allowed_peer_as=n.get_opt_strs('allowed-peer-as'), peer_group=n.get_opt_str('peer-group'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/dynamic-neighbors/accept/match')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match({repr(self.prefix)})')
        leaves = []
        _allowed_peer_as = self.allowed_peer_as
        if _allowed_peer_as is not None:
            leaves.append('{self_name}.allowed_peer_as = {repr(_allowed_peer_as)}')
        _peer_group = self.peer_group
        if _peer_group is not None:
            leaves.append('{self_name}.peer_group = {repr(_peer_group)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/dynamic-neighbors/accept/match'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'match'
        self.elements = elements

    mut def create(self, prefix, peer_group):
        for e in self.elements:
            match = True
            if e.prefix != prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry(prefix, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_prefix = yang.gdata.from_xml_str(node, 'prefix')
    yang.gdata.maybe_add(children, 'prefix', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__prefix, child_prefix)
    child_allowed_peer_as = yang.gdata.from_xml_opt_strs(node, 'allowed-peer-as')
    yang.gdata.maybe_add(children, 'allowed-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__allowed_peer_as, child_allowed_peer_as)
    child_peer_group = yang.gdata.from_xml_opt_str(node, 'peer-group')
    yang.gdata.maybe_add(children, 'peer-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match__peer_group, child_peer_group)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_element(e) for e in nodes]
    return yang.gdata.List(keys=['prefix'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__max_sessions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(yang.adata.MNode):
    match: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match
    max_sessions: ?int

    mut def __init__(self, match: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match_entry]=[], max_sessions: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.match = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match(elements=match)
        self.max_sessions = max_sessions

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _match = self.match
        if _match is not None:
            children['match'] = _match.to_gdata()
        _max_sessions = self.max_sessions
        if _max_sessions is not None:
            children['max-sessions'] = yang.gdata.Leaf('uint16', _max_sessions)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(match=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match.from_gdata(n.get_opt_list('match')), max_sessions=n.get_opt_int('max-sessions'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/dynamic-neighbors/accept')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()')
        leaves = []
        _match = self.match
        for _element in _match.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/dynamic-neighbors/accept/match element: {_element.to_gdata().key_str(['prefix'])}")
            list_elem = 'match_element = {self_name}.match.create({repr(_element.prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('match_element', False, list_element=True).splitlines())
        _max_sessions = self.max_sessions
        if _max_sessions is not None:
            leaves.append('{self_name}.max_sessions = {repr(_max_sessions)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/dynamic-neighbors/accept'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_match = yang.gdata.from_xml_opt_list(node, 'match')
    yang.gdata.maybe_add(children, 'match', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__match, child_match)
    child_max_sessions = yang.gdata.from_xml_opt_int(node, 'max-sessions')
    yang.gdata.maybe_add(children, 'max-sessions', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept__max_sessions, child_max_sessions)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__allowed_peer_as(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__max_sessions(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(yang.adata.MNode):
    interface_name: str
    allowed_peer_as: list[str]
    peer_group: ?str
    max_sessions: ?int

    mut def __init__(self, interface_name: str, allowed_peer_as: ?list[str]=None, peer_group: ?str, max_sessions: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.interface_name = interface_name
        self.allowed_peer_as = allowed_peer_as if allowed_peer_as is not None else []
        self.peer_group = peer_group
        self.max_sessions = max_sessions

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        children['allowed-peer-as'] = yang.gdata.LeafList('string', self.allowed_peer_as, user_order=True)
        _peer_group = self.peer_group
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        _max_sessions = self.max_sessions
        if _max_sessions is not None:
            children['max-sessions'] = yang.gdata.Leaf('uint16', _max_sessions)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(interface_name=n.get_str('interface-name'), allowed_peer_as=n.get_opt_strs('allowed-peer-as'), peer_group=n.get_opt_str('peer-group'), max_sessions=n.get_opt_int('max-sessions'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/dynamic-neighbors/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface({repr(self.interface_name)})')
        leaves = []
        _allowed_peer_as = self.allowed_peer_as
        if _allowed_peer_as is not None:
            leaves.append('{self_name}.allowed_peer_as = {repr(_allowed_peer_as)}')
        _peer_group = self.peer_group
        if _peer_group is not None:
            leaves.append('{self_name}.peer_group = {repr(_peer_group)}')
        _max_sessions = self.max_sessions
        if _max_sessions is not None:
            leaves.append('{self_name}.max_sessions = {repr(_max_sessions)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/dynamic-neighbors/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name, peer_group):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry(interface_name, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__interface_name, child_interface_name)
    child_allowed_peer_as = yang.gdata.from_xml_opt_strs(node, 'allowed-peer-as')
    yang.gdata.maybe_add(children, 'allowed-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__allowed_peer_as, child_allowed_peer_as)
    child_peer_group = yang.gdata.from_xml_opt_str(node, 'peer-group')
    yang.gdata.maybe_add(children, 'peer-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__peer_group, child_peer_group)
    child_max_sessions = yang.gdata.from_xml_opt_int(node, 'max-sessions')
    yang.gdata.maybe_add(children, 'max-sessions', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface__max_sessions, child_max_sessions)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['interface-name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(yang.adata.MNode):
    accept: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept
    interface: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface

    mut def __init__(self, accept: ?srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept=None, interface: list[srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.accept = accept if accept is not None else srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept()
        self.interface = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _accept = self.accept
        if _accept is not None:
            children['accept'] = _accept.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(accept=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept.from_gdata(n.get_opt_cnt('accept')), interface=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface.from_gdata(n.get_opt_list('interface')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/dynamic-neighbors')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()')
        leaves = []
        _accept = self.accept
        if _accept is not None:
            res.extend(_accept.prsrc('{self_name}.accept', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/dynamic-neighbors/interface element: {_element.to_gdata().key_str(['interface-name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.interface_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/dynamic-neighbors'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_accept = yang.gdata.from_xml_opt_cnt(node, 'accept')
    yang.gdata.maybe_add(children, 'accept', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__accept, child_accept)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__import_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__export_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(yang.adata.MNode):
    import_reject_all: ?bool
    export_reject_all: ?bool

    mut def __init__(self, import_reject_all: ?bool, export_reject_all: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.import_reject_all = import_reject_all
        self.export_reject_all = export_reject_all

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_reject_all = self.import_reject_all
        if _import_reject_all is not None:
            children['import-reject-all'] = yang.gdata.Leaf('boolean', _import_reject_all)
        _export_reject_all = self.export_reject_all
        if _export_reject_all is not None:
            children['export-reject-all'] = yang.gdata.Leaf('boolean', _export_reject_all)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(import_reject_all=n.get_opt_bool('import-reject-all'), export_reject_all=n.get_opt_bool('export-reject-all'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/ebgp-default-policy')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()')
        leaves = []
        _import_reject_all = self.import_reject_all
        if _import_reject_all is not None:
            leaves.append('{self_name}.import_reject_all = {repr(_import_reject_all)}')
        _export_reject_all = self.export_reject_all
        if _export_reject_all is not None:
            leaves.append('{self_name}.export_reject_all = {repr(_export_reject_all)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/ebgp-default-policy'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_reject_all = yang.gdata.from_xml_opt_bool(node, 'import-reject-all')
    yang.gdata.maybe_add(children, 'import-reject-all', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__import_reject_all, child_import_reject_all)
    child_export_reject_all = yang.gdata.from_xml_opt_bool(node, 'export-reject-all')
    yang.gdata.maybe_add(children, 'export-reject-all', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__export_reject_all, child_export_reject_all)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(enable_bfd=n.get_opt_bool('enable-bfd'), fast_failover=n.get_opt_bool('fast-failover'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/failure-detection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()')
        leaves = []
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            leaves.append('{self_name}.fast_failover = {repr(_fast_failover)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/failure-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__enable_bfd, child_enable_bfd)
    child_fast_failover = yang.gdata.from_xml_opt_bool(node, 'fast-failover')
    yang.gdata.maybe_add(children, 'fast-failover', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection__fast_failover, child_fast_failover)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: ?int

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        self.requested_restart_time = requested_restart_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(admin_state=n.get_opt_str('admin-state'), stale_routes_time=n.get_opt_int('stale-routes-time'), requested_restart_time=n.get_opt_int('requested-restart-time'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            leaves.append('{self_name}.stale_routes_time = {repr(_stale_routes_time)}')
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            leaves.append('{self_name}.requested_restart_time = {repr(_requested_restart_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__admin_state, child_admin_state)
    child_stale_routes_time = yang.gdata.from_xml_opt_int(node, 'stale-routes-time')
    yang.gdata.maybe_add(children, 'stale-routes-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__stale_routes_time, child_stale_routes_time)
    child_requested_restart_time = yang.gdata.from_xml_opt_int(node, 'requested-restart-time')
    yang.gdata.maybe_add(children, 'requested-restart-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart__requested_restart_time, child_requested_restart_time)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__max_ecmp_hash_buckets_per_next_hop_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__eligible_prefix_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool
    eligible_prefix_policy: ?str

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool, eligible_prefix_policy: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath
        self.eligible_prefix_policy = eligible_prefix_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        _send = self.send
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        _send_max = self.send_max
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        _eligible_prefix_policy = self.eligible_prefix_policy
        if _eligible_prefix_policy is not None:
            children['eligible-prefix-policy'] = yang.gdata.Leaf('leafref', _eligible_prefix_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(receive=n.get_opt_bool('receive'), send=n.get_opt_bool('send'), send_max=n.get_opt_int('send-max'), send_multipath=n.get_opt_empty('send-multipath'), eligible_prefix_policy=n.get_opt_str('eligible-prefix-policy'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/add-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _send = self.send
        if _send is not None:
            leaves.append('{self_name}.send = {repr(_send)}')
        _send_max = self.send_max
        if _send_max is not None:
            leaves.append('{self_name}.send_max = {repr(_send_max)}')
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            leaves.append('{self_name}.send_multipath = {repr(_send_multipath)}')
        _eligible_prefix_policy = self.eligible_prefix_policy
        if _eligible_prefix_policy is not None:
            leaves.append('{self_name}.eligible_prefix_policy = {repr(_eligible_prefix_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/add-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_bool(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__receive, child_receive)
    child_send = yang.gdata.from_xml_opt_bool(node, 'send')
    yang.gdata.maybe_add(children, 'send', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send, child_send)
    child_send_max = yang.gdata.from_xml_opt_int(node, 'send-max')
    yang.gdata.maybe_add(children, 'send-max', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_max, child_send_max)
    child_send_multipath = yang.gdata.from_xml_opt_empty(node, 'send-multipath')
    yang.gdata.maybe_add(children, 'send-multipath', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__send_multipath, child_send_multipath)
    child_eligible_prefix_policy = yang.gdata.from_xml_opt_str(node, 'eligible-prefix-policy')
    yang.gdata.maybe_add(children, 'eligible-prefix-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths__eligible_prefix_policy, child_eligible_prefix_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__allow_multiple_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/multipath/ebgp/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/multipath/ebgp/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(yang.adata.MNode):
    maximum_paths: ?int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp

    mut def __init__(self, maximum_paths: ?int, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.maximum_paths = maximum_paths
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(maximum_paths=n.get_opt_int('maximum-paths'), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/multipath/ebgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()')
        leaves = []
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            leaves.append('{self_name}.maximum_paths = {repr(_maximum_paths)}')
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/multipath/ebgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_paths = yang.gdata.from_xml_opt_int(node, 'maximum-paths')
    yang.gdata.maybe_add(children, 'maximum-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__maximum_paths, child_maximum_paths)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp__weighted_ecmp, child_weighted_ecmp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__maximum_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/multipath/ibgp/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/multipath/ibgp/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(yang.adata.MNode):
    maximum_paths: ?int
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp

    mut def __init__(self, maximum_paths: ?int, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.maximum_paths = maximum_paths
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(maximum_paths=n.get_opt_int('maximum-paths'), weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/multipath/ibgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()')
        leaves = []
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            leaves.append('{self_name}.maximum_paths = {repr(_maximum_paths)}')
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/multipath/ibgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_paths = yang.gdata.from_xml_opt_int(node, 'maximum-paths')
    yang.gdata.maybe_add(children, 'maximum-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__maximum_paths, child_maximum_paths)
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp__weighted_ecmp, child_weighted_ecmp)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(yang.adata.MNode):
    allow_multiple_as: ?bool
    maximum_paths: ?int
    ebgp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp
    ibgp: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp

    mut def __init__(self, allow_multiple_as: ?bool, maximum_paths: ?int, ebgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp=None, ibgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_multiple_as = allow_multiple_as
        self.maximum_paths = maximum_paths
        self.ebgp = ebgp if ebgp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp()
        self.ibgp = ibgp if ibgp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_multiple_as = self.allow_multiple_as
        if _allow_multiple_as is not None:
            children['allow-multiple-as'] = yang.gdata.Leaf('boolean', _allow_multiple_as)
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            children['maximum-paths'] = yang.gdata.Leaf('uint32', _maximum_paths)
        _ebgp = self.ebgp
        if _ebgp is not None:
            children['ebgp'] = _ebgp.to_gdata()
        _ibgp = self.ibgp
        if _ibgp is not None:
            children['ibgp'] = _ibgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(allow_multiple_as=n.get_opt_bool('allow-multiple-as'), maximum_paths=n.get_opt_int('maximum-paths'), ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp.from_gdata(n.get_opt_cnt('ebgp')), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp.from_gdata(n.get_opt_cnt('ibgp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/multipath')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()')
        leaves = []
        _allow_multiple_as = self.allow_multiple_as
        if _allow_multiple_as is not None:
            leaves.append('{self_name}.allow_multiple_as = {repr(_allow_multiple_as)}')
        _maximum_paths = self.maximum_paths
        if _maximum_paths is not None:
            leaves.append('{self_name}.maximum_paths = {repr(_maximum_paths)}')
        _ebgp = self.ebgp
        if _ebgp is not None:
            res.extend(_ebgp.prsrc('{self_name}.ebgp', False).splitlines())
        _ibgp = self.ibgp
        if _ibgp is not None:
            res.extend(_ibgp.prsrc('{self_name}.ibgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/multipath'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_multiple_as = yang.gdata.from_xml_opt_bool(node, 'allow-multiple-as')
    yang.gdata.maybe_add(children, 'allow-multiple-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__allow_multiple_as, child_allow_multiple_as)
    child_maximum_paths = yang.gdata.from_xml_opt_int(node, 'maximum-paths')
    yang.gdata.maybe_add(children, 'maximum-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__maximum_paths, child_maximum_paths)
    child_ebgp = yang.gdata.from_xml_opt_cnt(node, 'ebgp')
    yang.gdata.maybe_add(children, 'ebgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ebgp, child_ebgp)
    child_ibgp = yang.gdata.from_xml_opt_cnt(node, 'ibgp')
    yang.gdata.maybe_add(children, 'ibgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath__ibgp, child_ibgp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection__accumulated_igp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(yang.adata.MNode):
    accumulated_igp: ?bool

    mut def __init__(self, accumulated_igp: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.accumulated_igp = accumulated_igp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _accumulated_igp = self.accumulated_igp
        if _accumulated_igp is not None:
            children['accumulated-igp'] = yang.gdata.Leaf('boolean', _accumulated_igp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(accumulated_igp=n.get_opt_bool('accumulated-igp'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/best-path-selection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()')
        leaves = []
        _accumulated_igp = self.accumulated_igp
        if _accumulated_igp is not None:
            leaves.append('{self_name}.accumulated_igp = {repr(_accumulated_igp)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/best-path-selection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_accumulated_igp = yang.gdata.from_xml_opt_bool(node, 'accumulated-igp')
    yang.gdata.maybe_add(children, 'accumulated-igp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection__accumulated_igp, child_accumulated_igp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/backup-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/backup-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths__install, child_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: ?str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=n.get_opt_str('mode'), allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode, child_mode)
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: ?str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=n.get_opt_str('mode'), allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode, child_mode)
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.backup_paths = backup_paths if backup_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths()
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence()
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths.from_gdata(n.get_opt_cnt('backup-paths')), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            res.extend(_backup_paths.prsrc('{self_name}.backup_paths', False).splitlines())
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_backup_paths = yang.gdata.from_xml_opt_cnt(node, 'backup-paths')
    yang.gdata.maybe_add(children, 'backup-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__backup_paths, child_backup_paths)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__convergence, child_convergence)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast__next_hop_resolution, child_next_hop_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/backup-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/backup-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths__install, child_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution
    rapid_update: ?bool

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution=None, rapid_update: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.backup_paths = backup_paths if backup_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths()
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence()
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution()
        self.rapid_update = rapid_update

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths.from_gdata(n.get_opt_cnt('backup-paths')), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')), rapid_update=n.get_opt_bool('rapid-update'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            res.extend(_backup_paths.prsrc('{self_name}.backup_paths', False).splitlines())
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            leaves.append('{self_name}.rapid_update = {repr(_rapid_update)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv4-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_backup_paths = yang.gdata.from_xml_opt_cnt(node, 'backup-paths')
    yang.gdata.maybe_add(children, 'backup-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__backup_paths, child_backup_paths)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__convergence, child_convergence)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__next_hop_resolution, child_next_hop_resolution)
    child_rapid_update = yang.gdata.from_xml_opt_bool(node, 'rapid-update')
    yang.gdata.maybe_add(children, 'rapid-update', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast__rapid_update, child_rapid_update)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence
    keep_all_routes: ?bool
    next_hop_self_route_reflector: ?bool
    inter_as_vpn: ?bool
    rapid_update: ?bool

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence=None, keep_all_routes: ?bool, next_hop_self_route_reflector: ?bool, inter_as_vpn: ?bool, rapid_update: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence()
        self.keep_all_routes = keep_all_routes
        self.next_hop_self_route_reflector = next_hop_self_route_reflector
        self.inter_as_vpn = inter_as_vpn
        self.rapid_update = rapid_update

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), keep_all_routes=n.get_opt_bool('keep-all-routes'), next_hop_self_route_reflector=n.get_opt_bool('next-hop-self-route-reflector'), inter_as_vpn=n.get_opt_bool('inter-as-vpn'), rapid_update=n.get_opt_bool('rapid-update'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            leaves.append('{self_name}.keep_all_routes = {repr(_keep_all_routes)}')
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            leaves.append('{self_name}.next_hop_self_route_reflector = {repr(_next_hop_self_route_reflector)}')
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            leaves.append('{self_name}.inter_as_vpn = {repr(_inter_as_vpn)}')
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            leaves.append('{self_name}.rapid_update = {repr(_rapid_update)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__convergence, child_convergence)
    child_keep_all_routes = yang.gdata.from_xml_opt_bool(node, 'keep-all-routes')
    yang.gdata.maybe_add(children, 'keep-all-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__keep_all_routes, child_keep_all_routes)
    child_next_hop_self_route_reflector = yang.gdata.from_xml_opt_bool(node, 'next-hop-self-route-reflector')
    yang.gdata.maybe_add(children, 'next-hop-self-route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__next_hop_self_route_reflector, child_next_hop_self_route_reflector)
    child_inter_as_vpn = yang.gdata.from_xml_opt_bool(node, 'inter-as-vpn')
    yang.gdata.maybe_add(children, 'inter-as-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__inter_as_vpn, child_inter_as_vpn)
    child_rapid_update = yang.gdata.from_xml_opt_bool(node, 'rapid-update')
    yang.gdata.maybe_add(children, 'rapid-update', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast__rapid_update, child_rapid_update)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/backup-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/backup-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths__install, child_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: ?str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(mode=n.get_opt_str('mode'), allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__mode, child_mode)
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    mode: ?str
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, mode: ?str, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(mode=n.get_opt_str('mode'), allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__mode, child_mode)
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(yang.adata.MNode):
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution

    mut def __init__(self, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.backup_paths = backup_paths if backup_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths()
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence()
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths.from_gdata(n.get_opt_cnt('backup-paths')), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()')
        leaves = []
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            res.extend(_backup_paths.prsrc('{self_name}.backup_paths', False).splitlines())
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_backup_paths = yang.gdata.from_xml_opt_cnt(node, 'backup-paths')
    yang.gdata.maybe_add(children, 'backup-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__backup_paths, child_backup_paths)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__convergence, child_convergence)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast__next_hop_resolution, child_next_hop_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/backup-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/backup-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths__install, child_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution
    rapid_update: ?bool

    mut def __init__(self, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence=None, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution=None, rapid_update: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.backup_paths = backup_paths if backup_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths()
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence()
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution()
        self.rapid_update = rapid_update

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths.from_gdata(n.get_opt_cnt('backup-paths')), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')), rapid_update=n.get_opt_bool('rapid-update'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()')
        leaves = []
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            res.extend(_backup_paths.prsrc('{self_name}.backup_paths', False).splitlines())
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            leaves.append('{self_name}.rapid_update = {repr(_rapid_update)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/ipv6-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_backup_paths = yang.gdata.from_xml_opt_cnt(node, 'backup-paths')
    yang.gdata.maybe_add(children, 'backup-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__backup_paths, child_backup_paths)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__convergence, child_convergence)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__next_hop_resolution, child_next_hop_resolution)
    child_rapid_update = yang.gdata.from_xml_opt_bool(node, 'rapid-update')
    yang.gdata.maybe_add(children, 'rapid-update', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast__rapid_update, child_rapid_update)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__max_wait_to_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(yang.adata.MNode):
    max_wait_to_advertise: ?int

    mut def __init__(self, max_wait_to_advertise: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_wait_to_advertise = max_wait_to_advertise

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            children['max-wait-to-advertise'] = yang.gdata.Leaf('uint16', _max_wait_to_advertise)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(max_wait_to_advertise=n.get_opt_int('max-wait-to-advertise'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/convergence')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()')
        leaves = []
        _max_wait_to_advertise = self.max_wait_to_advertise
        if _max_wait_to_advertise is not None:
            leaves.append('{self_name}.max_wait_to_advertise = {repr(_max_wait_to_advertise)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast/convergence'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_wait_to_advertise = yang.gdata.from_xml_opt_int(node, 'max-wait-to-advertise')
    yang.gdata.maybe_add(children, 'max-wait-to-advertise', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence__max_wait_to_advertise, child_max_wait_to_advertise)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence
    keep_all_routes: ?bool
    next_hop_self_route_reflector: ?bool
    inter_as_vpn: ?bool
    rapid_update: ?bool

    mut def __init__(self, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence=None, keep_all_routes: ?bool, next_hop_self_route_reflector: ?bool, inter_as_vpn: ?bool, rapid_update: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence()
        self.keep_all_routes = keep_all_routes
        self.next_hop_self_route_reflector = next_hop_self_route_reflector
        self.inter_as_vpn = inter_as_vpn
        self.rapid_update = rapid_update

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(convergence=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence.from_gdata(n.get_opt_cnt('convergence')), keep_all_routes=n.get_opt_bool('keep-all-routes'), next_hop_self_route_reflector=n.get_opt_bool('next-hop-self-route-reflector'), inter_as_vpn=n.get_opt_bool('inter-as-vpn'), rapid_update=n.get_opt_bool('rapid-update'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()')
        leaves = []
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            leaves.append('{self_name}.keep_all_routes = {repr(_keep_all_routes)}')
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            leaves.append('{self_name}.next_hop_self_route_reflector = {repr(_next_hop_self_route_reflector)}')
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            leaves.append('{self_name}.inter_as_vpn = {repr(_inter_as_vpn)}')
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            leaves.append('{self_name}.rapid_update = {repr(_rapid_update)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/l3vpn-ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__convergence, child_convergence)
    child_keep_all_routes = yang.gdata.from_xml_opt_bool(node, 'keep-all-routes')
    yang.gdata.maybe_add(children, 'keep-all-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__keep_all_routes, child_keep_all_routes)
    child_next_hop_self_route_reflector = yang.gdata.from_xml_opt_bool(node, 'next-hop-self-route-reflector')
    yang.gdata.maybe_add(children, 'next-hop-self-route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__next_hop_self_route_reflector, child_next_hop_self_route_reflector)
    child_inter_as_vpn = yang.gdata.from_xml_opt_bool(node, 'inter-as-vpn')
    yang.gdata.maybe_add(children, 'inter-as-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__inter_as_vpn, child_inter_as_vpn)
    child_rapid_update = yang.gdata.from_xml_opt_bool(node, 'rapid-update')
    yang.gdata.maybe_add(children, 'rapid-update', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast__rapid_update, child_rapid_update)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__keep_all_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv4-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(yang.adata.MNode):
    admin_state: ?str
    ignore_default_routes: ?bool

    mut def __init__(self, admin_state: ?str, ignore_default_routes: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.ignore_default_routes = ignore_default_routes

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            children['ignore-default-routes'] = yang.gdata.Leaf('boolean', _ignore_default_routes)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(admin_state=n.get_opt_str('admin-state'), ignore_default_routes=n.get_opt_bool('ignore-default-routes'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/route-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ignore_default_routes = self.ignore_default_routes
        if _ignore_default_routes is not None:
            leaves.append('{self_name}.ignore_default_routes = {repr(_ignore_default_routes)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/route-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__admin_state, child_admin_state)
    child_ignore_default_routes = yang.gdata.from_xml_opt_bool(node, 'ignore-default-routes')
    yang.gdata.maybe_add(children, 'ignore-default-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution__ignore_default_routes, child_ignore_default_routes)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(yang.adata.MNode):
    mandatory: ?bool

    mut def __init__(self, mandatory: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mandatory = mandatory

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mandatory = self.mandatory
        if _mandatory is not None:
            children['mandatory'] = yang.gdata.Leaf('boolean', _mandatory)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(mandatory=n.get_opt_bool('mandatory'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()')
        leaves = []
        _mandatory = self.mandatory
        if _mandatory is not None:
            leaves.append('{self_name}.mandatory = {repr(_mandatory)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes/tag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mandatory = yang.gdata.from_xml_opt_bool(node, 'mandatory')
    yang.gdata.maybe_add(children, 'mandatory', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag__mandatory, child_mandatory)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(yang.adata.MNode):
    tag: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag

    mut def __init__(self, tag: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.tag = tag if tag is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tag = self.tag
        if _tag is not None:
            children['tag'] = _tag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(tag=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag.from_gdata(n.get_opt_cnt('tag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()')
        leaves = []
        _tag = self.tag
        if _tag is not None:
            res.extend(_tag.prsrc('{self_name}.tag', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution/selection-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tag = yang.gdata.from_xml_opt_cnt(node, 'tag')
    yang.gdata.maybe_add(children, 'tag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes__tag, child_tag)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(yang.adata.MNode):
    allowed_tunnel_types: list[str]
    selection_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes

    mut def __init__(self, allowed_tunnel_types: ?list[str]=None, selection_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allowed_tunnel_types = allowed_tunnel_types if allowed_tunnel_types is not None else []
        self.selection_attributes = selection_attributes if selection_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['allowed-tunnel-types'] = yang.gdata.LeafList('identityref', self.allowed_tunnel_types)
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            children['selection-attributes'] = _selection_attributes.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(allowed_tunnel_types=n.get_opt_strs('allowed-tunnel-types'), selection_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes.from_gdata(n.get_opt_cnt('selection-attributes')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()')
        leaves = []
        _allowed_tunnel_types = self.allowed_tunnel_types
        if _allowed_tunnel_types is not None:
            leaves.append('{self_name}.allowed_tunnel_types = {repr(_allowed_tunnel_types)}')
        _selection_attributes = self.selection_attributes
        if _selection_attributes is not None:
            res.extend(_selection_attributes.prsrc('{self_name}.selection_attributes', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops/tunnel-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allowed_tunnel_types = yang.gdata.from_xml_opt_strs(node, 'allowed-tunnel-types')
    yang.gdata.maybe_add(children, 'allowed-tunnel-types', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__allowed_tunnel_types, child_allowed_tunnel_types)
    child_selection_attributes = yang.gdata.from_xml_opt_cnt(node, 'selection-attributes')
    yang.gdata.maybe_add(children, 'selection-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution__selection_attributes, child_selection_attributes)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(yang.adata.MNode):
    route_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution
    tunnel_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution

    mut def __init__(self, route_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution=None, tunnel_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.route_resolution = route_resolution if route_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution()
        self.tunnel_resolution = tunnel_resolution if tunnel_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            children['route-resolution'] = _route_resolution.to_gdata()
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            children['tunnel-resolution'] = _tunnel_resolution.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(route_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution.from_gdata(n.get_opt_cnt('route-resolution')), tunnel_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution.from_gdata(n.get_opt_cnt('tunnel-resolution')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()')
        leaves = []
        _route_resolution = self.route_resolution
        if _route_resolution is not None:
            res.extend(_route_resolution.prsrc('{self_name}.route_resolution', False).splitlines())
        _tunnel_resolution = self.tunnel_resolution
        if _tunnel_resolution is not None:
            res.extend(_tunnel_resolution.prsrc('{self_name}.tunnel_resolution', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution/ipv6-next-hops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_resolution = yang.gdata.from_xml_opt_cnt(node, 'route-resolution')
    yang.gdata.maybe_add(children, 'route-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__route_resolution, child_route_resolution)
    child_tunnel_resolution = yang.gdata.from_xml_opt_cnt(node, 'tunnel-resolution')
    yang.gdata.maybe_add(children, 'tunnel-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops__tunnel_resolution, child_tunnel_resolution)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(yang.adata.MNode):
    ipv4_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops
    ipv6_next_hops: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops

    mut def __init__(self, ipv4_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops=None, ipv6_next_hops: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_next_hops = ipv4_next_hops if ipv4_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops()
        self.ipv6_next_hops = ipv6_next_hops if ipv6_next_hops is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            children['ipv4-next-hops'] = _ipv4_next_hops.to_gdata()
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            children['ipv6-next-hops'] = _ipv6_next_hops.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(ipv4_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops.from_gdata(n.get_opt_cnt('ipv4-next-hops')), ipv6_next_hops=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops.from_gdata(n.get_opt_cnt('ipv6-next-hops')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()')
        leaves = []
        _ipv4_next_hops = self.ipv4_next_hops
        if _ipv4_next_hops is not None:
            res.extend(_ipv4_next_hops.prsrc('{self_name}.ipv4_next_hops', False).splitlines())
        _ipv6_next_hops = self.ipv6_next_hops
        if _ipv6_next_hops is not None:
            res.extend(_ipv6_next_hops.prsrc('{self_name}.ipv6_next_hops', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn/next-hop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv4-next-hops')
    yang.gdata.maybe_add(children, 'ipv4-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv4_next_hops, child_ipv4_next_hops)
    child_ipv6_next_hops = yang.gdata.from_xml_opt_cnt(node, 'ipv6-next-hops')
    yang.gdata.maybe_add(children, 'ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution__ipv6_next_hops, child_ipv6_next_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_self_route_reflector(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__inter_as_vpn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__rapid_update(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    keep_all_routes: ?bool
    next_hop_resolution: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution
    next_hop_self_route_reflector: ?bool
    inter_as_vpn: ?bool
    rapid_update: ?bool
    default_received_encapsulation: ?str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, keep_all_routes: ?bool, next_hop_resolution: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution=None, next_hop_self_route_reflector: ?bool, inter_as_vpn: ?bool, rapid_update: ?bool, default_received_encapsulation: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.keep_all_routes = keep_all_routes
        self.next_hop_resolution = next_hop_resolution if next_hop_resolution is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution()
        self.next_hop_self_route_reflector = next_hop_self_route_reflector
        self.inter_as_vpn = inter_as_vpn
        self.rapid_update = rapid_update
        self.default_received_encapsulation = default_received_encapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            children['keep-all-routes'] = yang.gdata.Leaf('boolean', _keep_all_routes)
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            children['next-hop-resolution'] = _next_hop_resolution.to_gdata()
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            children['next-hop-self-route-reflector'] = yang.gdata.Leaf('boolean', _next_hop_self_route_reflector)
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            children['inter-as-vpn'] = yang.gdata.Leaf('boolean', _inter_as_vpn)
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            children['rapid-update'] = yang.gdata.Leaf('boolean', _rapid_update)
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), keep_all_routes=n.get_opt_bool('keep-all-routes'), next_hop_resolution=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution.from_gdata(n.get_opt_cnt('next-hop-resolution')), next_hop_self_route_reflector=n.get_opt_bool('next-hop-self-route-reflector'), inter_as_vpn=n.get_opt_bool('inter-as-vpn'), rapid_update=n.get_opt_bool('rapid-update'), default_received_encapsulation=n.get_opt_str('default-received-encapsulation'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _keep_all_routes = self.keep_all_routes
        if _keep_all_routes is not None:
            leaves.append('{self_name}.keep_all_routes = {repr(_keep_all_routes)}')
        _next_hop_resolution = self.next_hop_resolution
        if _next_hop_resolution is not None:
            res.extend(_next_hop_resolution.prsrc('{self_name}.next_hop_resolution', False).splitlines())
        _next_hop_self_route_reflector = self.next_hop_self_route_reflector
        if _next_hop_self_route_reflector is not None:
            leaves.append('{self_name}.next_hop_self_route_reflector = {repr(_next_hop_self_route_reflector)}')
        _inter_as_vpn = self.inter_as_vpn
        if _inter_as_vpn is not None:
            leaves.append('{self_name}.inter_as_vpn = {repr(_inter_as_vpn)}')
        _rapid_update = self.rapid_update
        if _rapid_update is not None:
            leaves.append('{self_name}.rapid_update = {repr(_rapid_update)}')
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            leaves.append('{self_name}.default_received_encapsulation = {repr(_default_received_encapsulation)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_keep_all_routes = yang.gdata.from_xml_opt_bool(node, 'keep-all-routes')
    yang.gdata.maybe_add(children, 'keep-all-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__keep_all_routes, child_keep_all_routes)
    child_next_hop_resolution = yang.gdata.from_xml_opt_cnt(node, 'next-hop-resolution')
    yang.gdata.maybe_add(children, 'next-hop-resolution', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_resolution, child_next_hop_resolution)
    child_next_hop_self_route_reflector = yang.gdata.from_xml_opt_bool(node, 'next-hop-self-route-reflector')
    yang.gdata.maybe_add(children, 'next-hop-self-route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__next_hop_self_route_reflector, child_next_hop_self_route_reflector)
    child_inter_as_vpn = yang.gdata.from_xml_opt_bool(node, 'inter-as-vpn')
    yang.gdata.maybe_add(children, 'inter-as-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__inter_as_vpn, child_inter_as_vpn)
    child_rapid_update = yang.gdata.from_xml_opt_bool(node, 'rapid-update')
    yang.gdata.maybe_add(children, 'rapid-update', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__rapid_update, child_rapid_update)
    child_default_received_encapsulation = yang.gdata.from_xml_opt_str(node, 'default-received-encapsulation')
    yang.gdata.maybe_add(children, 'default-received-encapsulation', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn__default_received_encapsulation, child_default_received_encapsulation)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4__import_static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4(yang.adata.MNode):
    import_static: ?bool

    mut def __init__(self, import_static: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.import_static = import_static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_static = self.import_static
        if _import_static is not None:
            children['import-static'] = yang.gdata.Leaf('boolean', _import_static)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4(import_static=n.get_opt_bool('import-static'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/srte-policy-ipv4')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4()')
        leaves = []
        _import_static = self.import_static
        if _import_static is not None:
            leaves.append('{self_name}.import_static = {repr(_import_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/srte-policy-ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_static = yang.gdata.from_xml_opt_bool(node, 'import-static')
    yang.gdata.maybe_add(children, 'import-static', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4__import_static, child_import_static)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6__import_static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6(yang.adata.MNode):
    import_static: ?bool

    mut def __init__(self, import_static: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.import_static = import_static

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_static = self.import_static
        if _import_static is not None:
            children['import-static'] = yang.gdata.Leaf('boolean', _import_static)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6(import_static=n.get_opt_bool('import-static'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi/srte-policy-ipv6')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6()')
        leaves = []
        _import_static = self.import_static
        if _import_static is not None:
            leaves.append('{self_name}.import_static = {repr(_import_static)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi/srte-policy-ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_static = yang.gdata.from_xml_opt_bool(node, 'import-static')
    yang.gdata.maybe_add(children, 'import-static', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6__import_static, child_import_static)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: ?str
    export_policy: list[str]
    import_policy: list[str]
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths
    multipath: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath
    best_path_selection: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection
    send_community_type: list[str]
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn
    srte_policy_ipv4: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4
    srte_policy_ipv6: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6

    mut def __init__(self, afi_safi_name: str, admin_state: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths=None, multipath: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath=None, best_path_selection: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection=None, send_community_type: ?list[str]=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn=None, srte_policy_ipv4: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4=None, srte_policy_ipv6: ?srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state
        self.export_policy = export_policy if export_policy is not None else []
        self.import_policy = import_policy if import_policy is not None else []
        self.add_paths = add_paths if add_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths()
        self.multipath = multipath if multipath is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath()
        self.best_path_selection = best_path_selection if best_path_selection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection()
        self.send_community_type = send_community_type if send_community_type is not None else []
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast()
        self.ipv4_labeled_unicast = ipv4_labeled_unicast if ipv4_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast()
        self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast if l3vpn_ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast()
        self.ipv6_labeled_unicast = ipv6_labeled_unicast if ipv6_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast()
        self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast if l3vpn_ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast()
        self.evpn = evpn if evpn is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn()
        self.srte_policy_ipv4 = srte_policy_ipv4 if srte_policy_ipv4 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4()
        self.srte_policy_ipv6 = srte_policy_ipv6 if srte_policy_ipv6 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _add_paths = self.add_paths
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        _multipath = self.multipath
        if _multipath is not None:
            children['multipath'] = _multipath.to_gdata()
        _best_path_selection = self.best_path_selection
        if _best_path_selection is not None:
            children['best-path-selection'] = _best_path_selection.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList('enumeration', self.send_community_type)
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            children['srte-policy-ipv4'] = _srte_policy_ipv4.to_gdata()
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            children['srte-policy-ipv6'] = _srte_policy_ipv6.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name=n.get_str('afi-safi-name'), admin_state=n.get_opt_str('admin-state'), export_policy=n.get_opt_strs('export-policy'), import_policy=n.get_opt_strs('import-policy'), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths.from_gdata(n.get_opt_cnt('add-paths')), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath.from_gdata(n.get_opt_cnt('multipath')), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection.from_gdata(n.get_opt_cnt('best-path-selection')), send_community_type=n.get_opt_strs('send-community-type'), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_cnt('ipv4-labeled-unicast')), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_cnt('ipv6-labeled-unicast')), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv6-unicast')), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn.from_gdata(n.get_opt_cnt('evpn')), srte_policy_ipv4=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4.from_gdata(n.get_opt_cnt('srte-policy-ipv4')), srte_policy_ipv6=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6.from_gdata(n.get_opt_cnt('srte-policy-ipv6')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _add_paths = self.add_paths
        if _add_paths is not None:
            res.extend(_add_paths.prsrc('{self_name}.add_paths', False).splitlines())
        _multipath = self.multipath
        if _multipath is not None:
            res.extend(_multipath.prsrc('{self_name}.multipath', False).splitlines())
        _best_path_selection = self.best_path_selection
        if _best_path_selection is not None:
            res.extend(_best_path_selection.prsrc('{self_name}.best_path_selection', False).splitlines())
        _send_community_type = self.send_community_type
        if _send_community_type is not None:
            leaves.append('{self_name}.send_community_type = {repr(_send_community_type)}')
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            res.extend(_ipv4_labeled_unicast.prsrc('{self_name}.ipv4_labeled_unicast', False).splitlines())
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            res.extend(_l3vpn_ipv4_unicast.prsrc('{self_name}.l3vpn_ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            res.extend(_ipv6_labeled_unicast.prsrc('{self_name}.ipv6_labeled_unicast', False).splitlines())
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            res.extend(_l3vpn_ipv6_unicast.prsrc('{self_name}.l3vpn_ipv6_unicast', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.extend(_evpn.prsrc('{self_name}.evpn', False).splitlines())
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            res.extend(_srte_policy_ipv4.prsrc('{self_name}.srte_policy_ipv4', False).splitlines())
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            res.extend(_srte_policy_ipv6.prsrc('{self_name}.srte_policy_ipv6', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_str(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__admin_state, child_admin_state)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__export_policy, child_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__import_policy, child_import_policy)
    child_add_paths = yang.gdata.from_xml_opt_cnt(node, 'add-paths')
    yang.gdata.maybe_add(children, 'add-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__add_paths, child_add_paths)
    child_multipath = yang.gdata.from_xml_opt_cnt(node, 'multipath')
    yang.gdata.maybe_add(children, 'multipath', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__multipath, child_multipath)
    child_best_path_selection = yang.gdata.from_xml_opt_cnt(node, 'best-path-selection')
    yang.gdata.maybe_add(children, 'best-path-selection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__best_path_selection, child_best_path_selection)
    child_send_community_type = yang.gdata.from_xml_opt_strs(node, 'send-community-type')
    yang.gdata.maybe_add(children, 'send-community-type', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__send_community_type, child_send_community_type)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_unicast, child_ipv4_unicast)
    child_ipv4_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv4-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv4_labeled_unicast, child_ipv4_labeled_unicast)
    child_l3vpn_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv4-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv4_unicast, child_l3vpn_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_unicast, child_ipv6_unicast)
    child_ipv6_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv6-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__ipv6_labeled_unicast, child_ipv6_labeled_unicast)
    child_l3vpn_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv6-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__l3vpn_ipv6_unicast, child_l3vpn_ipv6_unicast)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__evpn, child_evpn)
    child_srte_policy_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv4')
    yang.gdata.maybe_add(children, 'srte-policy-ipv4', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv4, child_srte_policy_ipv4)
    child_srte_policy_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv6')
    yang.gdata.maybe_add(children, 'srte-policy-ipv6', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__srte_policy_ipv6, child_srte_policy_ipv6)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ebgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ibgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__preference(yang.adata.MNode):
    ebgp: ?int
    ibgp: ?int

    mut def __init__(self, ebgp: ?int, ibgp: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ebgp = ebgp
        self.ibgp = ibgp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ebgp = self.ebgp
        if _ebgp is not None:
            children['ebgp'] = yang.gdata.Leaf('uint8', _ebgp)
        _ibgp = self.ibgp
        if _ibgp is not None:
            children['ibgp'] = yang.gdata.Leaf('uint8', _ibgp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__preference:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__preference(ebgp=n.get_opt_int('ebgp'), ibgp=n.get_opt_int('ibgp'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__preference()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/preference')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__preference()')
        leaves = []
        _ebgp = self.ebgp
        if _ebgp is not None:
            leaves.append('{self_name}.ebgp = {repr(_ebgp)}')
        _ibgp = self.ibgp
        if _ibgp is not None:
            leaves.append('{self_name}.ibgp = {repr(_ibgp)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/preference'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ebgp = yang.gdata.from_xml_opt_int(node, 'ebgp')
    yang.gdata.maybe_add(children, 'ebgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ebgp, child_ebgp)
    child_ibgp = yang.gdata.from_xml_opt_int(node, 'ibgp')
    yang.gdata.maybe_add(children, 'ibgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ibgp, child_ibgp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__address_family(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__route_table_import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(yang.adata.MNode):
    address_family: str
    route_table_import: ?str

    mut def __init__(self, address_family: str, route_table_import: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.address_family = address_family
        self.route_table_import = route_table_import

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            children['address-family'] = yang.gdata.Leaf('identityref', _address_family)
        _route_table_import = self.route_table_import
        if _route_table_import is not None:
            children['route-table-import'] = yang.gdata.Leaf('leafref', _route_table_import)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family=n.get_str('address-family'), route_table_import=n.get_opt_str('route-table-import'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/rib-management/table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table({repr(self.address_family)})')
        leaves = []
        _route_table_import = self.route_table_import
        if _route_table_import is not None:
            leaves.append('{self_name}.route_table_import = {repr(_route_table_import)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/rib-management/table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'table'
        self.elements = elements

    mut def create(self, address_family):
        for e in self.elements:
            match = True
            if e.address_family != address_family:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['address-family'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_address_family = yang.gdata.from_xml_str(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__address_family, child_address_family)
    child_route_table_import = yang.gdata.from_xml_opt_str(node, 'route-table-import')
    yang.gdata.maybe_add(children, 'route-table-import', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__route_table_import, child_route_table_import)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_element(e) for e in nodes]
    return yang.gdata.List(keys=['address-family'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(yang.adata.MNode):
    table: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table

    mut def __init__(self, table: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.table = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(elements=table)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _table = self.table
        if _table is not None:
            children['table'] = _table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(table=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table.from_gdata(n.get_opt_list('table')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/rib-management')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()')
        leaves = []
        _table = self.table
        for _element in _table.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/rib-management/table element: {_element.to_gdata().key_str(['address-family'])}")
            list_elem = 'table_element = {self_name}.table.create({repr(_element.address_family)})'
            res.append(list_elem)
            res.extend(_element.prsrc('table_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/rib-management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_table = yang.gdata.from_xml_opt_list(node, 'table')
    yang.gdata.maybe_add(children, 'table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table, child_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__rapid_withdrawal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__wait_for_fib_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(yang.adata.MNode):
    rapid_withdrawal: ?bool
    wait_for_fib_install: ?bool

    mut def __init__(self, rapid_withdrawal: ?bool, wait_for_fib_install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.rapid_withdrawal = rapid_withdrawal
        self.wait_for_fib_install = wait_for_fib_install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rapid_withdrawal = self.rapid_withdrawal
        if _rapid_withdrawal is not None:
            children['rapid-withdrawal'] = yang.gdata.Leaf('boolean', _rapid_withdrawal)
        _wait_for_fib_install = self.wait_for_fib_install
        if _wait_for_fib_install is not None:
            children['wait-for-fib-install'] = yang.gdata.Leaf('boolean', _wait_for_fib_install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(rapid_withdrawal=n.get_opt_bool('rapid-withdrawal'), wait_for_fib_install=n.get_opt_bool('wait-for-fib-install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-advertisement')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()')
        leaves = []
        _rapid_withdrawal = self.rapid_withdrawal
        if _rapid_withdrawal is not None:
            leaves.append('{self_name}.rapid_withdrawal = {repr(_rapid_withdrawal)}')
        _wait_for_fib_install = self.wait_for_fib_install
        if _wait_for_fib_install is not None:
            leaves.append('{self_name}.wait_for_fib_install = {repr(_wait_for_fib_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-advertisement'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rapid_withdrawal = yang.gdata.from_xml_opt_bool(node, 'rapid-withdrawal')
    yang.gdata.maybe_add(children, 'rapid-withdrawal', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__rapid_withdrawal, child_rapid_withdrawal)
    child_wait_for_fib_install = yang.gdata.from_xml_opt_bool(node, 'wait-for-fib-install')
    yang.gdata.maybe_add(children, 'wait-for-fib-install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__wait_for_fib_install, child_wait_for_fib_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(yang.adata.MNode):
    half_life: ?int
    max_suppress_time: ?int
    reuse_threshold: ?int
    suppress_threshold: ?int

    mut def __init__(self, half_life: ?int, max_suppress_time: ?int, reuse_threshold: ?int, suppress_threshold: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.half_life = half_life
        self.max_suppress_time = max_suppress_time
        self.reuse_threshold = reuse_threshold
        self.suppress_threshold = suppress_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _half_life = self.half_life
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint16', _half_life)
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint16', _max_suppress_time)
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint16', _reuse_threshold)
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint16', _suppress_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(half_life=n.get_opt_int('half-life'), max_suppress_time=n.get_opt_int('max-suppress-time'), reuse_threshold=n.get_opt_int('reuse-threshold'), suppress_threshold=n.get_opt_int('suppress-threshold'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-flap-damping')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()')
        leaves = []
        _half_life = self.half_life
        if _half_life is not None:
            leaves.append('{self_name}.half_life = {repr(_half_life)}')
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            leaves.append('{self_name}.max_suppress_time = {repr(_max_suppress_time)}')
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            leaves.append('{self_name}.reuse_threshold = {repr(_reuse_threshold)}')
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            leaves.append('{self_name}.suppress_threshold = {repr(_suppress_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-flap-damping'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_half_life = yang.gdata.from_xml_opt_int(node, 'half-life')
    yang.gdata.maybe_add(children, 'half-life', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__half_life, child_half_life)
    child_max_suppress_time = yang.gdata.from_xml_opt_int(node, 'max-suppress-time')
    yang.gdata.maybe_add(children, 'max-suppress-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__max_suppress_time, child_max_suppress_time)
    child_reuse_threshold = yang.gdata.from_xml_opt_int(node, 'reuse-threshold')
    yang.gdata.maybe_add(children, 'reuse-threshold', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__reuse_threshold, child_reuse_threshold)
    child_suppress_threshold = yang.gdata.from_xml_opt_int(node, 'suppress-threshold')
    yang.gdata.maybe_add(children, 'suppress-threshold', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__suppress_threshold, child_suppress_threshold)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/segment-routing-mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/segment-routing-mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__single_hop_connected_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__transport(yang.adata.MNode):
    single_hop_connected_check: ?bool
    mtu_discovery: ?bool
    tcp_mss: ?int

    mut def __init__(self, single_hop_connected_check: ?bool, mtu_discovery: ?bool, tcp_mss: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.single_hop_connected_check = single_hop_connected_check
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _single_hop_connected_check = self.single_hop_connected_check
        if _single_hop_connected_check is not None:
            children['single-hop-connected-check'] = yang.gdata.Leaf('boolean', _single_hop_connected_check)
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__transport(single_hop_connected_check=n.get_opt_bool('single-hop-connected-check'), mtu_discovery=n.get_opt_bool('mtu-discovery'), tcp_mss=n.get_opt_int('tcp-mss'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__transport()')
        leaves = []
        _single_hop_connected_check = self.single_hop_connected_check
        if _single_hop_connected_check is not None:
            leaves.append('{self_name}.single_hop_connected_check = {repr(_single_hop_connected_check)}')
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            leaves.append('{self_name}.mtu_discovery = {repr(_mtu_discovery)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_single_hop_connected_check = yang.gdata.from_xml_opt_bool(node, 'single-hop-connected-check')
    yang.gdata.maybe_add(children, 'single-hop-connected-check', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__single_hop_connected_check, child_single_hop_connected_check)
    child_mtu_discovery = yang.gdata.from_xml_opt_bool(node, 'mtu-discovery')
    yang.gdata.maybe_add(children, 'mtu-discovery', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__mtu_discovery, child_mtu_discovery)
    child_tcp_mss = yang.gdata.from_xml_opt_int(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__tcp_mss, child_tcp_mss)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        _modifier = self.modifier
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(name=n.get_str('name'), modifier=n.get_opt_str('modifier'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/trace-options/flag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag({repr(self.name)})')
        leaves = []
        _modifier = self.modifier
        if _modifier is not None:
            leaves.append('{self_name}.modifier = {repr(_modifier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/trace-options/flag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__name, child_name)
    child_modifier = yang.gdata.from_xml_opt_str(node, 'modifier')
    yang.gdata.maybe_add(children, 'modifier', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag__modifier, child_modifier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag(elements=flag)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag.from_gdata(n.get_opt_list('flag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()')
        leaves = []
        _flag = self.flag
        for _element in _flag.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/trace-options/flag element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'flag_element = {self_name}.flag.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('flag_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_flag = yang.gdata.from_xml_opt_list(node, 'flag')
    yang.gdata.maybe_add(children, 'flag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options__flag, child_flag)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')), replace_peer_as=n.get_opt_bool('replace-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/group/as-path-options/remove-private-as')
            res.append('remove_private_as = {self_name}.create_remove_private_as()')
            res.extend(_remove_private_as.prsrc('remove_private_as', False).splitlines())
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            leaves.append('{self_name}.replace_peer_as = {repr(_replace_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as, child_remove_private_as)
    child_replace_peer_as = yang.gdata.from_xml_opt_bool(node, 'replace-peer-as')
    yang.gdata.maybe_add(children, 'replace-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__replace_peer_as, child_replace_peer_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(enable_bfd=n.get_opt_bool('enable-bfd'), fast_failover=n.get_opt_bool('fast-failover'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/failure-detection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()')
        leaves = []
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            leaves.append('{self_name}.fast_failover = {repr(_fast_failover)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/failure-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__enable_bfd, child_enable_bfd)
    child_fast_failover = yang.gdata.from_xml_opt_bool(node, 'fast-failover')
    yang.gdata.maybe_add(children, 'fast-failover', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__fast_failover, child_fast_failover)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(admin_state=n.get_opt_str('admin-state'), maximum_hops=n.get_opt_int('maximum-hops'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/multihop')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            leaves.append('{self_name}.maximum_hops = {repr(_maximum_hops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__admin_state, child_admin_state)
    child_maximum_hops = yang.gdata.from_xml_opt_int(node, 'maximum-hops')
    yang.gdata.maybe_add(children, 'maximum-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__maximum_hops, child_maximum_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes__block_prefix_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(yang.adata.MNode):
    block_prefix_sid: ?bool

    mut def __init__(self, block_prefix_sid: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.block_prefix_sid = block_prefix_sid

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            children['block-prefix-sid'] = yang.gdata.Leaf('boolean', _block_prefix_sid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(block_prefix_sid=n.get_opt_bool('block-prefix-sid'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/optional-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()')
        leaves = []
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            leaves.append('{self_name}.block_prefix_sid = {repr(_block_prefix_sid)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/optional-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_block_prefix_sid = yang.gdata.from_xml_opt_bool(node, 'block-prefix-sid')
    yang.gdata.maybe_add(children, 'block-prefix-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes__block_prefix_sid, child_block_prefix_sid)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: ?int

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        self.requested_restart_time = requested_restart_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(admin_state=n.get_opt_str('admin-state'), stale_routes_time=n.get_opt_int('stale-routes-time'), requested_restart_time=n.get_opt_int('requested-restart-time'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            leaves.append('{self_name}.stale_routes_time = {repr(_stale_routes_time)}')
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            leaves.append('{self_name}.requested_restart_time = {repr(_requested_restart_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__admin_state, child_admin_state)
    child_stale_routes_time = yang.gdata.from_xml_opt_int(node, 'stale-routes-time')
    yang.gdata.maybe_add(children, 'stale-routes-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__stale_routes_time, child_stale_routes_time)
    child_requested_restart_time = yang.gdata.from_xml_opt_int(node, 'requested-restart-time')
    yang.gdata.maybe_add(children, 'requested-restart-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart__requested_restart_time, child_requested_restart_time)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__default_export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__default_import_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        _send = self.send
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        _send_max = self.send_max
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(receive=n.get_opt_bool('receive'), send=n.get_opt_bool('send'), send_max=n.get_opt_int('send-max'), send_multipath=n.get_opt_empty('send-multipath'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/add-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _send = self.send
        if _send is not None:
            leaves.append('{self_name}.send = {repr(_send)}')
        _send_max = self.send_max
        if _send_max is not None:
            leaves.append('{self_name}.send_max = {repr(_send_max)}')
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            leaves.append('{self_name}.send_multipath = {repr(_send_multipath)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/add-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_bool(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__receive, child_receive)
    child_send = yang.gdata.from_xml_opt_bool(node, 'send')
    yang.gdata.maybe_add(children, 'send', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send, child_send)
    child_send_max = yang.gdata.from_xml_opt_int(node, 'send-max')
    yang.gdata.maybe_add(children, 'send-max', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_max, child_send_max)
    child_send_multipath = yang.gdata.from_xml_opt_empty(node, 'send-multipath')
    yang.gdata.maybe_add(children, 'send-multipath', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths__send_multipath, child_send_multipath)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/multipath/ebgp/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/multipath/ebgp/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(yang.adata.MNode):
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp

    mut def __init__(self, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/multipath/ebgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()')
        leaves = []
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/multipath/ebgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp__weighted_ecmp, child_weighted_ecmp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/multipath/ibgp/weighted-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/multipath/ibgp/weighted-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(yang.adata.MNode):
    weighted_ecmp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp

    mut def __init__(self, weighted_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.weighted_ecmp = weighted_ecmp if weighted_ecmp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            children['weighted-ecmp'] = _weighted_ecmp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(weighted_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp.from_gdata(n.get_opt_cnt('weighted-ecmp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/multipath/ibgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()')
        leaves = []
        _weighted_ecmp = self.weighted_ecmp
        if _weighted_ecmp is not None:
            res.extend(_weighted_ecmp.prsrc('{self_name}.weighted_ecmp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/multipath/ibgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_weighted_ecmp = yang.gdata.from_xml_opt_cnt(node, 'weighted-ecmp')
    yang.gdata.maybe_add(children, 'weighted-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp__weighted_ecmp, child_weighted_ecmp)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(yang.adata.MNode):
    ebgp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp
    ibgp: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp

    mut def __init__(self, ebgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp=None, ibgp: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ebgp = ebgp if ebgp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp()
        self.ibgp = ibgp if ibgp is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ebgp = self.ebgp
        if _ebgp is not None:
            children['ebgp'] = _ebgp.to_gdata()
        _ibgp = self.ibgp
        if _ibgp is not None:
            children['ibgp'] = _ibgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(ebgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp.from_gdata(n.get_opt_cnt('ebgp')), ibgp=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp.from_gdata(n.get_opt_cnt('ibgp')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/multipath')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()')
        leaves = []
        _ebgp = self.ebgp
        if _ebgp is not None:
            res.extend(_ebgp.prsrc('{self_name}.ebgp', False).splitlines())
        _ibgp = self.ibgp
        if _ibgp is not None:
            res.extend(_ibgp.prsrc('{self_name}.ibgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/multipath'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ebgp = yang.gdata.from_xml_opt_cnt(node, 'ebgp')
    yang.gdata.maybe_add(children, 'ebgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ebgp, child_ebgp)
    child_ibgp = yang.gdata.from_xml_opt_cnt(node, 'ibgp')
    yang.gdata.maybe_add(children, 'ibgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath__ibgp, child_ibgp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value('add-next-hop-count-to-received-bgp-routes'), aggregate_used_paths=n.get_opt_bool('aggregate-used-paths'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/link-bandwidth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()')
        leaves = []
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            leaves.append('{self_name}.add_next_hop_count_to_received_bgp_routes = {repr(_add_next_hop_count_to_received_bgp_routes)}')
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            leaves.append('{self_name}.aggregate_used_paths = {repr(_aggregate_used_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast/link-bandwidth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_add_next_hop_count_to_received_bgp_routes = yang.gdata.from_xml_opt_value(node, 'add-next-hop-count-to-received-bgp-routes')
    yang.gdata.maybe_add(children, 'add-next-hop-count-to-received-bgp-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes, child_add_next_hop_count_to_received_bgp_routes)
    child_aggregate_used_paths = yang.gdata.from_xml_opt_bool(node, 'aggregate-used-paths')
    yang.gdata.maybe_add(children, 'aggregate-used-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths, child_aggregate_used_paths)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted()
        self.link_bandwidth = link_bandwidth if link_bandwidth is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth.from_gdata(n.get_opt_cnt('link-bandwidth')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            res.extend(_link_bandwidth.prsrc('{self_name}.link_bandwidth', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    child_link_bandwidth = yang.gdata.from_xml_opt_cnt(node, 'link-bandwidth')
    yang.gdata.maybe_add(children, 'link-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast__link_bandwidth, child_link_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.next_hop_unchanged = next_hop_unchanged
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), next_hop_unchanged=n.get_opt_bool('next-hop-unchanged'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            leaves.append('{self_name}.next_hop_unchanged = {repr(_next_hop_unchanged)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv4-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_next_hop_unchanged = yang.gdata.from_xml_opt_bool(node, 'next-hop-unchanged')
    yang.gdata.maybe_add(children, 'next-hop-unchanged', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__next_hop_unchanged, child_next_hop_unchanged)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value('add-next-hop-count-to-received-bgp-routes'), aggregate_used_paths=n.get_opt_bool('aggregate-used-paths'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/link-bandwidth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()')
        leaves = []
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            leaves.append('{self_name}.add_next_hop_count_to_received_bgp_routes = {repr(_add_next_hop_count_to_received_bgp_routes)}')
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            leaves.append('{self_name}.aggregate_used_paths = {repr(_aggregate_used_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast/link-bandwidth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_add_next_hop_count_to_received_bgp_routes = yang.gdata.from_xml_opt_value(node, 'add-next-hop-count-to-received-bgp-routes')
    yang.gdata.maybe_add(children, 'add-next-hop-count-to-received-bgp-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes, child_add_next_hop_count_to_received_bgp_routes)
    child_aggregate_used_paths = yang.gdata.from_xml_opt_bool(node, 'aggregate-used-paths')
    yang.gdata.maybe_add(children, 'aggregate-used-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths, child_aggregate_used_paths)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted()
        self.link_bandwidth = link_bandwidth if link_bandwidth is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth.from_gdata(n.get_opt_cnt('link-bandwidth')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            res.extend(_link_bandwidth.prsrc('{self_name}.link_bandwidth', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    child_link_bandwidth = yang.gdata.from_xml_opt_cnt(node, 'link-bandwidth')
    yang.gdata.maybe_add(children, 'link-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast__link_bandwidth, child_link_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.next_hop_unchanged = next_hop_unchanged
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=n.get_opt_bool('next-hop-unchanged'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()')
        leaves = []
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            leaves.append('{self_name}.next_hop_unchanged = {repr(_next_hop_unchanged)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/ipv6-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_next_hop_unchanged = yang.gdata.from_xml_opt_bool(node, 'next-hop-unchanged')
    yang.gdata.maybe_add(children, 'next-hop-unchanged', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__next_hop_unchanged, child_next_hop_unchanged)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/l3vpn-ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/evpn/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/evpn/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/evpn/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/evpn/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted
    default_received_encapsulation: ?str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted=None, default_received_encapsulation: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted()
        self.default_received_encapsulation = default_received_encapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), default_received_encapsulation=n.get_opt_str('default-received-encapsulation'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            leaves.append('{self_name}.default_received_encapsulation = {repr(_default_received_encapsulation)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__prefix_limit_accepted, child_prefix_limit_accepted)
    child_default_received_encapsulation = yang.gdata.from_xml_opt_str(node, 'default-received-encapsulation')
    yang.gdata.maybe_add(children, 'default-received-encapsulation', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn__default_received_encapsulation, child_default_received_encapsulation)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__send_default_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/route-target/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/route-target/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/route-target/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/route-target/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(yang.adata.MNode):
    send_default_route: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted

    mut def __init__(self, send_default_route: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.send_default_route = send_default_route
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = yang.gdata.Leaf('boolean', _send_default_route)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(send_default_route=n.get_opt_bool('send-default-route'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/route-target')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()')
        leaves = []
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            leaves.append('{self_name}.send_default_route = {repr(_send_default_route)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_send_default_route = yang.gdata.from_xml_opt_bool(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__send_default_route, child_send_default_route)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/srte-policy-ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/link-state/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/link-state/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/link-state/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/link-state/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi/link-state')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi/link-state'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: ?str
    export_policy: list[str]
    default_export_policy: ?str
    import_policy: list[str]
    default_import_policy: ?str
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths
    multipath: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath
    send_community_type: list[str]
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target
    srte_policy_ipv4: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4
    srte_policy_ipv6: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6
    link_state: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state

    mut def __init__(self, afi_safi_name: str, admin_state: ?str, export_policy: ?list[str]=None, default_export_policy: ?str, import_policy: ?list[str]=None, default_import_policy: ?str, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths=None, multipath: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath=None, send_community_type: ?list[str]=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target=None, srte_policy_ipv4: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4=None, srte_policy_ipv6: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6=None, link_state: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state
        self.export_policy = export_policy if export_policy is not None else []
        self.default_export_policy = default_export_policy
        self.import_policy = import_policy if import_policy is not None else []
        self.default_import_policy = default_import_policy
        self.add_paths = add_paths if add_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths()
        self.multipath = multipath if multipath is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath()
        self.send_community_type = send_community_type if send_community_type is not None else []
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast()
        self.ipv4_labeled_unicast = ipv4_labeled_unicast if ipv4_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast()
        self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast if l3vpn_ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast()
        self.ipv6_labeled_unicast = ipv6_labeled_unicast if ipv6_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast()
        self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast if l3vpn_ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast()
        self.evpn = evpn if evpn is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn()
        self.route_target = route_target if route_target is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target()
        self.srte_policy_ipv4 = srte_policy_ipv4 if srte_policy_ipv4 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4()
        self.srte_policy_ipv6 = srte_policy_ipv6 if srte_policy_ipv6 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6()
        self.link_state = link_state if link_state is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        _default_export_policy = self.default_export_policy
        if _default_export_policy is not None:
            children['default-export-policy'] = yang.gdata.Leaf('enumeration', _default_export_policy)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _default_import_policy = self.default_import_policy
        if _default_import_policy is not None:
            children['default-import-policy'] = yang.gdata.Leaf('enumeration', _default_import_policy)
        _add_paths = self.add_paths
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        _multipath = self.multipath
        if _multipath is not None:
            children['multipath'] = _multipath.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList('enumeration', self.send_community_type)
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            children['srte-policy-ipv4'] = _srte_policy_ipv4.to_gdata()
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            children['srte-policy-ipv6'] = _srte_policy_ipv6.to_gdata()
        _link_state = self.link_state
        if _link_state is not None:
            children['link-state'] = _link_state.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name=n.get_str('afi-safi-name'), admin_state=n.get_opt_str('admin-state'), export_policy=n.get_opt_strs('export-policy'), default_export_policy=n.get_opt_str('default-export-policy'), import_policy=n.get_opt_strs('import-policy'), default_import_policy=n.get_opt_str('default-import-policy'), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths.from_gdata(n.get_opt_cnt('add-paths')), multipath=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath.from_gdata(n.get_opt_cnt('multipath')), send_community_type=n.get_opt_strs('send-community-type'), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_cnt('ipv4-labeled-unicast')), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_cnt('ipv6-labeled-unicast')), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv6-unicast')), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn.from_gdata(n.get_opt_cnt('evpn')), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target.from_gdata(n.get_opt_cnt('route-target')), srte_policy_ipv4=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4.from_gdata(n.get_opt_cnt('srte-policy-ipv4')), srte_policy_ipv6=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6.from_gdata(n.get_opt_cnt('srte-policy-ipv6')), link_state=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state.from_gdata(n.get_opt_cnt('link-state')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _default_export_policy = self.default_export_policy
        if _default_export_policy is not None:
            leaves.append('{self_name}.default_export_policy = {repr(_default_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _default_import_policy = self.default_import_policy
        if _default_import_policy is not None:
            leaves.append('{self_name}.default_import_policy = {repr(_default_import_policy)}')
        _add_paths = self.add_paths
        if _add_paths is not None:
            res.extend(_add_paths.prsrc('{self_name}.add_paths', False).splitlines())
        _multipath = self.multipath
        if _multipath is not None:
            res.extend(_multipath.prsrc('{self_name}.multipath', False).splitlines())
        _send_community_type = self.send_community_type
        if _send_community_type is not None:
            leaves.append('{self_name}.send_community_type = {repr(_send_community_type)}')
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            res.extend(_ipv4_labeled_unicast.prsrc('{self_name}.ipv4_labeled_unicast', False).splitlines())
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            res.extend(_l3vpn_ipv4_unicast.prsrc('{self_name}.l3vpn_ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            res.extend(_ipv6_labeled_unicast.prsrc('{self_name}.ipv6_labeled_unicast', False).splitlines())
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            res.extend(_l3vpn_ipv6_unicast.prsrc('{self_name}.l3vpn_ipv6_unicast', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.extend(_evpn.prsrc('{self_name}.evpn', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.extend(_route_target.prsrc('{self_name}.route_target', False).splitlines())
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            res.extend(_srte_policy_ipv4.prsrc('{self_name}.srte_policy_ipv4', False).splitlines())
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            res.extend(_srte_policy_ipv6.prsrc('{self_name}.srte_policy_ipv6', False).splitlines())
        _link_state = self.link_state
        if _link_state is not None:
            res.extend(_link_state.prsrc('{self_name}.link_state', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_str(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__admin_state, child_admin_state)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__export_policy, child_export_policy)
    child_default_export_policy = yang.gdata.from_xml_opt_str(node, 'default-export-policy')
    yang.gdata.maybe_add(children, 'default-export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__default_export_policy, child_default_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__import_policy, child_import_policy)
    child_default_import_policy = yang.gdata.from_xml_opt_str(node, 'default-import-policy')
    yang.gdata.maybe_add(children, 'default-import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__default_import_policy, child_default_import_policy)
    child_add_paths = yang.gdata.from_xml_opt_cnt(node, 'add-paths')
    yang.gdata.maybe_add(children, 'add-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__add_paths, child_add_paths)
    child_multipath = yang.gdata.from_xml_opt_cnt(node, 'multipath')
    yang.gdata.maybe_add(children, 'multipath', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__multipath, child_multipath)
    child_send_community_type = yang.gdata.from_xml_opt_strs(node, 'send-community-type')
    yang.gdata.maybe_add(children, 'send-community-type', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__send_community_type, child_send_community_type)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_unicast, child_ipv4_unicast)
    child_ipv4_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv4-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv4_labeled_unicast, child_ipv4_labeled_unicast)
    child_l3vpn_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv4-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv4_unicast, child_l3vpn_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_unicast, child_ipv6_unicast)
    child_ipv6_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv6-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__ipv6_labeled_unicast, child_ipv6_labeled_unicast)
    child_l3vpn_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv6-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__l3vpn_ipv6_unicast, child_l3vpn_ipv6_unicast)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__evpn, child_evpn)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__route_target, child_route_target)
    child_srte_policy_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv4')
    yang.gdata.maybe_add(children, 'srte-policy-ipv4', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv4, child_srte_policy_ipv4)
    child_srte_policy_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv6')
    yang.gdata.maybe_add(children, 'srte-policy-ipv6', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__srte_policy_ipv6, child_srte_policy_ipv6)
    child_link_state = yang.gdata.from_xml_opt_cnt(node, 'link-state')
    yang.gdata.maybe_add(children, 'link-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__link_state, child_link_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(as_number=n.get_opt_int('as-number'), prepend_global_as=n.get_opt_bool('prepend-global-as'), prepend_local_as=n.get_opt_bool('prepend-local-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/local-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            leaves.append('{self_name}.prepend_global_as = {repr(_prepend_global_as)}')
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            leaves.append('{self_name}.prepend_local_as = {repr(_prepend_local_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/local-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__as_number, child_as_number)
    child_prepend_global_as = yang.gdata.from_xml_opt_bool(node, 'prepend-global-as')
    yang.gdata.maybe_add(children, 'prepend-global-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_global_as, child_prepend_global_as)
    child_prepend_local_as = yang.gdata.from_xml_opt_bool(node, 'prepend-local-as')
    yang.gdata.maybe_add(children, 'prepend-local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_local_as, child_prepend_local_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(yang.adata.MNode):
    ipv4_unicast: ?bool
    ipv6_unicast: ?bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool, ipv6_unicast: ?bool, export_policy: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_unicast = ipv4_unicast
        self.ipv6_unicast = ipv6_unicast
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(ipv4_unicast=n.get_opt_bool('ipv4-unicast'), ipv6_unicast=n.get_opt_bool('ipv6-unicast'), export_policy=n.get_opt_str('export-policy'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/send-default-route')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()')
        leaves = []
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            leaves.append('{self_name}.ipv4_unicast = {repr(_ipv4_unicast)}')
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            leaves.append('{self_name}.ipv6_unicast = {repr(_ipv6_unicast)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/send-default-route'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv6_unicast, child_ipv6_unicast)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__export_policy, child_export_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__connect_retry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__minimum_advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__prefix_limit_restart_timer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(yang.adata.MNode):
    connect_retry: ?int
    hold_time: ?int
    keepalive_interval: ?int
    minimum_advertisement_interval: ?int
    prefix_limit_restart_timer: ?int

    mut def __init__(self, connect_retry: ?int, hold_time: ?int, keepalive_interval: ?int, minimum_advertisement_interval: ?int, prefix_limit_restart_timer: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.connect_retry = connect_retry
        self.hold_time = hold_time
        self.keepalive_interval = keepalive_interval
        self.minimum_advertisement_interval = minimum_advertisement_interval
        self.prefix_limit_restart_timer = prefix_limit_restart_timer

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            children['connect-retry'] = yang.gdata.Leaf('uint16', _connect_retry)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('uint16', _hold_time)
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint16', _keepalive_interval)
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            children['minimum-advertisement-interval'] = yang.gdata.Leaf('uint16', _minimum_advertisement_interval)
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            children['prefix-limit-restart-timer'] = yang.gdata.Leaf('uint16', _prefix_limit_restart_timer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(connect_retry=n.get_opt_int('connect-retry'), hold_time=n.get_opt_int('hold-time'), keepalive_interval=n.get_opt_int('keepalive-interval'), minimum_advertisement_interval=n.get_opt_int('minimum-advertisement-interval'), prefix_limit_restart_timer=n.get_opt_int('prefix-limit-restart-timer'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()')
        leaves = []
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            leaves.append('{self_name}.connect_retry = {repr(_connect_retry)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            leaves.append('{self_name}.keepalive_interval = {repr(_keepalive_interval)}')
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            leaves.append('{self_name}.minimum_advertisement_interval = {repr(_minimum_advertisement_interval)}')
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            leaves.append('{self_name}.prefix_limit_restart_timer = {repr(_prefix_limit_restart_timer)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_connect_retry = yang.gdata.from_xml_opt_int(node, 'connect-retry')
    yang.gdata.maybe_add(children, 'connect-retry', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__connect_retry, child_connect_retry)
    child_hold_time = yang.gdata.from_xml_opt_int(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__hold_time, child_hold_time)
    child_keepalive_interval = yang.gdata.from_xml_opt_int(node, 'keepalive-interval')
    yang.gdata.maybe_add(children, 'keepalive-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__keepalive_interval, child_keepalive_interval)
    child_minimum_advertisement_interval = yang.gdata.from_xml_opt_int(node, 'minimum-advertisement-interval')
    yang.gdata.maybe_add(children, 'minimum-advertisement-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__minimum_advertisement_interval, child_minimum_advertisement_interval)
    child_prefix_limit_restart_timer = yang.gdata.from_xml_opt_int(node, 'prefix-limit-restart-timer')
    yang.gdata.maybe_add(children, 'prefix-limit-restart-timer', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers__prefix_limit_restart_timer, child_prefix_limit_restart_timer)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        _modifier = self.modifier
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(name=n.get_str('name'), modifier=n.get_opt_str('modifier'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/trace-options/flag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag({repr(self.name)})')
        leaves = []
        _modifier = self.modifier
        if _modifier is not None:
            leaves.append('{self_name}.modifier = {repr(_modifier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/trace-options/flag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__name, child_name)
    child_modifier = yang.gdata.from_xml_opt_str(node, 'modifier')
    yang.gdata.maybe_add(children, 'modifier', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag__modifier, child_modifier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag(elements=flag)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag.from_gdata(n.get_opt_list('flag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()')
        leaves = []
        _flag = self.flag
        for _element in _flag.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/group/trace-options/flag element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'flag_element = {self_name}.flag.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('flag_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_flag = yang.gdata.from_xml_opt_list(node, 'flag')
    yang.gdata.maybe_add(children, 'flag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options__flag, child_flag)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__passive_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(yang.adata.MNode):
    mtu_discovery: ?bool
    tcp_mss: ?int
    passive_mode: ?bool
    local_address: ?str

    mut def __init__(self, mtu_discovery: ?bool, tcp_mss: ?int, passive_mode: ?bool, local_address: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss
        self.passive_mode = passive_mode
        self.local_address = local_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            children['passive-mode'] = yang.gdata.Leaf('boolean', _passive_mode)
        _local_address = self.local_address
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('union', _local_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(mtu_discovery=n.get_opt_bool('mtu-discovery'), tcp_mss=n.get_opt_int('tcp-mss'), passive_mode=n.get_opt_bool('passive-mode'), local_address=n.get_opt_str('local-address'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()')
        leaves = []
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            leaves.append('{self_name}.mtu_discovery = {repr(_mtu_discovery)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            leaves.append('{self_name}.passive_mode = {repr(_passive_mode)}')
        _local_address = self.local_address
        if _local_address is not None:
            leaves.append('{self_name}.local_address = {repr(_local_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mtu_discovery = yang.gdata.from_xml_opt_bool(node, 'mtu-discovery')
    yang.gdata.maybe_add(children, 'mtu-discovery', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__mtu_discovery, child_mtu_discovery)
    child_tcp_mss = yang.gdata.from_xml_opt_int(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__tcp_mss, child_tcp_mss)
    child_passive_mode = yang.gdata.from_xml_opt_bool(node, 'passive-mode')
    yang.gdata.maybe_add(children, 'passive-mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__passive_mode, child_passive_mode)
    child_local_address = yang.gdata.from_xml_opt_str(node, 'local-address')
    yang.gdata.maybe_add(children, 'local-address', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport__local_address, child_local_address)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(yang.adata.MNode):
    group_name: str
    admin_state: ?str
    description: ?str
    export_policy: list[str]
    import_policy: list[str]
    local_preference: ?int
    next_hop_self: ?bool
    peer_as: ?int
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop
    optional_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as
    route_flap_damping: ?bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route
    timers: srl_nokia_network_instance__network_instance__protocols__bgp__group__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__group__transport

    mut def __init__(self, group_name: str, admin_state: ?str, description: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int, next_hop_self: ?bool, peer_as: ?int, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop=None, optional_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as=None, route_flap_damping: ?bool, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route=None, timers: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__transport=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.group_name = group_name
        self.admin_state = admin_state
        self.description = description
        self.export_policy = export_policy if export_policy is not None else []
        self.import_policy = import_policy if import_policy is not None else []
        self.local_preference = local_preference
        self.next_hop_self = next_hop_self
        self.peer_as = peer_as
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()
        self.failure_detection = failure_detection if failure_detection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()
        self.multihop = multihop if multihop is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()
        self.optional_attributes = optional_attributes if optional_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart()
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(elements=afi_safi)
        self.local_as = local_as if local_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()
        self.route_flap_damping = route_flap_damping
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()
        self.send_default_route = send_default_route if send_default_route is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__timers()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__transport()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        _optional_attributes = self.optional_attributes
        if _optional_attributes is not None:
            children['optional-attributes'] = _optional_attributes.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _local_as = self.local_as
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name=n.get_str('group-name'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), export_policy=n.get_opt_strs('export-policy'), import_policy=n.get_opt_strs('import-policy'), local_preference=n.get_opt_int('local-preference'), next_hop_self=n.get_opt_bool('next-hop-self'), peer_as=n.get_opt_int('peer-as'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication.from_gdata(n.get_opt_cnt('authentication')), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection.from_gdata(n.get_opt_cnt('failure-detection')), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop.from_gdata(n.get_opt_cnt('multihop')), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes.from_gdata(n.get_opt_cnt('optional-attributes')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi.from_gdata(n.get_opt_list('afi-safi')), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as.from_gdata(n.get_opt_cnt('local-as')), route_flap_damping=n.get_opt_bool('route-flap-damping'), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community.from_gdata(n.get_opt_cnt('send-community')), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route.from_gdata(n.get_opt_cnt('send-default-route')), timers=srl_nokia_network_instance__network_instance__protocols__bgp__group__timers.from_gdata(n.get_opt_cnt('timers')), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options.from_gdata(n.get_opt_cnt('trace-options')), transport=srl_nokia_network_instance__network_instance__protocols__bgp__group__transport.from_gdata(n.get_opt_cnt('transport')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group({repr(self.group_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            leaves.append('{self_name}.next_hop_self = {repr(_next_hop_self)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            res.extend(_failure_detection.prsrc('{self_name}.failure_detection', False).splitlines())
        _multihop = self.multihop
        if _multihop is not None:
            res.extend(_multihop.prsrc('{self_name}.multihop', False).splitlines())
        _optional_attributes = self.optional_attributes
        if _optional_attributes is not None:
            res.extend(_optional_attributes.prsrc('{self_name}.optional_attributes', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/group/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _local_as = self.local_as
        if _local_as is not None:
            res.extend(_local_as.prsrc('{self_name}.local_as', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            leaves.append('{self_name}.route_flap_damping = {repr(_route_flap_damping)}')
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            res.extend(_send_default_route.prsrc('{self_name}.send_default_route', False).splitlines())
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_group_name = yang.gdata.from_xml_str(node, 'group-name')
    yang.gdata.maybe_add(children, 'group-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__group_name, child_group_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__description, child_description)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__export_policy, child_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__import_policy, child_import_policy)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_preference, child_local_preference)
    child_next_hop_self = yang.gdata.from_xml_opt_bool(node, 'next-hop-self')
    yang.gdata.maybe_add(children, 'next-hop-self', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__next_hop_self, child_next_hop_self)
    child_peer_as = yang.gdata.from_xml_opt_int(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__peer_as, child_peer_as)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication, child_authentication)
    child_failure_detection = yang.gdata.from_xml_opt_cnt(node, 'failure-detection')
    yang.gdata.maybe_add(children, 'failure-detection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection, child_failure_detection)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop, child_multihop)
    child_optional_attributes = yang.gdata.from_xml_opt_cnt(node, 'optional-attributes')
    yang.gdata.maybe_add(children, 'optional-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__optional_attributes, child_optional_attributes)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__graceful_restart, child_graceful_restart)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi, child_afi_safi)
    child_local_as = yang.gdata.from_xml_opt_cnt(node, 'local-as')
    yang.gdata.maybe_add(children, 'local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as, child_local_as)
    child_route_flap_damping = yang.gdata.from_xml_opt_bool(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector, child_route_reflector)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community, child_send_community)
    child_send_default_route = yang.gdata.from_xml_opt_cnt(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route, child_send_default_route)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__timers, child_timers)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__trace_options, child_trace_options)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__transport, child_transport)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['group-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')), replace_peer_as=n.get_opt_bool('replace-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as')
            res.append('remove_private_as = {self_name}.create_remove_private_as()')
            res.extend(_remove_private_as.prsrc('remove_private_as', False).splitlines())
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            leaves.append('{self_name}.replace_peer_as = {repr(_replace_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as, child_remove_private_as)
    child_replace_peer_as = yang.gdata.from_xml_opt_bool(node, 'replace-peer-as')
    yang.gdata.maybe_add(children, 'replace-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__replace_peer_as, child_replace_peer_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(enable_bfd=n.get_opt_bool('enable-bfd'), fast_failover=n.get_opt_bool('fast-failover'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/failure-detection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()')
        leaves = []
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            leaves.append('{self_name}.fast_failover = {repr(_fast_failover)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/failure-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__enable_bfd, child_enable_bfd)
    child_fast_failover = yang.gdata.from_xml_opt_bool(node, 'fast-failover')
    yang.gdata.maybe_add(children, 'fast-failover', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__fast_failover, child_fast_failover)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: ?int

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        self.requested_restart_time = requested_restart_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(admin_state=n.get_opt_str('admin-state'), stale_routes_time=n.get_opt_int('stale-routes-time'), requested_restart_time=n.get_opt_int('requested-restart-time'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            leaves.append('{self_name}.stale_routes_time = {repr(_stale_routes_time)}')
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            leaves.append('{self_name}.requested_restart_time = {repr(_requested_restart_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__admin_state, child_admin_state)
    child_stale_routes_time = yang.gdata.from_xml_opt_int(node, 'stale-routes-time')
    yang.gdata.maybe_add(children, 'stale-routes-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__stale_routes_time, child_stale_routes_time)
    child_requested_restart_time = yang.gdata.from_xml_opt_int(node, 'requested-restart-time')
    yang.gdata.maybe_add(children, 'requested-restart-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__requested_restart_time, child_requested_restart_time)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(admin_state=n.get_opt_str('admin-state'), maximum_hops=n.get_opt_int('maximum-hops'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/multihop')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            leaves.append('{self_name}.maximum_hops = {repr(_maximum_hops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__admin_state, child_admin_state)
    child_maximum_hops = yang.gdata.from_xml_opt_int(node, 'maximum-hops')
    yang.gdata.maybe_add(children, 'maximum-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__maximum_hops, child_maximum_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes__block_prefix_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(yang.adata.MNode):
    block_prefix_sid: ?bool

    mut def __init__(self, block_prefix_sid: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.block_prefix_sid = block_prefix_sid

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            children['block-prefix-sid'] = yang.gdata.Leaf('boolean', _block_prefix_sid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(block_prefix_sid=n.get_opt_bool('block-prefix-sid'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/optional-attributes')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()')
        leaves = []
        _block_prefix_sid = self.block_prefix_sid
        if _block_prefix_sid is not None:
            leaves.append('{self_name}.block_prefix_sid = {repr(_block_prefix_sid)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/optional-attributes'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_block_prefix_sid = yang.gdata.from_xml_opt_bool(node, 'block-prefix-sid')
    yang.gdata.maybe_add(children, 'block-prefix-sid', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes__block_prefix_sid, child_block_prefix_sid)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__afi_safi_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__default_export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__default_import_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_max(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(yang.adata.MNode):
    receive: ?bool
    send: ?bool
    send_max: ?int
    send_multipath: ?bool

    mut def __init__(self, receive: ?bool, send: ?bool, send_max: ?int, send_multipath: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.receive = receive
        self.send = send
        self.send_max = send_max
        self.send_multipath = send_multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('boolean', _receive)
        _send = self.send
        if _send is not None:
            children['send'] = yang.gdata.Leaf('boolean', _send)
        _send_max = self.send_max
        if _send_max is not None:
            children['send-max'] = yang.gdata.Leaf('uint8', _send_max)
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            children['send-multipath'] = yang.gdata.Leaf('empty', _send_multipath)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(receive=n.get_opt_bool('receive'), send=n.get_opt_bool('send'), send_max=n.get_opt_int('send-max'), send_multipath=n.get_opt_empty('send-multipath'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/add-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _send = self.send
        if _send is not None:
            leaves.append('{self_name}.send = {repr(_send)}')
        _send_max = self.send_max
        if _send_max is not None:
            leaves.append('{self_name}.send_max = {repr(_send_max)}')
        _send_multipath = self.send_multipath
        if _send_multipath is not None:
            leaves.append('{self_name}.send_multipath = {repr(_send_multipath)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/add-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_bool(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__receive, child_receive)
    child_send = yang.gdata.from_xml_opt_bool(node, 'send')
    yang.gdata.maybe_add(children, 'send', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send, child_send)
    child_send_max = yang.gdata.from_xml_opt_int(node, 'send-max')
    yang.gdata.maybe_add(children, 'send-max', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_max, child_send_max)
    child_send_multipath = yang.gdata.from_xml_opt_empty(node, 'send-multipath')
    yang.gdata.maybe_add(children, 'send-multipath', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths__send_multipath, child_send_multipath)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__send_community_type(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value('add-next-hop-count-to-received-bgp-routes'), aggregate_used_paths=n.get_opt_bool('aggregate-used-paths'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/link-bandwidth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()')
        leaves = []
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            leaves.append('{self_name}.add_next_hop_count_to_received_bgp_routes = {repr(_add_next_hop_count_to_received_bgp_routes)}')
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            leaves.append('{self_name}.aggregate_used_paths = {repr(_aggregate_used_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast/link-bandwidth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_add_next_hop_count_to_received_bgp_routes = yang.gdata.from_xml_opt_value(node, 'add-next-hop-count-to-received-bgp-routes')
    yang.gdata.maybe_add(children, 'add-next-hop-count-to-received-bgp-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes, child_add_next_hop_count_to_received_bgp_routes)
    child_aggregate_used_paths = yang.gdata.from_xml_opt_bool(node, 'aggregate-used-paths')
    yang.gdata.maybe_add(children, 'aggregate-used-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth__aggregate_used_paths, child_aggregate_used_paths)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted()
        self.link_bandwidth = link_bandwidth if link_bandwidth is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth.from_gdata(n.get_opt_cnt('link-bandwidth')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            res.extend(_link_bandwidth.prsrc('{self_name}.link_bandwidth', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    child_link_bandwidth = yang.gdata.from_xml_opt_cnt(node, 'link-bandwidth')
    yang.gdata.maybe_add(children, 'link-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast__link_bandwidth, child_link_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.next_hop_unchanged = next_hop_unchanged
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), next_hop_unchanged=n.get_opt_bool('next-hop-unchanged'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            leaves.append('{self_name}.next_hop_unchanged = {repr(_next_hop_unchanged)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv4-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_next_hop_unchanged = yang.gdata.from_xml_opt_bool(node, 'next-hop-unchanged')
    yang.gdata.maybe_add(children, 'next-hop-unchanged', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__next_hop_unchanged, child_next_hop_unchanged)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    receive_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, receive_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.receive_ipv6_next_hops = receive_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            children['receive-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _receive_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), receive_ipv6_next_hops=n.get_opt_bool('receive-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _receive_ipv6_next_hops = self.receive_ipv6_next_hops
        if _receive_ipv6_next_hops is not None:
            leaves.append('{self_name}.receive_ipv6_next_hops = {repr(_receive_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_receive_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'receive-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'receive-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__receive_ipv6_next_hops, child_receive_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(yang.adata.MNode):
    add_next_hop_count_to_received_bgp_routes: ?value
    aggregate_used_paths: ?bool

    mut def __init__(self, add_next_hop_count_to_received_bgp_routes: ?value, aggregate_used_paths: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.add_next_hop_count_to_received_bgp_routes = add_next_hop_count_to_received_bgp_routes
        self.aggregate_used_paths = aggregate_used_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            children['add-next-hop-count-to-received-bgp-routes'] = yang.gdata.Leaf('union', _add_next_hop_count_to_received_bgp_routes)
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            children['aggregate-used-paths'] = yang.gdata.Leaf('boolean', _aggregate_used_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(add_next_hop_count_to_received_bgp_routes=n.get_opt_value('add-next-hop-count-to-received-bgp-routes'), aggregate_used_paths=n.get_opt_bool('aggregate-used-paths'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/link-bandwidth')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()')
        leaves = []
        _add_next_hop_count_to_received_bgp_routes = self.add_next_hop_count_to_received_bgp_routes
        if _add_next_hop_count_to_received_bgp_routes is not None:
            leaves.append('{self_name}.add_next_hop_count_to_received_bgp_routes = {repr(_add_next_hop_count_to_received_bgp_routes)}')
        _aggregate_used_paths = self.aggregate_used_paths
        if _aggregate_used_paths is not None:
            leaves.append('{self_name}.aggregate_used_paths = {repr(_aggregate_used_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast/link-bandwidth'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_add_next_hop_count_to_received_bgp_routes = yang.gdata.from_xml_opt_value(node, 'add-next-hop-count-to-received-bgp-routes')
    yang.gdata.maybe_add(children, 'add-next-hop-count-to-received-bgp-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__add_next_hop_count_to_received_bgp_routes, child_add_next_hop_count_to_received_bgp_routes)
    child_aggregate_used_paths = yang.gdata.from_xml_opt_bool(node, 'aggregate-used-paths')
    yang.gdata.maybe_add(children, 'aggregate-used-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth__aggregate_used_paths, child_aggregate_used_paths)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted
    link_bandwidth: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted=None, link_bandwidth: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted()
        self.link_bandwidth = link_bandwidth if link_bandwidth is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            children['link-bandwidth'] = _link_bandwidth.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), link_bandwidth=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth.from_gdata(n.get_opt_cnt('link-bandwidth')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _link_bandwidth = self.link_bandwidth
        if _link_bandwidth is not None:
            res.extend(_link_bandwidth.prsrc('{self_name}.link_bandwidth', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    child_link_bandwidth = yang.gdata.from_xml_opt_cnt(node, 'link-bandwidth')
    yang.gdata.maybe_add(children, 'link-bandwidth', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast__link_bandwidth, child_link_bandwidth)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__next_hop_unchanged(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(yang.adata.MNode):
    next_hop_unchanged: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted

    mut def __init__(self, next_hop_unchanged: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.next_hop_unchanged = next_hop_unchanged
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            children['next-hop-unchanged'] = yang.gdata.Leaf('boolean', _next_hop_unchanged)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(next_hop_unchanged=n.get_opt_bool('next-hop-unchanged'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()')
        leaves = []
        _next_hop_unchanged = self.next_hop_unchanged
        if _next_hop_unchanged is not None:
            leaves.append('{self_name}.next_hop_unchanged = {repr(_next_hop_unchanged)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/ipv6-labeled-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_next_hop_unchanged = yang.gdata.from_xml_opt_bool(node, 'next-hop-unchanged')
    yang.gdata.maybe_add(children, 'next-hop-unchanged', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__next_hop_unchanged, child_next_hop_unchanged)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/l3vpn-ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__advertise_ipv6_next_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/evpn/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/evpn/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/evpn/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/evpn/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__default_received_encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(yang.adata.MNode):
    advertise_ipv6_next_hops: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted
    default_received_encapsulation: ?str

    mut def __init__(self, advertise_ipv6_next_hops: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted=None, default_received_encapsulation: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.advertise_ipv6_next_hops = advertise_ipv6_next_hops
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted()
        self.default_received_encapsulation = default_received_encapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            children['advertise-ipv6-next-hops'] = yang.gdata.Leaf('boolean', _advertise_ipv6_next_hops)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            children['default-received-encapsulation'] = yang.gdata.Leaf('enumeration', _default_received_encapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(advertise_ipv6_next_hops=n.get_opt_bool('advertise-ipv6-next-hops'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')), default_received_encapsulation=n.get_opt_str('default-received-encapsulation'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()')
        leaves = []
        _advertise_ipv6_next_hops = self.advertise_ipv6_next_hops
        if _advertise_ipv6_next_hops is not None:
            leaves.append('{self_name}.advertise_ipv6_next_hops = {repr(_advertise_ipv6_next_hops)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        _default_received_encapsulation = self.default_received_encapsulation
        if _default_received_encapsulation is not None:
            leaves.append('{self_name}.default_received_encapsulation = {repr(_default_received_encapsulation)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_advertise_ipv6_next_hops = yang.gdata.from_xml_opt_bool(node, 'advertise-ipv6-next-hops')
    yang.gdata.maybe_add(children, 'advertise-ipv6-next-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__advertise_ipv6_next_hops, child_advertise_ipv6_next_hops)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__prefix_limit_accepted, child_prefix_limit_accepted)
    child_default_received_encapsulation = yang.gdata.from_xml_opt_str(node, 'default-received-encapsulation')
    yang.gdata.maybe_add(children, 'default-received-encapsulation', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn__default_received_encapsulation, child_default_received_encapsulation)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__send_default_route(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/route-target/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/route-target/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/route-target/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/route-target/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(yang.adata.MNode):
    send_default_route: ?bool
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted

    mut def __init__(self, send_default_route: ?bool, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.send_default_route = send_default_route
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = yang.gdata.Leaf('boolean', _send_default_route)
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(send_default_route=n.get_opt_bool('send-default-route'), prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/route-target')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()')
        leaves = []
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            leaves.append('{self_name}.send_default_route = {repr(_send_default_route)}')
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_send_default_route = yang.gdata.from_xml_opt_bool(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__send_default_route, child_send_default_route)
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/srte-policy-ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/link-state/prefix-limit-received')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/link-state/prefix-limit-received'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__max_received_routes(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__prevent_teardown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted(yang.adata.MNode):
    max_received_routes: ?int
    warning_threshold_pct: ?int
    prevent_teardown: ?bool

    mut def __init__(self, max_received_routes: ?int, warning_threshold_pct: ?int, prevent_teardown: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.max_received_routes = max_received_routes
        self.warning_threshold_pct = warning_threshold_pct
        self.prevent_teardown = prevent_teardown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            children['max-received-routes'] = yang.gdata.Leaf('uint32', _max_received_routes)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('uint8', _warning_threshold_pct)
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            children['prevent-teardown'] = yang.gdata.Leaf('boolean', _prevent_teardown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted(max_received_routes=n.get_opt_int('max-received-routes'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'), prevent_teardown=n.get_opt_bool('prevent-teardown'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/link-state/prefix-limit-accepted')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted()')
        leaves = []
        _max_received_routes = self.max_received_routes
        if _max_received_routes is not None:
            leaves.append('{self_name}.max_received_routes = {repr(_max_received_routes)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        _prevent_teardown = self.prevent_teardown
        if _prevent_teardown is not None:
            leaves.append('{self_name}.prevent_teardown = {repr(_prevent_teardown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/link-state/prefix-limit-accepted'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_max_received_routes = yang.gdata.from_xml_opt_int(node, 'max-received-routes')
    yang.gdata.maybe_add(children, 'max-received-routes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__max_received_routes, child_max_received_routes)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__warning_threshold_pct, child_warning_threshold_pct)
    child_prevent_teardown = yang.gdata.from_xml_opt_bool(node, 'prevent-teardown')
    yang.gdata.maybe_add(children, 'prevent-teardown', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted__prevent_teardown, child_prevent_teardown)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state(yang.adata.MNode):
    prefix_limit_received: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received
    prefix_limit_accepted: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted

    mut def __init__(self, prefix_limit_received: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received=None, prefix_limit_accepted: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.prefix_limit_received = prefix_limit_received if prefix_limit_received is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received()
        self.prefix_limit_accepted = prefix_limit_accepted if prefix_limit_accepted is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            children['prefix-limit-received'] = _prefix_limit_received.to_gdata()
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            children['prefix-limit-accepted'] = _prefix_limit_accepted.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state(prefix_limit_received=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received.from_gdata(n.get_opt_cnt('prefix-limit-received')), prefix_limit_accepted=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted.from_gdata(n.get_opt_cnt('prefix-limit-accepted')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi/link-state')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state()')
        leaves = []
        _prefix_limit_received = self.prefix_limit_received
        if _prefix_limit_received is not None:
            res.extend(_prefix_limit_received.prsrc('{self_name}.prefix_limit_received', False).splitlines())
        _prefix_limit_accepted = self.prefix_limit_accepted
        if _prefix_limit_accepted is not None:
            res.extend(_prefix_limit_accepted.prsrc('{self_name}.prefix_limit_accepted', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi/link-state'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit_received = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-received')
    yang.gdata.maybe_add(children, 'prefix-limit-received', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_received, child_prefix_limit_received)
    child_prefix_limit_accepted = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit-accepted')
    yang.gdata.maybe_add(children, 'prefix-limit-accepted', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state__prefix_limit_accepted, child_prefix_limit_accepted)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: str
    admin_state: ?str
    export_policy: list[str]
    default_export_policy: ?str
    import_policy: list[str]
    default_import_policy: ?str
    add_paths: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths
    send_community_type: list[str]
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast
    ipv4_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast
    l3vpn_ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast
    ipv6_labeled_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast
    l3vpn_ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast
    evpn: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target
    srte_policy_ipv4: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4
    srte_policy_ipv6: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6
    link_state: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state

    mut def __init__(self, afi_safi_name: str, admin_state: ?str, export_policy: ?list[str]=None, default_export_policy: ?str, import_policy: ?list[str]=None, default_import_policy: ?str, add_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths=None, send_community_type: ?list[str]=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast=None, ipv4_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast=None, l3vpn_ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast=None, ipv6_labeled_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast=None, l3vpn_ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast=None, evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target=None, srte_policy_ipv4: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4=None, srte_policy_ipv6: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6=None, link_state: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state
        self.export_policy = export_policy if export_policy is not None else []
        self.default_export_policy = default_export_policy
        self.import_policy = import_policy if import_policy is not None else []
        self.default_import_policy = default_import_policy
        self.add_paths = add_paths if add_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths()
        self.send_community_type = send_community_type if send_community_type is not None else []
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast()
        self.ipv4_labeled_unicast = ipv4_labeled_unicast if ipv4_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast()
        self.l3vpn_ipv4_unicast = l3vpn_ipv4_unicast if l3vpn_ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast()
        self.ipv6_labeled_unicast = ipv6_labeled_unicast if ipv6_labeled_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast()
        self.l3vpn_ipv6_unicast = l3vpn_ipv6_unicast if l3vpn_ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast()
        self.evpn = evpn if evpn is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn()
        self.route_target = route_target if route_target is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target()
        self.srte_policy_ipv4 = srte_policy_ipv4 if srte_policy_ipv4 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4()
        self.srte_policy_ipv6 = srte_policy_ipv6 if srte_policy_ipv6 is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6()
        self.link_state = link_state if link_state is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        _default_export_policy = self.default_export_policy
        if _default_export_policy is not None:
            children['default-export-policy'] = yang.gdata.Leaf('enumeration', _default_export_policy)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _default_import_policy = self.default_import_policy
        if _default_import_policy is not None:
            children['default-import-policy'] = yang.gdata.Leaf('enumeration', _default_import_policy)
        _add_paths = self.add_paths
        if _add_paths is not None:
            children['add-paths'] = _add_paths.to_gdata()
        children['send-community-type'] = yang.gdata.LeafList('enumeration', self.send_community_type)
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            children['ipv4-labeled-unicast'] = _ipv4_labeled_unicast.to_gdata()
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            children['l3vpn-ipv4-unicast'] = _l3vpn_ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            children['ipv6-labeled-unicast'] = _ipv6_labeled_unicast.to_gdata()
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            children['l3vpn-ipv6-unicast'] = _l3vpn_ipv6_unicast.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            children['srte-policy-ipv4'] = _srte_policy_ipv4.to_gdata()
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            children['srte-policy-ipv6'] = _srte_policy_ipv6.to_gdata()
        _link_state = self.link_state
        if _link_state is not None:
            children['link-state'] = _link_state.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name=n.get_str('afi-safi-name'), admin_state=n.get_opt_str('admin-state'), export_policy=n.get_opt_strs('export-policy'), default_export_policy=n.get_opt_str('default-export-policy'), import_policy=n.get_opt_strs('import-policy'), default_import_policy=n.get_opt_str('default-import-policy'), add_paths=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths.from_gdata(n.get_opt_cnt('add-paths')), send_community_type=n.get_opt_strs('send-community-type'), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv4_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast.from_gdata(n.get_opt_cnt('ipv4-labeled-unicast')), l3vpn_ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), ipv6_labeled_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast.from_gdata(n.get_opt_cnt('ipv6-labeled-unicast')), l3vpn_ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast.from_gdata(n.get_opt_cnt('l3vpn-ipv6-unicast')), evpn=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn.from_gdata(n.get_opt_cnt('evpn')), route_target=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target.from_gdata(n.get_opt_cnt('route-target')), srte_policy_ipv4=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4.from_gdata(n.get_opt_cnt('srte-policy-ipv4')), srte_policy_ipv6=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6.from_gdata(n.get_opt_cnt('srte-policy-ipv6')), link_state=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state.from_gdata(n.get_opt_cnt('link-state')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _default_export_policy = self.default_export_policy
        if _default_export_policy is not None:
            leaves.append('{self_name}.default_export_policy = {repr(_default_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _default_import_policy = self.default_import_policy
        if _default_import_policy is not None:
            leaves.append('{self_name}.default_import_policy = {repr(_default_import_policy)}')
        _add_paths = self.add_paths
        if _add_paths is not None:
            res.extend(_add_paths.prsrc('{self_name}.add_paths', False).splitlines())
        _send_community_type = self.send_community_type
        if _send_community_type is not None:
            leaves.append('{self_name}.send_community_type = {repr(_send_community_type)}')
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv4_labeled_unicast = self.ipv4_labeled_unicast
        if _ipv4_labeled_unicast is not None:
            res.extend(_ipv4_labeled_unicast.prsrc('{self_name}.ipv4_labeled_unicast', False).splitlines())
        _l3vpn_ipv4_unicast = self.l3vpn_ipv4_unicast
        if _l3vpn_ipv4_unicast is not None:
            res.extend(_l3vpn_ipv4_unicast.prsrc('{self_name}.l3vpn_ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _ipv6_labeled_unicast = self.ipv6_labeled_unicast
        if _ipv6_labeled_unicast is not None:
            res.extend(_ipv6_labeled_unicast.prsrc('{self_name}.ipv6_labeled_unicast', False).splitlines())
        _l3vpn_ipv6_unicast = self.l3vpn_ipv6_unicast
        if _l3vpn_ipv6_unicast is not None:
            res.extend(_l3vpn_ipv6_unicast.prsrc('{self_name}.l3vpn_ipv6_unicast', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.extend(_evpn.prsrc('{self_name}.evpn', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.extend(_route_target.prsrc('{self_name}.route_target', False).splitlines())
        _srte_policy_ipv4 = self.srte_policy_ipv4
        if _srte_policy_ipv4 is not None:
            res.extend(_srte_policy_ipv4.prsrc('{self_name}.srte_policy_ipv4', False).splitlines())
        _srte_policy_ipv6 = self.srte_policy_ipv6
        if _srte_policy_ipv6 is not None:
            res.extend(_srte_policy_ipv6.prsrc('{self_name}.srte_policy_ipv6', False).splitlines())
        _link_state = self.link_state
        if _link_state is not None:
            res.extend(_link_state.prsrc('{self_name}.link_state', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_str(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__admin_state, child_admin_state)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__export_policy, child_export_policy)
    child_default_export_policy = yang.gdata.from_xml_opt_str(node, 'default-export-policy')
    yang.gdata.maybe_add(children, 'default-export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__default_export_policy, child_default_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__import_policy, child_import_policy)
    child_default_import_policy = yang.gdata.from_xml_opt_str(node, 'default-import-policy')
    yang.gdata.maybe_add(children, 'default-import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__default_import_policy, child_default_import_policy)
    child_add_paths = yang.gdata.from_xml_opt_cnt(node, 'add-paths')
    yang.gdata.maybe_add(children, 'add-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__add_paths, child_add_paths)
    child_send_community_type = yang.gdata.from_xml_opt_strs(node, 'send-community-type')
    yang.gdata.maybe_add(children, 'send-community-type', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__send_community_type, child_send_community_type)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_unicast, child_ipv4_unicast)
    child_ipv4_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv4-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv4_labeled_unicast, child_ipv4_labeled_unicast)
    child_l3vpn_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv4-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv4_unicast, child_l3vpn_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_unicast, child_ipv6_unicast)
    child_ipv6_labeled_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-labeled-unicast')
    yang.gdata.maybe_add(children, 'ipv6-labeled-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__ipv6_labeled_unicast, child_ipv6_labeled_unicast)
    child_l3vpn_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'l3vpn-ipv6-unicast')
    yang.gdata.maybe_add(children, 'l3vpn-ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__l3vpn_ipv6_unicast, child_l3vpn_ipv6_unicast)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__evpn, child_evpn)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__route_target, child_route_target)
    child_srte_policy_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv4')
    yang.gdata.maybe_add(children, 'srte-policy-ipv4', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv4, child_srte_policy_ipv4)
    child_srte_policy_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'srte-policy-ipv6')
    yang.gdata.maybe_add(children, 'srte-policy-ipv6', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__srte_policy_ipv6, child_srte_policy_ipv6)
    child_link_state = yang.gdata.from_xml_opt_cnt(node, 'link-state')
    yang.gdata.maybe_add(children, 'link-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__link_state, child_link_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(as_number=n.get_opt_int('as-number'), prepend_global_as=n.get_opt_bool('prepend-global-as'), prepend_local_as=n.get_opt_bool('prepend-local-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/local-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            leaves.append('{self_name}.prepend_global_as = {repr(_prepend_global_as)}')
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            leaves.append('{self_name}.prepend_local_as = {repr(_prepend_local_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/local-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__as_number, child_as_number)
    child_prepend_global_as = yang.gdata.from_xml_opt_bool(node, 'prepend-global-as')
    yang.gdata.maybe_add(children, 'prepend-global-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_global_as, child_prepend_global_as)
    child_prepend_local_as = yang.gdata.from_xml_opt_bool(node, 'prepend-local-as')
    yang.gdata.maybe_add(children, 'prepend-local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_local_as, child_prepend_local_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(yang.adata.MNode):
    ipv4_unicast: ?bool
    ipv6_unicast: ?bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool, ipv6_unicast: ?bool, export_policy: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_unicast = ipv4_unicast
        self.ipv6_unicast = ipv6_unicast
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(ipv4_unicast=n.get_opt_bool('ipv4-unicast'), ipv6_unicast=n.get_opt_bool('ipv6-unicast'), export_policy=n.get_opt_str('export-policy'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/send-default-route')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()')
        leaves = []
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            leaves.append('{self_name}.ipv4_unicast = {repr(_ipv4_unicast)}')
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            leaves.append('{self_name}.ipv6_unicast = {repr(_ipv6_unicast)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/send-default-route'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv6_unicast, child_ipv6_unicast)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__export_policy, child_export_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__connect_retry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__minimum_advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__prefix_limit_restart_timer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(yang.adata.MNode):
    connect_retry: ?int
    hold_time: ?int
    keepalive_interval: ?int
    minimum_advertisement_interval: ?int
    prefix_limit_restart_timer: ?int

    mut def __init__(self, connect_retry: ?int, hold_time: ?int, keepalive_interval: ?int, minimum_advertisement_interval: ?int, prefix_limit_restart_timer: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.connect_retry = connect_retry
        self.hold_time = hold_time
        self.keepalive_interval = keepalive_interval
        self.minimum_advertisement_interval = minimum_advertisement_interval
        self.prefix_limit_restart_timer = prefix_limit_restart_timer

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            children['connect-retry'] = yang.gdata.Leaf('uint16', _connect_retry)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('uint16', _hold_time)
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint16', _keepalive_interval)
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            children['minimum-advertisement-interval'] = yang.gdata.Leaf('uint16', _minimum_advertisement_interval)
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            children['prefix-limit-restart-timer'] = yang.gdata.Leaf('uint16', _prefix_limit_restart_timer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(connect_retry=n.get_opt_int('connect-retry'), hold_time=n.get_opt_int('hold-time'), keepalive_interval=n.get_opt_int('keepalive-interval'), minimum_advertisement_interval=n.get_opt_int('minimum-advertisement-interval'), prefix_limit_restart_timer=n.get_opt_int('prefix-limit-restart-timer'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()')
        leaves = []
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            leaves.append('{self_name}.connect_retry = {repr(_connect_retry)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            leaves.append('{self_name}.keepalive_interval = {repr(_keepalive_interval)}')
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            leaves.append('{self_name}.minimum_advertisement_interval = {repr(_minimum_advertisement_interval)}')
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            leaves.append('{self_name}.prefix_limit_restart_timer = {repr(_prefix_limit_restart_timer)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_connect_retry = yang.gdata.from_xml_opt_int(node, 'connect-retry')
    yang.gdata.maybe_add(children, 'connect-retry', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__connect_retry, child_connect_retry)
    child_hold_time = yang.gdata.from_xml_opt_int(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__hold_time, child_hold_time)
    child_keepalive_interval = yang.gdata.from_xml_opt_int(node, 'keepalive-interval')
    yang.gdata.maybe_add(children, 'keepalive-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__keepalive_interval, child_keepalive_interval)
    child_minimum_advertisement_interval = yang.gdata.from_xml_opt_int(node, 'minimum-advertisement-interval')
    yang.gdata.maybe_add(children, 'minimum-advertisement-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__minimum_advertisement_interval, child_minimum_advertisement_interval)
    child_prefix_limit_restart_timer = yang.gdata.from_xml_opt_int(node, 'prefix-limit-restart-timer')
    yang.gdata.maybe_add(children, 'prefix-limit-restart-timer', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__prefix_limit_restart_timer, child_prefix_limit_restart_timer)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__modifier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(yang.adata.MNode):
    name: str
    modifier: ?str

    mut def __init__(self, name: str, modifier: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.name = name
        self.modifier = modifier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        _modifier = self.modifier
        if _modifier is not None:
            children['modifier'] = yang.gdata.Leaf('enumeration', _modifier)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(name=n.get_str('name'), modifier=n.get_opt_str('modifier'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/trace-options/flag')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag({repr(self.name)})')
        leaves = []
        _modifier = self.modifier
        if _modifier is not None:
            leaves.append('{self_name}.modifier = {repr(_modifier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/trace-options/flag'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'flag'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__name, child_name)
    child_modifier = yang.gdata.from_xml_opt_str(node, 'modifier')
    yang.gdata.maybe_add(children, 'modifier', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag__modifier, child_modifier)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(yang.adata.MNode):
    flag: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag

    mut def __init__(self, flag: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.flag = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag(elements=flag)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flag = self.flag
        if _flag is not None:
            children['flag'] = _flag.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(flag=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag.from_gdata(n.get_opt_list('flag')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/trace-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()')
        leaves = []
        _flag = self.flag
        for _element in _flag.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/neighbor/trace-options/flag element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'flag_element = {self_name}.flag.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('flag_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/trace-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_flag = yang.gdata.from_xml_opt_list(node, 'flag')
    yang.gdata.maybe_add(children, 'flag', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options__flag, child_flag)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__passive_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(yang.adata.MNode):
    mtu_discovery: ?bool
    tcp_mss: ?int
    passive_mode: ?bool
    local_address: ?str

    mut def __init__(self, mtu_discovery: ?bool, tcp_mss: ?int, passive_mode: ?bool, local_address: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss
        self.passive_mode = passive_mode
        self.local_address = local_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            children['passive-mode'] = yang.gdata.Leaf('boolean', _passive_mode)
        _local_address = self.local_address
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('union', _local_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(mtu_discovery=n.get_opt_bool('mtu-discovery'), tcp_mss=n.get_opt_int('tcp-mss'), passive_mode=n.get_opt_bool('passive-mode'), local_address=n.get_opt_str('local-address'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()')
        leaves = []
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            leaves.append('{self_name}.mtu_discovery = {repr(_mtu_discovery)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            leaves.append('{self_name}.passive_mode = {repr(_passive_mode)}')
        _local_address = self.local_address
        if _local_address is not None:
            leaves.append('{self_name}.local_address = {repr(_local_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mtu_discovery = yang.gdata.from_xml_opt_bool(node, 'mtu-discovery')
    yang.gdata.maybe_add(children, 'mtu-discovery', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__mtu_discovery, child_mtu_discovery)
    child_tcp_mss = yang.gdata.from_xml_opt_int(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__tcp_mss, child_tcp_mss)
    child_passive_mode = yang.gdata.from_xml_opt_bool(node, 'passive-mode')
    yang.gdata.maybe_add(children, 'passive-mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__passive_mode, child_passive_mode)
    child_local_address = yang.gdata.from_xml_opt_str(node, 'local-address')
    yang.gdata.maybe_add(children, 'local-address', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_address, child_local_address)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(yang.adata.MNode):
    peer_address: str
    admin_state: ?str
    description: ?str
    export_policy: list[str]
    import_policy: list[str]
    local_preference: ?int
    next_hop_self: ?bool
    peer_as: ?int
    peer_group: ?str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop
    optional_attributes: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as
    route_flap_damping: ?bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route
    timers: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport

    mut def __init__(self, peer_address: str, admin_state: ?str, description: ?str, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int, next_hop_self: ?bool, peer_as: ?int, peer_group: ?str, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop=None, optional_attributes: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as=None, route_flap_damping: ?bool, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route=None, timers: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.peer_address = peer_address
        self.admin_state = admin_state
        self.description = description
        self.export_policy = export_policy if export_policy is not None else []
        self.import_policy = import_policy if import_policy is not None else []
        self.local_preference = local_preference
        self.next_hop_self = next_hop_self
        self.peer_as = peer_as
        self.peer_group = peer_group
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()
        self.failure_detection = failure_detection if failure_detection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()
        self.multihop = multihop if multihop is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()
        self.optional_attributes = optional_attributes if optional_attributes is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes()
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(elements=afi_safi)
        self.local_as = local_as if local_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()
        self.route_flap_damping = route_flap_damping
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()
        self.send_default_route = send_default_route if send_default_route is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_address = self.peer_address
        if _peer_address is not None:
            children['peer-address'] = yang.gdata.Leaf('union', _peer_address)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        _peer_group = self.peer_group
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        _optional_attributes = self.optional_attributes
        if _optional_attributes is not None:
            children['optional-attributes'] = _optional_attributes.to_gdata()
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _local_as = self.local_as
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address=n.get_str('peer-address'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), export_policy=n.get_opt_strs('export-policy'), import_policy=n.get_opt_strs('import-policy'), local_preference=n.get_opt_int('local-preference'), next_hop_self=n.get_opt_bool('next-hop-self'), peer_as=n.get_opt_int('peer-as'), peer_group=n.get_opt_str('peer-group'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication.from_gdata(n.get_opt_cnt('authentication')), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection.from_gdata(n.get_opt_cnt('failure-detection')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop.from_gdata(n.get_opt_cnt('multihop')), optional_attributes=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes.from_gdata(n.get_opt_cnt('optional-attributes')), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi.from_gdata(n.get_opt_list('afi-safi')), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as.from_gdata(n.get_opt_cnt('local-as')), route_flap_damping=n.get_opt_bool('route-flap-damping'), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community.from_gdata(n.get_opt_cnt('send-community')), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route.from_gdata(n.get_opt_cnt('send-default-route')), timers=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers.from_gdata(n.get_opt_cnt('timers')), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options.from_gdata(n.get_opt_cnt('trace-options')), transport=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport.from_gdata(n.get_opt_cnt('transport')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor({repr(self.peer_address)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            leaves.append('{self_name}.next_hop_self = {repr(_next_hop_self)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _peer_group = self.peer_group
        if _peer_group is not None:
            leaves.append('{self_name}.peer_group = {repr(_peer_group)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            res.extend(_failure_detection.prsrc('{self_name}.failure_detection', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _multihop = self.multihop
        if _multihop is not None:
            res.extend(_multihop.prsrc('{self_name}.multihop', False).splitlines())
        _optional_attributes = self.optional_attributes
        if _optional_attributes is not None:
            res.extend(_optional_attributes.prsrc('{self_name}.optional_attributes', False).splitlines())
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/neighbor/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _local_as = self.local_as
        if _local_as is not None:
            res.extend(_local_as.prsrc('{self_name}.local_as', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            leaves.append('{self_name}.route_flap_damping = {repr(_route_flap_damping)}')
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            res.extend(_send_default_route.prsrc('{self_name}.send_default_route', False).splitlines())
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, peer_address, peer_group):
        for e in self.elements:
            match = True
            if e.peer_address != peer_address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['peer-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_peer_address = yang.gdata.from_xml_str(node, 'peer-address')
    yang.gdata.maybe_add(children, 'peer-address', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_address, child_peer_address)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__description, child_description)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__export_policy, child_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__import_policy, child_import_policy)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_preference, child_local_preference)
    child_next_hop_self = yang.gdata.from_xml_opt_bool(node, 'next-hop-self')
    yang.gdata.maybe_add(children, 'next-hop-self', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__next_hop_self, child_next_hop_self)
    child_peer_as = yang.gdata.from_xml_opt_int(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_as, child_peer_as)
    child_peer_group = yang.gdata.from_xml_opt_str(node, 'peer-group')
    yang.gdata.maybe_add(children, 'peer-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_group, child_peer_group)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication, child_authentication)
    child_failure_detection = yang.gdata.from_xml_opt_cnt(node, 'failure-detection')
    yang.gdata.maybe_add(children, 'failure-detection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection, child_failure_detection)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart, child_graceful_restart)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop, child_multihop)
    child_optional_attributes = yang.gdata.from_xml_opt_cnt(node, 'optional-attributes')
    yang.gdata.maybe_add(children, 'optional-attributes', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__optional_attributes, child_optional_attributes)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi, child_afi_safi)
    child_local_as = yang.gdata.from_xml_opt_cnt(node, 'local-as')
    yang.gdata.maybe_add(children, 'local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as, child_local_as)
    child_route_flap_damping = yang.gdata.from_xml_opt_bool(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector, child_route_reflector)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community, child_send_community)
    child_send_default_route = yang.gdata.from_xml_opt_cnt(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route, child_send_default_route)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers, child_timers)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__trace_options, child_trace_options)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport, child_transport)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['peer-address'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp(yang.adata.MNode):
    admin_state: ?str
    autonomous_system: ?int
    export_policy: list[str]
    import_policy: list[str]
    local_preference: ?int
    router_id: ?str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__authentication
    best_path_selection: srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection
    bgp_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label
    convergence: srl_nokia_network_instance__network_instance__protocols__bgp__convergence
    dynamic_neighbors: srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors
    ebgp_default_policy: srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart
    max_ecmp_hash_buckets_per_next_hop_group: ?int
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi
    preference: srl_nokia_network_instance__network_instance__protocols__bgp__preference
    rib_management: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management
    route_advertisement: srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement
    route_flap_damping: srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector
    segment_routing_mpls: srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__send_community
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__transport
    trace_options: srl_nokia_network_instance__network_instance__protocols__bgp__trace_options
    group: srl_nokia_network_instance__network_instance__protocols__bgp__group
    neighbor: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor

    mut def __init__(self, admin_state: ?str, autonomous_system: ?int, export_policy: ?list[str]=None, import_policy: ?list[str]=None, local_preference: ?int, router_id: ?str, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__authentication=None, best_path_selection: ?srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection=None, bgp_label: ?srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label=None, convergence: ?srl_nokia_network_instance__network_instance__protocols__bgp__convergence=None, dynamic_neighbors: ?srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors=None, ebgp_default_policy: ?srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart=None, max_ecmp_hash_buckets_per_next_hop_group: ?int, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]=[], preference: ?srl_nokia_network_instance__network_instance__protocols__bgp__preference=None, rib_management: ?srl_nokia_network_instance__network_instance__protocols__bgp__rib_management=None, route_advertisement: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement=None, route_flap_damping: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping=None, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector=None, segment_routing_mpls: ?srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__send_community=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__transport=None, trace_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__trace_options=None, group: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]=[], neighbor: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.autonomous_system = autonomous_system
        self.export_policy = export_policy if export_policy is not None else []
        self.import_policy = import_policy if import_policy is not None else []
        self.local_preference = local_preference
        self.router_id = router_id
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__authentication()
        self.best_path_selection = best_path_selection if best_path_selection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection()
        self.bgp_label = bgp_label
        self.convergence = convergence if convergence is not None else srl_nokia_network_instance__network_instance__protocols__bgp__convergence()
        self.dynamic_neighbors = dynamic_neighbors if dynamic_neighbors is not None else srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors()
        self.ebgp_default_policy = ebgp_default_policy if ebgp_default_policy is not None else srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()
        self.failure_detection = failure_detection if failure_detection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart()
        self.max_ecmp_hash_buckets_per_next_hop_group = max_ecmp_hash_buckets_per_next_hop_group
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(elements=afi_safi)
        self.preference = preference if preference is not None else srl_nokia_network_instance__network_instance__protocols__bgp__preference()
        self.rib_management = rib_management if rib_management is not None else srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()
        self.route_advertisement = route_advertisement if route_advertisement is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()
        self.route_flap_damping = route_flap_damping if route_flap_damping is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()
        self.segment_routing_mpls = segment_routing_mpls if segment_routing_mpls is not None else srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__send_community()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__bgp__transport()
        self.trace_options = trace_options if trace_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__trace_options()
        self.group = srl_nokia_network_instance__network_instance__protocols__bgp__group(elements=group)
        self.neighbor = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(elements=neighbor)

    mut def create_bgp_label(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label()
        self.bgp_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = yang.gdata.Leaf('uint32', _autonomous_system)
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('union', _router_id)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _best_path_selection = self.best_path_selection
        if _best_path_selection is not None:
            children['best-path-selection'] = _best_path_selection.to_gdata()
        _bgp_label = self.bgp_label
        if _bgp_label is not None:
            children['bgp-label'] = _bgp_label.to_gdata()
        _convergence = self.convergence
        if _convergence is not None:
            children['convergence'] = _convergence.to_gdata()
        _dynamic_neighbors = self.dynamic_neighbors
        if _dynamic_neighbors is not None:
            children['dynamic-neighbors'] = _dynamic_neighbors.to_gdata()
        _ebgp_default_policy = self.ebgp_default_policy
        if _ebgp_default_policy is not None:
            children['ebgp-default-policy'] = _ebgp_default_policy.to_gdata()
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            children['max-ecmp-hash-buckets-per-next-hop-group'] = yang.gdata.Leaf('uint16', _max_ecmp_hash_buckets_per_next_hop_group)
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _preference = self.preference
        if _preference is not None:
            children['preference'] = _preference.to_gdata()
        _rib_management = self.rib_management
        if _rib_management is not None:
            children['rib-management'] = _rib_management.to_gdata()
        _route_advertisement = self.route_advertisement
        if _route_advertisement is not None:
            children['route-advertisement'] = _route_advertisement.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = _route_flap_damping.to_gdata()
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _segment_routing_mpls = self.segment_routing_mpls
        if _segment_routing_mpls is not None:
            children['segment-routing-mpls'] = _segment_routing_mpls.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = _trace_options.to_gdata()
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp(admin_state=n.get_opt_str('admin-state'), autonomous_system=n.get_opt_int('autonomous-system'), export_policy=n.get_opt_strs('export-policy'), import_policy=n.get_opt_strs('import-policy'), local_preference=n.get_opt_int('local-preference'), router_id=n.get_opt_str('router-id'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__authentication.from_gdata(n.get_opt_cnt('authentication')), best_path_selection=srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection.from_gdata(n.get_opt_cnt('best-path-selection')), bgp_label=srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label.from_gdata(n.get_opt_cnt('bgp-label')), convergence=srl_nokia_network_instance__network_instance__protocols__bgp__convergence.from_gdata(n.get_opt_cnt('convergence')), dynamic_neighbors=srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors.from_gdata(n.get_opt_cnt('dynamic-neighbors')), ebgp_default_policy=srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy.from_gdata(n.get_opt_cnt('ebgp-default-policy')), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection.from_gdata(n.get_opt_cnt('failure-detection')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), max_ecmp_hash_buckets_per_next_hop_group=n.get_opt_int('max-ecmp-hash-buckets-per-next-hop-group'), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi.from_gdata(n.get_opt_list('afi-safi')), preference=srl_nokia_network_instance__network_instance__protocols__bgp__preference.from_gdata(n.get_opt_cnt('preference')), rib_management=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management.from_gdata(n.get_opt_cnt('rib-management')), route_advertisement=srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement.from_gdata(n.get_opt_cnt('route-advertisement')), route_flap_damping=srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping.from_gdata(n.get_opt_cnt('route-flap-damping')), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), segment_routing_mpls=srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls.from_gdata(n.get_opt_cnt('segment-routing-mpls')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__send_community.from_gdata(n.get_opt_cnt('send-community')), transport=srl_nokia_network_instance__network_instance__protocols__bgp__transport.from_gdata(n.get_opt_cnt('transport')), trace_options=srl_nokia_network_instance__network_instance__protocols__bgp__trace_options.from_gdata(n.get_opt_cnt('trace-options')), group=srl_nokia_network_instance__network_instance__protocols__bgp__group.from_gdata(n.get_opt_list('group')), neighbor=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor.from_gdata(n.get_opt_list('neighbor')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            leaves.append('{self_name}.autonomous_system = {repr(_autonomous_system)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _best_path_selection = self.best_path_selection
        if _best_path_selection is not None:
            res.extend(_best_path_selection.prsrc('{self_name}.best_path_selection', False).splitlines())
        _bgp_label = self.bgp_label
        if _bgp_label is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/bgp-label')
            res.append('bgp_label = {self_name}.create_bgp_label()')
            res.extend(_bgp_label.prsrc('bgp_label', False).splitlines())
        _convergence = self.convergence
        if _convergence is not None:
            res.extend(_convergence.prsrc('{self_name}.convergence', False).splitlines())
        _dynamic_neighbors = self.dynamic_neighbors
        if _dynamic_neighbors is not None:
            res.extend(_dynamic_neighbors.prsrc('{self_name}.dynamic_neighbors', False).splitlines())
        _ebgp_default_policy = self.ebgp_default_policy
        if _ebgp_default_policy is not None:
            res.extend(_ebgp_default_policy.prsrc('{self_name}.ebgp_default_policy', False).splitlines())
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            res.extend(_failure_detection.prsrc('{self_name}.failure_detection', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _max_ecmp_hash_buckets_per_next_hop_group = self.max_ecmp_hash_buckets_per_next_hop_group
        if _max_ecmp_hash_buckets_per_next_hop_group is not None:
            leaves.append('{self_name}.max_ecmp_hash_buckets_per_next_hop_group = {repr(_max_ecmp_hash_buckets_per_next_hop_group)}')
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _preference = self.preference
        if _preference is not None:
            res.extend(_preference.prsrc('{self_name}.preference', False).splitlines())
        _rib_management = self.rib_management
        if _rib_management is not None:
            res.extend(_rib_management.prsrc('{self_name}.rib_management', False).splitlines())
        _route_advertisement = self.route_advertisement
        if _route_advertisement is not None:
            res.extend(_route_advertisement.prsrc('{self_name}.route_advertisement', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            res.extend(_route_flap_damping.prsrc('{self_name}.route_flap_damping', False).splitlines())
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _segment_routing_mpls = self.segment_routing_mpls
        if _segment_routing_mpls is not None:
            res.extend(_segment_routing_mpls.prsrc('{self_name}.segment_routing_mpls', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        _trace_options = self.trace_options
        if _trace_options is not None:
            res.extend(_trace_options.prsrc('{self_name}.trace_options', False).splitlines())
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/group element: {_element.to_gdata().key_str(['group-name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.group_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/neighbor element: {_element.to_gdata().key_str(['peer-address'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.peer_address)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__admin_state, child_admin_state)
    child_autonomous_system = yang.gdata.from_xml_opt_int(node, 'autonomous-system')
    yang.gdata.maybe_add(children, 'autonomous-system', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__autonomous_system, child_autonomous_system)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__export_policy, child_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__import_policy, child_import_policy)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__local_preference, child_local_preference)
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__router_id, child_router_id)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication, child_authentication)
    child_best_path_selection = yang.gdata.from_xml_opt_cnt(node, 'best-path-selection')
    yang.gdata.maybe_add(children, 'best-path-selection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__best_path_selection, child_best_path_selection)
    child_bgp_label = yang.gdata.from_xml_opt_cnt(node, 'bgp-label')
    yang.gdata.maybe_add(children, 'bgp-label', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__bgp_label, child_bgp_label)
    child_convergence = yang.gdata.from_xml_opt_cnt(node, 'convergence')
    yang.gdata.maybe_add(children, 'convergence', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__convergence, child_convergence)
    child_dynamic_neighbors = yang.gdata.from_xml_opt_cnt(node, 'dynamic-neighbors')
    yang.gdata.maybe_add(children, 'dynamic-neighbors', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__dynamic_neighbors, child_dynamic_neighbors)
    child_ebgp_default_policy = yang.gdata.from_xml_opt_cnt(node, 'ebgp-default-policy')
    yang.gdata.maybe_add(children, 'ebgp-default-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy, child_ebgp_default_policy)
    child_failure_detection = yang.gdata.from_xml_opt_cnt(node, 'failure-detection')
    yang.gdata.maybe_add(children, 'failure-detection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__failure_detection, child_failure_detection)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__graceful_restart, child_graceful_restart)
    child_max_ecmp_hash_buckets_per_next_hop_group = yang.gdata.from_xml_opt_int(node, 'max-ecmp-hash-buckets-per-next-hop-group')
    yang.gdata.maybe_add(children, 'max-ecmp-hash-buckets-per-next-hop-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__max_ecmp_hash_buckets_per_next_hop_group, child_max_ecmp_hash_buckets_per_next_hop_group)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi, child_afi_safi)
    child_preference = yang.gdata.from_xml_opt_cnt(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference, child_preference)
    child_rib_management = yang.gdata.from_xml_opt_cnt(node, 'rib-management')
    yang.gdata.maybe_add(children, 'rib-management', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management, child_rib_management)
    child_route_advertisement = yang.gdata.from_xml_opt_cnt(node, 'route-advertisement')
    yang.gdata.maybe_add(children, 'route-advertisement', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement, child_route_advertisement)
    child_route_flap_damping = yang.gdata.from_xml_opt_cnt(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector, child_route_reflector)
    child_segment_routing_mpls = yang.gdata.from_xml_opt_cnt(node, 'segment-routing-mpls')
    yang.gdata.maybe_add(children, 'segment-routing-mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls, child_segment_routing_mpls)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community, child_send_community)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport, child_transport)
    child_trace_options = yang.gdata.from_xml_opt_cnt(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__trace_options, child_trace_options)
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group, child_group)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor, child_neighbor)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/backup-paths/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/backup-paths/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast__install, child_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast__install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast(yang.adata.MNode):
    install: ?bool

    mut def __init__(self, install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.install = install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _install = self.install
        if _install is not None:
            children['install'] = yang.gdata.Leaf('boolean', _install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast(install=n.get_opt_bool('install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/backup-paths/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast()')
        leaves = []
        _install = self.install
        if _install is not None:
            leaves.append('{self_name}.install = {repr(_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/backup-paths/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_install = yang.gdata.from_xml_opt_bool(node, 'install')
    yang.gdata.maybe_add(children, 'install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast__install, child_install)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths(yang.adata.MNode):
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast

    mut def __init__(self, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths(ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/backup-paths')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths()')
        leaves = []
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/backup-paths'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths__ipv6_unicast, child_ipv6_unicast)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/combined-ecmp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/combined-ecmp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher__rd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(yang.adata.MNode):
    rd: ?str

    mut def __init__(self, rd: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.rd = rd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd = self.rd
        if _rd is not None:
            children['rd'] = yang.gdata.Leaf('union', _rd)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(rd=n.get_opt_str('rd'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()')
        leaves = []
        _rd = self.rd
        if _rd is not None:
            leaves.append('{self_name}.rd = {repr(_rd)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rd = yang.gdata.from_xml_opt_str(node, 'rd')
    yang.gdata.maybe_add(children, 'rd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher__rd, child_rd)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__export_rt(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__import_rt(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(yang.adata.MNode):
    export_rt: ?str
    import_rt: ?str

    mut def __init__(self, export_rt: ?str, import_rt: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.export_rt = export_rt
        self.import_rt = import_rt

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _export_rt = self.export_rt
        if _export_rt is not None:
            children['export-rt'] = yang.gdata.Leaf('union', _export_rt)
        _import_rt = self.import_rt
        if _import_rt is not None:
            children['import-rt'] = yang.gdata.Leaf('union', _import_rt)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(export_rt=n.get_opt_str('export-rt'), import_rt=n.get_opt_str('import-rt'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance/route-target')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()')
        leaves = []
        _export_rt = self.export_rt
        if _export_rt is not None:
            leaves.append('{self_name}.export_rt = {repr(_export_rt)}')
        _import_rt = self.import_rt
        if _import_rt is not None:
            leaves.append('{self_name}.import_rt = {repr(_import_rt)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_export_rt = yang.gdata.from_xml_opt_str(node, 'export-rt')
    yang.gdata.maybe_add(children, 'export-rt', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__export_rt, child_export_rt)
    child_import_rt = yang.gdata.from_xml_opt_str(node, 'import-rt')
    yang.gdata.maybe_add(children, 'import-rt', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__import_rt, child_import_rt)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__export_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__import_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('leafref', val, user_order=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(yang.adata.MNode):
    id: int
    route_distinguisher: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target
    export_policy: list[str]
    import_policy: list[str]

    mut def __init__(self, id: int, route_distinguisher: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target=None, export_policy: ?list[str]=None, import_policy: ?list[str]=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.id = id
        self.route_distinguisher = route_distinguisher if route_distinguisher is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()
        self.route_target = route_target if route_target is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()
        self.export_policy = export_policy if export_policy is not None else []
        self.import_policy = import_policy if import_policy is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint8', _id)
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        children['export-policy'] = yang.gdata.LeafList('leafref', self.export_policy, user_order=True)
        children['import-policy'] = yang.gdata.LeafList('leafref', self.import_policy, user_order=True)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(id=n.get_int('id'), route_distinguisher=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher.from_gdata(n.get_opt_cnt('route-distinguisher')), route_target=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target.from_gdata(n.get_opt_cnt('route-target')), export_policy=n.get_opt_strs('export-policy'), import_policy=n.get_opt_strs('import-policy'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance({repr(self.id)})')
        leaves = []
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            res.extend(_route_distinguisher.prsrc('{self_name}.route_distinguisher', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.extend(_route_target.prsrc('{self_name}.route_target', False).splitlines())
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _import_policy = self.import_policy
        if _import_policy is not None:
            leaves.append('{self_name}.import_policy = {repr(_import_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self._name = 'bgp-instance'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_id = yang.gdata.from_xml_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__id, child_id)
    child_route_distinguisher = yang.gdata.from_xml_opt_cnt(node, 'route-distinguisher')
    yang.gdata.maybe_add(children, 'route-distinguisher', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher, child_route_distinguisher)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target, child_route_target)
    child_export_policy = yang.gdata.from_xml_opt_strs(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__export_policy, child_export_policy)
    child_import_policy = yang.gdata.from_xml_opt_strs(node, 'import-policy')
    yang.gdata.maybe_add(children, 'import-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__import_policy, child_import_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['id'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn(yang.adata.MNode):
    backup_paths: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths
    combined_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp
    bgp_instance: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance

    mut def __init__(self, backup_paths: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths=None, combined_ecmp: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp=None, bgp_instance: list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.backup_paths = backup_paths if backup_paths is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths()
        self.combined_ecmp = combined_ecmp
        self.bgp_instance = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(elements=bgp_instance)

    mut def create_combined_ecmp(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp()
        self.combined_ecmp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            children['backup-paths'] = _backup_paths.to_gdata()
        _combined_ecmp = self.combined_ecmp
        if _combined_ecmp is not None:
            children['combined-ecmp'] = _combined_ecmp.to_gdata()
        _bgp_instance = self.bgp_instance
        if _bgp_instance is not None:
            children['bgp-instance'] = _bgp_instance.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp-vpn', module='srl_nokia-bgp-vpn')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn(backup_paths=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths.from_gdata(n.get_opt_cnt('backup-paths')), combined_ecmp=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp.from_gdata(n.get_opt_cnt('combined-ecmp')), bgp_instance=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance.from_gdata(n.get_opt_list('bgp-instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn()')
        leaves = []
        _backup_paths = self.backup_paths
        if _backup_paths is not None:
            res.extend(_backup_paths.prsrc('{self_name}.backup_paths', False).splitlines())
        _combined_ecmp = self.combined_ecmp
        if _combined_ecmp is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-vpn/combined-ecmp')
            res.append('combined_ecmp = {self_name}.create_combined_ecmp()')
            res.extend(_combined_ecmp.prsrc('combined_ecmp', False).splitlines())
        _bgp_instance = self.bgp_instance
        for _element in _bgp_instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-vpn/bgp-instance element: {_element.to_gdata().key_str(['id'])}")
            list_elem = 'bgp_instance_element = {self_name}.bgp_instance.create({repr(_element.id)})'
            res.append(list_elem)
            res.extend(_element.prsrc('bgp_instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_backup_paths = yang.gdata.from_xml_opt_cnt(node, 'backup-paths')
    yang.gdata.maybe_add(children, 'backup-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__backup_paths, child_backup_paths)
    child_combined_ecmp = yang.gdata.from_xml_opt_cnt(node, 'combined-ecmp')
    yang.gdata.maybe_add(children, 'combined-ecmp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__combined_ecmp, child_combined_ecmp)
    child_bgp_instance = yang.gdata.from_xml_opt_list(node, 'bgp-instance')
    yang.gdata.maybe_add(children, 'bgp-instance', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance, child_bgp_instance)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp-vpn', module='srl_nokia-bgp-vpn')

class srl_nokia_network_instance__network_instance__protocols(yang.adata.MNode):
    bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn
    bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn
    directly_connected: srl_nokia_network_instance__network_instance__protocols__directly_connected
    isis: ?srl_nokia_network_instance__network_instance__protocols__isis
    bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp
    bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn

    mut def __init__(self, bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn=None, directly_connected: ?srl_nokia_network_instance__network_instance__protocols__directly_connected=None, isis: ?srl_nokia_network_instance__network_instance__protocols__isis=None, bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp=None, bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.bgp_evpn = bgp_evpn
        self.bgp_ipvpn = bgp_ipvpn
        self.directly_connected = directly_connected if directly_connected is not None else srl_nokia_network_instance__network_instance__protocols__directly_connected()
        self.isis = isis
        self.bgp = bgp
        self.bgp_vpn = bgp_vpn

    mut def create_bgp_evpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        self.bgp_evpn = res
        return res

    mut def create_bgp_ipvpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        self.bgp_ipvpn = res
        return res

    mut def create_isis(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis()
        self.isis = res
        return res

    mut def create_bgp(self, autonomous_system, router_id):
        res = srl_nokia_network_instance__network_instance__protocols__bgp(autonomous_system, router_id)
        self.bgp = res
        return res

    mut def create_bgp_vpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_vpn()
        self.bgp_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            children['bgp-evpn'] = _bgp_evpn.to_gdata()
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            children['directly-connected'] = _directly_connected.to_gdata()
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            children['bgp-vpn'] = _bgp_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols:
        if n != None:
            return srl_nokia_network_instance__network_instance__protocols(bgp_evpn=srl_nokia_network_instance__network_instance__protocols__bgp_evpn.from_gdata(n.get_opt_cnt('bgp-evpn')), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn.from_gdata(n.get_opt_cnt('bgp-ipvpn')), directly_connected=srl_nokia_network_instance__network_instance__protocols__directly_connected.from_gdata(n.get_opt_cnt('directly-connected')), isis=srl_nokia_network_instance__network_instance__protocols__isis.from_gdata(n.get_opt_cnt('isis')), bgp=srl_nokia_network_instance__network_instance__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), bgp_vpn=srl_nokia_network_instance__network_instance__protocols__bgp_vpn.from_gdata(n.get_opt_cnt('bgp-vpn')))
        return srl_nokia_network_instance__network_instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols()')
        leaves = []
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn')
            res.append('bgp_evpn = {self_name}.create_bgp_evpn()')
            res.extend(_bgp_evpn.prsrc('bgp_evpn', False).splitlines())
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-ipvpn')
            res.append('bgp_ipvpn = {self_name}.create_bgp_ipvpn()')
            res.extend(_bgp_ipvpn.prsrc('bgp_ipvpn', False).splitlines())
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            res.extend(_directly_connected.prsrc('{self_name}.directly_connected', False).splitlines())
        _isis = self.isis
        if _isis is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis')
            res.append('isis = {self_name}.create_isis()')
            res.extend(_isis.prsrc('isis', False).splitlines())
        _bgp = self.bgp
        if _bgp is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp')
            res.append('bgp = {self_name}.create_bgp()')
            res.extend(_bgp.prsrc('bgp', False).splitlines())
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-vpn')
            res.append('bgp_vpn = {self_name}.create_bgp_vpn()')
            res.extend(_bgp_vpn.prsrc('bgp_vpn', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_evpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-evpn')
    yang.gdata.maybe_add(children, 'bgp-evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn, child_bgp_evpn)
    child_bgp_ipvpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-ipvpn')
    yang.gdata.maybe_add(children, 'bgp-ipvpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn, child_bgp_ipvpn)
    child_directly_connected = yang.gdata.from_xml_opt_cnt(node, 'directly-connected')
    yang.gdata.maybe_add(children, 'directly-connected', from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected, child_directly_connected)
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis', 'urn:nokia.com:srlinux:isis:isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_srl_nokia_network_instance__network_instance__protocols__isis, child_isis)
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp', 'urn:nokia.com:srlinux:bgp:bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp, child_bgp)
    child_bgp_vpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-vpn', 'urn:nokia.com:srlinux:bgp:bgp-vpn')
    yang.gdata.maybe_add(children, 'bgp-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn, child_bgp_vpn)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__discard_unknown_src_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__split_horizon_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__maximum_entries(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__warning_threshold_pct(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('int32', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(yang.adata.MNode):
    maximum_entries: ?int
    warning_threshold_pct: ?int

    mut def __init__(self, maximum_entries: ?int, warning_threshold_pct: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.maximum_entries = maximum_entries
        self.warning_threshold_pct = warning_threshold_pct

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            children['maximum-entries'] = yang.gdata.Leaf('int32', _maximum_entries)
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            children['warning-threshold-pct'] = yang.gdata.Leaf('int32', _warning_threshold_pct)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(maximum_entries=n.get_opt_int('maximum-entries'), warning_threshold_pct=n.get_opt_int('warning-threshold-pct'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-limit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()')
        leaves = []
        _maximum_entries = self.maximum_entries
        if _maximum_entries is not None:
            leaves.append('{self_name}.maximum_entries = {repr(_maximum_entries)}')
        _warning_threshold_pct = self.warning_threshold_pct
        if _warning_threshold_pct is not None:
            leaves.append('{self_name}.warning_threshold_pct = {repr(_warning_threshold_pct)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_entries = yang.gdata.from_xml_opt_int(node, 'maximum-entries')
    yang.gdata.maybe_add(children, 'maximum-entries', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__maximum_entries, child_maximum_entries)
    child_warning_threshold_pct = yang.gdata.from_xml_opt_int(node, 'warning-threshold-pct')
    yang.gdata.maybe_add(children, 'warning-threshold-pct', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit__warning_threshold_pct, child_warning_threshold_pct)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-learning/aging')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-learning/aging'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging__admin_state, child_admin_state)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(yang.adata.MNode):
    admin_state: ?str
    aging: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging

    mut def __init__(self, admin_state: ?str, aging: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.admin_state = admin_state
        self.aging = aging if aging is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _aging = self.aging
        if _aging is not None:
            children['aging'] = _aging.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(admin_state=n.get_opt_str('admin-state'), aging=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging.from_gdata(n.get_opt_cnt('aging')))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-learning')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _aging = self.aging
        if _aging is not None:
            res.extend(_aging.prsrc('{self_name}.aging', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-learning'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__admin_state, child_admin_state)
    child_aging = yang.gdata.from_xml_opt_cnt(node, 'aging')
    yang.gdata.maybe_add(children, 'aging', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning__aging, child_aging)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication__action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(yang.adata.MNode):
    action_: ?str

    mut def __init__(self, action_: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.action_ = action_

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _action_ = self.action_
        if _action_ is not None:
            children['action'] = yang.gdata.Leaf('enumeration', _action_)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(action_=n.get_opt_str('action'))
        return srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table/mac-duplication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()')
        leaves = []
        _action_ = self.action_
        if _action_ is not None:
            leaves.append('{self_name}.action_ = {repr(_action_)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table/mac-duplication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_action_ = yang.gdata.from_xml_opt_str(node, 'action')
    yang.gdata.maybe_add(children, 'action', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication__action, child_action_)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__connection_point__bridge_table(yang.adata.MNode):
    discard_unknown_src_mac: ?bool
    split_horizon_group: ?str
    mac_limit: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit
    mac_learning: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning
    mac_duplication: srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication

    mut def __init__(self, discard_unknown_src_mac: ?bool, split_horizon_group: ?str, mac_limit: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit=None, mac_learning: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning=None, mac_duplication: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.discard_unknown_src_mac = discard_unknown_src_mac
        self.split_horizon_group = split_horizon_group
        self.mac_limit = mac_limit if mac_limit is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit()
        self.mac_learning = mac_learning if mac_learning is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning()
        self.mac_duplication = mac_duplication if mac_duplication is not None else srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            children['discard-unknown-src-mac'] = yang.gdata.Leaf('boolean', _discard_unknown_src_mac)
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            children['split-horizon-group'] = yang.gdata.Leaf('leafref', _split_horizon_group)
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            children['mac-limit'] = _mac_limit.to_gdata()
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            children['mac-learning'] = _mac_learning.to_gdata()
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            children['mac-duplication'] = _mac_duplication.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__connection_point__bridge_table:
        if n != None:
            return srl_nokia_network_instance__network_instance__connection_point__bridge_table(discard_unknown_src_mac=n.get_opt_bool('discard-unknown-src-mac'), split_horizon_group=n.get_opt_str('split-horizon-group'), mac_limit=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit.from_gdata(n.get_opt_cnt('mac-limit')), mac_learning=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning.from_gdata(n.get_opt_cnt('mac-learning')), mac_duplication=srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication.from_gdata(n.get_opt_cnt('mac-duplication')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point/bridge-table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point__bridge_table()')
        leaves = []
        _discard_unknown_src_mac = self.discard_unknown_src_mac
        if _discard_unknown_src_mac is not None:
            leaves.append('{self_name}.discard_unknown_src_mac = {repr(_discard_unknown_src_mac)}')
        _split_horizon_group = self.split_horizon_group
        if _split_horizon_group is not None:
            leaves.append('{self_name}.split_horizon_group = {repr(_split_horizon_group)}')
        _mac_limit = self.mac_limit
        if _mac_limit is not None:
            res.extend(_mac_limit.prsrc('{self_name}.mac_limit', False).splitlines())
        _mac_learning = self.mac_learning
        if _mac_learning is not None:
            res.extend(_mac_learning.prsrc('{self_name}.mac_learning', False).splitlines())
        _mac_duplication = self.mac_duplication
        if _mac_duplication is not None:
            res.extend(_mac_duplication.prsrc('{self_name}.mac_duplication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_discard_unknown_src_mac = yang.gdata.from_xml_opt_bool(node, 'discard-unknown-src-mac')
    yang.gdata.maybe_add(children, 'discard-unknown-src-mac', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__discard_unknown_src_mac, child_discard_unknown_src_mac)
    child_split_horizon_group = yang.gdata.from_xml_opt_str(node, 'split-horizon-group')
    yang.gdata.maybe_add(children, 'split-horizon-group', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__split_horizon_group, child_split_horizon_group)
    child_mac_limit = yang.gdata.from_xml_opt_cnt(node, 'mac-limit')
    yang.gdata.maybe_add(children, 'mac-limit', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_limit, child_mac_limit)
    child_mac_learning = yang.gdata.from_xml_opt_cnt(node, 'mac-learning')
    yang.gdata.maybe_add(children, 'mac-learning', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_learning, child_mac_learning)
    child_mac_duplication = yang.gdata.from_xml_opt_cnt(node, 'mac-duplication')
    yang.gdata.maybe_add(children, 'mac-duplication', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table__mac_duplication, child_mac_duplication)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__connection_point_entry(yang.adata.MNode):
    name: str
    bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table

    mut def __init__(self, name: str, bridge_table: ?srl_nokia_network_instance__network_instance__connection_point__bridge_table=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.bridge_table = bridge_table

    mut def create_bridge_table(self):
        res = srl_nokia_network_instance__network_instance__connection_point__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__connection_point_entry:
        return srl_nokia_network_instance__network_instance__connection_point_entry(name=n.get_str('name'), bridge_table=srl_nokia_network_instance__network_instance__connection_point__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/connection-point')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__connection_point({repr(self.name)})')
        leaves = []
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /network-instance/connection-point/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/connection-point'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__connection_point(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__connection_point_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'connection-point'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__connection_point_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__connection_point_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__connection_point_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__connection_point_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__connection_point__name, child_name)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_network_instance__network_instance__connection_point__bridge_table, child_bridge_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__connection_point(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__connection_point_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance_entry(yang.adata.MNode):
    name: str
    type: ?str
    admin_state: ?str
    description: ?str
    router_id: ?str
    mpls_forwarding: srl_nokia_network_instance__network_instance__mpls_forwarding
    ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding
    ip_load_balancing: srl_nokia_network_instance__network_instance__ip_load_balancing
    interface: srl_nokia_network_instance__network_instance__interface
    vxlan_interface: srl_nokia_network_instance__network_instance__vxlan_interface
    protocols: srl_nokia_network_instance__network_instance__protocols
    connection_point: srl_nokia_network_instance__network_instance__connection_point

    mut def __init__(self, name: str, type: ?str, admin_state: ?str, description: ?str, router_id: ?str, mpls_forwarding: ?srl_nokia_network_instance__network_instance__mpls_forwarding=None, ip_forwarding: ?srl_nokia_network_instance__network_instance__ip_forwarding=None, ip_load_balancing: ?srl_nokia_network_instance__network_instance__ip_load_balancing=None, interface: list[srl_nokia_network_instance__network_instance__interface_entry]=[], vxlan_interface: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]=[], protocols: ?srl_nokia_network_instance__network_instance__protocols=None, connection_point: list[srl_nokia_network_instance__network_instance__connection_point_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.type = type
        self.admin_state = admin_state
        self.description = description
        self.router_id = router_id
        self.mpls_forwarding = mpls_forwarding if mpls_forwarding is not None else srl_nokia_network_instance__network_instance__mpls_forwarding()
        self.ip_forwarding = ip_forwarding
        self.ip_load_balancing = ip_load_balancing if ip_load_balancing is not None else srl_nokia_network_instance__network_instance__ip_load_balancing()
        self.interface = srl_nokia_network_instance__network_instance__interface(elements=interface)
        self.vxlan_interface = srl_nokia_network_instance__network_instance__vxlan_interface(elements=vxlan_interface)
        self.protocols = protocols if protocols is not None else srl_nokia_network_instance__network_instance__protocols()
        self.connection_point = srl_nokia_network_instance__network_instance__connection_point(elements=connection_point)

    mut def create_ip_forwarding(self):
        res = srl_nokia_network_instance__network_instance__ip_forwarding()
        self.ip_forwarding = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        _mpls_forwarding = self.mpls_forwarding
        if _mpls_forwarding is not None:
            children['mpls-forwarding'] = _mpls_forwarding.to_gdata()
        _ip_forwarding = self.ip_forwarding
        if _ip_forwarding is not None:
            children['ip-forwarding'] = _ip_forwarding.to_gdata()
        _ip_load_balancing = self.ip_load_balancing
        if _ip_load_balancing is not None:
            children['ip-load-balancing'] = _ip_load_balancing.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        _connection_point = self.connection_point
        if _connection_point is not None:
            children['connection-point'] = _connection_point.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance_entry:
        return srl_nokia_network_instance__network_instance_entry(name=n.get_str('name'), type=n.get_opt_str('type'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), router_id=n.get_opt_str('router-id'), mpls_forwarding=srl_nokia_network_instance__network_instance__mpls_forwarding.from_gdata(n.get_opt_cnt('mpls-forwarding')), ip_forwarding=srl_nokia_network_instance__network_instance__ip_forwarding.from_gdata(n.get_opt_cnt('ip-forwarding')), ip_load_balancing=srl_nokia_network_instance__network_instance__ip_load_balancing.from_gdata(n.get_opt_cnt('ip-load-balancing')), interface=srl_nokia_network_instance__network_instance__interface.from_gdata(n.get_opt_list('interface')), vxlan_interface=srl_nokia_network_instance__network_instance__vxlan_interface.from_gdata(n.get_opt_list('vxlan-interface')), protocols=srl_nokia_network_instance__network_instance__protocols.from_gdata(n.get_opt_cnt('protocols')), connection_point=srl_nokia_network_instance__network_instance__connection_point.from_gdata(n.get_opt_list('connection-point')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance({repr(self.name)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _mpls_forwarding = self.mpls_forwarding
        if _mpls_forwarding is not None:
            res.extend(_mpls_forwarding.prsrc('{self_name}.mpls_forwarding', False).splitlines())
        _ip_forwarding = self.ip_forwarding
        if _ip_forwarding is not None:
            res.append('')
            res.append('# P-container: /network-instance/ip-forwarding')
            res.append('ip_forwarding = {self_name}.create_ip_forwarding()')
            res.extend(_ip_forwarding.prsrc('ip_forwarding', False).splitlines())
        _ip_load_balancing = self.ip_load_balancing
        if _ip_load_balancing is not None:
            res.extend(_ip_load_balancing.prsrc('{self_name}.ip_load_balancing', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _vxlan_interface = self.vxlan_interface
        for _element in _vxlan_interface.elements:
            res.append('')
            res.append("# List /network-instance/vxlan-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'vxlan_interface_element = {self_name}.vxlan_interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vxlan_interface_element', False, list_element=True).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        _connection_point = self.connection_point
        for _element in _connection_point.elements:
            res.append('')
            res.append("# List /network-instance/connection-point element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'connection_point_element = {self_name}.connection_point.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('connection_point_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'network-instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__name, child_name)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_network_instance__network_instance__type, child_type)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__description, child_description)
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_srl_nokia_network_instance__network_instance__router_id, child_router_id)
    child_mpls_forwarding = yang.gdata.from_xml_opt_cnt(node, 'mpls-forwarding')
    yang.gdata.maybe_add(children, 'mpls-forwarding', from_xml_srl_nokia_network_instance__network_instance__mpls_forwarding, child_mpls_forwarding)
    child_ip_forwarding = yang.gdata.from_xml_opt_cnt(node, 'ip-forwarding')
    yang.gdata.maybe_add(children, 'ip-forwarding', from_xml_srl_nokia_network_instance__network_instance__ip_forwarding, child_ip_forwarding)
    child_ip_load_balancing = yang.gdata.from_xml_opt_cnt(node, 'ip-load-balancing')
    yang.gdata.maybe_add(children, 'ip-load-balancing', from_xml_srl_nokia_network_instance__network_instance__ip_load_balancing, child_ip_load_balancing)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface, child_interface)
    child_vxlan_interface = yang.gdata.from_xml_opt_list(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface, child_vxlan_interface)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_srl_nokia_network_instance__network_instance__protocols, child_protocols)
    child_connection_point = yang.gdata.from_xml_opt_list(node, 'connection-point')
    yang.gdata.maybe_add(children, 'connection-point', from_xml_srl_nokia_network_instance__network_instance__connection_point, child_connection_point)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('identityref', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress__vni(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(yang.adata.MNode):
    vni: ?int

    mut def __init__(self, vni: ?int):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.vni = vni

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vni = self.vni
        if _vni is not None:
            children['vni'] = yang.gdata.Leaf('uint32', _vni)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(vni=n.get_opt_int('vni'))
        raise ValueError('Missing required subtree srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/ingress')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress()')
        leaves = []
        _vni = self.vni
        if _vni is not None:
            leaves.append('{self_name}.vni = {repr(_vni)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/ingress'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vni = yang.gdata.from_xml_opt_int(node, 'vni')
    yang.gdata.maybe_add(children, 'vni', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress__vni, child_vni)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__source_ip(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header__source_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header(yang.adata.MNode):
    source_mac: ?str

    mut def __init__(self, source_mac: ?str):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.source_mac = source_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_mac = self.source_mac
        if _source_mac is not None:
            children['source-mac'] = yang.gdata.Leaf('union', _source_mac)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header(source_mac=n.get_opt_str('source-mac'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress/inner-ethernet-header')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header()')
        leaves = []
        _source_mac = self.source_mac
        if _source_mac is not None:
            leaves.append('{self_name}.source_mac = {repr(_source_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress/inner-ethernet-header'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_source_mac = yang.gdata.from_xml_opt_str(node, 'source-mac')
    yang.gdata.maybe_add(children, 'source-mac', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header__source_mac, child_source_mac)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__esi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__vni(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header__destination_mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header(yang.adata.MNode):
    destination_mac: ?str

    mut def __init__(self, destination_mac: ?str):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.destination_mac = destination_mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _destination_mac = self.destination_mac
        if _destination_mac is not None:
            children['destination-mac'] = yang.gdata.Leaf('string', _destination_mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header(destination_mac=n.get_opt_str('destination-mac'))
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress/destination-groups/group/destination/inner-ethernet-header')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header()')
        leaves = []
        _destination_mac = self.destination_mac
        if _destination_mac is not None:
            leaves.append('{self_name}.destination_mac = {repr(_destination_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress/destination-groups/group/destination/inner-ethernet-header'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_destination_mac = yang.gdata.from_xml_opt_str(node, 'destination-mac')
    yang.gdata.maybe_add(children, 'destination-mac', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header__destination_mac, child_destination_mac)
    return yang.gdata.Container(children)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry(yang.adata.MNode):
    index: int
    admin_state: ?str
    vni: ?int
    inner_ethernet_header: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header

    mut def __init__(self, index: int, admin_state: ?str, vni: ?int, inner_ethernet_header: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header=None):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.index = index
        self.admin_state = admin_state
        self.vni = vni
        self.inner_ethernet_header = inner_ethernet_header if inner_ethernet_header is not None else srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint16', _index)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _vni = self.vni
        if _vni is not None:
            children['vni'] = yang.gdata.Leaf('uint32', _vni)
        _inner_ethernet_header = self.inner_ethernet_header
        if _inner_ethernet_header is not None:
            children['inner-ethernet-header'] = _inner_ethernet_header.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry(index=n.get_int('index'), admin_state=n.get_opt_str('admin-state'), vni=n.get_opt_int('vni'), inner_ethernet_header=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header.from_gdata(n.get_opt_cnt('inner-ethernet-header')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress/destination-groups/group/destination')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination({repr(self.index)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _vni = self.vni
        if _vni is not None:
            leaves.append('{self_name}.vni = {repr(_vni)}')
        _inner_ethernet_header = self.inner_ethernet_header
        if _inner_ethernet_header is not None:
            res.extend(_inner_ethernet_header.prsrc('{self_name}.inner_ethernet_header', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress/destination-groups/group/destination'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'destination'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__index, child_index)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__admin_state, child_admin_state)
    child_vni = yang.gdata.from_xml_opt_int(node, 'vni')
    yang.gdata.maybe_add(children, 'vni', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__vni, child_vni)
    child_inner_ethernet_header = yang.gdata.from_xml_opt_cnt(node, 'inner-ethernet-header')
    yang.gdata.maybe_add(children, 'inner-ethernet-header', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination__inner_ethernet_header, child_inner_ethernet_header)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry(yang.adata.MNode):
    name: str
    admin_state: ?str
    esi: ?str
    destination: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination

    mut def __init__(self, name: str, admin_state: ?str, esi: ?str, destination: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.name = name
        self.admin_state = admin_state
        self.esi = esi
        self.destination = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination(elements=destination)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _esi = self.esi
        if _esi is not None:
            children['esi'] = yang.gdata.Leaf('string', _esi)
        _destination = self.destination
        if _destination is not None:
            children['destination'] = _destination.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry(name=n.get_str('name'), admin_state=n.get_opt_str('admin-state'), esi=n.get_opt_str('esi'), destination=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination.from_gdata(n.get_opt_list('destination')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress/destination-groups/group')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group({repr(self.name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _esi = self.esi
        if _esi is not None:
            leaves.append('{self_name}.esi = {repr(_esi)}')
        _destination = self.destination
        for _element in _destination.elements:
            res.append('')
            res.append("# List /tunnel-interface/vxlan-interface/egress/destination-groups/group/destination element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'destination_element = {self_name}.destination.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('destination_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress/destination-groups/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__name, child_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__admin_state, child_admin_state)
    child_esi = yang.gdata.from_xml_opt_str(node, 'esi')
    yang.gdata.maybe_add(children, 'esi', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__esi, child_esi)
    child_destination = yang.gdata.from_xml_opt_list(node, 'destination')
    yang.gdata.maybe_add(children, 'destination', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group__destination, child_destination)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups(yang.adata.MNode):
    group: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group

    mut def __init__(self, group: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.group = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups(group=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group.from_gdata(n.get_opt_list('group')))
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress/destination-groups')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups()')
        leaves = []
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /tunnel-interface/vxlan-interface/egress/destination-groups/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress/destination-groups'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups__group, child_group)
    return yang.gdata.Container(children)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress(yang.adata.MNode):
    source_ip: ?str
    inner_ethernet_header: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header
    destination_groups: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups

    mut def __init__(self, source_ip: ?str, inner_ethernet_header: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header=None, destination_groups: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups=None):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.source_ip = source_ip
        self.inner_ethernet_header = inner_ethernet_header
        self.destination_groups = destination_groups if destination_groups is not None else srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups()

    mut def create_inner_ethernet_header(self):
        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header()
        self.inner_ethernet_header = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _source_ip = self.source_ip
        if _source_ip is not None:
            children['source-ip'] = yang.gdata.Leaf('union', _source_ip)
        _inner_ethernet_header = self.inner_ethernet_header
        if _inner_ethernet_header is not None:
            children['inner-ethernet-header'] = _inner_ethernet_header.to_gdata()
        _destination_groups = self.destination_groups
        if _destination_groups is not None:
            children['destination-groups'] = _destination_groups.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress(source_ip=n.get_opt_str('source-ip'), inner_ethernet_header=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header.from_gdata(n.get_opt_cnt('inner-ethernet-header')), destination_groups=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups.from_gdata(n.get_opt_cnt('destination-groups')))
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/egress')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress()')
        leaves = []
        _source_ip = self.source_ip
        if _source_ip is not None:
            leaves.append('{self_name}.source_ip = {repr(_source_ip)}')
        _inner_ethernet_header = self.inner_ethernet_header
        if _inner_ethernet_header is not None:
            res.append('')
            res.append('# P-container: /tunnel-interface/vxlan-interface/egress/inner-ethernet-header')
            res.append('inner_ethernet_header = {self_name}.create_inner_ethernet_header()')
            res.extend(_inner_ethernet_header.prsrc('inner_ethernet_header', False).splitlines())
        _destination_groups = self.destination_groups
        if _destination_groups is not None:
            res.extend(_destination_groups.prsrc('{self_name}.destination_groups', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/egress'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_source_ip = yang.gdata.from_xml_opt_str(node, 'source-ip')
    yang.gdata.maybe_add(children, 'source-ip', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__source_ip, child_source_ip)
    child_inner_ethernet_header = yang.gdata.from_xml_opt_cnt(node, 'inner-ethernet-header')
    yang.gdata.maybe_add(children, 'inner-ethernet-header', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__inner_ethernet_header, child_inner_ethernet_header)
    child_destination_groups = yang.gdata.from_xml_opt_cnt(node, 'destination-groups')
    yang.gdata.maybe_add(children, 'destination-groups', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress__destination_groups, child_destination_groups)
    return yang.gdata.Container(children)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table:
        if n != None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/bridge-table')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/bridge-table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(yang.adata.MNode):
    index: int
    type: ?str
    ingress: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress
    egress: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress
    bridge_table: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table

    mut def __init__(self, index: int, type: ?str, ingress: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress=None, egress: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress=None, bridge_table: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table=None):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.index = index
        self.type = type
        self.ingress = ingress if ingress is not None else srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress()
        self.egress = egress if egress is not None else srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress()
        self.bridge_table = bridge_table

    mut def create_bridge_table(self):
        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table()
        self.bridge_table = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _ingress = self.ingress
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        _egress = self.egress
        if _egress is not None:
            children['egress'] = _egress.to_gdata()
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            children['bridge-table'] = _bridge_table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(index=n.get_int('index'), type=n.get_opt_str('type'), ingress=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress.from_gdata(n.get_opt_cnt('ingress')), egress=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress.from_gdata(n.get_opt_cnt('egress')), bridge_table=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table.from_gdata(n.get_opt_cnt('bridge-table')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface({repr(self.index)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _ingress = self.ingress
        if _ingress is not None:
            res.extend(_ingress.prsrc('{self_name}.ingress', False).splitlines())
        _egress = self.egress
        if _egress is not None:
            res.extend(_egress.prsrc('{self_name}.egress', False).splitlines())
        _bridge_table = self.bridge_table
        if _bridge_table is not None:
            res.append('')
            res.append('# P-container: /tunnel-interface/vxlan-interface/bridge-table')
            res.append('bridge_table = {self_name}.create_bridge_table()')
            res.extend(_bridge_table.prsrc('bridge_table', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, index, type):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(index, type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__index, child_index)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__type, child_type)
    child_ingress = yang.gdata.from_xml_opt_cnt(node, 'ingress')
    yang.gdata.maybe_add(children, 'ingress', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress, child_ingress)
    child_egress = yang.gdata.from_xml_opt_cnt(node, 'egress')
    yang.gdata.maybe_add(children, 'egress', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__egress, child_egress)
    child_bridge_table = yang.gdata.from_xml_opt_cnt(node, 'bridge-table')
    yang.gdata.maybe_add(children, 'bridge-table', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__bridge_table, child_bridge_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

class srl_nokia_tunnel_interfaces__tunnel_interface_entry(yang.adata.MNode):
    name: str
    vxlan_interface: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface

    mut def __init__(self, name: str, vxlan_interface: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.name = name
        self.vxlan_interface = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(elements=vxlan_interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface_entry(name=n.get_str('name'), vxlan_interface=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface.from_gdata(n.get_opt_list('vxlan-interface')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface({repr(self.name)})')
        leaves = []
        _vxlan_interface = self.vxlan_interface
        for _element in _vxlan_interface.elements:
            res.append('')
            res.append("# List /tunnel-interface/vxlan-interface element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'vxlan_interface_element = {self_name}.vxlan_interface.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vxlan_interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'tunnel-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:vxlan:tunnel-interfaces', module='srl_nokia-tunnel-interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__name, child_name)
    child_vxlan_interface = yang.gdata.from_xml_opt_list(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface, child_vxlan_interface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:vxlan:tunnel-interfaces', module='srl_nokia-tunnel-interfaces')

class root(yang.adata.MNode):
    tunnel: srl_nokia_tunnel__tunnel
    system: srl_nokia_system__system
    platform: srl_nokia_platform__platform
    interface: srl_nokia_interfaces__interface
    network_instance: srl_nokia_network_instance__network_instance
    tunnel_interface: srl_nokia_tunnel_interfaces__tunnel_interface

    mut def __init__(self, tunnel: ?srl_nokia_tunnel__tunnel=None, system: ?srl_nokia_system__system=None, platform: ?srl_nokia_platform__platform=None, interface: list[srl_nokia_interfaces__interface_entry]=[], network_instance: list[srl_nokia_network_instance__network_instance_entry]=[], tunnel_interface: list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]=[]):
        self._ns = ''
        self.tunnel = tunnel if tunnel is not None else srl_nokia_tunnel__tunnel()
        self.system = system if system is not None else srl_nokia_system__system()
        self.platform = platform if platform is not None else srl_nokia_platform__platform()
        self.interface = srl_nokia_interfaces__interface(elements=interface)
        self.network_instance = srl_nokia_network_instance__network_instance(elements=network_instance)
        self.tunnel_interface = srl_nokia_tunnel_interfaces__tunnel_interface(elements=tunnel_interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _platform = self.platform
        if _platform is not None:
            children['platform'] = _platform.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _network_instance = self.network_instance
        if _network_instance is not None:
            children['network-instance'] = _network_instance.to_gdata()
        _tunnel_interface = self.tunnel_interface
        if _tunnel_interface is not None:
            children['tunnel-interface'] = _tunnel_interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(tunnel=srl_nokia_tunnel__tunnel.from_gdata(n.get_opt_cnt('tunnel')), system=srl_nokia_system__system.from_gdata(n.get_opt_cnt('system')), platform=srl_nokia_platform__platform.from_gdata(n.get_opt_cnt('platform')), interface=srl_nokia_interfaces__interface.from_gdata(n.get_opt_list('interface')), network_instance=srl_nokia_network_instance__network_instance.from_gdata(n.get_opt_list('network-instance')), tunnel_interface=srl_nokia_tunnel_interfaces__tunnel_interface.from_gdata(n.get_opt_list('tunnel-interface')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _tunnel = self.tunnel
        if _tunnel is not None:
            res.extend(_tunnel.prsrc('{self_name}.tunnel', False).splitlines())
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _platform = self.platform
        if _platform is not None:
            res.extend(_platform.prsrc('{self_name}.platform', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _network_instance = self.network_instance
        for _element in _network_instance.elements:
            res.append('')
            res.append("# List /network-instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'network_instance_element = {self_name}.network_instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('network_instance_element', False, list_element=True).splitlines())
        _tunnel_interface = self.tunnel_interface
        for _element in _tunnel_interface.elements:
            res.append('')
            res.append("# List /tunnel-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'tunnel_interface_element = {self_name}.tunnel_interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('tunnel_interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel = yang.gdata.from_xml_opt_cnt(node, 'tunnel', 'urn:nokia.com:srlinux:vxlan:tunnel')
    yang.gdata.maybe_add(children, 'tunnel', from_xml_srl_nokia_tunnel__tunnel, child_tunnel)
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system', 'urn:nokia.com:srlinux:general:system')
    yang.gdata.maybe_add(children, 'system', from_xml_srl_nokia_system__system, child_system)
    child_platform = yang.gdata.from_xml_opt_cnt(node, 'platform', 'urn:nokia.com:srlinux:chassis:platform')
    yang.gdata.maybe_add(children, 'platform', from_xml_srl_nokia_platform__platform, child_platform)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface', 'urn:nokia.com:srlinux:chassis:interfaces')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface, child_interface)
    child_network_instance = yang.gdata.from_xml_opt_list(node, 'network-instance', 'urn:nokia.com:srlinux:net-inst:network-instance')
    yang.gdata.maybe_add(children, 'network-instance', from_xml_srl_nokia_network_instance__network_instance, child_network_instance)
    child_tunnel_interface = yang.gdata.from_xml_opt_list(node, 'tunnel-interface', 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces')
    yang.gdata.maybe_add(children, 'tunnel-interface', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface, child_tunnel_interface)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'urn:nokia.com:srlinux:bgp:bgp',
    'urn:nokia.com:srlinux:bgp:bgp-vpn',
    'urn:nokia.com:srlinux:chassis:interfaces',
    'urn:nokia.com:srlinux:chassis:platform',
    'urn:nokia.com:srlinux:chassis:system-name',
    'urn:nokia.com:srlinux:general:system',
    'urn:nokia.com:srlinux:general:system-protocols',
    'urn:nokia.com:srlinux:isis:isis',
    'urn:nokia.com:srlinux:net-inst:bgp-evpn',
    'urn:nokia.com:srlinux:net-inst:network-instance',
    'urn:nokia.com:srlinux:vxlan:tunnel',
    'urn:nokia.com:srlinux:vxlan:tunnel-interfaces',
}
