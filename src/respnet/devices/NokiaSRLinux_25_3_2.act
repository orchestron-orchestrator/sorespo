import base64
import json
import xml
import yang.adata
import yang.gdata

# == This file is generated ==


mut def from_xml_srl_nokia_system__system__trace_options(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_system__system__management(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__management:
        if n != None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/management')
            res.append('{self_name} = srl_nokia_system__system__management()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__output(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/output')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__output()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/output'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__output(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__input(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/input')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__input()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/input'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__input(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic(yang.adata.MNode):
    output: srl_nokia_system__system__control_plane_traffic__output
    input: srl_nokia_system__system__control_plane_traffic__input

    mut def __init__(self, output: ?srl_nokia_system__system__control_plane_traffic__output=None, input: ?srl_nokia_system__system__control_plane_traffic__input=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.output = output if output is not None else srl_nokia_system__system__control_plane_traffic__output()
        self.input = input if input is not None else srl_nokia_system__system__control_plane_traffic__input()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _output = self.output
        if _output is not None:
            children['output'] = _output.to_gdata()
        _input = self.input
        if _input is not None:
            children['input'] = _input.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n != None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_gdata(n.get_opt_cnt('output')), input=srl_nokia_system__system__control_plane_traffic__input.from_gdata(n.get_opt_cnt('input')))
        return srl_nokia_system__system__control_plane_traffic()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic()')
        leaves = []
        _output = self.output
        if _output is not None:
            res.extend(_output.prsrc('{self_name}.output', False).splitlines())
        _input = self.input
        if _input is not None:
            res.extend(_input.prsrc('{self_name}.input', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_output = yang.gdata.from_xml_opt_cnt(node, 'output')
    yang.gdata.maybe_add(children, 'output', from_xml_srl_nokia_system__system__control_plane_traffic__output, child_output)
    child_input = yang.gdata.from_xml_opt_cnt(node, 'input')
    yang.gdata.maybe_add(children, 'input', from_xml_srl_nokia_system__system__control_plane_traffic__input, child_input)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__name__domain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_system__system__name__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_system__system__name(yang.adata.MNode):
    domain_name: ?str
    host_name: ?str

    mut def __init__(self, domain_name: ?str, host_name: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:system-name'
        self.domain_name = domain_name
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _domain_name = self.domain_name
        if _domain_name is not None:
            children['domain-name'] = yang.gdata.Leaf('string', _domain_name)
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__name:
        if n != None:
            return srl_nokia_system__system__name(domain_name=n.get_opt_str('domain-name'), host_name=n.get_opt_str('host-name'))
        return srl_nokia_system__system__name()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/name')
            res.append('{self_name} = srl_nokia_system__system__name()')
        leaves = []
        _domain_name = self.domain_name
        if _domain_name is not None:
            leaves.append('{self_name}.domain_name = {repr(_domain_name)}')
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/name'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__name(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_domain_name = yang.gdata.from_xml_opt_str(node, 'domain-name')
    yang.gdata.maybe_add(children, 'domain-name', from_xml_srl_nokia_system__system__name__domain_name, child_domain_name)
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_srl_nokia_system__system__name__host_name, child_host_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__hash_seed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__destination_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__destination_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__ipv6_flow_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__protocol(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__source_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__source_port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__vlan(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_options__mpls_label_stack(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_system__system__load_balancing__hash_options(yang.adata.MNode):
    hash_seed: ?value
    destination_address: ?bool
    destination_port: ?bool
    ipv6_flow_label: ?bool
    protocol_: ?bool
    source_address: ?bool
    source_port: ?bool
    vlan: ?bool
    mpls_label_stack: ?bool

    mut def __init__(self, hash_seed: ?value, destination_address: ?bool, destination_port: ?bool, ipv6_flow_label: ?bool, protocol_: ?bool, source_address: ?bool, source_port: ?bool, vlan: ?bool, mpls_label_stack: ?bool):
        self._ns = 'urn:nokia.com:srlinux:linux:load-balancing'
        self.hash_seed = hash_seed
        self.destination_address = destination_address
        self.destination_port = destination_port
        self.ipv6_flow_label = ipv6_flow_label
        self.protocol_ = protocol_
        self.source_address = source_address
        self.source_port = source_port
        self.vlan = vlan
        self.mpls_label_stack = mpls_label_stack

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hash_seed = self.hash_seed
        if _hash_seed is not None:
            children['hash-seed'] = yang.gdata.Leaf('union', _hash_seed)
        _destination_address = self.destination_address
        if _destination_address is not None:
            children['destination-address'] = yang.gdata.Leaf('boolean', _destination_address)
        _destination_port = self.destination_port
        if _destination_port is not None:
            children['destination-port'] = yang.gdata.Leaf('boolean', _destination_port)
        _ipv6_flow_label = self.ipv6_flow_label
        if _ipv6_flow_label is not None:
            children['ipv6-flow-label'] = yang.gdata.Leaf('boolean', _ipv6_flow_label)
        _protocol_ = self.protocol_
        if _protocol_ is not None:
            children['protocol'] = yang.gdata.Leaf('boolean', _protocol_)
        _source_address = self.source_address
        if _source_address is not None:
            children['source-address'] = yang.gdata.Leaf('boolean', _source_address)
        _source_port = self.source_port
        if _source_port is not None:
            children['source-port'] = yang.gdata.Leaf('boolean', _source_port)
        _vlan = self.vlan
        if _vlan is not None:
            children['vlan'] = yang.gdata.Leaf('boolean', _vlan)
        _mpls_label_stack = self.mpls_label_stack
        if _mpls_label_stack is not None:
            children['mpls-label-stack'] = yang.gdata.Leaf('boolean', _mpls_label_stack)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__load_balancing__hash_options:
        if n != None:
            return srl_nokia_system__system__load_balancing__hash_options(hash_seed=n.get_opt_value('hash-seed'), destination_address=n.get_opt_bool('destination-address'), destination_port=n.get_opt_bool('destination-port'), ipv6_flow_label=n.get_opt_bool('ipv6-flow-label'), protocol_=n.get_opt_bool('protocol'), source_address=n.get_opt_bool('source-address'), source_port=n.get_opt_bool('source-port'), vlan=n.get_opt_bool('vlan'), mpls_label_stack=n.get_opt_bool('mpls-label-stack'))
        return srl_nokia_system__system__load_balancing__hash_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/load-balancing/hash-options')
            res.append('{self_name} = srl_nokia_system__system__load_balancing__hash_options()')
        leaves = []
        _hash_seed = self.hash_seed
        if _hash_seed is not None:
            leaves.append('{self_name}.hash_seed = {repr(_hash_seed)}')
        _destination_address = self.destination_address
        if _destination_address is not None:
            leaves.append('{self_name}.destination_address = {repr(_destination_address)}')
        _destination_port = self.destination_port
        if _destination_port is not None:
            leaves.append('{self_name}.destination_port = {repr(_destination_port)}')
        _ipv6_flow_label = self.ipv6_flow_label
        if _ipv6_flow_label is not None:
            leaves.append('{self_name}.ipv6_flow_label = {repr(_ipv6_flow_label)}')
        _protocol_ = self.protocol_
        if _protocol_ is not None:
            leaves.append('{self_name}.protocol_ = {repr(_protocol_)}')
        _source_address = self.source_address
        if _source_address is not None:
            leaves.append('{self_name}.source_address = {repr(_source_address)}')
        _source_port = self.source_port
        if _source_port is not None:
            leaves.append('{self_name}.source_port = {repr(_source_port)}')
        _vlan = self.vlan
        if _vlan is not None:
            leaves.append('{self_name}.vlan = {repr(_vlan)}')
        _mpls_label_stack = self.mpls_label_stack
        if _mpls_label_stack is not None:
            leaves.append('{self_name}.mpls_label_stack = {repr(_mpls_label_stack)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/load-balancing/hash-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__load_balancing__hash_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hash_seed = yang.gdata.from_xml_opt_value(node, 'hash-seed')
    yang.gdata.maybe_add(children, 'hash-seed', from_xml_srl_nokia_system__system__load_balancing__hash_options__hash_seed, child_hash_seed)
    child_destination_address = yang.gdata.from_xml_opt_bool(node, 'destination-address')
    yang.gdata.maybe_add(children, 'destination-address', from_xml_srl_nokia_system__system__load_balancing__hash_options__destination_address, child_destination_address)
    child_destination_port = yang.gdata.from_xml_opt_bool(node, 'destination-port')
    yang.gdata.maybe_add(children, 'destination-port', from_xml_srl_nokia_system__system__load_balancing__hash_options__destination_port, child_destination_port)
    child_ipv6_flow_label = yang.gdata.from_xml_opt_bool(node, 'ipv6-flow-label')
    yang.gdata.maybe_add(children, 'ipv6-flow-label', from_xml_srl_nokia_system__system__load_balancing__hash_options__ipv6_flow_label, child_ipv6_flow_label)
    child_protocol_ = yang.gdata.from_xml_opt_bool(node, 'protocol')
    yang.gdata.maybe_add(children, 'protocol', from_xml_srl_nokia_system__system__load_balancing__hash_options__protocol, child_protocol_)
    child_source_address = yang.gdata.from_xml_opt_bool(node, 'source-address')
    yang.gdata.maybe_add(children, 'source-address', from_xml_srl_nokia_system__system__load_balancing__hash_options__source_address, child_source_address)
    child_source_port = yang.gdata.from_xml_opt_bool(node, 'source-port')
    yang.gdata.maybe_add(children, 'source-port', from_xml_srl_nokia_system__system__load_balancing__hash_options__source_port, child_source_port)
    child_vlan = yang.gdata.from_xml_opt_bool(node, 'vlan')
    yang.gdata.maybe_add(children, 'vlan', from_xml_srl_nokia_system__system__load_balancing__hash_options__vlan, child_vlan)
    child_mpls_label_stack = yang.gdata.from_xml_opt_bool(node, 'mpls-label-stack')
    yang.gdata.maybe_add(children, 'mpls-label-stack', from_xml_srl_nokia_system__system__load_balancing__hash_options__mpls_label_stack, child_mpls_label_stack)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_profile__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_profile__hash_seed(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_system__system__load_balancing__hash_profile_entry(yang.adata.MNode):
    name: str
    hash_seed: ?int

    mut def __init__(self, name: str, hash_seed: ?int):
        self._ns = 'urn:nokia.com:srlinux:linux:load-balancing'
        self.name = name
        self.hash_seed = hash_seed

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _hash_seed = self.hash_seed
        if _hash_seed is not None:
            children['hash-seed'] = yang.gdata.Leaf('uint16', _hash_seed)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_system__system__load_balancing__hash_profile_entry:
        return srl_nokia_system__system__load_balancing__hash_profile_entry(name=n.get_str('name'), hash_seed=n.get_opt_int('hash-seed'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/load-balancing/hash-profile')
            res.append('{self_name} = srl_nokia_system__system__load_balancing__hash_profile({repr(self.name)})')
        leaves = []
        _hash_seed = self.hash_seed
        if _hash_seed is not None:
            leaves.append('{self_name}.hash_seed = {repr(_hash_seed)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/load-balancing/hash-profile'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_system__system__load_balancing__hash_profile(yang.adata.MNode):
    elements: list[srl_nokia_system__system__load_balancing__hash_profile_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:linux:load-balancing'
        self._name = 'hash-profile'
        self.elements = elements

    mut def create(self, name, hash_seed):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_system__system__load_balancing__hash_profile_entry(name, hash_seed)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_system__system__load_balancing__hash_profile_entry]:
        if n is not None:
            return [srl_nokia_system__system__load_balancing__hash_profile_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_system__system__load_balancing__hash_profile_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_system__system__load_balancing__hash_profile__name, child_name)
    child_hash_seed = yang.gdata.from_xml_opt_int(node, 'hash-seed')
    yang.gdata.maybe_add(children, 'hash-seed', from_xml_srl_nokia_system__system__load_balancing__hash_profile__hash_seed, child_hash_seed)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__load_balancing__hash_profile(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_system__system__load_balancing__hash_profile_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_system__system__load_balancing__lsr_profile(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_system__system__load_balancing(yang.adata.MNode):
    hash_options: srl_nokia_system__system__load_balancing__hash_options
    hash_profile: srl_nokia_system__system__load_balancing__hash_profile
    lsr_profile: ?str

    mut def __init__(self, hash_options: ?srl_nokia_system__system__load_balancing__hash_options=None, hash_profile: list[srl_nokia_system__system__load_balancing__hash_profile_entry]=[], lsr_profile: ?str):
        self._ns = 'urn:nokia.com:srlinux:linux:load-balancing'
        self.hash_options = hash_options if hash_options is not None else srl_nokia_system__system__load_balancing__hash_options()
        self.hash_profile = srl_nokia_system__system__load_balancing__hash_profile(elements=hash_profile)
        self.lsr_profile = lsr_profile

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hash_options = self.hash_options
        if _hash_options is not None:
            children['hash-options'] = _hash_options.to_gdata()
        _hash_profile = self.hash_profile
        if _hash_profile is not None:
            children['hash-profile'] = _hash_profile.to_gdata()
        _lsr_profile = self.lsr_profile
        if _lsr_profile is not None:
            children['lsr-profile'] = yang.gdata.Leaf('enumeration', _lsr_profile)
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:linux:load-balancing', module='srl_nokia-load-balancing')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__load_balancing:
        if n != None:
            return srl_nokia_system__system__load_balancing(hash_options=srl_nokia_system__system__load_balancing__hash_options.from_gdata(n.get_opt_cnt('hash-options')), hash_profile=srl_nokia_system__system__load_balancing__hash_profile.from_gdata(n.get_opt_list('hash-profile')), lsr_profile=n.get_opt_str('lsr-profile'))
        return srl_nokia_system__system__load_balancing()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/load-balancing')
            res.append('{self_name} = srl_nokia_system__system__load_balancing()')
        leaves = []
        _hash_options = self.hash_options
        if _hash_options is not None:
            res.extend(_hash_options.prsrc('{self_name}.hash_options', False).splitlines())
        _hash_profile = self.hash_profile
        for _element in _hash_profile.elements:
            res.append('')
            res.append("# List /system/load-balancing/hash-profile element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'hash_profile_element = {self_name}.hash_profile.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('hash_profile_element', False, list_element=True).splitlines())
        _lsr_profile = self.lsr_profile
        if _lsr_profile is not None:
            leaves.append('{self_name}.lsr_profile = {repr(_lsr_profile)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/load-balancing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__load_balancing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hash_options = yang.gdata.from_xml_opt_cnt(node, 'hash-options')
    yang.gdata.maybe_add(children, 'hash-options', from_xml_srl_nokia_system__system__load_balancing__hash_options, child_hash_options)
    child_hash_profile = yang.gdata.from_xml_opt_list(node, 'hash-profile')
    yang.gdata.maybe_add(children, 'hash-profile', from_xml_srl_nokia_system__system__load_balancing__hash_profile, child_hash_profile)
    child_lsr_profile = yang.gdata.from_xml_opt_str(node, 'lsr-profile')
    yang.gdata.maybe_add(children, 'lsr-profile', from_xml_srl_nokia_system__system__load_balancing__lsr_profile, child_lsr_profile)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:linux:load-balancing', module='srl_nokia-load-balancing')

class srl_nokia_system__system(yang.adata.MNode):
    trace_options: list[str]
    management: srl_nokia_system__system__management
    control_plane_traffic: srl_nokia_system__system__control_plane_traffic
    name: srl_nokia_system__system__name
    load_balancing: srl_nokia_system__system__load_balancing

    mut def __init__(self, trace_options: ?list[str]=None, management: ?srl_nokia_system__system__management=None, control_plane_traffic: ?srl_nokia_system__system__control_plane_traffic=None, name: ?srl_nokia_system__system__name=None, load_balancing: ?srl_nokia_system__system__load_balancing=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.trace_options = trace_options if trace_options is not None else []
        self.management = management if management is not None else srl_nokia_system__system__management()
        self.control_plane_traffic = control_plane_traffic if control_plane_traffic is not None else srl_nokia_system__system__control_plane_traffic()
        self.name = name if name is not None else srl_nokia_system__system__name()
        self.load_balancing = load_balancing if load_balancing is not None else srl_nokia_system__system__load_balancing()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        children['trace-options'] = yang.gdata.LeafList('enumeration', self.trace_options)
        _management = self.management
        if _management is not None:
            children['management'] = _management.to_gdata()
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            children['load-balancing'] = _load_balancing.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system:
        if n != None:
            return srl_nokia_system__system(trace_options=n.get_opt_strs('trace-options'), management=srl_nokia_system__system__management.from_gdata(n.get_opt_cnt('management')), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_gdata(n.get_opt_cnt('control-plane-traffic')), name=srl_nokia_system__system__name.from_gdata(n.get_opt_cnt('name')), load_balancing=srl_nokia_system__system__load_balancing.from_gdata(n.get_opt_cnt('load-balancing')))
        return srl_nokia_system__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system')
            res.append('{self_name} = srl_nokia_system__system()')
        leaves = []
        _trace_options = self.trace_options
        if _trace_options is not None:
            leaves.append('{self_name}.trace_options = {repr(_trace_options)}')
        _management = self.management
        if _management is not None:
            res.extend(_management.prsrc('{self_name}.management', False).splitlines())
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            res.extend(_control_plane_traffic.prsrc('{self_name}.control_plane_traffic', False).splitlines())
        _name = self.name
        if _name is not None:
            res.extend(_name.prsrc('{self_name}.name', False).splitlines())
        _load_balancing = self.load_balancing
        if _load_balancing is not None:
            res.extend(_load_balancing.prsrc('{self_name}.load_balancing', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace_options = yang.gdata.from_xml_opt_strs(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_system__system__trace_options, child_trace_options)
    child_management = yang.gdata.from_xml_opt_cnt(node, 'management')
    yang.gdata.maybe_add(children, 'management', from_xml_srl_nokia_system__system__management, child_management)
    child_control_plane_traffic = yang.gdata.from_xml_opt_cnt(node, 'control-plane-traffic')
    yang.gdata.maybe_add(children, 'control-plane-traffic', from_xml_srl_nokia_system__system__control_plane_traffic, child_control_plane_traffic)
    child_name = yang.gdata.from_xml_opt_cnt(node, 'name', 'urn:nokia.com:srlinux:chassis:system-name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_system__system__name, child_name)
    child_load_balancing = yang.gdata.from_xml_opt_cnt(node, 'load-balancing', 'urn:nokia.com:srlinux:linux:load-balancing')
    yang.gdata.maybe_add(children, 'load-balancing', from_xml_srl_nokia_system__system__load_balancing, child_load_balancing)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

class srl_nokia_platform__platform(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:chassis:platform'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_platform__platform:
        if n != None:
            return srl_nokia_platform__platform()
        return srl_nokia_platform__platform()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /platform')
            res.append('{self_name} = srl_nokia_platform__platform()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /platform'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_platform__platform(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:platform', module='srl_nokia-platform')

class root(yang.adata.MNode):
    system: srl_nokia_system__system
    platform: srl_nokia_platform__platform

    mut def __init__(self, system: ?srl_nokia_system__system=None, platform: ?srl_nokia_platform__platform=None):
        self._ns = ''
        self.system = system if system is not None else srl_nokia_system__system()
        self.platform = platform if platform is not None else srl_nokia_platform__platform()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _platform = self.platform
        if _platform is not None:
            children['platform'] = _platform.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n != None:
            return root(system=srl_nokia_system__system.from_gdata(n.get_opt_cnt('system')), platform=srl_nokia_platform__platform.from_gdata(n.get_opt_cnt('platform')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _platform = self.platform
        if _platform is not None:
            res.extend(_platform.prsrc('{self_name}.platform', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system', 'urn:nokia.com:srlinux:general:system')
    yang.gdata.maybe_add(children, 'system', from_xml_srl_nokia_system__system, child_system)
    child_platform = yang.gdata.from_xml_opt_cnt(node, 'platform', 'urn:nokia.com:srlinux:chassis:platform')
    yang.gdata.maybe_add(children, 'platform', from_xml_srl_nokia_platform__platform, child_platform)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'urn:nokia.com:srlinux:chassis:platform',
    'urn:nokia.com:srlinux:chassis:system-name',
    'urn:nokia.com:srlinux:general:system',
    'urn:nokia.com:srlinux:linux:load-balancing',
}
