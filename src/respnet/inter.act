import yang.adata
import orchestron.ttt

import respnet.layers.base_1 as base


def letter_position(letter):
    """
    Returns the position of the given letter in the English alphabet (1-26).
    """
    if len(letter) != 1 or not letter.isalpha():
        raise ValueError("Input must be a single alphabetic character.")
    
    # Convert to lowercase to handle case-insensitivity
    letter = letter.lower()
    return ord(letter) - ord('a') + 1


class Router(base.Router):
    def transform(self, i):
        o = base.o_root()
        print("Intermediate router transform running", i.name, i.id)
        dev = o.device.create(i.name)
        #dev.type = "netconf"
        oob_addr = dev.address.create("oob")
        oob_addr.address = i.name
        dev.credentials.username = "clab"
        dev.credentials.password = "clab@123"
        mock = i.mock
        if mock is not None:
            dev.mock.preset.append(mock)

        sid = i.id
        rfs = o.rfs.create(i.name)
        bc = rfs.base_config.create(i.name) # TODO: should be P-container
        bc.ipv4_address = i.base_config.ipv4_address
        bc.ipv6_address = i.base_config.ipv6_address
        bc.asn = i.base_config.asn

        # Inject router id, asn into rfs.Vrf, rfs.EbgpCustomer transform
        for vrf in i.l3vpn_vrf.elements:
            o_vrf = rfs.vrf.create(vrf.vpn_id)
            o_vrf.router_id = sid
            o_vrf.asn = i.base_config.asn
            for ebgp_customer_address in vrf.ebgp_customer_address:
                o_ebgp_customer = rfs.ebgp_customer.create(vrf.vpn_id, ebgp_customer_address)
                o_ebgp_customer.local_asn = i.base_config.asn

        return o


class BBLink(base.BBLink):
    def transform(self, i):
        print("Intermediate backbonelink transform running %s [%s] <-> %s [%s]" % (i.left_router, i.left_interface, i.right_router, i.right_interface))
        o = base.o_root()
        link_id = letter_position(i.left_router[0]) + letter_position(i.right_router[0])
        left_rfs = o.rfs.create(i.left_router)
        li = left_rfs.backbone_interface.create(i.left_interface)
        li.ipv4_address = "10.0.%s.1" % (str(link_id))
        li.remote.device = i.right_router
        li.remote.interface = i.right_interface
        li.hack_local_hostname = i.left_router

        right_rfs = o.rfs.create(i.right_router)
        ri = right_rfs.backbone_interface.create(i.right_interface)
        ri.ipv4_address = "10.0.%s.2" % (str(link_id))
        ri.remote.device = i.left_router
        ri.remote.interface = i.left_interface
        ri.hack_local_hostname = i.right_router

        return o


class IbgpFullmesh(base.IbgpFullmesh):
    def transform(self, i):
        print("Intermediate ibgp-fullmesh transform running %d" % (i.asn))
        o = base.o_root()
        for ra in i.router.elements:
            rfs = o.rfs.create(ra.name)
            rfs.base_config.create(ra.name).ibgp_authentication_key = i.authentication_key
            for rb in i.router.elements:
                if ra.name == rb.name:
                    continue
                n = rfs.ibgp_neighbor.create(rb.ipv4_address)
                n.asn = i.asn
                n.description = rb.name

        return o


class L3Vpn(base.L3Vpn):
    def transform(self, i):
        print("Intermediate L3VPN transform running %s" % (i.name))
        o = base.o_root()

        for ep in i.endpoint.elements:
            rfs = o.rfs.create(ep.device)

            vrf = rfs.vrf.create(i.name)
            vrf.description = i.description
            # Get VRF id from vpn-id: acme-65501 -> 65501
            vrf.id = int(i.name.split("-")[1])

            vi = rfs.vrf_interface.create(ep.interface)
            vi.description = "Customer VPN access %s [%s] in VPN %s" % (ep.site, ep.site_network_access, i.name)
            vi.ipv4_address = ep.provider_ipv4_address
            vi.ipv4_prefix_length = ep.ipv4_prefix_length
            vi.vrf = i.name

            customer_ipv4_address = ep.customer_ipv4_address
            bgp = ep.bgp
            if customer_ipv4_address is not None and bgp is not None:
                cb = rfs.ebgp_customer.create(i.name, customer_ipv4_address)
                # cb.local_asn is set in the inter.Router transform
                cb.peer_asn = bgp.as_number
                cb.authentication_key = i.name
                cb.description = "Customer eBGP %s [%s] in VPN %s to %s" % (ep.site, ep.site_network_access, i.name, customer_ipv4_address)

        return o
