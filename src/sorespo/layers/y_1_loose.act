import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


def src_yang():
    res = []
    res.append(r"""module l3vpn-inter {
  yang-version "1.1";
  namespace "http://example.com/l3vpn-inter";
  prefix "l3vpn-inter";
  description "L3VPN intermediate";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }

  container l3vpns {
    description "L3VPN";
    list l3vpn {
      key name;

      orchestron:transform sorespo.inter.L3Vpn;

      leaf name {
        type string;
      }
      leaf description {
        type string;
      }
      list endpoint {
        key "device interface";

        leaf device {
          type string;
        }
        leaf interface {
          type string;
        }
        leaf site {
          type string;
          mandatory true;
        }
        leaf site-network-access {
          type string;
          mandatory true;
        }
        leaf provider-ipv4-address {
          type string;
          mandatory true;
        }
        leaf customer-ipv4-address {
          type string;
        }
        leaf ipv4-prefix-length {
          type uint8 {
            range "0..32";
          }
          mandatory true;
        }
        container bgp {
          presence "BGP enabled";
          leaf as-number {
            type uint32;
            mandatory true;
          }
        }
      }
    }
  }
}
""")
    res.append(r"""module netinfra-inter {
  yang-version "1.1";
  namespace "http://example.com/netinfra-inter";
  prefix "netinfra-inter";
  description "Network Infrastructure intermediate";
  revision 2019-01-01 {
    description "test revision";
    reference "ref1";
  }
  import ietf-inet-types {
    prefix inet;
  }

  container netinfra {
    description "Network infrastructure";
    list router {
      key name;

      orchestron:transform sorespo.inter.Router;

      leaf name {
        type string;
      }
      leaf id {
        type uint32;
        description "router id";
        mandatory true;
      }
      leaf type {
        type string;
      }
      leaf role {
        type string;
      }
      leaf mock {
        type enumeration {
          enum cisco-ios-xr;
          enum juniper-junos;
        }
      }
      leaf approval-required {
        type boolean;
        default false;
      }
      container base-config {
        leaf asn {
          type inet:as-number;
          mandatory true;
        }
        // Allocated to the router in the CFS layer
        leaf ipv4-address {
          type inet:ipv4-address;
          mandatory true;
        }
        // Allocated to the router in the CFS layer
        leaf ipv6-address {
          type inet:ipv6-address;
          mandatory true;
        }
      }
      // This list contains vpn-id entries written from the CFS layer.
      // We use it in the "inter" layer to relay the router (/netinfra/router) parameters
      // to the the "rfs" layer tranforms: rfs.Vrf and rfs.EbgpCustomer need the router id and asn.
      // The data for these transforms is part of the L3VPN transform stack so these
      // are written to from the inter.L3Vpn transform primarily.
      // But, we want to avoid having the router id and asn in the L3VPN CFS model!
      // By writing to this list from the cfs.L3VpnSite we can "register" an VPN instance
      // on this router. Then in the inter.Router transform we can read the router id and asn
      // from the inputs and write them to the rfs.Vrf and rfs.EbgpCustomer transforms.
      list l3vpn-vrf {
        key "vpn-id";
        leaf vpn-id {
          type string;
        }
        leaf-list ebgp-customer-address {
          type inet:ip-address;
        }
      }
    }

    list backbone-link {
      key "left-router left-interface right-router right-interface";

      orchestron:transform sorespo.inter.BBLink;

      leaf left-router {
        type string;
      }
      leaf left-interface {
        type string;
      }
      leaf right-router {
        type string;
      }
      leaf right-interface {
        type string;
      }
      leaf monitor-health {
        type boolean;
        default false;
      }
    }

    list ibgp-fullmesh {
      key "asn";
      leaf asn {
        type inet:as-number;
      }
      leaf authentication-key {
        type string;
        mandatory true;
      }

      orchestron:transform sorespo.inter.IbgpFullmesh;

      list router {
        key "name";
        leaf name {
          type string;
        }
        leaf ipv4-address {
          type inet:ipv4-address;
          mandatory true;
        }
      }
    }
  }
}
""")
    res.append(r"""module ietf-inet-types {

  namespace "urn:ietf:params:xml:ns:yang:ietf-inet-types";
  prefix "inet";

  organization
   "IETF NETMOD (NETCONF Data Modeling Language) Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/netmod/>
    WG List:  <mailto:netmod@ietf.org>

    WG Chair: David Kessens
              <mailto:david.kessens@nsn.com>

    WG Chair: Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>

    Editor:   Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>";

  description
   "This module contains a collection of generally useful derived
    YANG data types for Internet addresses and related things.

    Copyright (c) 2013 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 6991; see
    the RFC itself for full legal notices.";

  revision 2013-07-15 {
    description
     "This revision adds the following new data types:
      - ip-address-no-zone
      - ipv4-address-no-zone
      - ipv6-address-no-zone";
    reference
     "RFC 6991: Common YANG Data Types";
  }

  revision 2010-09-24 {
    description
     "Initial revision.";
    reference
     "RFC 6021: Common YANG Data Types";
  }

  /*** collection of types related to protocol fields ***/

  typedef ip-version {
    type enumeration {
      enum unknown {
        value "0";
        description
         "An unknown or unspecified version of the Internet
          protocol.";
      }
      enum ipv4 {
        value "1";
        description
         "The IPv4 protocol as defined in RFC 791.";
      }
      enum ipv6 {
        value "2";
        description
         "The IPv6 protocol as defined in RFC 2460.";
      }
    }
    description
     "This value represents the version of the IP protocol.

      In the value set and its semantics, this type is equivalent
      to the InetVersion textual convention of the SMIv2.";
    reference
     "RFC  791: Internet Protocol
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  typedef dscp {
    type uint8 {
      range "0..63";
    }
    description
     "The dscp type represents a Differentiated Services Code Point
      that may be used for marking packets in a traffic stream.
      In the value set and its semantics, this type is equivalent
      to the Dscp textual convention of the SMIv2.";
    reference
     "RFC 3289: Management Information Base for the Differentiated
                Services Architecture
      RFC 2474: Definition of the Differentiated Services Field
                (DS Field) in the IPv4 and IPv6 Headers
      RFC 2780: IANA Allocation Guidelines For Values In
                the Internet Protocol and Related Headers";
  }

  typedef ipv6-flow-label {
    type uint32 {
      range "0..1048575";
    }
    description
     "The ipv6-flow-label type represents the flow identifier or Flow
      Label in an IPv6 packet header that may be used to
      discriminate traffic flows.

      In the value set and its semantics, this type is equivalent
      to the IPv6FlowLabel textual convention of the SMIv2.";
    reference
     "RFC 3595: Textual Conventions for IPv6 Flow Label
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification";
  }

  typedef port-number {
    type uint16 {
      range "0..65535";
    }
    description
     "The port-number type represents a 16-bit port number of an
      Internet transport-layer protocol such as UDP, TCP, DCCP, or
      SCTP.  Port numbers are assigned by IANA.  A current list of
      all assignments is available from <http://www.iana.org/>.

      Note that the port number value zero is reserved by IANA.  In
      situations where the value zero does not make sense, it can
      be excluded by subtyping the port-number type.
      In the value set and its semantics, this type is equivalent
      to the InetPortNumber textual convention of the SMIv2.";
    reference
     "RFC  768: User Datagram Protocol
      RFC  793: Transmission Control Protocol
      RFC 4960: Stream Control Transmission Protocol
      RFC 4340: Datagram Congestion Control Protocol (DCCP)
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  /*** collection of types related to autonomous systems ***/

  typedef as-number {
    type uint32;
    description
     "The as-number type represents autonomous system numbers
      which identify an Autonomous System (AS).  An AS is a set
      of routers under a single technical administration, using
      an interior gateway protocol and common metrics to route
      packets within the AS, and using an exterior gateway
      protocol to route packets to other ASes.  IANA maintains
      the AS number space and has delegated large parts to the
      regional registries.

      Autonomous system numbers were originally limited to 16
      bits.  BGP extensions have enlarged the autonomous system
      number space to 32 bits.  This type therefore uses an uint32
      base type without a range restriction in order to support
      a larger autonomous system number space.

      In the value set and its semantics, this type is equivalent
      to the InetAutonomousSystemNumber textual convention of
      the SMIv2.";
    reference
     "RFC 1930: Guidelines for creation, selection, and registration
                of an Autonomous System (AS)
      RFC 4271: A Border Gateway Protocol 4 (BGP-4)
      RFC 4001: Textual Conventions for Internet Network Addresses
      RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
                Number Space";
  }

  /*** collection of types related to IP addresses and hostnames ***/

  typedef ip-address {
    type union {
      type inet:ipv4-address;
      type inet:ipv6-address;
    }
    description
     "The ip-address type represents an IP address and is IP
      version neutral.  The format of the textual representation
      implies the IP version.  This type supports scoped addresses
      by allowing zone identifiers in the address format.";
    reference
     "RFC 4007: IPv6 Scoped Address Architecture";
  }

  typedef ipv4-address {
    type string {
      pattern
        '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'
      +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
      + '(%[\\p{N}\\p{L}]+)?';
    }
    description
      "The ipv4-address type represents an IPv4 address in
       dotted-quad notation.  The IPv4 address may include a zone
       index, separated by a % sign.

       The zone index is used to disambiguate identical address
       values.  For link-local addresses, the zone index will
       typically be the interface index number or the name of an
       interface.  If the zone index is not present, the default
       zone of the device will be used.

       The canonical format for the zone index is the numerical
       format";
  }

  typedef ipv6-address {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(%[\\p{N}\\p{L}]+)?';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(%.+)?';
    }
    description
     "The ipv6-address type represents an IPv6 address in full,
      mixed, shortened, and shortened-mixed notation.  The IPv6
      address may include a zone index, separated by a % sign.

      The zone index is used to disambiguate identical address
      values.  For link-local addresses, the zone index will
      typically be the interface index number or the name of an
      interface.  If the zone index is not present, the default
      zone of the device will be used.

      The canonical format of IPv6 addresses uses the textual
      representation defined in Section 4 of RFC 5952.  The
      canonical format for the zone index is the numerical
      format as described in Section 11.2 of RFC 4007.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture
      RFC 4007: IPv6 Scoped Address Architecture
      RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  typedef ip-address-no-zone {
    type union {
      type inet:ipv4-address-no-zone;
      type inet:ipv6-address-no-zone;
    }
    description
     "The ip-address-no-zone type represents an IP address and is
      IP version neutral.  The format of the textual representation
      implies the IP version.  This type does not support scoped
      addresses since it does not allow zone identifiers in the
      address format.";
    reference
     "RFC 4007: IPv6 Scoped Address Architecture";
  }

  typedef ipv4-address-no-zone {
    type inet:ipv4-address {
      pattern '[0-9\\.]*';
    }
    description
      "An IPv4 address without a zone index.  This type, derived from
       ipv4-address, may be used in situations where the zone is
       known from the context and hence no zone index is needed.";
  }

  typedef ipv6-address-no-zone {
    type inet:ipv6-address {
      pattern '[0-9a-fA-F:\\.]*';
    }
    description
      "An IPv6 address without a zone index.  This type, derived from
       ipv6-address, may be used in situations where the zone is
       known from the context and hence no zone index is needed.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture
      RFC 4007: IPv6 Scoped Address Architecture
      RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  typedef ip-prefix {
    type union {
      type inet:ipv4-prefix;
      type inet:ipv6-prefix;
    }
    description
     "The ip-prefix type represents an IP prefix and is IP
      version neutral.  The format of the textual representations
      implies the IP version.";
  }

  typedef ipv4-prefix {
    type string {
      pattern
         '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'
       +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
       + '/(([0-9])|([1-2][0-9])|(3[0-2]))';
    }
    description
     "The ipv4-prefix type represents an IPv4 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal to 32.

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The canonical format of an IPv4 prefix has all bits of
      the IPv4 address set to zero that are not part of the
      IPv4 prefix.";
  }

  typedef ipv6-prefix {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(/.+)';
    }

    description
     "The ipv6-prefix type represents an IPv6 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal to 128.

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The IPv6 address should have all bits that do not belong
      to the prefix set to zero.

      The canonical format of an IPv6 prefix has all bits of
      the IPv6 address set to zero that are not part of the
      IPv6 prefix.  Furthermore, the IPv6 address is represented
      as defined in Section 4 of RFC 5952.";
    reference
     "RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  /*** collection of domain name and URI types ***/

  typedef domain-name {
    type string {
      pattern
        '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*'
      + '([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)'
      + '|\\.';
      length "1..253";
    }
    description
     "The domain-name type represents a DNS domain name.  The
      name SHOULD be fully qualified whenever possible.

      Internet domain names are only loosely specified.  Section
      3.5 of RFC 1034 recommends a syntax (modified in Section
      2.1 of RFC 1123).  The pattern above is intended to allow
      for current practice in domain name use, and some possible
      future expansion.  It is designed to hold various types of
      domain names, including names used for A or AAAA records
      (host names) and other records, such as SRV records.  Note
      that Internet host names have a stricter syntax (described
      in RFC 952) than the DNS recommendations in RFCs 1034 and
      1123, and that systems that want to store host names in
      schema nodes using the domain-name type are recommended to
      adhere to this stricter standard to ensure interoperability.

      The encoding of DNS names in the DNS protocol is limited
      to 255 characters.  Since the encoding consists of labels
      prefixed by a length bytes and there is a trailing NULL
      byte, only 253 characters can appear in the textual dotted
      notation.

      The description clause of schema nodes using the domain-name
      type MUST describe when and how these names are resolved to
      IP addresses.  Note that the resolution of a domain-name value
      may require to query multiple DNS records (e.g., A for IPv4
      and AAAA for IPv6).  The order of the resolution process and
      which DNS record takes precedence can either be defined
      explicitly or may depend on the configuration of the
      resolver.

      Domain-name values use the US-ASCII encoding.  Their canonical
      format uses lowercase US-ASCII characters.  Internationalized
      domain names MUST be A-labels as per RFC 5890.";
    reference
     "RFC  952: DoD Internet Host Table Specification
      RFC 1034: Domain Names - Concepts and Facilities
      RFC 1123: Requirements for Internet Hosts -- Application
                and Support
      RFC 2782: A DNS RR for specifying the location of services
                (DNS SRV)
      RFC 5890: Internationalized Domain Names in Applications
                (IDNA): Definitions and Document Framework";
  }

  typedef host {
    type union {
      type inet:ip-address;
      type inet:domain-name;
    }
    description
     "The host type represents either an IP address or a DNS
      domain name.";
  }

  typedef uri {
    type string;
    description
     "The uri type represents a Uniform Resource Identifier
      (URI) as defined by STD 66.

      Objects using the uri type MUST be in US-ASCII encoding,
      and MUST be normalized as described by RFC 3986 Sections
      6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
      percent-encoding is removed, and all case-insensitive
      characters are set to lowercase except for hexadecimal
      digits, which are normalized to uppercase as described in
      Section 6.2.2.1.

      The purpose of this normalization is to help provide
      unique URIs.  Note that this normalization is not
      sufficient to provide uniqueness.  Two URIs that are
      textually distinct after this normalization may still be
      equivalent.

      Objects using the uri type may restrict the schemes that
      they permit.  For example, 'data:' and 'urn:' schemes
      might not be appropriate.

      A zero-length URI is not a valid URI.  This can be used to
      express 'URI absent' where required.

      In the value set and its semantics, this type is equivalent
      to the Uri SMIv2 textual convention defined in RFC 5017.";
    reference
     "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
      RFC 3305: Report from the Joint W3C/IETF URI Planning Interest
                Group: Uniform Resource Identifiers (URIs), URLs,
                and Uniform Resource Names (URNs): Clarifications
                and Recommendations
      RFC 5017: MIB Textual Conventions for Uniform Resource
                Identifiers (URIs)";
  }

}
""")
    return res


mut def from_json_netinfra_inter__netinfra__router__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__router__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_netinfra_inter__netinfra__router__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_netinfra_inter__netinfra__router__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__router__role(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__role(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__router__mock(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_netinfra_inter__netinfra__router__mock(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_json_netinfra_inter__netinfra__router__approval_required(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_netinfra_inter__netinfra__router__approval_required(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_json_netinfra_inter__netinfra__router__base_config__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_netinfra_inter__netinfra__router__base_config__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_netinfra_inter__netinfra__router__base_config__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__base_config__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__router__base_config__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__base_config__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class netinfra_inter__netinfra__router__base_config(yang.adata.MNode):
    asn: ?int
    ipv4_address: ?str
    ipv6_address: ?str

    mut def __init__(self, asn: ?int, ipv4_address: ?str, ipv6_address: ?str):
        self._ns = 'http://example.com/netinfra-inter'
        self.asn = asn
        self.ipv4_address = ipv4_address
        self.ipv6_address = ipv6_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asn = self.asn
        if _asn is not None:
            children['asn'] = yang.gdata.Leaf('uint32', _asn)
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _ipv6_address = self.ipv6_address
        if _ipv6_address is not None:
            children['ipv6-address'] = yang.gdata.Leaf('string', _ipv6_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> netinfra_inter__netinfra__router__base_config:
        if n is not None:
            return netinfra_inter__netinfra__router__base_config(asn=n.get_opt_int('asn'), ipv4_address=n.get_opt_str('ipv4-address'), ipv6_address=n.get_opt_str('ipv6-address'))
        raise ValueError('Missing required subtree netinfra_inter__netinfra__router__base_config')

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__router__base_config.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/router/base-config')
            res.append('{self_name} = netinfra_inter__netinfra__router__base_config()')
        leaves = []
        _asn = self.asn
        if _asn is not None:
            leaves.append('{self_name}.asn = {repr(_asn)}')
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            leaves.append('{self_name}.ipv4_address = {repr(_ipv4_address)}')
        _ipv6_address = self.ipv6_address
        if _ipv6_address is not None:
            leaves.append('{self_name}.ipv6_address = {repr(_ipv6_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/router/base-config'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'router', 'base-config'])


mut def from_xml_netinfra_inter__netinfra__router__base_config(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_asn = yang.gdata.from_xml_opt_int(node, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_xml_netinfra_inter__netinfra__router__base_config__asn, child_asn)
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_netinfra_inter__netinfra__router__base_config__ipv4_address, child_ipv4_address)
    child_ipv6_address = yang.gdata.from_xml_opt_str(node, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_xml_netinfra_inter__netinfra__router__base_config__ipv6_address, child_ipv6_address)
    return yang.gdata.Container(children)

mut def from_json_path_netinfra_inter__netinfra__router__base_config(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'asn':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv6-address':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_netinfra_inter__netinfra__router__base_config(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_netinfra_inter__netinfra__router__base_config(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_asn = yang.gdata.take_json_opt_int(jd, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_json_netinfra_inter__netinfra__router__base_config__asn, child_asn)
    child_ipv4_address = yang.gdata.take_json_opt_str(jd, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_json_netinfra_inter__netinfra__router__base_config__ipv4_address, child_ipv4_address)
    child_ipv6_address = yang.gdata.take_json_opt_str(jd, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_json_netinfra_inter__netinfra__router__base_config__ipv6_address, child_ipv6_address)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__router__l3vpn_vrf__vpn_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__router__l3vpn_vrf__vpn_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__router__l3vpn_vrf__ebgp_customer_address(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('union', val)

mut def from_xml_netinfra_inter__netinfra__router__l3vpn_vrf__ebgp_customer_address(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('union', val)

class netinfra_inter__netinfra__router__l3vpn_vrf_entry(yang.adata.MNode):
    vpn_id: str
    ebgp_customer_address: list[str]

    mut def __init__(self, vpn_id: str, ebgp_customer_address: ?list[str]=None):
        self._ns = 'http://example.com/netinfra-inter'
        self.vpn_id = vpn_id
        self.ebgp_customer_address = ebgp_customer_address if ebgp_customer_address is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vpn_id = self.vpn_id
        if _vpn_id is not None:
            children['vpn-id'] = yang.gdata.Leaf('string', _vpn_id)
        _ebgp_customer_address = self.ebgp_customer_address
        if _ebgp_customer_address is not None:
            children['ebgp-customer-address'] = yang.gdata.LeafList('union', _ebgp_customer_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra_inter__netinfra__router__l3vpn_vrf_entry:
        return netinfra_inter__netinfra__router__l3vpn_vrf_entry(vpn_id=n.get_str('vpn-id'), ebgp_customer_address=n.get_opt_strs('ebgp-customer-address'))

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__router__l3vpn_vrf_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/router/l3vpn-vrf')
            res.append('{self_name} = netinfra_inter__netinfra__router__l3vpn_vrf({repr(self.vpn_id)})')
        leaves = []
        _ebgp_customer_address = self.ebgp_customer_address
        if len(_ebgp_customer_address) != 0:
            leaves.append('{self_name}.ebgp_customer_address = {repr(_ebgp_customer_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/router/l3vpn-vrf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'router', 'l3vpn-vrf'])

class netinfra_inter__netinfra__router__l3vpn_vrf(yang.adata.MNode):
    elements: list[netinfra_inter__netinfra__router__l3vpn_vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self._name = 'l3vpn-vrf'
        self.elements = elements

    mut def create(self, vpn_id):
        for e in self:
            match = True
            if e.vpn_id != vpn_id:
                match = False
                continue
            if match:
                return e

        res = netinfra_inter__netinfra__router__l3vpn_vrf_entry(vpn_id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['vpn-id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[netinfra_inter__netinfra__router__l3vpn_vrf_entry]:
        if n is not None:
            return [netinfra_inter__netinfra__router__l3vpn_vrf_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return netinfra_inter__netinfra__router__l3vpn_vrf(elements=copied_elements)

extension netinfra_inter__netinfra__router__l3vpn_vrf(Iterable[netinfra_inter__netinfra__router__l3vpn_vrf_entry]):
    def __iter__(self) -> Iterator[netinfra_inter__netinfra__router__l3vpn_vrf_entry]:
        return self.elements.__iter__()

mut def from_xml_netinfra_inter__netinfra__router__l3vpn_vrf_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_vpn_id = yang.gdata.from_xml_str(node, 'vpn-id')
    yang.gdata.maybe_add(children, 'vpn-id', from_xml_netinfra_inter__netinfra__router__l3vpn_vrf__vpn_id, child_vpn_id)
    child_ebgp_customer_address = yang.gdata.from_xml_opt_strs(node, 'ebgp-customer-address')
    yang.gdata.maybe_add(children, 'ebgp-customer-address', from_xml_netinfra_inter__netinfra__router__l3vpn_vrf__ebgp_customer_address, child_ebgp_customer_address)
    return yang.gdata.Container(children)

mut def from_xml_netinfra_inter__netinfra__router__l3vpn_vrf(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_netinfra_inter__netinfra__router__l3vpn_vrf_element(e) for e in nodes]
    return yang.gdata.List(keys=['vpn-id'], elements=elements)

mut def from_json_path_netinfra_inter__netinfra__router__l3vpn_vrf_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_netinfra_inter__netinfra__router__l3vpn_vrf_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['vpn-id']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['vpn-id'] = from_json_netinfra_inter__netinfra__router__l3vpn_vrf__vpn_id(keys[0])
        if point == 'ebgp-customer-address':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_netinfra_inter__netinfra__router__l3vpn_vrf(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['vpn-id']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_netinfra_inter__netinfra__router__l3vpn_vrf_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['vpn-id'])))
        return yang.gdata.List(['vpn-id'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['vpn-id'], [from_json_path_netinfra_inter__netinfra__router__l3vpn_vrf_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_netinfra_inter__netinfra__router__l3vpn_vrf_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_vpn_id = yang.gdata.take_json_str(jd, 'vpn-id')
    yang.gdata.maybe_add(children, 'vpn-id', from_json_netinfra_inter__netinfra__router__l3vpn_vrf__vpn_id, child_vpn_id)
    child_ebgp_customer_address = yang.gdata.take_json_opt_strs(jd, 'ebgp-customer-address')
    yang.gdata.maybe_add(children, 'ebgp-customer-address', from_json_netinfra_inter__netinfra__router__l3vpn_vrf__ebgp_customer_address, child_ebgp_customer_address)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__router__l3vpn_vrf(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_netinfra_inter__netinfra__router__l3vpn_vrf_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['vpn-id'], elements=elements)

class netinfra_inter__netinfra__router_entry(yang.adata.MNode):
    name: str
    id: ?int
    type: ?str
    role: ?str
    mock: ?str
    approval_required: ?bool
    base_config: netinfra_inter__netinfra__router__base_config
    l3vpn_vrf: netinfra_inter__netinfra__router__l3vpn_vrf

    mut def __init__(self, name: str, id: ?int, type: ?str, role: ?str, mock: ?str, approval_required: ?bool, base_config: ?netinfra_inter__netinfra__router__base_config=None, l3vpn_vrf: list[netinfra_inter__netinfra__router__l3vpn_vrf_entry]=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self.name = name
        self.id = id
        self.type = type
        self.role = role
        self.mock = mock
        self.approval_required = approval_required
        self.base_config = base_config if base_config is not None else netinfra_inter__netinfra__router__base_config()
        self.l3vpn_vrf = netinfra_inter__netinfra__router__l3vpn_vrf(elements=l3vpn_vrf)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('string', _type)
        _role = self.role
        if _role is not None:
            children['role'] = yang.gdata.Leaf('string', _role)
        _mock = self.mock
        if _mock is not None:
            children['mock'] = yang.gdata.Leaf('enumeration', _mock)
        _approval_required = self.approval_required
        if _approval_required is not None:
            children['approval-required'] = yang.gdata.Leaf('boolean', _approval_required)
        _base_config = self.base_config
        if _base_config is not None:
            children['base-config'] = _base_config.to_gdata()
        _l3vpn_vrf = self.l3vpn_vrf
        if _l3vpn_vrf is not None:
            children['l3vpn-vrf'] = _l3vpn_vrf.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra_inter__netinfra__router_entry:
        return netinfra_inter__netinfra__router_entry(name=n.get_str('name'), id=n.get_opt_int('id'), type=n.get_opt_str('type'), role=n.get_opt_str('role'), mock=n.get_opt_str('mock'), approval_required=n.get_opt_bool('approval-required'), base_config=netinfra_inter__netinfra__router__base_config.from_gdata(n.get_opt_cnt('base-config')), l3vpn_vrf=netinfra_inter__netinfra__router__l3vpn_vrf.from_gdata(n.get_opt_list('l3vpn-vrf')))

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__router_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/router')
            res.append('{self_name} = netinfra_inter__netinfra__router({repr(self.name)})')
        leaves = []
        _id = self.id
        if _id is not None:
            leaves.append('{self_name}.id = {repr(_id)}')
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _role = self.role
        if _role is not None:
            leaves.append('{self_name}.role = {repr(_role)}')
        _mock = self.mock
        if _mock is not None:
            leaves.append('{self_name}.mock = {repr(_mock)}')
        _approval_required = self.approval_required
        if _approval_required is not None:
            leaves.append('{self_name}.approval_required = {repr(_approval_required)}')
        _base_config = self.base_config
        if _base_config is not None:
            res.extend(_base_config.prsrc('{self_name}.base_config', False).splitlines())
        _l3vpn_vrf = self.l3vpn_vrf
        for _element in _l3vpn_vrf:
            res.append('')
            res.append("# List /netinfra/router/l3vpn-vrf element: {_element.to_gdata().key_str(['vpn-id'])}")
            list_elem = 'l3vpn_vrf_element = {self_name}.l3vpn_vrf.create({repr(_element.vpn_id)})'
            res.append(list_elem)
            res.extend(_element.prsrc('l3vpn_vrf_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/router'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'router'])

class netinfra_inter__netinfra__router(yang.adata.MNode):
    elements: list[netinfra_inter__netinfra__router_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self._name = 'router'
        self.elements = elements

    mut def create(self, name, id):
        for e in self:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = netinfra_inter__netinfra__router_entry(name, id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[netinfra_inter__netinfra__router_entry]:
        if n is not None:
            return [netinfra_inter__netinfra__router_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return netinfra_inter__netinfra__router(elements=copied_elements)

extension netinfra_inter__netinfra__router(Iterable[netinfra_inter__netinfra__router_entry]):
    def __iter__(self) -> Iterator[netinfra_inter__netinfra__router_entry]:
        return self.elements.__iter__()

mut def from_xml_netinfra_inter__netinfra__router_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_netinfra_inter__netinfra__router__name, child_name)
    child_id = yang.gdata.from_xml_opt_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_netinfra_inter__netinfra__router__id, child_id)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_netinfra_inter__netinfra__router__type, child_type)
    child_role = yang.gdata.from_xml_opt_str(node, 'role')
    yang.gdata.maybe_add(children, 'role', from_xml_netinfra_inter__netinfra__router__role, child_role)
    child_mock = yang.gdata.from_xml_opt_str(node, 'mock')
    yang.gdata.maybe_add(children, 'mock', from_xml_netinfra_inter__netinfra__router__mock, child_mock)
    child_approval_required = yang.gdata.from_xml_opt_bool(node, 'approval-required')
    yang.gdata.maybe_add(children, 'approval-required', from_xml_netinfra_inter__netinfra__router__approval_required, child_approval_required)
    child_base_config = yang.gdata.from_xml_opt_cnt(node, 'base-config')
    yang.gdata.maybe_add(children, 'base-config', from_xml_netinfra_inter__netinfra__router__base_config, child_base_config)
    child_l3vpn_vrf = yang.gdata.from_xml_opt_list(node, 'l3vpn-vrf')
    yang.gdata.maybe_add(children, 'l3vpn-vrf', from_xml_netinfra_inter__netinfra__router__l3vpn_vrf, child_l3vpn_vrf)
    return yang.gdata.Container(children)

mut def from_xml_netinfra_inter__netinfra__router(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_netinfra_inter__netinfra__router_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_netinfra_inter__netinfra__router_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_netinfra_inter__netinfra__router_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_netinfra_inter__netinfra__router__name(keys[0])
        if point == 'id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'type':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'role':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'mock':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'approval-required':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'base-config':
            children['base-config'] = from_json_path_netinfra_inter__netinfra__router__base_config(jd, rest_path, op)
        if point == 'l3vpn-vrf':
            children['l3vpn-vrf'] = from_json_path_netinfra_inter__netinfra__router__l3vpn_vrf(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_netinfra_inter__netinfra__router(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_netinfra_inter__netinfra__router_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_netinfra_inter__netinfra__router_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_netinfra_inter__netinfra__router_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_netinfra_inter__netinfra__router__name, child_name)
    child_id = yang.gdata.take_json_opt_int(jd, 'id')
    yang.gdata.maybe_add(children, 'id', from_json_netinfra_inter__netinfra__router__id, child_id)
    child_type = yang.gdata.take_json_opt_str(jd, 'type')
    yang.gdata.maybe_add(children, 'type', from_json_netinfra_inter__netinfra__router__type, child_type)
    child_role = yang.gdata.take_json_opt_str(jd, 'role')
    yang.gdata.maybe_add(children, 'role', from_json_netinfra_inter__netinfra__router__role, child_role)
    child_mock = yang.gdata.take_json_opt_str(jd, 'mock')
    yang.gdata.maybe_add(children, 'mock', from_json_netinfra_inter__netinfra__router__mock, child_mock)
    child_approval_required = yang.gdata.take_json_opt_bool(jd, 'approval-required')
    yang.gdata.maybe_add(children, 'approval-required', from_json_netinfra_inter__netinfra__router__approval_required, child_approval_required)
    child_base_config = yang.gdata.take_json_opt_cnt(jd, 'base-config')
    yang.gdata.maybe_add(children, 'base-config', from_json_netinfra_inter__netinfra__router__base_config, child_base_config)
    child_l3vpn_vrf = yang.gdata.take_json_opt_list(jd, 'l3vpn-vrf')
    yang.gdata.maybe_add(children, 'l3vpn-vrf', from_json_netinfra_inter__netinfra__router__l3vpn_vrf, child_l3vpn_vrf)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__router(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_netinfra_inter__netinfra__router_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_netinfra_inter__netinfra__backbone_link__left_router(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__backbone_link__left_router(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__backbone_link__left_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__backbone_link__left_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__backbone_link__right_router(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__backbone_link__right_router(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__backbone_link__right_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__backbone_link__right_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__backbone_link__monitor_health(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_netinfra_inter__netinfra__backbone_link__monitor_health(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class netinfra_inter__netinfra__backbone_link_entry(yang.adata.MNode):
    left_router: str
    left_interface: str
    right_router: str
    right_interface: str
    monitor_health: ?bool

    mut def __init__(self, left_router: str, left_interface: str, right_router: str, right_interface: str, monitor_health: ?bool):
        self._ns = 'http://example.com/netinfra-inter'
        self.left_router = left_router
        self.left_interface = left_interface
        self.right_router = right_router
        self.right_interface = right_interface
        self.monitor_health = monitor_health

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _left_router = self.left_router
        if _left_router is not None:
            children['left-router'] = yang.gdata.Leaf('string', _left_router)
        _left_interface = self.left_interface
        if _left_interface is not None:
            children['left-interface'] = yang.gdata.Leaf('string', _left_interface)
        _right_router = self.right_router
        if _right_router is not None:
            children['right-router'] = yang.gdata.Leaf('string', _right_router)
        _right_interface = self.right_interface
        if _right_interface is not None:
            children['right-interface'] = yang.gdata.Leaf('string', _right_interface)
        _monitor_health = self.monitor_health
        if _monitor_health is not None:
            children['monitor-health'] = yang.gdata.Leaf('boolean', _monitor_health)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra_inter__netinfra__backbone_link_entry:
        return netinfra_inter__netinfra__backbone_link_entry(left_router=n.get_str('left-router'), left_interface=n.get_str('left-interface'), right_router=n.get_str('right-router'), right_interface=n.get_str('right-interface'), monitor_health=n.get_opt_bool('monitor-health'))

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__backbone_link_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/backbone-link')
            res.append('{self_name} = netinfra_inter__netinfra__backbone_link({repr(self.left_router)}, {repr(self.left_interface)}, {repr(self.right_router)}, {repr(self.right_interface)})')
        leaves = []
        _monitor_health = self.monitor_health
        if _monitor_health is not None:
            leaves.append('{self_name}.monitor_health = {repr(_monitor_health)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/backbone-link'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'backbone-link'])

class netinfra_inter__netinfra__backbone_link(yang.adata.MNode):
    elements: list[netinfra_inter__netinfra__backbone_link_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self._name = 'backbone-link'
        self.elements = elements

    mut def create(self, left_router, left_interface, right_router, right_interface):
        for e in self:
            match = True
            if e.left_router != left_router:
                match = False
                continue
            if e.left_interface != left_interface:
                match = False
                continue
            if e.right_router != right_router:
                match = False
                continue
            if e.right_interface != right_interface:
                match = False
                continue
            if match:
                return e

        res = netinfra_inter__netinfra__backbone_link_entry(left_router, left_interface, right_router, right_interface)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['left-router', 'left-interface', 'right-router', 'right-interface'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[netinfra_inter__netinfra__backbone_link_entry]:
        if n is not None:
            return [netinfra_inter__netinfra__backbone_link_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return netinfra_inter__netinfra__backbone_link(elements=copied_elements)

extension netinfra_inter__netinfra__backbone_link(Iterable[netinfra_inter__netinfra__backbone_link_entry]):
    def __iter__(self) -> Iterator[netinfra_inter__netinfra__backbone_link_entry]:
        return self.elements.__iter__()

mut def from_xml_netinfra_inter__netinfra__backbone_link_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_left_router = yang.gdata.from_xml_str(node, 'left-router')
    yang.gdata.maybe_add(children, 'left-router', from_xml_netinfra_inter__netinfra__backbone_link__left_router, child_left_router)
    child_left_interface = yang.gdata.from_xml_str(node, 'left-interface')
    yang.gdata.maybe_add(children, 'left-interface', from_xml_netinfra_inter__netinfra__backbone_link__left_interface, child_left_interface)
    child_right_router = yang.gdata.from_xml_str(node, 'right-router')
    yang.gdata.maybe_add(children, 'right-router', from_xml_netinfra_inter__netinfra__backbone_link__right_router, child_right_router)
    child_right_interface = yang.gdata.from_xml_str(node, 'right-interface')
    yang.gdata.maybe_add(children, 'right-interface', from_xml_netinfra_inter__netinfra__backbone_link__right_interface, child_right_interface)
    child_monitor_health = yang.gdata.from_xml_opt_bool(node, 'monitor-health')
    yang.gdata.maybe_add(children, 'monitor-health', from_xml_netinfra_inter__netinfra__backbone_link__monitor_health, child_monitor_health)
    return yang.gdata.Container(children)

mut def from_xml_netinfra_inter__netinfra__backbone_link(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_netinfra_inter__netinfra__backbone_link_element(e) for e in nodes]
    return yang.gdata.List(keys=['left-router', 'left-interface', 'right-router', 'right-interface'], elements=elements)

mut def from_json_path_netinfra_inter__netinfra__backbone_link_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_netinfra_inter__netinfra__backbone_link_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['left-router', 'left-interface', 'right-router', 'right-interface']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['left-router'] = from_json_netinfra_inter__netinfra__backbone_link__left_router(keys[0])
        children['left-interface'] = from_json_netinfra_inter__netinfra__backbone_link__left_interface(keys[1])
        children['right-router'] = from_json_netinfra_inter__netinfra__backbone_link__right_router(keys[2])
        children['right-interface'] = from_json_netinfra_inter__netinfra__backbone_link__right_interface(keys[3])
        if point == 'monitor-health':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_netinfra_inter__netinfra__backbone_link(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['left-router', 'left-interface', 'right-router', 'right-interface']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_netinfra_inter__netinfra__backbone_link_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['left-router', 'left-interface', 'right-router', 'right-interface'])))
        return yang.gdata.List(['left-router', 'left-interface', 'right-router', 'right-interface'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['left-router', 'left-interface', 'right-router', 'right-interface'], [from_json_path_netinfra_inter__netinfra__backbone_link_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_netinfra_inter__netinfra__backbone_link_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_left_router = yang.gdata.take_json_str(jd, 'left-router')
    yang.gdata.maybe_add(children, 'left-router', from_json_netinfra_inter__netinfra__backbone_link__left_router, child_left_router)
    child_left_interface = yang.gdata.take_json_str(jd, 'left-interface')
    yang.gdata.maybe_add(children, 'left-interface', from_json_netinfra_inter__netinfra__backbone_link__left_interface, child_left_interface)
    child_right_router = yang.gdata.take_json_str(jd, 'right-router')
    yang.gdata.maybe_add(children, 'right-router', from_json_netinfra_inter__netinfra__backbone_link__right_router, child_right_router)
    child_right_interface = yang.gdata.take_json_str(jd, 'right-interface')
    yang.gdata.maybe_add(children, 'right-interface', from_json_netinfra_inter__netinfra__backbone_link__right_interface, child_right_interface)
    child_monitor_health = yang.gdata.take_json_opt_bool(jd, 'monitor-health')
    yang.gdata.maybe_add(children, 'monitor-health', from_json_netinfra_inter__netinfra__backbone_link__monitor_health, child_monitor_health)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__backbone_link(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_netinfra_inter__netinfra__backbone_link_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['left-router', 'left-interface', 'right-router', 'right-interface'], elements=elements)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__router__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__router__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class netinfra_inter__netinfra__ibgp_fullmesh__router_entry(yang.adata.MNode):
    name: str
    ipv4_address: ?str

    mut def __init__(self, name: str, ipv4_address: ?str):
        self._ns = 'http://example.com/netinfra-inter'
        self.name = name
        self.ipv4_address = ipv4_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra_inter__netinfra__ibgp_fullmesh__router_entry:
        return netinfra_inter__netinfra__ibgp_fullmesh__router_entry(name=n.get_str('name'), ipv4_address=n.get_opt_str('ipv4-address'))

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__ibgp_fullmesh__router_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/ibgp-fullmesh/router')
            res.append('{self_name} = netinfra_inter__netinfra__ibgp_fullmesh__router({repr(self.name)})')
        leaves = []
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            leaves.append('{self_name}.ipv4_address = {repr(_ipv4_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/ibgp-fullmesh/router'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'ibgp-fullmesh', 'router'])

class netinfra_inter__netinfra__ibgp_fullmesh__router(yang.adata.MNode):
    elements: list[netinfra_inter__netinfra__ibgp_fullmesh__router_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self._name = 'router'
        self.elements = elements

    mut def create(self, name, ipv4_address):
        for e in self:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = netinfra_inter__netinfra__ibgp_fullmesh__router_entry(name, ipv4_address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[netinfra_inter__netinfra__ibgp_fullmesh__router_entry]:
        if n is not None:
            return [netinfra_inter__netinfra__ibgp_fullmesh__router_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return netinfra_inter__netinfra__ibgp_fullmesh__router(elements=copied_elements)

extension netinfra_inter__netinfra__ibgp_fullmesh__router(Iterable[netinfra_inter__netinfra__ibgp_fullmesh__router_entry]):
    def __iter__(self) -> Iterator[netinfra_inter__netinfra__ibgp_fullmesh__router_entry]:
        return self.elements.__iter__()

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router__name, child_name)
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router__ipv4_address, child_ipv4_address)
    return yang.gdata.Container(children)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_netinfra_inter__netinfra__ibgp_fullmesh__router_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_netinfra_inter__netinfra__ibgp_fullmesh__router_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_netinfra_inter__netinfra__ibgp_fullmesh__router__name(keys[0])
        if point == 'ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_netinfra_inter__netinfra__ibgp_fullmesh__router(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_netinfra_inter__netinfra__ibgp_fullmesh__router_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_netinfra_inter__netinfra__ibgp_fullmesh__router_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__router_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_netinfra_inter__netinfra__ibgp_fullmesh__router__name, child_name)
    child_ipv4_address = yang.gdata.take_json_opt_str(jd, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_json_netinfra_inter__netinfra__ibgp_fullmesh__router__ipv4_address, child_ipv4_address)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh__router(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_netinfra_inter__netinfra__ibgp_fullmesh__router_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

class netinfra_inter__netinfra__ibgp_fullmesh_entry(yang.adata.MNode):
    asn: int
    authentication_key: ?str
    router: netinfra_inter__netinfra__ibgp_fullmesh__router

    mut def __init__(self, asn: int, authentication_key: ?str, router: list[netinfra_inter__netinfra__ibgp_fullmesh__router_entry]=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self.asn = asn
        self.authentication_key = authentication_key
        self.router = netinfra_inter__netinfra__ibgp_fullmesh__router(elements=router)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _asn = self.asn
        if _asn is not None:
            children['asn'] = yang.gdata.Leaf('uint32', _asn)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _router = self.router
        if _router is not None:
            children['router'] = _router.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> netinfra_inter__netinfra__ibgp_fullmesh_entry:
        return netinfra_inter__netinfra__ibgp_fullmesh_entry(asn=n.get_int('asn'), authentication_key=n.get_opt_str('authentication-key'), router=netinfra_inter__netinfra__ibgp_fullmesh__router.from_gdata(n.get_opt_list('router')))

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra__ibgp_fullmesh_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra/ibgp-fullmesh')
            res.append('{self_name} = netinfra_inter__netinfra__ibgp_fullmesh({repr(self.asn)})')
        leaves = []
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _router = self.router
        for _element in _router:
            res.append('')
            res.append("# List /netinfra/ibgp-fullmesh/router element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'router_element = {self_name}.router.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('router_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra/ibgp-fullmesh'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra', 'ibgp-fullmesh'])

class netinfra_inter__netinfra__ibgp_fullmesh(yang.adata.MNode):
    elements: list[netinfra_inter__netinfra__ibgp_fullmesh_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self._name = 'ibgp-fullmesh'
        self.elements = elements

    mut def create(self, asn, authentication_key):
        for e in self:
            match = True
            if e.asn != asn:
                match = False
                continue
            if match:
                return e

        res = netinfra_inter__netinfra__ibgp_fullmesh_entry(asn, authentication_key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['asn'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[netinfra_inter__netinfra__ibgp_fullmesh_entry]:
        if n is not None:
            return [netinfra_inter__netinfra__ibgp_fullmesh_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return netinfra_inter__netinfra__ibgp_fullmesh(elements=copied_elements)

extension netinfra_inter__netinfra__ibgp_fullmesh(Iterable[netinfra_inter__netinfra__ibgp_fullmesh_entry]):
    def __iter__(self) -> Iterator[netinfra_inter__netinfra__ibgp_fullmesh_entry]:
        return self.elements.__iter__()

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_asn = yang.gdata.from_xml_int(node, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_xml_netinfra_inter__netinfra__ibgp_fullmesh__asn, child_asn)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_netinfra_inter__netinfra__ibgp_fullmesh__authentication_key, child_authentication_key)
    child_router = yang.gdata.from_xml_opt_list(node, 'router')
    yang.gdata.maybe_add(children, 'router', from_xml_netinfra_inter__netinfra__ibgp_fullmesh__router, child_router)
    return yang.gdata.Container(children)

mut def from_xml_netinfra_inter__netinfra__ibgp_fullmesh(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_netinfra_inter__netinfra__ibgp_fullmesh_element(e) for e in nodes]
    return yang.gdata.List(keys=['asn'], elements=elements)

mut def from_json_path_netinfra_inter__netinfra__ibgp_fullmesh_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_netinfra_inter__netinfra__ibgp_fullmesh_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['asn']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['asn'] = from_json_netinfra_inter__netinfra__ibgp_fullmesh__asn(keys[0])
        if point == 'authentication-key':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'router':
            children['router'] = from_json_path_netinfra_inter__netinfra__ibgp_fullmesh__router(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_netinfra_inter__netinfra__ibgp_fullmesh(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['asn']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_netinfra_inter__netinfra__ibgp_fullmesh_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['asn'])))
        return yang.gdata.List(['asn'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['asn'], [from_json_path_netinfra_inter__netinfra__ibgp_fullmesh_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_asn = yang.gdata.take_json_int(jd, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_json_netinfra_inter__netinfra__ibgp_fullmesh__asn, child_asn)
    child_authentication_key = yang.gdata.take_json_opt_str(jd, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_json_netinfra_inter__netinfra__ibgp_fullmesh__authentication_key, child_authentication_key)
    child_router = yang.gdata.take_json_opt_list(jd, 'router')
    yang.gdata.maybe_add(children, 'router', from_json_netinfra_inter__netinfra__ibgp_fullmesh__router, child_router)
    return yang.gdata.Container(children)

mut def from_json_netinfra_inter__netinfra__ibgp_fullmesh(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_netinfra_inter__netinfra__ibgp_fullmesh_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['asn'], elements=elements)

class netinfra_inter__netinfra(yang.adata.MNode):
    router: netinfra_inter__netinfra__router
    backbone_link: netinfra_inter__netinfra__backbone_link
    ibgp_fullmesh: netinfra_inter__netinfra__ibgp_fullmesh

    mut def __init__(self, router: list[netinfra_inter__netinfra__router_entry]=[], backbone_link: list[netinfra_inter__netinfra__backbone_link_entry]=[], ibgp_fullmesh: list[netinfra_inter__netinfra__ibgp_fullmesh_entry]=[]):
        self._ns = 'http://example.com/netinfra-inter'
        self.router = netinfra_inter__netinfra__router(elements=router)
        self.backbone_link = netinfra_inter__netinfra__backbone_link(elements=backbone_link)
        self.ibgp_fullmesh = netinfra_inter__netinfra__ibgp_fullmesh(elements=ibgp_fullmesh)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router = self.router
        if _router is not None:
            children['router'] = _router.to_gdata()
        _backbone_link = self.backbone_link
        if _backbone_link is not None:
            children['backbone-link'] = _backbone_link.to_gdata()
        _ibgp_fullmesh = self.ibgp_fullmesh
        if _ibgp_fullmesh is not None:
            children['ibgp-fullmesh'] = _ibgp_fullmesh.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/netinfra-inter', module='netinfra-inter')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> netinfra_inter__netinfra:
        if n is not None:
            return netinfra_inter__netinfra(router=netinfra_inter__netinfra__router.from_gdata(n.get_opt_list('router')), backbone_link=netinfra_inter__netinfra__backbone_link.from_gdata(n.get_opt_list('backbone-link')), ibgp_fullmesh=netinfra_inter__netinfra__ibgp_fullmesh.from_gdata(n.get_opt_list('ibgp-fullmesh')))
        return netinfra_inter__netinfra()

    def copy(self):
        """Create a deep copy of this adata object"""
        return netinfra_inter__netinfra.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /netinfra')
            res.append('{self_name} = netinfra_inter__netinfra()')
        leaves = []
        _router = self.router
        for _element in _router:
            res.append('')
            res.append("# List /netinfra/router element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'router_element = {self_name}.router.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('router_element', False, list_element=True).splitlines())
        _backbone_link = self.backbone_link
        for _element in _backbone_link:
            res.append('')
            res.append("# List /netinfra/backbone-link element: {_element.to_gdata().key_str(['left-router', 'left-interface', 'right-router', 'right-interface'])}")
            list_elem = 'backbone_link_element = {self_name}.backbone_link.create({repr(_element.left_router)}, {repr(_element.left_interface)}, {repr(_element.right_router)}, {repr(_element.right_interface)})'
            res.append(list_elem)
            res.extend(_element.prsrc('backbone_link_element', False, list_element=True).splitlines())
        _ibgp_fullmesh = self.ibgp_fullmesh
        for _element in _ibgp_fullmesh:
            res.append('')
            res.append("# List /netinfra/ibgp-fullmesh element: {_element.to_gdata().key_str(['asn'])}")
            list_elem = 'ibgp_fullmesh_element = {self_name}.ibgp_fullmesh.create({repr(_element.asn)})'
            res.append(list_elem)
            res.extend(_element.prsrc('ibgp_fullmesh_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /netinfra'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['netinfra-inter:netinfra'])


mut def from_xml_netinfra_inter__netinfra(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router = yang.gdata.from_xml_opt_list(node, 'router')
    yang.gdata.maybe_add(children, 'router', from_xml_netinfra_inter__netinfra__router, child_router)
    child_backbone_link = yang.gdata.from_xml_opt_list(node, 'backbone-link')
    yang.gdata.maybe_add(children, 'backbone-link', from_xml_netinfra_inter__netinfra__backbone_link, child_backbone_link)
    child_ibgp_fullmesh = yang.gdata.from_xml_opt_list(node, 'ibgp-fullmesh')
    yang.gdata.maybe_add(children, 'ibgp-fullmesh', from_xml_netinfra_inter__netinfra__ibgp_fullmesh, child_ibgp_fullmesh)
    return yang.gdata.Container(children, ns='http://example.com/netinfra-inter', module='netinfra-inter')

mut def from_json_path_netinfra_inter__netinfra(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'router':
            child = {'router': from_json_path_netinfra_inter__netinfra__router(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/netinfra-inter', module='netinfra-inter')
        if point == 'backbone-link':
            child = {'backbone-link': from_json_path_netinfra_inter__netinfra__backbone_link(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/netinfra-inter', module='netinfra-inter')
        if point == 'ibgp-fullmesh':
            child = {'ibgp-fullmesh': from_json_path_netinfra_inter__netinfra__ibgp_fullmesh(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/netinfra-inter', module='netinfra-inter')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_netinfra_inter__netinfra(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_netinfra_inter__netinfra(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_router = yang.gdata.take_json_opt_list(jd, 'router')
    yang.gdata.maybe_add(children, 'router', from_json_netinfra_inter__netinfra__router, child_router)
    child_backbone_link = yang.gdata.take_json_opt_list(jd, 'backbone-link')
    yang.gdata.maybe_add(children, 'backbone-link', from_json_netinfra_inter__netinfra__backbone_link, child_backbone_link)
    child_ibgp_fullmesh = yang.gdata.take_json_opt_list(jd, 'ibgp-fullmesh')
    yang.gdata.maybe_add(children, 'ibgp-fullmesh', from_json_netinfra_inter__netinfra__ibgp_fullmesh, child_ibgp_fullmesh)
    return yang.gdata.Container(children, ns='http://example.com/netinfra-inter', module='netinfra-inter')

mut def from_json_l3vpn_inter__l3vpns__l3vpn__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__site(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__site(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__site_network_access(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__site_network_access(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__provider_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__provider_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__customer_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__customer_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(yang.adata.MNode):
    as_number: ?int

    mut def __init__(self, as_number: ?int):
        self._ns = 'http://example.com/l3vpn-inter'
        self.as_number = as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?l3vpn_inter__l3vpns__l3vpn__endpoint__bgp:
        if n is not None:
            return l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(as_number=n.get_opt_int('as-number'))
        return None

    def copy(self):
        """Create a deep copy of this adata object"""
        ad = l3vpn_inter__l3vpns__l3vpn__endpoint__bgp.from_gdata(self.to_gdata())
        if ad is not None:
            return ad
        raise Exception('Unreachable in l3vpn_inter__l3vpns__l3vpn__endpoint__bgp.copy()')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /l3vpns/l3vpn/endpoint/bgp')
            res.append('{self_name} = l3vpn_inter__l3vpns__l3vpn__endpoint__bgp()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /l3vpns/l3vpn/endpoint/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['l3vpn-inter:l3vpns', 'l3vpn', 'endpoint', 'bgp'])


mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp__as_number, child_as_number)
    return yang.gdata.Container(children, presence=True)

mut def from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'as-number':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.take_json_opt_int(jd, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp__as_number, child_as_number)
    return yang.gdata.Container(children, presence=True)

class l3vpn_inter__l3vpns__l3vpn__endpoint_entry(yang.adata.MNode):
    device: str
    interface: str
    site: ?str
    site_network_access: ?str
    provider_ipv4_address: ?str
    customer_ipv4_address: ?str
    ipv4_prefix_length: ?int
    bgp: ?l3vpn_inter__l3vpns__l3vpn__endpoint__bgp

    mut def __init__(self, device: str, interface: str, site: ?str, site_network_access: ?str, provider_ipv4_address: ?str, customer_ipv4_address: ?str, ipv4_prefix_length: ?int, bgp: ?l3vpn_inter__l3vpns__l3vpn__endpoint__bgp=None):
        self._ns = 'http://example.com/l3vpn-inter'
        self.device = device
        self.interface = interface
        self.site = site
        self.site_network_access = site_network_access
        self.provider_ipv4_address = provider_ipv4_address
        self.customer_ipv4_address = customer_ipv4_address
        self.ipv4_prefix_length = ipv4_prefix_length
        self.bgp = bgp

    mut def create_bgp(self, as_number):
        res = l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(as_number)
        self.bgp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = yang.gdata.Leaf('string', _device)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        _site = self.site
        if _site is not None:
            children['site'] = yang.gdata.Leaf('string', _site)
        _site_network_access = self.site_network_access
        if _site_network_access is not None:
            children['site-network-access'] = yang.gdata.Leaf('string', _site_network_access)
        _provider_ipv4_address = self.provider_ipv4_address
        if _provider_ipv4_address is not None:
            children['provider-ipv4-address'] = yang.gdata.Leaf('string', _provider_ipv4_address)
        _customer_ipv4_address = self.customer_ipv4_address
        if _customer_ipv4_address is not None:
            children['customer-ipv4-address'] = yang.gdata.Leaf('string', _customer_ipv4_address)
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            children['ipv4-prefix-length'] = yang.gdata.Leaf('uint8', _ipv4_prefix_length)
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> l3vpn_inter__l3vpns__l3vpn__endpoint_entry:
        return l3vpn_inter__l3vpns__l3vpn__endpoint_entry(device=n.get_str('device'), interface=n.get_str('interface'), site=n.get_opt_str('site'), site_network_access=n.get_opt_str('site-network-access'), provider_ipv4_address=n.get_opt_str('provider-ipv4-address'), customer_ipv4_address=n.get_opt_str('customer-ipv4-address'), ipv4_prefix_length=n.get_opt_int('ipv4-prefix-length'), bgp=l3vpn_inter__l3vpns__l3vpn__endpoint__bgp.from_gdata(n.get_opt_cnt('bgp')))

    def copy(self):
        """Create a deep copy of this adata object"""
        return l3vpn_inter__l3vpns__l3vpn__endpoint_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /l3vpns/l3vpn/endpoint')
            res.append('{self_name} = l3vpn_inter__l3vpns__l3vpn__endpoint({repr(self.device)}, {repr(self.interface)})')
        leaves = []
        _site = self.site
        if _site is not None:
            leaves.append('{self_name}.site = {repr(_site)}')
        _site_network_access = self.site_network_access
        if _site_network_access is not None:
            leaves.append('{self_name}.site_network_access = {repr(_site_network_access)}')
        _provider_ipv4_address = self.provider_ipv4_address
        if _provider_ipv4_address is not None:
            leaves.append('{self_name}.provider_ipv4_address = {repr(_provider_ipv4_address)}')
        _customer_ipv4_address = self.customer_ipv4_address
        if _customer_ipv4_address is not None:
            leaves.append('{self_name}.customer_ipv4_address = {repr(_customer_ipv4_address)}')
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            leaves.append('{self_name}.ipv4_prefix_length = {repr(_ipv4_prefix_length)}')
        _bgp = self.bgp
        if _bgp is not None:
            res.append('')
            res.append('# P-container: /l3vpns/l3vpn/endpoint/bgp')
            res.append('bgp = {self_name}.create_bgp()')
            res.extend(_bgp.prsrc('bgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /l3vpns/l3vpn/endpoint'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['l3vpn-inter:l3vpns', 'l3vpn', 'endpoint'])

class l3vpn_inter__l3vpns__l3vpn__endpoint(yang.adata.MNode):
    elements: list[l3vpn_inter__l3vpns__l3vpn__endpoint_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/l3vpn-inter'
        self._name = 'endpoint'
        self.elements = elements

    mut def create(self, device, interface, site, site_network_access, provider_ipv4_address, ipv4_prefix_length):
        for e in self:
            match = True
            if e.device != device:
                match = False
                continue
            if e.interface != interface:
                match = False
                continue
            if match:
                return e

        res = l3vpn_inter__l3vpns__l3vpn__endpoint_entry(device, interface, site, site_network_access, provider_ipv4_address, ipv4_prefix_length)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['device', 'interface'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[l3vpn_inter__l3vpns__l3vpn__endpoint_entry]:
        if n is not None:
            return [l3vpn_inter__l3vpns__l3vpn__endpoint_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return l3vpn_inter__l3vpns__l3vpn__endpoint(elements=copied_elements)

extension l3vpn_inter__l3vpns__l3vpn__endpoint(Iterable[l3vpn_inter__l3vpns__l3vpn__endpoint_entry]):
    def __iter__(self) -> Iterator[l3vpn_inter__l3vpns__l3vpn__endpoint_entry]:
        return self.elements.__iter__()

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_device = yang.gdata.from_xml_str(node, 'device')
    yang.gdata.maybe_add(children, 'device', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__device, child_device)
    child_interface = yang.gdata.from_xml_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__interface, child_interface)
    child_site = yang.gdata.from_xml_opt_str(node, 'site')
    yang.gdata.maybe_add(children, 'site', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__site, child_site)
    child_site_network_access = yang.gdata.from_xml_opt_str(node, 'site-network-access')
    yang.gdata.maybe_add(children, 'site-network-access', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__site_network_access, child_site_network_access)
    child_provider_ipv4_address = yang.gdata.from_xml_opt_str(node, 'provider-ipv4-address')
    yang.gdata.maybe_add(children, 'provider-ipv4-address', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__provider_ipv4_address, child_provider_ipv4_address)
    child_customer_ipv4_address = yang.gdata.from_xml_opt_str(node, 'customer-ipv4-address')
    yang.gdata.maybe_add(children, 'customer-ipv4-address', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__customer_ipv4_address, child_customer_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.from_xml_opt_int(node, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__ipv4_prefix_length, child_ipv4_prefix_length)
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp, child_bgp)
    return yang.gdata.Container(children)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint_element(e) for e in nodes]
    return yang.gdata.List(keys=['device', 'interface'], elements=elements)

mut def from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_l3vpn_inter__l3vpns__l3vpn__endpoint_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['device', 'interface']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['device'] = from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__device(keys[0])
        children['interface'] = from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__interface(keys[1])
        if point == 'site':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'site-network-access':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'provider-ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'customer-ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv4-prefix-length':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'bgp':
            children['bgp'] = from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['device', 'interface']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_l3vpn_inter__l3vpns__l3vpn__endpoint_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['device', 'interface'])))
        return yang.gdata.List(['device', 'interface'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['device', 'interface'], [from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_device = yang.gdata.take_json_str(jd, 'device')
    yang.gdata.maybe_add(children, 'device', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__device, child_device)
    child_interface = yang.gdata.take_json_str(jd, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__interface, child_interface)
    child_site = yang.gdata.take_json_opt_str(jd, 'site')
    yang.gdata.maybe_add(children, 'site', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__site, child_site)
    child_site_network_access = yang.gdata.take_json_opt_str(jd, 'site-network-access')
    yang.gdata.maybe_add(children, 'site-network-access', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__site_network_access, child_site_network_access)
    child_provider_ipv4_address = yang.gdata.take_json_opt_str(jd, 'provider-ipv4-address')
    yang.gdata.maybe_add(children, 'provider-ipv4-address', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__provider_ipv4_address, child_provider_ipv4_address)
    child_customer_ipv4_address = yang.gdata.take_json_opt_str(jd, 'customer-ipv4-address')
    yang.gdata.maybe_add(children, 'customer-ipv4-address', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__customer_ipv4_address, child_customer_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.take_json_opt_int(jd, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__ipv4_prefix_length, child_ipv4_prefix_length)
    child_bgp = yang.gdata.take_json_opt_cnt(jd, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint__bgp, child_bgp)
    return yang.gdata.Container(children)

mut def from_json_l3vpn_inter__l3vpns__l3vpn__endpoint(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_l3vpn_inter__l3vpns__l3vpn__endpoint_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['device', 'interface'], elements=elements)

class l3vpn_inter__l3vpns__l3vpn_entry(yang.adata.MNode):
    name: str
    description: ?str
    endpoint: l3vpn_inter__l3vpns__l3vpn__endpoint

    mut def __init__(self, name: str, description: ?str, endpoint: list[l3vpn_inter__l3vpns__l3vpn__endpoint_entry]=[]):
        self._ns = 'http://example.com/l3vpn-inter'
        self.name = name
        self.description = description
        self.endpoint = l3vpn_inter__l3vpns__l3vpn__endpoint(elements=endpoint)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _endpoint = self.endpoint
        if _endpoint is not None:
            children['endpoint'] = _endpoint.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> l3vpn_inter__l3vpns__l3vpn_entry:
        return l3vpn_inter__l3vpns__l3vpn_entry(name=n.get_str('name'), description=n.get_opt_str('description'), endpoint=l3vpn_inter__l3vpns__l3vpn__endpoint.from_gdata(n.get_opt_list('endpoint')))

    def copy(self):
        """Create a deep copy of this adata object"""
        return l3vpn_inter__l3vpns__l3vpn_entry.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /l3vpns/l3vpn')
            res.append('{self_name} = l3vpn_inter__l3vpns__l3vpn({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _endpoint = self.endpoint
        for _element in _endpoint:
            res.append('')
            res.append("# List /l3vpns/l3vpn/endpoint element: {_element.to_gdata().key_str(['device', 'interface'])}")
            list_elem = 'endpoint_element = {self_name}.endpoint.create({repr(_element.device)}, {repr(_element.interface)})'
            res.append(list_elem)
            res.extend(_element.prsrc('endpoint_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /l3vpns/l3vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['l3vpn-inter:l3vpns', 'l3vpn'])

class l3vpn_inter__l3vpns__l3vpn(yang.adata.MNode):
    elements: list[l3vpn_inter__l3vpns__l3vpn_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/l3vpn-inter'
        self._name = 'l3vpn'
        self.elements = elements

    mut def create(self, name):
        for e in self:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = l3vpn_inter__l3vpns__l3vpn_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[l3vpn_inter__l3vpns__l3vpn_entry]:
        if n is not None:
            return [l3vpn_inter__l3vpns__l3vpn_entry.from_gdata(e) for e in n.elements]
        return []

    def copy(self):
        """Create a deep copy of this list object"""
        # Copy each element in the list
        copied_elements = []
        for e in self:
            ce = e.copy()
            if ce is not None:
                copied_elements.append(ce)
        return l3vpn_inter__l3vpns__l3vpn(elements=copied_elements)

extension l3vpn_inter__l3vpns__l3vpn(Iterable[l3vpn_inter__l3vpns__l3vpn_entry]):
    def __iter__(self) -> Iterator[l3vpn_inter__l3vpns__l3vpn_entry]:
        return self.elements.__iter__()

mut def from_xml_l3vpn_inter__l3vpns__l3vpn_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_l3vpn_inter__l3vpns__l3vpn__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_l3vpn_inter__l3vpns__l3vpn__description, child_description)
    child_endpoint = yang.gdata.from_xml_opt_list(node, 'endpoint')
    yang.gdata.maybe_add(children, 'endpoint', from_xml_l3vpn_inter__l3vpns__l3vpn__endpoint, child_endpoint)
    return yang.gdata.Container(children)

mut def from_xml_l3vpn_inter__l3vpns__l3vpn(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_l3vpn_inter__l3vpns__l3vpn_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_l3vpn_inter__l3vpns__l3vpn_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_l3vpn_inter__l3vpns__l3vpn_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_l3vpn_inter__l3vpns__l3vpn__name(keys[0])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'endpoint':
            children['endpoint'] = from_json_path_l3vpn_inter__l3vpns__l3vpn__endpoint(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_l3vpn_inter__l3vpns__l3vpn(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_l3vpn_inter__l3vpns__l3vpn_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_l3vpn_inter__l3vpns__l3vpn_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_l3vpn_inter__l3vpns__l3vpn_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_l3vpn_inter__l3vpns__l3vpn__name, child_name)
    child_description = yang.gdata.take_json_opt_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_l3vpn_inter__l3vpns__l3vpn__description, child_description)
    child_endpoint = yang.gdata.take_json_opt_list(jd, 'endpoint')
    yang.gdata.maybe_add(children, 'endpoint', from_json_l3vpn_inter__l3vpns__l3vpn__endpoint, child_endpoint)
    return yang.gdata.Container(children)

mut def from_json_l3vpn_inter__l3vpns__l3vpn(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_l3vpn_inter__l3vpns__l3vpn_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

class l3vpn_inter__l3vpns(yang.adata.MNode):
    l3vpn: l3vpn_inter__l3vpns__l3vpn

    mut def __init__(self, l3vpn: list[l3vpn_inter__l3vpns__l3vpn_entry]=[]):
        self._ns = 'http://example.com/l3vpn-inter'
        self.l3vpn = l3vpn_inter__l3vpns__l3vpn(elements=l3vpn)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l3vpn = self.l3vpn
        if _l3vpn is not None:
            children['l3vpn'] = _l3vpn.to_gdata()
        return yang.gdata.Container(children, ns='http://example.com/l3vpn-inter', module='l3vpn-inter')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> l3vpn_inter__l3vpns:
        if n is not None:
            return l3vpn_inter__l3vpns(l3vpn=l3vpn_inter__l3vpns__l3vpn.from_gdata(n.get_opt_list('l3vpn')))
        return l3vpn_inter__l3vpns()

    def copy(self):
        """Create a deep copy of this adata object"""
        return l3vpn_inter__l3vpns.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /l3vpns')
            res.append('{self_name} = l3vpn_inter__l3vpns()')
        leaves = []
        _l3vpn = self.l3vpn
        for _element in _l3vpn:
            res.append('')
            res.append("# List /l3vpns/l3vpn element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'l3vpn_element = {self_name}.l3vpn.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('l3vpn_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /l3vpns'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True, root_path=['l3vpn-inter:l3vpns'])


mut def from_xml_l3vpn_inter__l3vpns(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l3vpn = yang.gdata.from_xml_opt_list(node, 'l3vpn')
    yang.gdata.maybe_add(children, 'l3vpn', from_xml_l3vpn_inter__l3vpns__l3vpn, child_l3vpn)
    return yang.gdata.Container(children, ns='http://example.com/l3vpn-inter', module='l3vpn-inter')

mut def from_json_path_l3vpn_inter__l3vpns(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'l3vpn':
            child = {'l3vpn': from_json_path_l3vpn_inter__l3vpns__l3vpn(jd, rest_path, op) }
            return yang.gdata.Container(child, ns='http://example.com/l3vpn-inter', module='l3vpn-inter')
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_l3vpn_inter__l3vpns(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_l3vpn_inter__l3vpns(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_l3vpn = yang.gdata.take_json_opt_list(jd, 'l3vpn')
    yang.gdata.maybe_add(children, 'l3vpn', from_json_l3vpn_inter__l3vpns__l3vpn, child_l3vpn)
    return yang.gdata.Container(children, ns='http://example.com/l3vpn-inter', module='l3vpn-inter')

class root(yang.adata.MNode):
    netinfra: netinfra_inter__netinfra
    l3vpns: l3vpn_inter__l3vpns

    mut def __init__(self, netinfra: ?netinfra_inter__netinfra=None, l3vpns: ?l3vpn_inter__l3vpns=None):
        self._ns = ''
        self.netinfra = netinfra if netinfra is not None else netinfra_inter__netinfra()
        self.l3vpns = l3vpns if l3vpns is not None else l3vpn_inter__l3vpns()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _netinfra = self.netinfra
        if _netinfra is not None:
            children['netinfra'] = _netinfra.to_gdata()
        _l3vpns = self.l3vpns
        if _l3vpns is not None:
            children['l3vpns'] = _l3vpns.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(netinfra=netinfra_inter__netinfra.from_gdata(n.get_opt_cnt('netinfra')), l3vpns=l3vpn_inter__l3vpns.from_gdata(n.get_opt_cnt('l3vpns')))
        return root()

    def copy(self):
        """Create a deep copy of this adata object"""
        return root.from_gdata(self.to_gdata())

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _netinfra = self.netinfra
        if _netinfra is not None:
            res.extend(_netinfra.prsrc('{self_name}.netinfra', False).splitlines())
        _l3vpns = self.l3vpns
        if _l3vpns is not None:
            res.extend(_l3vpns.prsrc('{self_name}.l3vpns', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

    def prsrc_gen3(self, self_name='ad'):
        # WARNING: this wrapper for the gen3.pradata schema-driven parser compiles the schema on every call!
        s = yang.compile(src_yang())
        return yang.gen3.pradata(s, self.to_gdata(), self_name, loose=True)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_netinfra = yang.gdata.from_xml_opt_cnt(node, 'netinfra', 'http://example.com/netinfra-inter')
    yang.gdata.maybe_add(children, 'netinfra', from_xml_netinfra_inter__netinfra, child_netinfra)
    child_l3vpns = yang.gdata.from_xml_opt_cnt(node, 'l3vpns', 'http://example.com/l3vpn-inter')
    yang.gdata.maybe_add(children, 'l3vpns', from_xml_l3vpn_inter__l3vpns, child_l3vpns)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=True, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'netinfra-inter:netinfra':
            child = {'netinfra': from_json_path_netinfra_inter__netinfra(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'l3vpn-inter:l3vpns':
            child = {'l3vpns': from_json_path_l3vpn_inter__l3vpns(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_netinfra = yang.gdata.take_json_opt_cnt(jd, 'netinfra', 'netinfra-inter')
    yang.gdata.maybe_add(children, 'netinfra', from_json_netinfra_inter__netinfra, child_netinfra)
    child_l3vpns = yang.gdata.take_json_opt_cnt(jd, 'l3vpns', 'l3vpn-inter')
    yang.gdata.maybe_add(children, 'l3vpns', from_json_l3vpn_inter__l3vpns, child_l3vpns)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=True, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=True)

schema_namespaces: set[str] = {
    'http://example.com/l3vpn-inter',
    'http://example.com/netinfra-inter',
}

def prsrc_gen3(data, self_name='ad'):
    # WARNING: this wrapper for the gen3.prsrc schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.pradata(s, data, self_name, loose=True)
