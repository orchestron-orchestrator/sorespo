# WARNING WARNING WARNING WARNING WARNING
# DO NOT MODIFY THIS FILE!! This file is generated!
# WARNING WARNING WARNING WARNING WARNING

import logging
import xml
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

from sorespo.layers.y_0 import netinfra__netinfra__router_entry
from sorespo.layers.y_0 import netinfra__netinfra__router__memory
from sorespo.layers.y_0 import netinfra__netinfra__router__dynstate
from sorespo.layers.y_0 import netinfra__netinfra__backbone_link_entry
from sorespo.layers.y_0 import ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry
from sorespo.layers.y_0 import ietf_l3vpn_svc__l3vpn_svc__sites__site_entry
from sorespo.layers.y_0 import from_xml_netinfra__netinfra__router_element
from sorespo.layers.y_0 import from_xml_netinfra__netinfra__backbone_link_element
from sorespo.layers.y_0 import from_xml_ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_element
from sorespo.layers.y_0 import from_xml_ietf_l3vpn_svc__l3vpn_svc__sites__site_element
from sorespo.layers.y_1_loose import root as output_root

def o_root():
    return output_root()


class Router(ttt.TransformFunction):
    transform: mut(netinfra__netinfra__router_entry, memory: ?netinfra__netinfra__router__memory, dynstate: ?netinfra__netinfra__router__dynstate) -> (yang.adata.MNode, ?yang.adata.MNode)

    @staticmethod
    def input_type():
        """Return the modeled input type for this transform"""
        return netinfra__netinfra__router_entry

    mut def transform_wrapper(self, i: yang.gdata.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = netinfra__netinfra__router_entry.from_gdata(i)
        modeled_memory = netinfra__netinfra__router__memory.from_gdata(memory) if memory is not None else None
        modeled_dynstate = netinfra__netinfra__router__dynstate.from_gdata(dynstate) if dynstate is not None else None

        output, new_memory = self.transform(modeled_input, modeled_memory, modeled_dynstate)
        return output.to_gdata(), new_memory.to_gdata() if new_memory is not None else None

    mut def transform_xml(self, i: xml.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        """
        gdata_input = from_xml_netinfra__netinfra__router_element(i)
        modeled_input = netinfra__netinfra__router_entry.from_gdata(gdata_input)
        modeled_memory = netinfra__netinfra__router__memory.from_gdata(memory) if memory is not None else None
        modeled_dynstate = netinfra__netinfra__router__dynstate.from_gdata(dynstate) if dynstate is not None else None

        output, new_memory = self.transform(modeled_input, modeled_memory, modeled_dynstate)
        return output.to_gdata(), new_memory.to_gdata() if new_memory is not None else None

class BBLink(ttt.TransformFunction):
    transform: mut(netinfra__netinfra__backbone_link_entry) -> yang.adata.MNode

    @staticmethod
    def input_type():
        """Return the modeled input type for this transform"""
        return netinfra__netinfra__backbone_link_entry

    mut def transform_wrapper(self, i: yang.gdata.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = netinfra__netinfra__backbone_link_entry.from_gdata(i)

        return self.transform(modeled_input).to_gdata(), None

    mut def transform_xml(self, i: xml.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        """
        gdata_input = from_xml_netinfra__netinfra__backbone_link_element(i)
        modeled_input = netinfra__netinfra__backbone_link_entry.from_gdata(gdata_input)

        return self.transform(modeled_input).to_gdata(), None

class L3VpnVpnService(ttt.TransformFunction):
    transform: mut(ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry) -> yang.adata.MNode

    @staticmethod
    def input_type():
        """Return the modeled input type for this transform"""
        return ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry

    mut def transform_wrapper(self, i: yang.gdata.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_gdata(i)

        return self.transform(modeled_input).to_gdata(), None

    mut def transform_xml(self, i: xml.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        """
        gdata_input = from_xml_ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_element(i)
        modeled_input = ietf_l3vpn_svc__l3vpn_svc__vpn_services__vpn_service_entry.from_gdata(gdata_input)

        return self.transform(modeled_input).to_gdata(), None

class L3VpnSite(ttt.TransformFunction):
    transform: mut(ietf_l3vpn_svc__l3vpn_svc__sites__site_entry) -> yang.adata.MNode

    @staticmethod
    def input_type():
        """Return the modeled input type for this transform"""
        return ietf_l3vpn_svc__l3vpn_svc__sites__site_entry

    mut def transform_wrapper(self, i: yang.gdata.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from gdata to
        modeled input and back to gdata
        """
        modeled_input = ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_gdata(i)

        return self.transform(modeled_input).to_gdata(), None

    mut def transform_xml(self, i: xml.Node, memory: ?yang.gdata.Node, dynstate: ?yang.gdata.Node) -> (yang.gdata.Node, ?yang.gdata.Node):
        """Wrap the user provided transform method to convert from XML to
        modeled input and return gdata
        """
        gdata_input = from_xml_ietf_l3vpn_svc__l3vpn_svc__sites__site_element(i)
        modeled_input = ietf_l3vpn_svc__l3vpn_svc__sites__site_entry.from_gdata(gdata_input)

        return self.transform(modeled_input).to_gdata(), None
