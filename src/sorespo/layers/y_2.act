import base64
import json
import xml
import yang
import yang.adata
import yang.gdata
import yang.gen3
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


def src_yang():
    res = []
    res.append(r"""module sorespo-rfs {
    yang-version "1.1";
    namespace "http://example.com/sorespo-rfs";
    prefix "sorespo-rfs";

    import orchestron-rfs {
        prefix orfs;
    }
    import ietf-inet-types {
      prefix inet;
    }

    augment "/orfs:rfs" {
        // TODO: should really be a P-container
        list base-config {
            key name;

            orchestron:rfs-transform sorespo.rfs.BaseConfig;

            leaf name {
                type string;
            }

            leaf ipv4-address {
                type string;
                mandatory true;
            }

            leaf ipv6-address {
                type string;
                mandatory true;
            }

            leaf asn {
                type inet:as-number;
                mandatory true;
            }

            leaf ibgp-authentication-key {
                type string;
                mandatory true;
            }
        }

        list backbone-interface {
            key name;

            orchestron:rfs-transform sorespo.rfs.BBInterface;

            leaf name {
                type string;
            }

            leaf ipv4-address {
                type string;
            }

            leaf ipv4-prefix-length {
                type uint8 {
                    range "0..32";
                }
                default "30";
            }

            leaf ipv6-address {
                type string;
            }

            leaf ipv6-prefix-length {
                type uint8 {
                    range "0..128";
                }
            }

            container remote {
                leaf device {
                    type string;
                    mandatory true;
                }
                leaf interface {
                    type string;
                    mandatory true;
                }
            }
            // Temporaryly pass the local device name to the backbone interface
            // to be able set the ISIS NET to work around the Acton YANG leaf-list
            // merge issue.
            container local {
                leaf device {
                    type string;
                    mandatory true;
                }
            }
        }

        list ibgp-neighbor {
          key address;
          orchestron:rfs-transform sorespo.rfs.IbgpNeighbor;
          leaf address {
            type inet:ip-address;
          }
          leaf asn {
            // Need this one for IOS XR: router bgp <asn>
            type inet:as-number;
            mandatory true;
          }
          leaf description {
            type string;
            mandatory true;
          }
        }

        list vrf {
          key name;
          orchestron:rfs-transform sorespo.rfs.Vrf;
          leaf name {
            type string;
          }
          leaf description {
            type string;
          }
          // TODO: compute RD in the layer above and use as key?!
          leaf id {
            type uint32;
            mandatory true;
          }
          leaf router-id {
            type uint32;
            mandatory true;
          }
          leaf asn {
            type inet:as-number;
            mandatory true;
          }
        }

        list vrf-interface {
            key "name";
            orchestron:rfs-transform sorespo.rfs.VrfInterface;
            leaf name {
                type string;
            }
            leaf description {
                type string;
            }
            leaf vrf {
                type string;
                description
                    "VRF name";
                mandatory true;
            }
            leaf ipv4-address {
                type inet:ipv4-address;
            }
            leaf ipv4-prefix-length {
                type uint8 {
                    range "1..31";
                }
                default "30";
            }
        }

    list ebgp-customer {
      key "vrf address";
      orchestron:rfs-transform sorespo.rfs.EbgpCustomer;
      leaf vrf {
        type string;
      }
      leaf address {
        type inet:ip-address;
      }
      leaf local-asn {
        type uint32;
        mandatory true;
      }
      leaf peer-asn {
        type uint32;
        mandatory true;
      }
      leaf description {
        type string;
      }
      leaf authentication-key {
        type string;
        mandatory true;
      }
    }
  }
}
""")
    res.append(r"""module orchestron-rfs {
  yang-version "1.1";
  namespace "http://orchestron.org/yang/orchestron-rfs.yang";
  prefix "orfs";

  import ietf-inet-types {
    prefix inet;
  }

  description "RFS services";

  list device {
    key name;

    orchestron:device;

    leaf name {
      type string;
    }

    leaf description {
      type string;
    }

    leaf type {
      type string;
    }

    list address {
      key name;
      leaf name {
        description "Name of address, e.g. 'loopback' or 'OOB'";
        type string;
      }
      leaf address {
        type inet:host;
        mandatory true;
      }
      leaf port {
        //type uint16;
        type string;
      }
      list initial-credentials {
        key "username password key";
        leaf username {
          type string;
        }
        leaf password {
          type string;
        }
        leaf key {
          type string;
        }
      }
    }

    container credentials {
      leaf username {
        type string;
        mandatory true;
      }
      leaf password {
        type string;
      }
      list key {
        key key;
        leaf key {
          type string;
        }
        leaf private-key {
          type string;
        }
      }
    }

    list initial-credentials {
      key "username password key";
      leaf username {
        type string;
      }
      leaf password {
        type string;
      }
      leaf key {
        type string;
      }
    }

    container mock {
      leaf-list preset {
        type enumeration {
          enum cisco-ios-xr;
          enum juniper-junos;
        }
      }
      list module {
        key "name";
        leaf name {
          type string;
        }
        leaf namespace {
          type string;
          mandatory true;
        }
        leaf revision {
          type string;
        }
        leaf-list feature {
          type string;
        }
      }
    }
  }

  list rfs {
    key name;

    leaf name {
      description "Device name";
      type string;
    }

    // Augment
  }
}
""")
    res.append(r"""module ietf-inet-types {

  namespace "urn:ietf:params:xml:ns:yang:ietf-inet-types";
  prefix "inet";

  organization
   "IETF NETMOD (NETCONF Data Modeling Language) Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/netmod/>
    WG List:  <mailto:netmod@ietf.org>

    WG Chair: David Kessens
              <mailto:david.kessens@nsn.com>

    WG Chair: Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>

    Editor:   Juergen Schoenwaelder
              <mailto:j.schoenwaelder@jacobs-university.de>";

  description
   "This module contains a collection of generally useful derived
    YANG data types for Internet addresses and related things.

    Copyright (c) 2013 IETF Trust and the persons identified as
    authors of the code.  All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (http://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC 6991; see
    the RFC itself for full legal notices.";

  revision 2013-07-15 {
    description
     "This revision adds the following new data types:
      - ip-address-no-zone
      - ipv4-address-no-zone
      - ipv6-address-no-zone";
    reference
     "RFC 6991: Common YANG Data Types";
  }

  revision 2010-09-24 {
    description
     "Initial revision.";
    reference
     "RFC 6021: Common YANG Data Types";
  }

  /*** collection of types related to protocol fields ***/

  typedef ip-version {
    type enumeration {
      enum unknown {
        value "0";
        description
         "An unknown or unspecified version of the Internet
          protocol.";
      }
      enum ipv4 {
        value "1";
        description
         "The IPv4 protocol as defined in RFC 791.";
      }
      enum ipv6 {
        value "2";
        description
         "The IPv6 protocol as defined in RFC 2460.";
      }
    }
    description
     "This value represents the version of the IP protocol.

      In the value set and its semantics, this type is equivalent
      to the InetVersion textual convention of the SMIv2.";
    reference
     "RFC  791: Internet Protocol
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  typedef dscp {
    type uint8 {
      range "0..63";
    }
    description
     "The dscp type represents a Differentiated Services Code Point
      that may be used for marking packets in a traffic stream.
      In the value set and its semantics, this type is equivalent
      to the Dscp textual convention of the SMIv2.";
    reference
     "RFC 3289: Management Information Base for the Differentiated
                Services Architecture
      RFC 2474: Definition of the Differentiated Services Field
                (DS Field) in the IPv4 and IPv6 Headers
      RFC 2780: IANA Allocation Guidelines For Values In
                the Internet Protocol and Related Headers";
  }

  typedef ipv6-flow-label {
    type uint32 {
      range "0..1048575";
    }
    description
     "The ipv6-flow-label type represents the flow identifier or Flow
      Label in an IPv6 packet header that may be used to
      discriminate traffic flows.

      In the value set and its semantics, this type is equivalent
      to the IPv6FlowLabel textual convention of the SMIv2.";
    reference
     "RFC 3595: Textual Conventions for IPv6 Flow Label
      RFC 2460: Internet Protocol, Version 6 (IPv6) Specification";
  }

  typedef port-number {
    type uint16 {
      range "0..65535";
    }
    description
     "The port-number type represents a 16-bit port number of an
      Internet transport-layer protocol such as UDP, TCP, DCCP, or
      SCTP.  Port numbers are assigned by IANA.  A current list of
      all assignments is available from <http://www.iana.org/>.

      Note that the port number value zero is reserved by IANA.  In
      situations where the value zero does not make sense, it can
      be excluded by subtyping the port-number type.
      In the value set and its semantics, this type is equivalent
      to the InetPortNumber textual convention of the SMIv2.";
    reference
     "RFC  768: User Datagram Protocol
      RFC  793: Transmission Control Protocol
      RFC 4960: Stream Control Transmission Protocol
      RFC 4340: Datagram Congestion Control Protocol (DCCP)
      RFC 4001: Textual Conventions for Internet Network Addresses";
  }

  /*** collection of types related to autonomous systems ***/

  typedef as-number {
    type uint32;
    description
     "The as-number type represents autonomous system numbers
      which identify an Autonomous System (AS).  An AS is a set
      of routers under a single technical administration, using
      an interior gateway protocol and common metrics to route
      packets within the AS, and using an exterior gateway
      protocol to route packets to other ASes.  IANA maintains
      the AS number space and has delegated large parts to the
      regional registries.

      Autonomous system numbers were originally limited to 16
      bits.  BGP extensions have enlarged the autonomous system
      number space to 32 bits.  This type therefore uses an uint32
      base type without a range restriction in order to support
      a larger autonomous system number space.

      In the value set and its semantics, this type is equivalent
      to the InetAutonomousSystemNumber textual convention of
      the SMIv2.";
    reference
     "RFC 1930: Guidelines for creation, selection, and registration
                of an Autonomous System (AS)
      RFC 4271: A Border Gateway Protocol 4 (BGP-4)
      RFC 4001: Textual Conventions for Internet Network Addresses
      RFC 6793: BGP Support for Four-Octet Autonomous System (AS)
                Number Space";
  }

  /*** collection of types related to IP addresses and hostnames ***/

  typedef ip-address {
    type union {
      type inet:ipv4-address;
      type inet:ipv6-address;
    }
    description
     "The ip-address type represents an IP address and is IP
      version neutral.  The format of the textual representation
      implies the IP version.  This type supports scoped addresses
      by allowing zone identifiers in the address format.";
    reference
     "RFC 4007: IPv6 Scoped Address Architecture";
  }

  typedef ipv4-address {
    type string {
      pattern
        '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'
      +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
      + '(%[\\p{N}\\p{L}]+)?';
    }
    description
      "The ipv4-address type represents an IPv4 address in
       dotted-quad notation.  The IPv4 address may include a zone
       index, separated by a % sign.

       The zone index is used to disambiguate identical address
       values.  For link-local addresses, the zone index will
       typically be the interface index number or the name of an
       interface.  If the zone index is not present, the default
       zone of the device will be used.

       The canonical format for the zone index is the numerical
       format";
  }

  typedef ipv6-address {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(%[\\p{N}\\p{L}]+)?';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(%.+)?';
    }
    description
     "The ipv6-address type represents an IPv6 address in full,
      mixed, shortened, and shortened-mixed notation.  The IPv6
      address may include a zone index, separated by a % sign.

      The zone index is used to disambiguate identical address
      values.  For link-local addresses, the zone index will
      typically be the interface index number or the name of an
      interface.  If the zone index is not present, the default
      zone of the device will be used.

      The canonical format of IPv6 addresses uses the textual
      representation defined in Section 4 of RFC 5952.  The
      canonical format for the zone index is the numerical
      format as described in Section 11.2 of RFC 4007.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture
      RFC 4007: IPv6 Scoped Address Architecture
      RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  typedef ip-address-no-zone {
    type union {
      type inet:ipv4-address-no-zone;
      type inet:ipv6-address-no-zone;
    }
    description
     "The ip-address-no-zone type represents an IP address and is
      IP version neutral.  The format of the textual representation
      implies the IP version.  This type does not support scoped
      addresses since it does not allow zone identifiers in the
      address format.";
    reference
     "RFC 4007: IPv6 Scoped Address Architecture";
  }

  typedef ipv4-address-no-zone {
    type inet:ipv4-address {
      pattern '[0-9\\.]*';
    }
    description
      "An IPv4 address without a zone index.  This type, derived from
       ipv4-address, may be used in situations where the zone is
       known from the context and hence no zone index is needed.";
  }

  typedef ipv6-address-no-zone {
    type inet:ipv6-address {
      pattern '[0-9a-fA-F:\\.]*';
    }
    description
      "An IPv6 address without a zone index.  This type, derived from
       ipv6-address, may be used in situations where the zone is
       known from the context and hence no zone index is needed.";
    reference
     "RFC 4291: IP Version 6 Addressing Architecture
      RFC 4007: IPv6 Scoped Address Architecture
      RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  typedef ip-prefix {
    type union {
      type inet:ipv4-prefix;
      type inet:ipv6-prefix;
    }
    description
     "The ip-prefix type represents an IP prefix and is IP
      version neutral.  The format of the textual representations
      implies the IP version.";
  }

  typedef ipv4-prefix {
    type string {
      pattern
         '(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}'
       +  '([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
       + '/(([0-9])|([1-2][0-9])|(3[0-2]))';
    }
    description
     "The ipv4-prefix type represents an IPv4 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal to 32.

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The canonical format of an IPv4 prefix has all bits of
      the IPv4 address set to zero that are not part of the
      IPv4 prefix.";
  }

  typedef ipv6-prefix {
    type string {
      pattern '((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}'
            + '((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|'
            + '(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}'
            + '(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))'
            + '(/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))';
      pattern '(([^:]+:){6}(([^:]+:[^:]+)|(.*\\..*)))|'
            + '((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?)'
            + '(/.+)';
    }

    description
     "The ipv6-prefix type represents an IPv6 address prefix.
      The prefix length is given by the number following the
      slash character and must be less than or equal to 128.

      A prefix length value of n corresponds to an IP address
      mask that has n contiguous 1-bits from the most
      significant bit (MSB) and all other bits set to 0.

      The IPv6 address should have all bits that do not belong
      to the prefix set to zero.

      The canonical format of an IPv6 prefix has all bits of
      the IPv6 address set to zero that are not part of the
      IPv6 prefix.  Furthermore, the IPv6 address is represented
      as defined in Section 4 of RFC 5952.";
    reference
     "RFC 5952: A Recommendation for IPv6 Address Text
                Representation";
  }

  /*** collection of domain name and URI types ***/

  typedef domain-name {
    type string {
      pattern
        '((([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.)*'
      + '([a-zA-Z0-9_]([a-zA-Z0-9\\-_]){0,61})?[a-zA-Z0-9]\\.?)'
      + '|\\.';
      length "1..253";
    }
    description
     "The domain-name type represents a DNS domain name.  The
      name SHOULD be fully qualified whenever possible.

      Internet domain names are only loosely specified.  Section
      3.5 of RFC 1034 recommends a syntax (modified in Section
      2.1 of RFC 1123).  The pattern above is intended to allow
      for current practice in domain name use, and some possible
      future expansion.  It is designed to hold various types of
      domain names, including names used for A or AAAA records
      (host names) and other records, such as SRV records.  Note
      that Internet host names have a stricter syntax (described
      in RFC 952) than the DNS recommendations in RFCs 1034 and
      1123, and that systems that want to store host names in
      schema nodes using the domain-name type are recommended to
      adhere to this stricter standard to ensure interoperability.

      The encoding of DNS names in the DNS protocol is limited
      to 255 characters.  Since the encoding consists of labels
      prefixed by a length bytes and there is a trailing NULL
      byte, only 253 characters can appear in the textual dotted
      notation.

      The description clause of schema nodes using the domain-name
      type MUST describe when and how these names are resolved to
      IP addresses.  Note that the resolution of a domain-name value
      may require to query multiple DNS records (e.g., A for IPv4
      and AAAA for IPv6).  The order of the resolution process and
      which DNS record takes precedence can either be defined
      explicitly or may depend on the configuration of the
      resolver.

      Domain-name values use the US-ASCII encoding.  Their canonical
      format uses lowercase US-ASCII characters.  Internationalized
      domain names MUST be A-labels as per RFC 5890.";
    reference
     "RFC  952: DoD Internet Host Table Specification
      RFC 1034: Domain Names - Concepts and Facilities
      RFC 1123: Requirements for Internet Hosts -- Application
                and Support
      RFC 2782: A DNS RR for specifying the location of services
                (DNS SRV)
      RFC 5890: Internationalized Domain Names in Applications
                (IDNA): Definitions and Document Framework";
  }

  typedef host {
    type union {
      type inet:ip-address;
      type inet:domain-name;
    }
    description
     "The host type represents either an IP address or a DNS
      domain name.";
  }

  typedef uri {
    type string;
    description
     "The uri type represents a Uniform Resource Identifier
      (URI) as defined by STD 66.

      Objects using the uri type MUST be in US-ASCII encoding,
      and MUST be normalized as described by RFC 3986 Sections
      6.2.1, 6.2.2.1, and 6.2.2.2.  All unnecessary
      percent-encoding is removed, and all case-insensitive
      characters are set to lowercase except for hexadecimal
      digits, which are normalized to uppercase as described in
      Section 6.2.2.1.

      The purpose of this normalization is to help provide
      unique URIs.  Note that this normalization is not
      sufficient to provide uniqueness.  Two URIs that are
      textually distinct after this normalization may still be
      equivalent.

      Objects using the uri type may restrict the schemes that
      they permit.  For example, 'data:' and 'urn:' schemes
      might not be appropriate.

      A zero-length URI is not a valid URI.  This can be used to
      express 'URI absent' where required.

      In the value set and its semantics, this type is equivalent
      to the Uri SMIv2 textual convention defined in RFC 5017.";
    reference
     "RFC 3986: Uniform Resource Identifier (URI): Generic Syntax
      RFC 3305: Report from the Joint W3C/IETF URI Planning Interest
                Group: Uniform Resource Identifiers (URIs), URLs,
                and Uniform Resource Names (URNs): Clarifications
                and Recommendations
      RFC 5017: MIB Textual Conventions for Uniform Resource
                Identifiers (URIs)";
  }

}
""")
    return res


mut def from_json_orchestron_rfs__device__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_orchestron_rfs__device__address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_orchestron_rfs__device__address__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__address__port(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__address__initial_credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__address__initial_credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__address__initial_credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__address__initial_credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__address__initial_credentials__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__address__initial_credentials__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__device__address__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address__initial_credentials_entry:
        return orchestron_rfs__device__address__initial_credentials_entry(username=n.get_str('username'), password=n.get_str('password'), key=n.get_str('key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/address/initial-credentials')
            res.append('{self_name} = orchestron_rfs__device__address__initial_credentials({repr(self.username)}, {repr(self.password)}, {repr(self.key)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/address/initial-credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__address__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                continue
            if e.password != password:
                match = False
                continue
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__address__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__address__initial_credentials_entry]:
        if n is not None:
            return [orchestron_rfs__device__address__initial_credentials_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device__address__initial_credentials_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_username = yang.gdata.from_xml_str(node, 'username')
    yang.gdata.maybe_add(children, 'username', from_xml_orchestron_rfs__device__address__initial_credentials__username, child_username)
    child_password = yang.gdata.from_xml_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_orchestron_rfs__device__address__initial_credentials__password, child_password)
    child_key = yang.gdata.from_xml_str(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_orchestron_rfs__device__address__initial_credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device__address__initial_credentials(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device__address__initial_credentials_element(e) for e in nodes]
    return yang.gdata.List(keys=['username', 'password', 'key'], elements=elements)

mut def from_json_path_orchestron_rfs__device__address__initial_credentials_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device__address__initial_credentials_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['username', 'password', 'key']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['username'] = from_json_orchestron_rfs__device__address__initial_credentials__username(keys[0])
        children['password'] = from_json_orchestron_rfs__device__address__initial_credentials__password(keys[1])
        children['key'] = from_json_orchestron_rfs__device__address__initial_credentials__key(keys[2])
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device__address__initial_credentials(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['username', 'password', 'key']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device__address__initial_credentials_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['username', 'password', 'key'])))
        return yang.gdata.List(['username', 'password', 'key'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['username', 'password', 'key'], [from_json_path_orchestron_rfs__device__address__initial_credentials_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device__address__initial_credentials_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_username = yang.gdata.take_json_str(jd, 'username')
    yang.gdata.maybe_add(children, 'username', from_json_orchestron_rfs__device__address__initial_credentials__username, child_username)
    child_password = yang.gdata.take_json_str(jd, 'password')
    yang.gdata.maybe_add(children, 'password', from_json_orchestron_rfs__device__address__initial_credentials__password, child_password)
    child_key = yang.gdata.take_json_str(jd, 'key')
    yang.gdata.maybe_add(children, 'key', from_json_orchestron_rfs__device__address__initial_credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__address__initial_credentials(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device__address__initial_credentials_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['username', 'password', 'key'], elements=elements)

class orchestron_rfs__device__address_entry(yang.adata.MNode):
    name: str
    address: str
    port: ?str
    initial_credentials: orchestron_rfs__device__address__initial_credentials

    mut def __init__(self, name: str, address: str, port: ?str, initial_credentials: list[orchestron_rfs__device__address__initial_credentials_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.address = address
        self.port = port
        self.initial_credentials = orchestron_rfs__device__address__initial_credentials(elements=initial_credentials)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        _port = self.port
        if _port is not None:
            children['port'] = yang.gdata.Leaf('string', _port)
        _initial_credentials = self.initial_credentials
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__address_entry:
        return orchestron_rfs__device__address_entry(name=n.get_str('name'), address=n.get_str('address'), port=n.get_opt_str('port'), initial_credentials=orchestron_rfs__device__address__initial_credentials.from_gdata(n.get_opt_list('initial-credentials')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/address')
            res.append('{self_name} = orchestron_rfs__device__address({repr(self.name)}, {repr(self.address)})')
        leaves = []
        _port = self.port
        if _port is not None:
            leaves.append('{self_name}.port = {repr(_port)}')
        _initial_credentials = self.initial_credentials
        for _element in _initial_credentials.elements:
            res.append('')
            res.append("# List /device/address/initial-credentials element: {_element.to_gdata().key_str(['username', 'password', 'key'])}")
            list_elem = 'initial_credentials_element = {self_name}.initial_credentials.create({repr(_element.username)}, {repr(_element.password)}, {repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('initial_credentials_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__address(yang.adata.MNode):
    elements: list[orchestron_rfs__device__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name, address):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__address_entry(name, address)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__address_entry]:
        if n is not None:
            return [orchestron_rfs__device__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__device__address__name, child_name)
    child_address = yang.gdata.from_xml_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_orchestron_rfs__device__address__address, child_address)
    child_port = yang.gdata.from_xml_opt_str(node, 'port')
    yang.gdata.maybe_add(children, 'port', from_xml_orchestron_rfs__device__address__port, child_port)
    child_initial_credentials = yang.gdata.from_xml_opt_list(node, 'initial-credentials')
    yang.gdata.maybe_add(children, 'initial-credentials', from_xml_orchestron_rfs__device__address__initial_credentials, child_initial_credentials)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_orchestron_rfs__device__address_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device__address_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__device__address__name(keys[0])
        if point == 'address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'port':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'initial-credentials':
            children['initial-credentials'] = from_json_path_orchestron_rfs__device__address__initial_credentials(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device__address(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device__address_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__device__address_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device__address_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__device__address__name, child_name)
    child_address = yang.gdata.take_json_str(jd, 'address')
    yang.gdata.maybe_add(children, 'address', from_json_orchestron_rfs__device__address__address, child_address)
    child_port = yang.gdata.take_json_opt_str(jd, 'port')
    yang.gdata.maybe_add(children, 'port', from_json_orchestron_rfs__device__address__port, child_port)
    child_initial_credentials = yang.gdata.take_json_opt_list(jd, 'initial-credentials')
    yang.gdata.maybe_add(children, 'initial-credentials', from_json_orchestron_rfs__device__address__initial_credentials, child_initial_credentials)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__address(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device__address_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_orchestron_rfs__device__credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__credentials__key__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__credentials__key__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__credentials__key__private_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__credentials__key__private_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__device__credentials__key_entry(yang.adata.MNode):
    key: str
    private_key: ?str

    mut def __init__(self, key: str, private_key: ?str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.key = key
        self.private_key = private_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        _private_key = self.private_key
        if _private_key is not None:
            children['private-key'] = yang.gdata.Leaf('string', _private_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__credentials__key_entry:
        return orchestron_rfs__device__credentials__key_entry(key=n.get_str('key'), private_key=n.get_opt_str('private-key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/credentials/key')
            res.append('{self_name} = orchestron_rfs__device__credentials__key({repr(self.key)})')
        leaves = []
        _private_key = self.private_key
        if _private_key is not None:
            leaves.append('{self_name}.private_key = {repr(_private_key)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/credentials/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__credentials__key(yang.adata.MNode):
    elements: list[orchestron_rfs__device__credentials__key_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'key'
        self.elements = elements

    mut def create(self, key):
        for e in self.elements:
            match = True
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__credentials__key_entry(key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__credentials__key_entry]:
        if n is not None:
            return [orchestron_rfs__device__credentials__key_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device__credentials__key_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_key = yang.gdata.from_xml_str(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_orchestron_rfs__device__credentials__key__key, child_key)
    child_private_key = yang.gdata.from_xml_opt_str(node, 'private-key')
    yang.gdata.maybe_add(children, 'private-key', from_xml_orchestron_rfs__device__credentials__key__private_key, child_private_key)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device__credentials__key(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device__credentials__key_element(e) for e in nodes]
    return yang.gdata.List(keys=['key'], elements=elements)

mut def from_json_path_orchestron_rfs__device__credentials__key_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device__credentials__key_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['key']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['key'] = from_json_orchestron_rfs__device__credentials__key__key(keys[0])
        if point == 'private-key':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device__credentials__key(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['key']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device__credentials__key_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['key'])))
        return yang.gdata.List(['key'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['key'], [from_json_path_orchestron_rfs__device__credentials__key_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device__credentials__key_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_key = yang.gdata.take_json_str(jd, 'key')
    yang.gdata.maybe_add(children, 'key', from_json_orchestron_rfs__device__credentials__key__key, child_key)
    child_private_key = yang.gdata.take_json_opt_str(jd, 'private-key')
    yang.gdata.maybe_add(children, 'private-key', from_json_orchestron_rfs__device__credentials__key__private_key, child_private_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__credentials__key(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device__credentials__key_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['key'], elements=elements)

class orchestron_rfs__device__credentials(yang.adata.MNode):
    username: str
    password: ?str
    key: orchestron_rfs__device__credentials__key

    mut def __init__(self, username: str, password: ?str, key: list[orchestron_rfs__device__credentials__key_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = orchestron_rfs__device__credentials__key(elements=key)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__credentials:
        if n is not None:
            return orchestron_rfs__device__credentials(username=n.get_str('username'), password=n.get_opt_str('password'), key=orchestron_rfs__device__credentials__key.from_gdata(n.get_opt_list('key')))
        raise ValueError('Missing required subtree orchestron_rfs__device__credentials')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/credentials')
            res.append('{self_name} = orchestron_rfs__device__credentials({repr(self.username)})')
        leaves = []
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        _key = self.key
        for _element in _key.elements:
            res.append('')
            res.append("# List /device/credentials/key element: {_element.to_gdata().key_str(['key'])}")
            list_elem = 'key_element = {self_name}.key.create({repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('key_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_orchestron_rfs__device__credentials(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_username = yang.gdata.from_xml_str(node, 'username')
    yang.gdata.maybe_add(children, 'username', from_xml_orchestron_rfs__device__credentials__username, child_username)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_orchestron_rfs__device__credentials__password, child_password)
    child_key = yang.gdata.from_xml_opt_list(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_orchestron_rfs__device__credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_json_path_orchestron_rfs__device__credentials(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'username':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'password':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'key':
            child = {'key': from_json_path_orchestron_rfs__device__credentials__key(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_orchestron_rfs__device__credentials(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_orchestron_rfs__device__credentials(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_username = yang.gdata.take_json_str(jd, 'username')
    yang.gdata.maybe_add(children, 'username', from_json_orchestron_rfs__device__credentials__username, child_username)
    child_password = yang.gdata.take_json_opt_str(jd, 'password')
    yang.gdata.maybe_add(children, 'password', from_json_orchestron_rfs__device__credentials__password, child_password)
    child_key = yang.gdata.take_json_opt_list(jd, 'key')
    yang.gdata.maybe_add(children, 'key', from_json_orchestron_rfs__device__credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__initial_credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__initial_credentials__username(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__initial_credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__initial_credentials__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__initial_credentials__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__initial_credentials__key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__device__initial_credentials_entry(yang.adata.MNode):
    username: str
    password: str
    key: str

    mut def __init__(self, username: str, password: str, key: str):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.username = username
        self.password = password
        self.key = key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _username = self.username
        if _username is not None:
            children['username'] = yang.gdata.Leaf('string', _username)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        _key = self.key
        if _key is not None:
            children['key'] = yang.gdata.Leaf('string', _key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__initial_credentials_entry:
        return orchestron_rfs__device__initial_credentials_entry(username=n.get_str('username'), password=n.get_str('password'), key=n.get_str('key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/initial-credentials')
            res.append('{self_name} = orchestron_rfs__device__initial_credentials({repr(self.username)}, {repr(self.password)}, {repr(self.key)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/initial-credentials'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__initial_credentials(yang.adata.MNode):
    elements: list[orchestron_rfs__device__initial_credentials_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'initial-credentials'
        self.elements = elements

    mut def create(self, username, password, key):
        for e in self.elements:
            match = True
            if e.username != username:
                match = False
                continue
            if e.password != password:
                match = False
                continue
            if e.key != key:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__initial_credentials_entry(username, password, key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['username', 'password', 'key'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__initial_credentials_entry]:
        if n is not None:
            return [orchestron_rfs__device__initial_credentials_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device__initial_credentials_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_username = yang.gdata.from_xml_str(node, 'username')
    yang.gdata.maybe_add(children, 'username', from_xml_orchestron_rfs__device__initial_credentials__username, child_username)
    child_password = yang.gdata.from_xml_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_orchestron_rfs__device__initial_credentials__password, child_password)
    child_key = yang.gdata.from_xml_str(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_orchestron_rfs__device__initial_credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device__initial_credentials(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device__initial_credentials_element(e) for e in nodes]
    return yang.gdata.List(keys=['username', 'password', 'key'], elements=elements)

mut def from_json_path_orchestron_rfs__device__initial_credentials_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device__initial_credentials_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['username', 'password', 'key']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['username'] = from_json_orchestron_rfs__device__initial_credentials__username(keys[0])
        children['password'] = from_json_orchestron_rfs__device__initial_credentials__password(keys[1])
        children['key'] = from_json_orchestron_rfs__device__initial_credentials__key(keys[2])
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device__initial_credentials(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['username', 'password', 'key']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device__initial_credentials_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['username', 'password', 'key'])))
        return yang.gdata.List(['username', 'password', 'key'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['username', 'password', 'key'], [from_json_path_orchestron_rfs__device__initial_credentials_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device__initial_credentials_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_username = yang.gdata.take_json_str(jd, 'username')
    yang.gdata.maybe_add(children, 'username', from_json_orchestron_rfs__device__initial_credentials__username, child_username)
    child_password = yang.gdata.take_json_str(jd, 'password')
    yang.gdata.maybe_add(children, 'password', from_json_orchestron_rfs__device__initial_credentials__password, child_password)
    child_key = yang.gdata.take_json_str(jd, 'key')
    yang.gdata.maybe_add(children, 'key', from_json_orchestron_rfs__device__initial_credentials__key, child_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__initial_credentials(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device__initial_credentials_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['username', 'password', 'key'], elements=elements)

mut def from_json_orchestron_rfs__device__mock__preset(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

mut def from_xml_orchestron_rfs__device__mock__preset(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

mut def from_json_orchestron_rfs__device__mock__module__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__mock__module__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__mock__module__namespace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__mock__module__namespace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__mock__module__revision(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__device__mock__module__revision(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__device__mock__module__feature(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val)

mut def from_xml_orchestron_rfs__device__mock__module__feature(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val)

class orchestron_rfs__device__mock__module_entry(yang.adata.MNode):
    name: str
    namespace: str
    revision: ?str
    feature: list[str]

    mut def __init__(self, name: str, namespace: str, revision: ?str, feature: ?list[str]=None):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.namespace = namespace
        self.revision = revision
        self.feature = feature if feature is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _namespace = self.namespace
        if _namespace is not None:
            children['namespace'] = yang.gdata.Leaf('string', _namespace)
        _revision = self.revision
        if _revision is not None:
            children['revision'] = yang.gdata.Leaf('string', _revision)
        _feature = self.feature
        if _feature is not None:
            children['feature'] = yang.gdata.LeafList('string', _feature)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device__mock__module_entry:
        return orchestron_rfs__device__mock__module_entry(name=n.get_str('name'), namespace=n.get_str('namespace'), revision=n.get_opt_str('revision'), feature=n.get_opt_strs('feature'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/mock/module')
            res.append('{self_name} = orchestron_rfs__device__mock__module({repr(self.name)}, {repr(self.namespace)})')
        leaves = []
        _revision = self.revision
        if _revision is not None:
            leaves.append('{self_name}.revision = {repr(_revision)}')
        _feature = self.feature
        if _feature is not None:
            leaves.append('{self_name}.feature = {repr(_feature)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/mock/module'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device__mock__module(yang.adata.MNode):
    elements: list[orchestron_rfs__device__mock__module_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'module'
        self.elements = elements

    mut def create(self, name, namespace):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device__mock__module_entry(name, namespace)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device__mock__module_entry]:
        if n is not None:
            return [orchestron_rfs__device__mock__module_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device__mock__module_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__device__mock__module__name, child_name)
    child_namespace = yang.gdata.from_xml_str(node, 'namespace')
    yang.gdata.maybe_add(children, 'namespace', from_xml_orchestron_rfs__device__mock__module__namespace, child_namespace)
    child_revision = yang.gdata.from_xml_opt_str(node, 'revision')
    yang.gdata.maybe_add(children, 'revision', from_xml_orchestron_rfs__device__mock__module__revision, child_revision)
    child_feature = yang.gdata.from_xml_opt_strs(node, 'feature')
    yang.gdata.maybe_add(children, 'feature', from_xml_orchestron_rfs__device__mock__module__feature, child_feature)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device__mock__module(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device__mock__module_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_json_path_orchestron_rfs__device__mock__module_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device__mock__module_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__device__mock__module__name(keys[0])
        if point == 'namespace':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'revision':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'feature':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device__mock__module(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device__mock__module_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements)
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__device__mock__module_element(jd, path, op)])
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device__mock__module_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__device__mock__module__name, child_name)
    child_namespace = yang.gdata.take_json_str(jd, 'namespace')
    yang.gdata.maybe_add(children, 'namespace', from_json_orchestron_rfs__device__mock__module__namespace, child_namespace)
    child_revision = yang.gdata.take_json_opt_str(jd, 'revision')
    yang.gdata.maybe_add(children, 'revision', from_json_orchestron_rfs__device__mock__module__revision, child_revision)
    child_feature = yang.gdata.take_json_opt_strs(jd, 'feature')
    yang.gdata.maybe_add(children, 'feature', from_json_orchestron_rfs__device__mock__module__feature, child_feature)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device__mock__module(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device__mock__module_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements)

class orchestron_rfs__device__mock(yang.adata.MNode):
    preset: list[str]
    module: orchestron_rfs__device__mock__module

    mut def __init__(self, preset: ?list[str]=None, module: list[orchestron_rfs__device__mock__module_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.preset = preset if preset is not None else []
        self.module = orchestron_rfs__device__mock__module(elements=module)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _preset = self.preset
        if _preset is not None:
            children['preset'] = yang.gdata.LeafList('enumeration', _preset)
        _module = self.module
        if _module is not None:
            children['module'] = _module.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__device__mock:
        if n is not None:
            return orchestron_rfs__device__mock(preset=n.get_opt_strs('preset'), module=orchestron_rfs__device__mock__module.from_gdata(n.get_opt_list('module')))
        return orchestron_rfs__device__mock()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device/mock')
            res.append('{self_name} = orchestron_rfs__device__mock()')
        leaves = []
        _preset = self.preset
        if _preset is not None:
            leaves.append('{self_name}.preset = {repr(_preset)}')
        _module = self.module
        for _element in _module.elements:
            res.append('')
            res.append("# List /device/mock/module element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'module_element = {self_name}.module.create({repr(_element.name)}, {repr(_element.namespace)})'
            res.append(list_elem)
            res.extend(_element.prsrc('module_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device/mock'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_orchestron_rfs__device__mock(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_preset = yang.gdata.from_xml_opt_strs(node, 'preset')
    yang.gdata.maybe_add(children, 'preset', from_xml_orchestron_rfs__device__mock__preset, child_preset)
    child_module = yang.gdata.from_xml_opt_list(node, 'module')
    yang.gdata.maybe_add(children, 'module', from_xml_orchestron_rfs__device__mock__module, child_module)
    return yang.gdata.Container(children)

mut def from_json_path_orchestron_rfs__device__mock(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'preset':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'module':
            child = {'module': from_json_path_orchestron_rfs__device__mock__module(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_orchestron_rfs__device__mock(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_orchestron_rfs__device__mock(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_preset = yang.gdata.take_json_opt_strs(jd, 'preset')
    yang.gdata.maybe_add(children, 'preset', from_json_orchestron_rfs__device__mock__preset, child_preset)
    child_module = yang.gdata.take_json_opt_list(jd, 'module')
    yang.gdata.maybe_add(children, 'module', from_json_orchestron_rfs__device__mock__module, child_module)
    return yang.gdata.Container(children)

class orchestron_rfs__device_entry(yang.adata.MNode):
    name: str
    description: ?str
    type: ?str
    address: orchestron_rfs__device__address
    credentials: orchestron_rfs__device__credentials
    initial_credentials: orchestron_rfs__device__initial_credentials
    mock: orchestron_rfs__device__mock

    mut def __init__(self, name: str, credentials: orchestron_rfs__device__credentials, description: ?str, type: ?str, address: list[orchestron_rfs__device__address_entry]=[], initial_credentials: list[orchestron_rfs__device__initial_credentials_entry]=[], mock: ?orchestron_rfs__device__mock=None):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.description = description
        self.type = type
        self.address = orchestron_rfs__device__address(elements=address)
        self.credentials = credentials
        self.initial_credentials = orchestron_rfs__device__initial_credentials(elements=initial_credentials)
        self.mock = mock if mock is not None else orchestron_rfs__device__mock()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('string', _type)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _credentials = self.credentials
        if _credentials is not None:
            children['credentials'] = _credentials.to_gdata()
        _initial_credentials = self.initial_credentials
        if _initial_credentials is not None:
            children['initial-credentials'] = _initial_credentials.to_gdata()
        _mock = self.mock
        if _mock is not None:
            children['mock'] = _mock.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__device_entry:
        return orchestron_rfs__device_entry(name=n.get_str('name'), description=n.get_opt_str('description'), type=n.get_opt_str('type'), address=orchestron_rfs__device__address.from_gdata(n.get_opt_list('address')), credentials=orchestron_rfs__device__credentials.from_gdata(n.get_cnt('credentials')), initial_credentials=orchestron_rfs__device__initial_credentials.from_gdata(n.get_opt_list('initial-credentials')), mock=orchestron_rfs__device__mock.from_gdata(n.get_opt_cnt('mock')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /device')
            res.append('self_credentials = orchestron_rfs__device__credentials({repr(self.credentials.username)})')
            res.append('{self_name} = orchestron_rfs__device({repr(self.name)}, self_credentials)')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /device/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)}, {repr(_element.address)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        _credentials = self.credentials
        if _credentials is not None:
            res.extend(_credentials.prsrc('{self_name}.credentials', False).splitlines())
        _initial_credentials = self.initial_credentials
        for _element in _initial_credentials.elements:
            res.append('')
            res.append("# List /device/initial-credentials element: {_element.to_gdata().key_str(['username', 'password', 'key'])}")
            list_elem = 'initial_credentials_element = {self_name}.initial_credentials.create({repr(_element.username)}, {repr(_element.password)}, {repr(_element.key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('initial_credentials_element', False, list_element=True).splitlines())
        _mock = self.mock
        if _mock is not None:
            res.extend(_mock.prsrc('{self_name}.mock', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /device'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__device(yang.adata.MNode):
    elements: list[orchestron_rfs__device_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'device'
        self.elements = elements

    mut def create(self, name, credentials):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__device_entry(name, credentials)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__device_entry]:
        if n is not None:
            return [orchestron_rfs__device_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__device_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__device__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_orchestron_rfs__device__description, child_description)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_orchestron_rfs__device__type, child_type)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_orchestron_rfs__device__address, child_address)
    child_credentials = yang.gdata.from_xml_cnt(node, 'credentials')
    yang.gdata.maybe_add(children, 'credentials', from_xml_orchestron_rfs__device__credentials, child_credentials)
    child_initial_credentials = yang.gdata.from_xml_opt_list(node, 'initial-credentials')
    yang.gdata.maybe_add(children, 'initial-credentials', from_xml_orchestron_rfs__device__initial_credentials, child_initial_credentials)
    child_mock = yang.gdata.from_xml_opt_cnt(node, 'mock')
    yang.gdata.maybe_add(children, 'mock', from_xml_orchestron_rfs__device__mock, child_mock)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__device(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__device_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

mut def from_json_path_orchestron_rfs__device_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__device_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__device__name(keys[0])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'type':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'address':
            children['address'] = from_json_path_orchestron_rfs__device__address(jd, rest_path, op)
        if point == 'credentials':
            children['credentials'] = from_json_path_orchestron_rfs__device__credentials(jd, rest_path, op)
        if point == 'initial-credentials':
            children['initial-credentials'] = from_json_path_orchestron_rfs__device__initial_credentials(jd, rest_path, op)
        if point == 'mock':
            children['mock'] = from_json_path_orchestron_rfs__device__mock(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__device(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__device_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__device_element(jd, path, op)], ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__device_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__device__name, child_name)
    child_description = yang.gdata.take_json_opt_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_orchestron_rfs__device__description, child_description)
    child_type = yang.gdata.take_json_opt_str(jd, 'type')
    yang.gdata.maybe_add(children, 'type', from_json_orchestron_rfs__device__type, child_type)
    child_address = yang.gdata.take_json_opt_list(jd, 'address')
    yang.gdata.maybe_add(children, 'address', from_json_orchestron_rfs__device__address, child_address)
    child_credentials = yang.gdata.take_json_cnt(jd, 'credentials')
    yang.gdata.maybe_add(children, 'credentials', from_json_orchestron_rfs__device__credentials, child_credentials)
    child_initial_credentials = yang.gdata.take_json_opt_list(jd, 'initial-credentials')
    yang.gdata.maybe_add(children, 'initial-credentials', from_json_orchestron_rfs__device__initial_credentials, child_initial_credentials)
    child_mock = yang.gdata.take_json_opt_cnt(jd, 'mock')
    yang.gdata.maybe_add(children, 'mock', from_json_orchestron_rfs__device__mock, child_mock)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__device(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__device_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

mut def from_json_orchestron_rfs__rfs__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__base_config__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__base_config__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__base_config__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__base_config__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__base_config__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__base_config__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__base_config__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__base_config__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__base_config__ibgp_authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__base_config__ibgp_authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__rfs__base_config_entry(yang.adata.MNode):
    name: str
    ipv4_address: str
    ipv6_address: str
    asn: int
    ibgp_authentication_key: str

    mut def __init__(self, name: str, ipv4_address: str, ipv6_address: str, asn: int, ibgp_authentication_key: str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.name = name
        self.ipv4_address = ipv4_address
        self.ipv6_address = ipv6_address
        self.asn = asn
        self.ibgp_authentication_key = ibgp_authentication_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _ipv6_address = self.ipv6_address
        if _ipv6_address is not None:
            children['ipv6-address'] = yang.gdata.Leaf('string', _ipv6_address)
        _asn = self.asn
        if _asn is not None:
            children['asn'] = yang.gdata.Leaf('uint32', _asn)
        _ibgp_authentication_key = self.ibgp_authentication_key
        if _ibgp_authentication_key is not None:
            children['ibgp-authentication-key'] = yang.gdata.Leaf('string', _ibgp_authentication_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__base_config_entry:
        return orchestron_rfs__rfs__base_config_entry(name=n.get_str('name'), ipv4_address=n.get_str('ipv4-address'), ipv6_address=n.get_str('ipv6-address'), asn=n.get_int('asn'), ibgp_authentication_key=n.get_str('ibgp-authentication-key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/base-config')
            res.append('{self_name} = orchestron_rfs__rfs__base_config({repr(self.name)}, {repr(self.ipv4_address)}, {repr(self.ipv6_address)}, {repr(self.asn)}, {repr(self.ibgp_authentication_key)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/base-config'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__base_config(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__base_config_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'base-config'
        self.elements = elements

    mut def create(self, name, ipv4_address, ipv6_address, asn, ibgp_authentication_key):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__base_config_entry(name, ipv4_address, ipv6_address, asn, ibgp_authentication_key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__base_config_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__base_config_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__base_config_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__rfs__base_config__name, child_name)
    child_ipv4_address = yang.gdata.from_xml_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_orchestron_rfs__rfs__base_config__ipv4_address, child_ipv4_address)
    child_ipv6_address = yang.gdata.from_xml_str(node, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_xml_orchestron_rfs__rfs__base_config__ipv6_address, child_ipv6_address)
    child_asn = yang.gdata.from_xml_int(node, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_xml_orchestron_rfs__rfs__base_config__asn, child_asn)
    child_ibgp_authentication_key = yang.gdata.from_xml_str(node, 'ibgp-authentication-key')
    yang.gdata.maybe_add(children, 'ibgp-authentication-key', from_xml_orchestron_rfs__rfs__base_config__ibgp_authentication_key, child_ibgp_authentication_key)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__base_config(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__base_config_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__base_config_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__base_config_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__rfs__base_config__name(keys[0])
        if point == 'ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv6-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'asn':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ibgp-authentication-key':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__base_config(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__base_config_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__rfs__base_config_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__base_config_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__rfs__base_config__name, child_name)
    child_ipv4_address = yang.gdata.take_json_str(jd, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_json_orchestron_rfs__rfs__base_config__ipv4_address, child_ipv4_address)
    child_ipv6_address = yang.gdata.take_json_str(jd, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_json_orchestron_rfs__rfs__base_config__ipv6_address, child_ipv6_address)
    child_asn = yang.gdata.take_json_int(jd, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_json_orchestron_rfs__rfs__base_config__asn, child_asn)
    child_ibgp_authentication_key = yang.gdata.take_json_str(jd, 'ibgp-authentication-key')
    yang.gdata.maybe_add(children, 'ibgp-authentication-key', from_json_orchestron_rfs__rfs__base_config__ibgp_authentication_key, child_ibgp_authentication_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__base_config(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__base_config_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_orchestron_rfs__rfs__backbone_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__ipv6_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__ipv6_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__ipv6_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__remote__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__remote__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__backbone_interface__remote__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__remote__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__rfs__backbone_interface__remote(yang.adata.MNode):
    device: str
    interface: str

    mut def __init__(self, device: str, interface: str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.device = device
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = yang.gdata.Leaf('string', _device)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__rfs__backbone_interface__remote:
        if n is not None:
            return orchestron_rfs__rfs__backbone_interface__remote(device=n.get_str('device'), interface=n.get_str('interface'))
        raise ValueError('Missing required subtree orchestron_rfs__rfs__backbone_interface__remote')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/backbone-interface/remote')
            res.append('{self_name} = orchestron_rfs__rfs__backbone_interface__remote({repr(self.device)}, {repr(self.interface)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/backbone-interface/remote'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_orchestron_rfs__rfs__backbone_interface__remote(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.from_xml_str(node, 'device')
    yang.gdata.maybe_add(children, 'device', from_xml_orchestron_rfs__rfs__backbone_interface__remote__device, child_device)
    child_interface = yang.gdata.from_xml_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_orchestron_rfs__rfs__backbone_interface__remote__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_json_path_orchestron_rfs__rfs__backbone_interface__remote(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'device':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'interface':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_orchestron_rfs__rfs__backbone_interface__remote(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_orchestron_rfs__rfs__backbone_interface__remote(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.take_json_str(jd, 'device')
    yang.gdata.maybe_add(children, 'device', from_json_orchestron_rfs__rfs__backbone_interface__remote__device, child_device)
    child_interface = yang.gdata.take_json_str(jd, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_json_orchestron_rfs__rfs__backbone_interface__remote__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__backbone_interface__local__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__backbone_interface__local__device(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__rfs__backbone_interface__local(yang.adata.MNode):
    device: str

    mut def __init__(self, device: str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.device = device

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = yang.gdata.Leaf('string', _device)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> orchestron_rfs__rfs__backbone_interface__local:
        if n is not None:
            return orchestron_rfs__rfs__backbone_interface__local(device=n.get_str('device'))
        raise ValueError('Missing required subtree orchestron_rfs__rfs__backbone_interface__local')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/backbone-interface/local')
            res.append('{self_name} = orchestron_rfs__rfs__backbone_interface__local({repr(self.device)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/backbone-interface/local'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_orchestron_rfs__rfs__backbone_interface__local(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.from_xml_str(node, 'device')
    yang.gdata.maybe_add(children, 'device', from_xml_orchestron_rfs__rfs__backbone_interface__local__device, child_device)
    return yang.gdata.Container(children)

mut def from_json_path_orchestron_rfs__rfs__backbone_interface__local(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'device':
            raise ValueError("Invalid json path to non-inner node")
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json_orchestron_rfs__rfs__backbone_interface__local(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json_orchestron_rfs__rfs__backbone_interface__local(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.take_json_str(jd, 'device')
    yang.gdata.maybe_add(children, 'device', from_json_orchestron_rfs__rfs__backbone_interface__local__device, child_device)
    return yang.gdata.Container(children)

class orchestron_rfs__rfs__backbone_interface_entry(yang.adata.MNode):
    name: str
    ipv4_address: ?str
    ipv4_prefix_length: int
    ipv6_address: ?str
    ipv6_prefix_length: ?int
    remote: orchestron_rfs__rfs__backbone_interface__remote
    local: orchestron_rfs__rfs__backbone_interface__local

    mut def __init__(self, name: str, remote: orchestron_rfs__rfs__backbone_interface__remote, local: orchestron_rfs__rfs__backbone_interface__local, ipv4_address: ?str, ipv4_prefix_length: ?int=None, ipv6_address: ?str, ipv6_prefix_length: ?int):
        self._ns = 'http://example.com/sorespo-rfs'
        self.name = name
        self.ipv4_address = ipv4_address
        self.ipv4_prefix_length = ipv4_prefix_length if ipv4_prefix_length is not None else 30
        self.ipv6_address = ipv6_address
        self.ipv6_prefix_length = ipv6_prefix_length
        self.remote = remote
        self.local = local

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            children['ipv4-prefix-length'] = yang.gdata.Leaf('uint8', _ipv4_prefix_length)
        _ipv6_address = self.ipv6_address
        if _ipv6_address is not None:
            children['ipv6-address'] = yang.gdata.Leaf('string', _ipv6_address)
        _ipv6_prefix_length = self.ipv6_prefix_length
        if _ipv6_prefix_length is not None:
            children['ipv6-prefix-length'] = yang.gdata.Leaf('uint8', _ipv6_prefix_length)
        _remote = self.remote
        if _remote is not None:
            children['remote'] = _remote.to_gdata()
        _local = self.local
        if _local is not None:
            children['local'] = _local.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__backbone_interface_entry:
        return orchestron_rfs__rfs__backbone_interface_entry(name=n.get_str('name'), ipv4_address=n.get_opt_str('ipv4-address'), ipv4_prefix_length=n.get_opt_int('ipv4-prefix-length'), ipv6_address=n.get_opt_str('ipv6-address'), ipv6_prefix_length=n.get_opt_int('ipv6-prefix-length'), remote=orchestron_rfs__rfs__backbone_interface__remote.from_gdata(n.get_cnt('remote')), local=orchestron_rfs__rfs__backbone_interface__local.from_gdata(n.get_cnt('local')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/backbone-interface')
            res.append('self_local = orchestron_rfs__rfs__backbone_interface__local({repr(self.local.device)})')
            res.append('self_remote = orchestron_rfs__rfs__backbone_interface__remote({repr(self.remote.device)}, {repr(self.remote.interface)})')
            res.append('{self_name} = orchestron_rfs__rfs__backbone_interface({repr(self.name)}, self_remote, self_local)')
        leaves = []
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            leaves.append('{self_name}.ipv4_address = {repr(_ipv4_address)}')
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            leaves.append('{self_name}.ipv4_prefix_length = {repr(_ipv4_prefix_length)}')
        _ipv6_address = self.ipv6_address
        if _ipv6_address is not None:
            leaves.append('{self_name}.ipv6_address = {repr(_ipv6_address)}')
        _ipv6_prefix_length = self.ipv6_prefix_length
        if _ipv6_prefix_length is not None:
            leaves.append('{self_name}.ipv6_prefix_length = {repr(_ipv6_prefix_length)}')
        _remote = self.remote
        if _remote is not None:
            res.extend(_remote.prsrc('{self_name}.remote', False).splitlines())
        _local = self.local
        if _local is not None:
            res.extend(_local.prsrc('{self_name}.local', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/backbone-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__backbone_interface(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__backbone_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'backbone-interface'
        self.elements = elements

    mut def create(self, name, remote, local):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__backbone_interface_entry(name, remote, local)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__backbone_interface_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__backbone_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__backbone_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__rfs__backbone_interface__name, child_name)
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_orchestron_rfs__rfs__backbone_interface__ipv4_address, child_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.from_xml_opt_int(node, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_xml_orchestron_rfs__rfs__backbone_interface__ipv4_prefix_length, child_ipv4_prefix_length)
    child_ipv6_address = yang.gdata.from_xml_opt_str(node, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_xml_orchestron_rfs__rfs__backbone_interface__ipv6_address, child_ipv6_address)
    child_ipv6_prefix_length = yang.gdata.from_xml_opt_int(node, 'ipv6-prefix-length')
    yang.gdata.maybe_add(children, 'ipv6-prefix-length', from_xml_orchestron_rfs__rfs__backbone_interface__ipv6_prefix_length, child_ipv6_prefix_length)
    child_remote = yang.gdata.from_xml_cnt(node, 'remote')
    yang.gdata.maybe_add(children, 'remote', from_xml_orchestron_rfs__rfs__backbone_interface__remote, child_remote)
    child_local = yang.gdata.from_xml_cnt(node, 'local')
    yang.gdata.maybe_add(children, 'local', from_xml_orchestron_rfs__rfs__backbone_interface__local, child_local)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__backbone_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__backbone_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__backbone_interface_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__backbone_interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__rfs__backbone_interface__name(keys[0])
        if point == 'ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv4-prefix-length':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv6-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv6-prefix-length':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'remote':
            children['remote'] = from_json_path_orchestron_rfs__rfs__backbone_interface__remote(jd, rest_path, op)
        if point == 'local':
            children['local'] = from_json_path_orchestron_rfs__rfs__backbone_interface__local(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__backbone_interface(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__backbone_interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__rfs__backbone_interface_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__backbone_interface_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__rfs__backbone_interface__name, child_name)
    child_ipv4_address = yang.gdata.take_json_opt_str(jd, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_json_orchestron_rfs__rfs__backbone_interface__ipv4_address, child_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.take_json_opt_int(jd, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_json_orchestron_rfs__rfs__backbone_interface__ipv4_prefix_length, child_ipv4_prefix_length)
    child_ipv6_address = yang.gdata.take_json_opt_str(jd, 'ipv6-address')
    yang.gdata.maybe_add(children, 'ipv6-address', from_json_orchestron_rfs__rfs__backbone_interface__ipv6_address, child_ipv6_address)
    child_ipv6_prefix_length = yang.gdata.take_json_opt_int(jd, 'ipv6-prefix-length')
    yang.gdata.maybe_add(children, 'ipv6-prefix-length', from_json_orchestron_rfs__rfs__backbone_interface__ipv6_prefix_length, child_ipv6_prefix_length)
    child_remote = yang.gdata.take_json_cnt(jd, 'remote')
    yang.gdata.maybe_add(children, 'remote', from_json_orchestron_rfs__rfs__backbone_interface__remote, child_remote)
    child_local = yang.gdata.take_json_cnt(jd, 'local')
    yang.gdata.maybe_add(children, 'local', from_json_orchestron_rfs__rfs__backbone_interface__local, child_local)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__backbone_interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__backbone_interface_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_orchestron_rfs__rfs__ibgp_neighbor__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_orchestron_rfs__rfs__ibgp_neighbor__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_orchestron_rfs__rfs__ibgp_neighbor__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__ibgp_neighbor__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__ibgp_neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__ibgp_neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__rfs__ibgp_neighbor_entry(yang.adata.MNode):
    address: str
    asn: int
    description: str

    mut def __init__(self, address: str, asn: int, description: str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.address = address
        self.asn = asn
        self.description = description

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        _asn = self.asn
        if _asn is not None:
            children['asn'] = yang.gdata.Leaf('uint32', _asn)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__ibgp_neighbor_entry:
        return orchestron_rfs__rfs__ibgp_neighbor_entry(address=n.get_str('address'), asn=n.get_int('asn'), description=n.get_str('description'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/ibgp-neighbor')
            res.append('{self_name} = orchestron_rfs__rfs__ibgp_neighbor({repr(self.address)}, {repr(self.asn)}, {repr(self.description)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/ibgp-neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__ibgp_neighbor(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__ibgp_neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'ibgp-neighbor'
        self.elements = elements

    mut def create(self, address, asn, description):
        for e in self.elements:
            match = True
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__ibgp_neighbor_entry(address, asn, description)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['address'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__ibgp_neighbor_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__ibgp_neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__ibgp_neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_address = yang.gdata.from_xml_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_orchestron_rfs__rfs__ibgp_neighbor__address, child_address)
    child_asn = yang.gdata.from_xml_int(node, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_xml_orchestron_rfs__rfs__ibgp_neighbor__asn, child_asn)
    child_description = yang.gdata.from_xml_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_orchestron_rfs__rfs__ibgp_neighbor__description, child_description)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__ibgp_neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__ibgp_neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['address'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__ibgp_neighbor_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__ibgp_neighbor_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['address']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['address'] = from_json_orchestron_rfs__rfs__ibgp_neighbor__address(keys[0])
        if point == 'asn':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__ibgp_neighbor(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['address']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__ibgp_neighbor_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['address'])))
        return yang.gdata.List(['address'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['address'], [from_json_path_orchestron_rfs__rfs__ibgp_neighbor_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__ibgp_neighbor_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_address = yang.gdata.take_json_str(jd, 'address')
    yang.gdata.maybe_add(children, 'address', from_json_orchestron_rfs__rfs__ibgp_neighbor__address, child_address)
    child_asn = yang.gdata.take_json_int(jd, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_json_orchestron_rfs__rfs__ibgp_neighbor__asn, child_asn)
    child_description = yang.gdata.take_json_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_orchestron_rfs__rfs__ibgp_neighbor__description, child_description)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__ibgp_neighbor(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__ibgp_neighbor_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['address'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_orchestron_rfs__rfs__vrf__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__vrf__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__vrf__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__vrf__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__vrf__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__vrf__asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class orchestron_rfs__rfs__vrf_entry(yang.adata.MNode):
    name: str
    description: ?str
    id: int
    router_id: int
    asn: int

    mut def __init__(self, name: str, id: int, router_id: int, asn: int, description: ?str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.name = name
        self.description = description
        self.id = id
        self.router_id = router_id
        self.asn = asn

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint32', _id)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('uint32', _router_id)
        _asn = self.asn
        if _asn is not None:
            children['asn'] = yang.gdata.Leaf('uint32', _asn)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__vrf_entry:
        return orchestron_rfs__rfs__vrf_entry(name=n.get_str('name'), description=n.get_opt_str('description'), id=n.get_int('id'), router_id=n.get_int('router-id'), asn=n.get_int('asn'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/vrf')
            res.append('{self_name} = orchestron_rfs__rfs__vrf({repr(self.name)}, {repr(self.id)}, {repr(self.router_id)}, {repr(self.asn)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/vrf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__vrf(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__vrf_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'vrf'
        self.elements = elements

    mut def create(self, name, id, router_id, asn):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__vrf_entry(name, id, router_id, asn)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__vrf_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__vrf_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__vrf_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__rfs__vrf__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_orchestron_rfs__rfs__vrf__description, child_description)
    child_id = yang.gdata.from_xml_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_orchestron_rfs__rfs__vrf__id, child_id)
    child_router_id = yang.gdata.from_xml_int(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_orchestron_rfs__rfs__vrf__router_id, child_router_id)
    child_asn = yang.gdata.from_xml_int(node, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_xml_orchestron_rfs__rfs__vrf__asn, child_asn)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__vrf(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__vrf_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__vrf_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__vrf_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__rfs__vrf__name(keys[0])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'router-id':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'asn':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__vrf(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__vrf_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__rfs__vrf_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__vrf_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__rfs__vrf__name, child_name)
    child_description = yang.gdata.take_json_opt_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_orchestron_rfs__rfs__vrf__description, child_description)
    child_id = yang.gdata.take_json_int(jd, 'id')
    yang.gdata.maybe_add(children, 'id', from_json_orchestron_rfs__rfs__vrf__id, child_id)
    child_router_id = yang.gdata.take_json_int(jd, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_json_orchestron_rfs__rfs__vrf__router_id, child_router_id)
    child_asn = yang.gdata.take_json_int(jd, 'asn')
    yang.gdata.maybe_add(children, 'asn', from_json_orchestron_rfs__rfs__vrf__asn, child_asn)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__vrf(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__vrf_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_orchestron_rfs__rfs__vrf_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf_interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf_interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf_interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf_interface__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf_interface__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__vrf_interface__ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__vrf_interface__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_orchestron_rfs__rfs__vrf_interface__ipv4_prefix_length(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class orchestron_rfs__rfs__vrf_interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    vrf: str
    ipv4_address: ?str
    ipv4_prefix_length: int

    mut def __init__(self, name: str, vrf: str, description: ?str, ipv4_address: ?str, ipv4_prefix_length: ?int=None):
        self._ns = 'http://example.com/sorespo-rfs'
        self.name = name
        self.description = description
        self.vrf = vrf
        self.ipv4_address = ipv4_address
        self.ipv4_prefix_length = ipv4_prefix_length if ipv4_prefix_length is not None else 30

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            children['ipv4-address'] = yang.gdata.Leaf('string', _ipv4_address)
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            children['ipv4-prefix-length'] = yang.gdata.Leaf('uint8', _ipv4_prefix_length)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__vrf_interface_entry:
        return orchestron_rfs__rfs__vrf_interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), vrf=n.get_str('vrf'), ipv4_address=n.get_opt_str('ipv4-address'), ipv4_prefix_length=n.get_opt_int('ipv4-prefix-length'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/vrf-interface')
            res.append('{self_name} = orchestron_rfs__rfs__vrf_interface({repr(self.name)}, {repr(self.vrf)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _ipv4_address = self.ipv4_address
        if _ipv4_address is not None:
            leaves.append('{self_name}.ipv4_address = {repr(_ipv4_address)}')
        _ipv4_prefix_length = self.ipv4_prefix_length
        if _ipv4_prefix_length is not None:
            leaves.append('{self_name}.ipv4_prefix_length = {repr(_ipv4_prefix_length)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/vrf-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__vrf_interface(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__vrf_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'vrf-interface'
        self.elements = elements

    mut def create(self, name, vrf):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__vrf_interface_entry(name, vrf)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__vrf_interface_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__vrf_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__vrf_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__rfs__vrf_interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_orchestron_rfs__rfs__vrf_interface__description, child_description)
    child_vrf = yang.gdata.from_xml_str(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_orchestron_rfs__rfs__vrf_interface__vrf, child_vrf)
    child_ipv4_address = yang.gdata.from_xml_opt_str(node, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_xml_orchestron_rfs__rfs__vrf_interface__ipv4_address, child_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.from_xml_opt_int(node, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_xml_orchestron_rfs__rfs__vrf_interface__ipv4_prefix_length, child_ipv4_prefix_length)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__vrf_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__vrf_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__vrf_interface_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__vrf_interface_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__rfs__vrf_interface__name(keys[0])
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'vrf':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv4-address':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'ipv4-prefix-length':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__vrf_interface(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__vrf_interface_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__rfs__vrf_interface_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__vrf_interface_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__rfs__vrf_interface__name, child_name)
    child_description = yang.gdata.take_json_opt_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_orchestron_rfs__rfs__vrf_interface__description, child_description)
    child_vrf = yang.gdata.take_json_str(jd, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_json_orchestron_rfs__rfs__vrf_interface__vrf, child_vrf)
    child_ipv4_address = yang.gdata.take_json_opt_str(jd, 'ipv4-address')
    yang.gdata.maybe_add(children, 'ipv4-address', from_json_orchestron_rfs__rfs__vrf_interface__ipv4_address, child_ipv4_address)
    child_ipv4_prefix_length = yang.gdata.take_json_opt_int(jd, 'ipv4-prefix-length')
    yang.gdata.maybe_add(children, 'ipv4-prefix-length', from_json_orchestron_rfs__rfs__vrf_interface__ipv4_prefix_length, child_ipv4_prefix_length)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__vrf_interface(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__vrf_interface_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_orchestron_rfs__rfs__ebgp_customer__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__vrf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__ebgp_customer__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_json_orchestron_rfs__rfs__ebgp_customer__local_asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__local_asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__ebgp_customer__peer_asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__peer_asn(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_json_orchestron_rfs__rfs__ebgp_customer__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_json_orchestron_rfs__rfs__ebgp_customer__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class orchestron_rfs__rfs__ebgp_customer_entry(yang.adata.MNode):
    vrf: str
    address: str
    local_asn: int
    peer_asn: int
    description: ?str
    authentication_key: str

    mut def __init__(self, vrf: str, address: str, local_asn: int, peer_asn: int, authentication_key: str, description: ?str):
        self._ns = 'http://example.com/sorespo-rfs'
        self.vrf = vrf
        self.address = address
        self.local_asn = local_asn
        self.peer_asn = peer_asn
        self.description = description
        self.authentication_key = authentication_key

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = yang.gdata.Leaf('string', _vrf)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('union', _address)
        _local_asn = self.local_asn
        if _local_asn is not None:
            children['local-asn'] = yang.gdata.Leaf('uint32', _local_asn)
        _peer_asn = self.peer_asn
        if _peer_asn is not None:
            children['peer-asn'] = yang.gdata.Leaf('uint32', _peer_asn)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs__ebgp_customer_entry:
        return orchestron_rfs__rfs__ebgp_customer_entry(vrf=n.get_str('vrf'), address=n.get_str('address'), local_asn=n.get_int('local-asn'), peer_asn=n.get_int('peer-asn'), description=n.get_opt_str('description'), authentication_key=n.get_str('authentication-key'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs/ebgp-customer')
            res.append('{self_name} = orchestron_rfs__rfs__ebgp_customer({repr(self.vrf)}, {repr(self.address)}, {repr(self.local_asn)}, {repr(self.peer_asn)}, {repr(self.authentication_key)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs/ebgp-customer'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs__ebgp_customer(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs__ebgp_customer_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://example.com/sorespo-rfs'
        self._name = 'ebgp-customer'
        self.elements = elements

    mut def create(self, vrf, address, local_asn, peer_asn, authentication_key):
        for e in self.elements:
            match = True
            if e.vrf != vrf:
                match = False
                continue
            if e.address != address:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs__ebgp_customer_entry(vrf, address, local_asn, peer_asn, authentication_key)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['vrf', 'address'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs__ebgp_customer_entry]:
        if n is not None:
            return [orchestron_rfs__rfs__ebgp_customer_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs__ebgp_customer_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_vrf = yang.gdata.from_xml_str(node, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_xml_orchestron_rfs__rfs__ebgp_customer__vrf, child_vrf)
    child_address = yang.gdata.from_xml_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_orchestron_rfs__rfs__ebgp_customer__address, child_address)
    child_local_asn = yang.gdata.from_xml_int(node, 'local-asn')
    yang.gdata.maybe_add(children, 'local-asn', from_xml_orchestron_rfs__rfs__ebgp_customer__local_asn, child_local_asn)
    child_peer_asn = yang.gdata.from_xml_int(node, 'peer-asn')
    yang.gdata.maybe_add(children, 'peer-asn', from_xml_orchestron_rfs__rfs__ebgp_customer__peer_asn, child_peer_asn)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_orchestron_rfs__rfs__ebgp_customer__description, child_description)
    child_authentication_key = yang.gdata.from_xml_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_orchestron_rfs__rfs__ebgp_customer__authentication_key, child_authentication_key)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs__ebgp_customer(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs__ebgp_customer_element(e) for e in nodes]
    return yang.gdata.List(keys=['vrf', 'address'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

mut def from_json_path_orchestron_rfs__rfs__ebgp_customer_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs__ebgp_customer_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['vrf', 'address']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['vrf'] = from_json_orchestron_rfs__rfs__ebgp_customer__vrf(keys[0])
        children['address'] = from_json_orchestron_rfs__rfs__ebgp_customer__address(keys[1])
        if point == 'local-asn':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'peer-asn':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'description':
            raise ValueError("Invalid json path to non-inner node")
        if point == 'authentication-key':
            raise ValueError("Invalid json path to non-inner node")
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs__ebgp_customer(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['vrf', 'address']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs__ebgp_customer_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['vrf', 'address'])))
        return yang.gdata.List(['vrf', 'address'], elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['vrf', 'address'], [from_json_path_orchestron_rfs__rfs__ebgp_customer_element(jd, path, op)], ns='http://example.com/sorespo-rfs', module='sorespo-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs__ebgp_customer_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_vrf = yang.gdata.take_json_str(jd, 'vrf')
    yang.gdata.maybe_add(children, 'vrf', from_json_orchestron_rfs__rfs__ebgp_customer__vrf, child_vrf)
    child_address = yang.gdata.take_json_str(jd, 'address')
    yang.gdata.maybe_add(children, 'address', from_json_orchestron_rfs__rfs__ebgp_customer__address, child_address)
    child_local_asn = yang.gdata.take_json_int(jd, 'local-asn')
    yang.gdata.maybe_add(children, 'local-asn', from_json_orchestron_rfs__rfs__ebgp_customer__local_asn, child_local_asn)
    child_peer_asn = yang.gdata.take_json_int(jd, 'peer-asn')
    yang.gdata.maybe_add(children, 'peer-asn', from_json_orchestron_rfs__rfs__ebgp_customer__peer_asn, child_peer_asn)
    child_description = yang.gdata.take_json_opt_str(jd, 'description')
    yang.gdata.maybe_add(children, 'description', from_json_orchestron_rfs__rfs__ebgp_customer__description, child_description)
    child_authentication_key = yang.gdata.take_json_str(jd, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_json_orchestron_rfs__rfs__ebgp_customer__authentication_key, child_authentication_key)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs__ebgp_customer(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs__ebgp_customer_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['vrf', 'address'], elements=elements, ns='http://example.com/sorespo-rfs', module='sorespo-rfs')

class orchestron_rfs__rfs_entry(yang.adata.MNode):
    name: str
    base_config: orchestron_rfs__rfs__base_config
    backbone_interface: orchestron_rfs__rfs__backbone_interface
    ibgp_neighbor: orchestron_rfs__rfs__ibgp_neighbor
    vrf: orchestron_rfs__rfs__vrf
    vrf_interface: orchestron_rfs__rfs__vrf_interface
    ebgp_customer: orchestron_rfs__rfs__ebgp_customer

    mut def __init__(self, name: str, base_config: list[orchestron_rfs__rfs__base_config_entry]=[], backbone_interface: list[orchestron_rfs__rfs__backbone_interface_entry]=[], ibgp_neighbor: list[orchestron_rfs__rfs__ibgp_neighbor_entry]=[], vrf: list[orchestron_rfs__rfs__vrf_entry]=[], vrf_interface: list[orchestron_rfs__rfs__vrf_interface_entry]=[], ebgp_customer: list[orchestron_rfs__rfs__ebgp_customer_entry]=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self.name = name
        self.base_config = orchestron_rfs__rfs__base_config(elements=base_config)
        self.backbone_interface = orchestron_rfs__rfs__backbone_interface(elements=backbone_interface)
        self.ibgp_neighbor = orchestron_rfs__rfs__ibgp_neighbor(elements=ibgp_neighbor)
        self.vrf = orchestron_rfs__rfs__vrf(elements=vrf)
        self.vrf_interface = orchestron_rfs__rfs__vrf_interface(elements=vrf_interface)
        self.ebgp_customer = orchestron_rfs__rfs__ebgp_customer(elements=ebgp_customer)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _base_config = self.base_config
        if _base_config is not None:
            children['base-config'] = _base_config.to_gdata()
        _backbone_interface = self.backbone_interface
        if _backbone_interface is not None:
            children['backbone-interface'] = _backbone_interface.to_gdata()
        _ibgp_neighbor = self.ibgp_neighbor
        if _ibgp_neighbor is not None:
            children['ibgp-neighbor'] = _ibgp_neighbor.to_gdata()
        _vrf = self.vrf
        if _vrf is not None:
            children['vrf'] = _vrf.to_gdata()
        _vrf_interface = self.vrf_interface
        if _vrf_interface is not None:
            children['vrf-interface'] = _vrf_interface.to_gdata()
        _ebgp_customer = self.ebgp_customer
        if _ebgp_customer is not None:
            children['ebgp-customer'] = _ebgp_customer.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> orchestron_rfs__rfs_entry:
        return orchestron_rfs__rfs_entry(name=n.get_str('name'), base_config=orchestron_rfs__rfs__base_config.from_gdata(n.get_opt_list('base-config')), backbone_interface=orchestron_rfs__rfs__backbone_interface.from_gdata(n.get_opt_list('backbone-interface')), ibgp_neighbor=orchestron_rfs__rfs__ibgp_neighbor.from_gdata(n.get_opt_list('ibgp-neighbor')), vrf=orchestron_rfs__rfs__vrf.from_gdata(n.get_opt_list('vrf')), vrf_interface=orchestron_rfs__rfs__vrf_interface.from_gdata(n.get_opt_list('vrf-interface')), ebgp_customer=orchestron_rfs__rfs__ebgp_customer.from_gdata(n.get_opt_list('ebgp-customer')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /rfs')
            res.append('{self_name} = orchestron_rfs__rfs({repr(self.name)})')
        leaves = []
        _base_config = self.base_config
        for _element in _base_config.elements:
            res.append('')
            res.append("# List /rfs/base-config element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'base_config_element = {self_name}.base_config.create({repr(_element.name)}, {repr(_element.ipv4_address)}, {repr(_element.ipv6_address)}, {repr(_element.asn)}, {repr(_element.ibgp_authentication_key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('base_config_element', False, list_element=True).splitlines())
        _backbone_interface = self.backbone_interface
        for _element in _backbone_interface.elements:
            res.append('')
            res.append("# List /rfs/backbone-interface element: {_element.to_gdata().key_str(['name'])}")
            res.append('element_local = orchestron_rfs__rfs__backbone_interface__local({repr(_element.local.device)})')
            res.append('element_remote = orchestron_rfs__rfs__backbone_interface__remote({repr(_element.remote.device)}, {repr(_element.remote.interface)})')
            list_elem = 'backbone_interface_element = {self_name}.backbone_interface.create({repr(_element.name)}, element_remote, element_local)'
            res.append(list_elem)
            res.extend(_element.prsrc('backbone_interface_element', False, list_element=True).splitlines())
        _ibgp_neighbor = self.ibgp_neighbor
        for _element in _ibgp_neighbor.elements:
            res.append('')
            res.append("# List /rfs/ibgp-neighbor element: {_element.to_gdata().key_str(['address'])}")
            list_elem = 'ibgp_neighbor_element = {self_name}.ibgp_neighbor.create({repr(_element.address)}, {repr(_element.asn)}, {repr(_element.description)})'
            res.append(list_elem)
            res.extend(_element.prsrc('ibgp_neighbor_element', False, list_element=True).splitlines())
        _vrf = self.vrf
        for _element in _vrf.elements:
            res.append('')
            res.append("# List /rfs/vrf element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'vrf_element = {self_name}.vrf.create({repr(_element.name)}, {repr(_element.id)}, {repr(_element.router_id)}, {repr(_element.asn)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vrf_element', False, list_element=True).splitlines())
        _vrf_interface = self.vrf_interface
        for _element in _vrf_interface.elements:
            res.append('')
            res.append("# List /rfs/vrf-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'vrf_interface_element = {self_name}.vrf_interface.create({repr(_element.name)}, {repr(_element.vrf)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vrf_interface_element', False, list_element=True).splitlines())
        _ebgp_customer = self.ebgp_customer
        for _element in _ebgp_customer.elements:
            res.append('')
            res.append("# List /rfs/ebgp-customer element: {_element.to_gdata().key_str(['vrf', 'address'])}")
            list_elem = 'ebgp_customer_element = {self_name}.ebgp_customer.create({repr(_element.vrf)}, {repr(_element.address)}, {repr(_element.local_asn)}, {repr(_element.peer_asn)}, {repr(_element.authentication_key)})'
            res.append(list_elem)
            res.extend(_element.prsrc('ebgp_customer_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /rfs'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class orchestron_rfs__rfs(yang.adata.MNode):
    elements: list[orchestron_rfs__rfs_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://orchestron.org/yang/orchestron-rfs.yang'
        self._name = 'rfs'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = orchestron_rfs__rfs_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[orchestron_rfs__rfs_entry]:
        if n is not None:
            return [orchestron_rfs__rfs_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_orchestron_rfs__rfs_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_orchestron_rfs__rfs__name, child_name)
    child_base_config = yang.gdata.from_xml_opt_list(node, 'base-config', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'base-config', from_xml_orchestron_rfs__rfs__base_config, child_base_config)
    child_backbone_interface = yang.gdata.from_xml_opt_list(node, 'backbone-interface', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'backbone-interface', from_xml_orchestron_rfs__rfs__backbone_interface, child_backbone_interface)
    child_ibgp_neighbor = yang.gdata.from_xml_opt_list(node, 'ibgp-neighbor', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'ibgp-neighbor', from_xml_orchestron_rfs__rfs__ibgp_neighbor, child_ibgp_neighbor)
    child_vrf = yang.gdata.from_xml_opt_list(node, 'vrf', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'vrf', from_xml_orchestron_rfs__rfs__vrf, child_vrf)
    child_vrf_interface = yang.gdata.from_xml_opt_list(node, 'vrf-interface', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'vrf-interface', from_xml_orchestron_rfs__rfs__vrf_interface, child_vrf_interface)
    child_ebgp_customer = yang.gdata.from_xml_opt_list(node, 'ebgp-customer', 'http://example.com/sorespo-rfs')
    yang.gdata.maybe_add(children, 'ebgp-customer', from_xml_orchestron_rfs__rfs__ebgp_customer, child_ebgp_customer)
    return yang.gdata.Container(children)

mut def from_xml_orchestron_rfs__rfs(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_orchestron_rfs__rfs_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

mut def from_json_path_orchestron_rfs__rfs_element(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        val = from_json_orchestron_rfs__rfs_element(jd_dict)
        if op == "merge":
            return val
        elif op == "remove":
            return yang.gdata.Absent(val.key_children(['name']))
        raise ValueError("Invalid operation")
    elif len(path) > 1:
        keys = path[0].split(",")
        point = path[1]
        rest_path = path[2:]
        children: dict[str, yang.gdata.Node] = {}
        children['name'] = from_json_orchestron_rfs__rfs__name(keys[0])
        if point == 'sorespo-rfs:base-config':
            children['base-config'] = from_json_path_orchestron_rfs__rfs__base_config(jd, rest_path, op)
        if point == 'sorespo-rfs:backbone-interface':
            children['backbone-interface'] = from_json_path_orchestron_rfs__rfs__backbone_interface(jd, rest_path, op)
        if point == 'sorespo-rfs:ibgp-neighbor':
            children['ibgp-neighbor'] = from_json_path_orchestron_rfs__rfs__ibgp_neighbor(jd, rest_path, op)
        if point == 'sorespo-rfs:vrf':
            children['vrf'] = from_json_path_orchestron_rfs__rfs__vrf(jd, rest_path, op)
        if point == 'sorespo-rfs:vrf-interface':
            children['vrf-interface'] = from_json_path_orchestron_rfs__rfs__vrf_interface(jd, rest_path, op)
        if point == 'sorespo-rfs:ebgp-customer':
            children['ebgp-customer'] = from_json_path_orchestron_rfs__rfs__ebgp_customer(jd, rest_path, op)
        return yang.gdata.Container(children)
    raise ValueError("unreachable - no keys to list element")

mut def from_json_path_orchestron_rfs__rfs(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.List:
    if len(path) == 1:
        point = path[0]
        keys = point.split(",")
        jd_dict = yang.gdata.unwrap_dict(jd)
        # Check that all keys are present in payload.
        # If present, they must equal the keys in the path
        # If not present, fill in from path
        for key in ['name']:
            if key not in jd_dict:
                jd_dict[key] = keys.pop(0)
            else:
                if str(jd_dict[key]) != keys.pop(0):
                    raise ValueError("Key value mismatch between path and payload")
        element = from_json_orchestron_rfs__rfs_element(jd_dict)
        elements = []
        if op == "merge":
            elements.append(element)
        elif op == "remove":
            elements.append(yang.gdata.Absent(element.key_children(['name'])))
        return yang.gdata.List(['name'], elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')
    elif len(path) > 1:
        return yang.gdata.List(['name'], [from_json_path_orchestron_rfs__rfs_element(jd, path, op)], ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')
    raise ValueError("Unable to resolve path, no keys provided")

mut def from_json_orchestron_rfs__rfs_element(jd: dict[str, ?value]) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.take_json_str(jd, 'name')
    yang.gdata.maybe_add(children, 'name', from_json_orchestron_rfs__rfs__name, child_name)
    child_base_config = yang.gdata.take_json_opt_list(jd, 'base-config', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'base-config', from_json_orchestron_rfs__rfs__base_config, child_base_config)
    child_backbone_interface = yang.gdata.take_json_opt_list(jd, 'backbone-interface', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'backbone-interface', from_json_orchestron_rfs__rfs__backbone_interface, child_backbone_interface)
    child_ibgp_neighbor = yang.gdata.take_json_opt_list(jd, 'ibgp-neighbor', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'ibgp-neighbor', from_json_orchestron_rfs__rfs__ibgp_neighbor, child_ibgp_neighbor)
    child_vrf = yang.gdata.take_json_opt_list(jd, 'vrf', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'vrf', from_json_orchestron_rfs__rfs__vrf, child_vrf)
    child_vrf_interface = yang.gdata.take_json_opt_list(jd, 'vrf-interface', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'vrf-interface', from_json_orchestron_rfs__rfs__vrf_interface, child_vrf_interface)
    child_ebgp_customer = yang.gdata.take_json_opt_list(jd, 'ebgp-customer', 'sorespo-rfs')
    yang.gdata.maybe_add(children, 'ebgp-customer', from_json_orchestron_rfs__rfs__ebgp_customer, child_ebgp_customer)
    return yang.gdata.Container(children)

mut def from_json_orchestron_rfs__rfs(jd: list[dict[str, ?value]]) -> yang.gdata.List:
    elements = [from_json_orchestron_rfs__rfs_element(e) for e in jd if isinstance(e, dict)]
    return yang.gdata.List(keys=['name'], elements=elements, ns='http://orchestron.org/yang/orchestron-rfs.yang', module='orchestron-rfs')

class root(yang.adata.MNode):
    device: orchestron_rfs__device
    rfs: orchestron_rfs__rfs

    mut def __init__(self, device: list[orchestron_rfs__device_entry]=[], rfs: list[orchestron_rfs__rfs_entry]=[]):
        self._ns = ''
        self.device = orchestron_rfs__device(elements=device)
        self.rfs = orchestron_rfs__rfs(elements=rfs)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _device = self.device
        if _device is not None:
            children['device'] = _device.to_gdata()
        _rfs = self.rfs
        if _rfs is not None:
            children['rfs'] = _rfs.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(device=orchestron_rfs__device.from_gdata(n.get_opt_list('device')), rfs=orchestron_rfs__rfs.from_gdata(n.get_opt_list('rfs')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _device = self.device
        for _element in _device.elements:
            res.append('')
            res.append("# List /device element: {_element.to_gdata().key_str(['name'])}")
            res.append('element_credentials = orchestron_rfs__device__credentials({repr(_element.credentials.username)})')
            list_elem = 'device_element = {self_name}.device.create({repr(_element.name)}, element_credentials)'
            res.append(list_elem)
            res.extend(_element.prsrc('device_element', False, list_element=True).splitlines())
        _rfs = self.rfs
        for _element in _rfs.elements:
            res.append('')
            res.append("# List /rfs element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'rfs_element = {self_name}.rfs.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('rfs_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.from_xml_opt_list(node, 'device', 'http://orchestron.org/yang/orchestron-rfs.yang')
    yang.gdata.maybe_add(children, 'device', from_xml_orchestron_rfs__device, child_device)
    child_rfs = yang.gdata.from_xml_opt_list(node, 'rfs', 'http://orchestron.org/yang/orchestron-rfs.yang')
    yang.gdata.maybe_add(children, 'rfs', from_xml_orchestron_rfs__rfs, child_rfs)
    return yang.gdata.Container(children)

def from_xml_gen3(node: xml.Node, root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_xml schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_xml(s, node, loose=False, root_path=root_path)

mut def from_json_path(jd: value, path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    # path handling
    if len(path) > 0:
        point = path[0]
        rest_path = path[1:]
        if point == 'orchestron-rfs:device':
            child = {'device': from_json_path_orchestron_rfs__device(jd, rest_path, op) }
            return yang.gdata.Container(child)
        if point == 'orchestron-rfs:rfs':
            child = {'rfs': from_json_path_orchestron_rfs__rfs(jd, rest_path, op) }
            return yang.gdata.Container(child)
        raise ValueError("Invalid path")
    elif len(path) == 0:
        if op == "merge":
            return from_json(yang.gdata.unwrap_dict(jd))
        elif op == "remove":
            return yang.gdata.Absent()
        raise ValueError("Invalid operation")
    raise ValueError("Unable to resolve path")

mut def from_json(jd: dict[str, ?value]) -> yang.gdata.Container:
    children = {}
    child_device = yang.gdata.take_json_opt_list(jd, 'device', 'orchestron-rfs')
    yang.gdata.maybe_add(children, 'device', from_json_orchestron_rfs__device, child_device)
    child_rfs = yang.gdata.take_json_opt_list(jd, 'rfs', 'orchestron-rfs')
    yang.gdata.maybe_add(children, 'rfs', from_json_orchestron_rfs__rfs, child_rfs)
    return yang.gdata.Container(children)

def from_json_gen3(jd: dict[str, ?value], root_path: list[str]=[]) -> yang.gdata.Container:
    # WARNING: this wrapper for the gen3.from_json schema-driven parser compiles the schema on every call!
    s = yang.compile(src_yang())
    return yang.gen3.from_json(s, jd, loose=False, root_path=root_path)

def from_json_path_gen3(jd: dict[str, ?value], path: list[str]=[], op: ?str='merge') -> yang.gdata.Node:
    s = yang.compile(src_yang())
    return yang.gen3.from_json_path(s, jd, path, op, loose=False)

schema_namespaces: set[str] = {
    'http://example.com/sorespo-rfs',
    'http://orchestron.org/yang/orchestron-rfs.yang',
}
