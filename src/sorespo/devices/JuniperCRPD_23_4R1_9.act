import base64
import json
import xml
import yang.adata
import yang.gdata
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_xml_junos_conf_root__configuration__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__system__services__netconf__rfc_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__system__services__netconf__yang_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__system__services__netconf(yang.adata.MNode):
    rfc_compliant: ?bool
    yang_compliant: ?bool

    mut def __init__(self, rfc_compliant: ?bool, yang_compliant: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rfc_compliant = rfc_compliant
        self.yang_compliant = yang_compliant

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            children['rfc-compliant'] = yang.gdata.Leaf('empty', _rfc_compliant)
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            children['yang-compliant'] = yang.gdata.Leaf('empty', _yang_compliant)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system__services__netconf:
        if n is not None:
            return junos_conf_root__configuration__system__services__netconf(rfc_compliant=n.get_opt_empty('rfc-compliant'), yang_compliant=n.get_opt_empty('yang-compliant'))
        return junos_conf_root__configuration__system__services__netconf()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system/services/netconf')
            res.append('{self_name} = junos_conf_root__configuration__system__services__netconf()')
        leaves = []
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            leaves.append('{self_name}.rfc_compliant = {repr(_rfc_compliant)}')
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            leaves.append('{self_name}.yang_compliant = {repr(_yang_compliant)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system/services/netconf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system__services__netconf(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rfc_compliant = yang.gdata.from_xml_opt_empty(node, 'rfc-compliant')
    yang.gdata.maybe_add(children, 'rfc-compliant', from_xml_junos_conf_root__configuration__system__services__netconf__rfc_compliant, child_rfc_compliant)
    child_yang_compliant = yang.gdata.from_xml_opt_empty(node, 'yang-compliant')
    yang.gdata.maybe_add(children, 'yang-compliant', from_xml_junos_conf_root__configuration__system__services__netconf__yang_compliant, child_yang_compliant)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__system__services(yang.adata.MNode):
    netconf: junos_conf_root__configuration__system__services__netconf

    mut def __init__(self, netconf: ?junos_conf_root__configuration__system__services__netconf=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.netconf = netconf if netconf is not None else junos_conf_root__configuration__system__services__netconf()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _netconf = self.netconf
        if _netconf is not None:
            children['netconf'] = _netconf.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__system__services:
        if n is not None:
            return junos_conf_root__configuration__system__services(netconf=junos_conf_root__configuration__system__services__netconf.from_gdata(n.get_opt_cnt('netconf')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system/services')
            res.append('{self_name} = junos_conf_root__configuration__system__services()')
        leaves = []
        _netconf = self.netconf
        if _netconf is not None:
            res.extend(_netconf.prsrc('{self_name}.netconf', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system/services'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system__services(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_netconf = yang.gdata.from_xml_opt_cnt(node, 'netconf')
    yang.gdata.maybe_add(children, 'netconf', from_xml_junos_conf_root__configuration__system__services__netconf, child_netconf)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__system(yang.adata.MNode):
    host_name: ?str
    services: ?junos_conf_root__configuration__system__services

    mut def __init__(self, host_name: ?str, services: ?junos_conf_root__configuration__system__services=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.host_name = host_name
        self.services = services

    mut def create_services(self):
        res = junos_conf_root__configuration__system__services()
        self.services = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        _services = self.services
        if _services is not None:
            children['services'] = _services.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system:
        if n is not None:
            return junos_conf_root__configuration__system(host_name=n.get_opt_str('host-name'), services=junos_conf_root__configuration__system__services.from_gdata(n.get_opt_cnt('services')))
        return junos_conf_root__configuration__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system')
            res.append('{self_name} = junos_conf_root__configuration__system()')
        leaves = []
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        _services = self.services
        if _services is not None:
            res.append('')
            res.append('# P-container: /configuration/system/services')
            res.append('services = {self_name}.create_services()')
            res.extend(_services.prsrc('services', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_junos_conf_root__configuration__system__host_name, child_host_name)
    child_services = yang.gdata.from_xml_opt_cnt(node, 'services')
    yang.gdata.maybe_add(children, 'services', from_xml_junos_conf_root__configuration__system__services, child_services)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/inet/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet6/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet6')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet6()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/inet6/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/iso/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/iso/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__iso__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__iso:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__interfaces__interface__unit__family__iso__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/iso')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__iso()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/iso/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/iso'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address, child_address)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet
    inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6
    iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso

    mut def __init__(self, inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet=None, inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6=None, iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.inet = inet
        self.inet6 = inet6
        self.iso = iso

    mut def create_inet(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def create_inet6(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6()
        self.inet6 = res
        return res

    mut def create_iso(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso()
        self.iso = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        _inet6 = self.inet6
        if _inet6 is not None:
            children['inet6'] = _inet6.to_gdata()
        _iso = self.iso
        if _iso is not None:
            children['iso'] = _iso.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_cnt('inet')), inet6=junos_conf_root__configuration__interfaces__interface__unit__family__inet6.from_gdata(n.get_opt_cnt('inet6')), iso=junos_conf_root__configuration__interfaces__interface__unit__family__iso.from_gdata(n.get_opt_cnt('iso')))
        return junos_conf_root__configuration__interfaces__interface__unit__family()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family()')
        leaves = []
        _inet = self.inet
        if _inet is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/inet')
            res.append('inet = {self_name}.create_inet()')
            res.extend(_inet.prsrc('inet', False).splitlines())
        _inet6 = self.inet6
        if _inet6 is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/inet6')
            res.append('inet6 = {self_name}.create_inet6()')
            res.extend(_inet6.prsrc('inet6', False).splitlines())
        _iso = self.iso
        if _iso is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/iso')
            res.append('iso = {self_name}.create_iso()')
            res.extend(_iso.prsrc('iso', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inet = yang.gdata.from_xml_opt_cnt(node, 'inet')
    yang.gdata.maybe_add(children, 'inet', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet, child_inet)
    child_inet6 = yang.gdata.from_xml_opt_cnt(node, 'inet6')
    yang.gdata.maybe_add(children, 'inet6', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6, child_inet6)
    child_iso = yang.gdata.from_xml_opt_cnt(node, 'iso')
    yang.gdata.maybe_add(children, 'iso', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso, child_iso)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        self.family = family if family is not None else junos_conf_root__configuration__interfaces__interface__unit__family()
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _alias = self.alias
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=n.get_str('name'), alias=n.get_opt_str('alias'), description=n.get_opt_str('description'), vlan_id=n.get_opt_str('vlan-id'), encapsulation=n.get_opt_str('encapsulation'), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_gdata(n.get_opt_cnt('family')), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit({repr(self.name)})')
        leaves = []
        _alias = self.alias
        if _alias is not None:
            leaves.append('{self_name}.alias = {repr(_alias)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            leaves.append('{self_name}.vlan_id = {repr(_vlan_id)}')
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _family = self.family
        if _family is not None:
            res.extend(_family.prsrc('{self_name}.family', False).splitlines())
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__name, child_name)
    child_alias = yang.gdata.from_xml_opt_str(node, 'alias')
    yang.gdata.maybe_add(children, 'alias', from_xml_junos_conf_root__configuration__interfaces__interface__unit__alias, child_alias)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__interfaces__interface__unit__description, child_description)
    child_vlan_id = yang.gdata.from_xml_opt_str(node, 'vlan-id')
    yang.gdata.maybe_add(children, 'vlan-id', from_xml_junos_conf_root__configuration__interfaces__interface__unit__vlan_id, child_vlan_id)
    child_encapsulation = yang.gdata.from_xml_opt_str(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__interfaces__interface__unit__encapsulation, child_encapsulation)
    child_family = yang.gdata.from_xml_opt_cnt(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family, child_family)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__interfaces__interface__unit__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__interfaces__interface__unit__mac, child_mac)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__stacked_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__flexible_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__vlan_vci_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__no_per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__shared_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/hierarchical-scheduler')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/hierarchical-scheduler'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__interfaces__interface__unit
    encapsulation: ?str
    vlan_tagging: ?bool
    stacked_vlan_tagging: ?bool
    flexible_vlan_tagging: ?bool
    vlan_vci_tagging: ?bool
    per_unit_scheduler: ?bool
    no_per_unit_scheduler: ?bool
    shared_scheduler: ?bool
    hierarchical_scheduler: ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__interfaces__interface__unit_entry]=[], encapsulation: ?str, vlan_tagging: ?bool, stacked_vlan_tagging: ?bool, flexible_vlan_tagging: ?bool, vlan_vci_tagging: ?bool, per_unit_scheduler: ?bool, no_per_unit_scheduler: ?bool, shared_scheduler: ?bool, hierarchical_scheduler: ?junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__interfaces__interface__unit(elements=unit)
        self.encapsulation = encapsulation
        self.vlan_tagging = vlan_tagging
        self.stacked_vlan_tagging = stacked_vlan_tagging
        self.flexible_vlan_tagging = flexible_vlan_tagging
        self.vlan_vci_tagging = vlan_vci_tagging
        self.per_unit_scheduler = per_unit_scheduler
        self.no_per_unit_scheduler = no_per_unit_scheduler
        self.shared_scheduler = shared_scheduler
        self.hierarchical_scheduler = hierarchical_scheduler

    mut def create_hierarchical_scheduler(self):
        res = junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler()
        self.hierarchical_scheduler = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        _unit = self.unit
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('empty', _vlan_tagging)
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        if _stacked_vlan_tagging is not None:
            children['stacked-vlan-tagging'] = yang.gdata.Leaf('empty', _stacked_vlan_tagging)
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        if _flexible_vlan_tagging is not None:
            children['flexible-vlan-tagging'] = yang.gdata.Leaf('empty', _flexible_vlan_tagging)
        _vlan_vci_tagging = self.vlan_vci_tagging
        if _vlan_vci_tagging is not None:
            children['vlan-vci-tagging'] = yang.gdata.Leaf('empty', _vlan_vci_tagging)
        _per_unit_scheduler = self.per_unit_scheduler
        if _per_unit_scheduler is not None:
            children['per-unit-scheduler'] = yang.gdata.Leaf('empty', _per_unit_scheduler)
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        if _no_per_unit_scheduler is not None:
            children['no-per-unit-scheduler'] = yang.gdata.Leaf('empty', _no_per_unit_scheduler)
        _shared_scheduler = self.shared_scheduler
        if _shared_scheduler is not None:
            children['shared-scheduler'] = yang.gdata.Leaf('empty', _shared_scheduler)
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _hierarchical_scheduler is not None:
            children['hierarchical-scheduler'] = _hierarchical_scheduler.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'), native_vlan_id=n.get_opt_value('native-vlan-id'), unit=junos_conf_root__configuration__interfaces__interface__unit.from_gdata(n.get_opt_list('unit')), encapsulation=n.get_opt_str('encapsulation'), vlan_tagging=n.get_opt_empty('vlan-tagging'), stacked_vlan_tagging=n.get_opt_empty('stacked-vlan-tagging'), flexible_vlan_tagging=n.get_opt_empty('flexible-vlan-tagging'), vlan_vci_tagging=n.get_opt_empty('vlan-vci-tagging'), per_unit_scheduler=n.get_opt_empty('per-unit-scheduler'), no_per_unit_scheduler=n.get_opt_empty('no-per-unit-scheduler'), shared_scheduler=n.get_opt_empty('shared-scheduler'), hierarchical_scheduler=junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler.from_gdata(n.get_opt_cnt('hierarchical-scheduler')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            leaves.append('{self_name}.native_vlan_id = {repr(_native_vlan_id)}')
        _unit = self.unit
        for _element in _unit.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'unit_element = {self_name}.unit.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('unit_element', False, list_element=True).splitlines())
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            leaves.append('{self_name}.vlan_tagging = {repr(_vlan_tagging)}')
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        if _stacked_vlan_tagging is not None:
            leaves.append('{self_name}.stacked_vlan_tagging = {repr(_stacked_vlan_tagging)}')
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        if _flexible_vlan_tagging is not None:
            leaves.append('{self_name}.flexible_vlan_tagging = {repr(_flexible_vlan_tagging)}')
        _vlan_vci_tagging = self.vlan_vci_tagging
        if _vlan_vci_tagging is not None:
            leaves.append('{self_name}.vlan_vci_tagging = {repr(_vlan_vci_tagging)}')
        _per_unit_scheduler = self.per_unit_scheduler
        if _per_unit_scheduler is not None:
            leaves.append('{self_name}.per_unit_scheduler = {repr(_per_unit_scheduler)}')
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        if _no_per_unit_scheduler is not None:
            leaves.append('{self_name}.no_per_unit_scheduler = {repr(_no_per_unit_scheduler)}')
        _shared_scheduler = self.shared_scheduler
        if _shared_scheduler is not None:
            leaves.append('{self_name}.shared_scheduler = {repr(_shared_scheduler)}')
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _hierarchical_scheduler is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/hierarchical-scheduler')
            res.append('hierarchical_scheduler = {self_name}.create_hierarchical_scheduler()')
            res.extend(_hierarchical_scheduler.prsrc('hierarchical_scheduler', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__interfaces__interface__description, child_description)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__interfaces__interface__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__interfaces__interface__mac, child_mac)
    child_native_vlan_id = yang.gdata.from_xml_opt_value(node, 'native-vlan-id')
    yang.gdata.maybe_add(children, 'native-vlan-id', from_xml_junos_conf_root__configuration__interfaces__interface__native_vlan_id, child_native_vlan_id)
    child_unit = yang.gdata.from_xml_opt_list(node, 'unit')
    yang.gdata.maybe_add(children, 'unit', from_xml_junos_conf_root__configuration__interfaces__interface__unit, child_unit)
    child_encapsulation = yang.gdata.from_xml_opt_str(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__interfaces__interface__encapsulation, child_encapsulation)
    child_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'vlan-tagging')
    yang.gdata.maybe_add(children, 'vlan-tagging', from_xml_junos_conf_root__configuration__interfaces__interface__vlan_tagging, child_vlan_tagging)
    child_stacked_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'stacked-vlan-tagging')
    yang.gdata.maybe_add(children, 'stacked-vlan-tagging', from_xml_junos_conf_root__configuration__interfaces__interface__stacked_vlan_tagging, child_stacked_vlan_tagging)
    child_flexible_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'flexible-vlan-tagging')
    yang.gdata.maybe_add(children, 'flexible-vlan-tagging', from_xml_junos_conf_root__configuration__interfaces__interface__flexible_vlan_tagging, child_flexible_vlan_tagging)
    child_vlan_vci_tagging = yang.gdata.from_xml_opt_empty(node, 'vlan-vci-tagging')
    yang.gdata.maybe_add(children, 'vlan-vci-tagging', from_xml_junos_conf_root__configuration__interfaces__interface__vlan_vci_tagging, child_vlan_vci_tagging)
    child_per_unit_scheduler = yang.gdata.from_xml_opt_empty(node, 'per-unit-scheduler')
    yang.gdata.maybe_add(children, 'per-unit-scheduler', from_xml_junos_conf_root__configuration__interfaces__interface__per_unit_scheduler, child_per_unit_scheduler)
    child_no_per_unit_scheduler = yang.gdata.from_xml_opt_empty(node, 'no-per-unit-scheduler')
    yang.gdata.maybe_add(children, 'no-per-unit-scheduler', from_xml_junos_conf_root__configuration__interfaces__interface__no_per_unit_scheduler, child_no_per_unit_scheduler)
    child_shared_scheduler = yang.gdata.from_xml_opt_empty(node, 'shared-scheduler')
    yang.gdata.maybe_add(children, 'shared-scheduler', from_xml_junos_conf_root__configuration__interfaces__interface__shared_scheduler, child_shared_scheduler)
    child_hierarchical_scheduler = yang.gdata.from_xml_opt_cnt(node, 'hierarchical-scheduler')
    yang.gdata.maybe_add(children, 'hierarchical-scheduler', from_xml_junos_conf_root__configuration__interfaces__interface__hierarchical_scheduler, child_hierarchical_scheduler)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__interfaces__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.interface = junos_conf_root__configuration__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces:
        if n is not None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__interfaces()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces')
            res.append('{self_name} = junos_conf_root__configuration__interfaces()')
        leaves = []
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__apply_groups(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__apply_groups_except(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _any = self.any
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=n.get_str('name'), any=n.get_opt_empty('any'), unicast=n.get_opt_empty('unicast'), multicast=n.get_opt_empty('multicast'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/interface')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__interface({repr(self.name)})')
        leaves = []
        _any = self.any
        if _any is not None:
            leaves.append('{self_name}.any = {repr(_any)}')
        _unicast = self.unicast
        if _unicast is not None:
            leaves.append('{self_name}.unicast = {repr(_unicast)}')
        _multicast = self.multicast
        if _multicast is not None:
            leaves.append('{self_name}.multicast = {repr(_multicast)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__name, child_name)
    child_any = yang.gdata.from_xml_opt_empty(node, 'any')
    yang.gdata.maybe_add(children, 'any', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__any, child_any)
    child_unicast = yang.gdata.from_xml_opt_empty(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_empty(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__multicast, child_multicast)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str('rd-type'))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/route-distinguisher')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__route_distinguisher()')
        leaves = []
        _rd_type = self.rd_type
        if _rd_type is not None:
            leaves.append('{self_name}.rd_type = {repr(_rd_type)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/route-distinguisher'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rd_type = yang.gdata.from_xml_opt_str(node, 'rd-type')
    yang.gdata.maybe_add(children, 'rd-type', from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type, child_rd_type)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        _auto = self.auto
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=n.get_opt_str('community'), import_=n.get_opt_str('import'), export=n.get_opt_str('export'), auto=n.get_opt_empty('auto'))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/vrf-target')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__vrf_target()')
        leaves = []
        _community = self.community
        if _community is not None:
            leaves.append('{self_name}.community = {repr(_community)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _auto = self.auto
        if _auto is not None:
            leaves.append('{self_name}.auto = {repr(_auto)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/vrf-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_community = yang.gdata.from_xml_opt_str(node, 'community')
    yang.gdata.maybe_add(children, 'community', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__community, child_community)
    child_import_ = yang.gdata.from_xml_opt_str(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__import, child_import_)
    child_export = yang.gdata.from_xml_opt_str(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__export, child_export)
    child_auto = yang.gdata.from_xml_opt_empty(node, 'auto')
    yang.gdata.maybe_add(children, 'auto', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto, child_auto)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__source_class_usage(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__vrf_table_label(yang.adata.MNode):
    static: ?value
    source_class_usage: ?bool

    mut def __init__(self, static: ?value, source_class_usage: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.static = static
        self.source_class_usage = source_class_usage

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('union', _static)
        _source_class_usage = self.source_class_usage
        if _source_class_usage is not None:
            children['source-class-usage'] = yang.gdata.Leaf('empty', _source_class_usage)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_table_label(static=n.get_opt_value('static'), source_class_usage=n.get_opt_empty('source-class-usage'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/vrf-table-label')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__vrf_table_label()')
        leaves = []
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        _source_class_usage = self.source_class_usage
        if _source_class_usage is not None:
            leaves.append('{self_name}.source_class_usage = {repr(_source_class_usage)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/vrf-table-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_static = yang.gdata.from_xml_opt_value(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__static, child_static)
    child_source_class_usage = yang.gdata.from_xml_opt_empty(node, 'source-class-usage')
    yang.gdata.maybe_add(children, 'source-class-usage', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label__source_class_usage, child_source_class_usage)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__as_override(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(yang.adata.MNode):
    ttl: ?value
    no_nexthop_change: ?bool

    mut def __init__(self, ttl: ?value, no_nexthop_change: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.ttl = ttl
        self.no_nexthop_change = no_nexthop_change

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ttl = self.ttl
        if _ttl is not None:
            children['ttl'] = yang.gdata.Leaf('union', _ttl)
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            children['no-nexthop-change'] = yang.gdata.Leaf('empty', _no_nexthop_change)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=n.get_opt_value('ttl'), no_nexthop_change=n.get_opt_empty('no-nexthop-change'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop()')
        leaves = []
        _ttl = self.ttl
        if _ttl is not None:
            leaves.append('{self_name}.ttl = {repr(_ttl)}')
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            leaves.append('{self_name}.no_nexthop_change = {repr(_no_nexthop_change)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ttl = yang.gdata.from_xml_opt_value(node, 'ttl')
    yang.gdata.maybe_add(children, 'ttl', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl, child_ttl)
    child_no_nexthop_change = yang.gdata.from_xml_opt_empty(node, 'no-nexthop-change')
    yang.gdata.maybe_add(children, 'no-nexthop-change', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change, child_no_nexthop_change)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    peer_as: ?str
    authentication_key: ?str
    as_override: ?bool
    authentication_algorithm: ?str
    multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop

    mut def __init__(self, name: str, description: ?str, peer_as: ?str, authentication_key: ?str, as_override: ?bool, authentication_algorithm: ?str, multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.peer_as = peer_as
        self.authentication_key = authentication_key
        self.as_override = as_override
        self.authentication_algorithm = authentication_algorithm
        self.multihop = multihop

    mut def create_multihop(self):
        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop()
        self.multihop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('string', _peer_as)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _as_override = self.as_override
        if _as_override is not None:
            children['as-override'] = yang.gdata.Leaf('empty', _as_override)
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=n.get_str('name'), description=n.get_opt_str('description'), peer_as=n.get_opt_str('peer-as'), authentication_key=n.get_opt_str('authentication-key'), as_override=n.get_opt_empty('as-override'), authentication_algorithm=n.get_opt_str('authentication-algorithm'), multihop=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_gdata(n.get_opt_cnt('multihop')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group/neighbor')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _as_override = self.as_override
        if _as_override is not None:
            leaves.append('{self_name}.as_override = {repr(_as_override)}')
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            leaves.append('{self_name}.authentication_algorithm = {repr(_authentication_algorithm)}')
        _multihop = self.multihop
        if _multihop is not None:
            res.append('')
            res.append('# P-container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('multihop = {self_name}.create_multihop()')
            res.extend(_multihop.prsrc('multihop', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__description, child_description)
    child_peer_as = yang.gdata.from_xml_opt_str(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__peer_as, child_peer_as)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key, child_authentication_key)
    child_as_override = yang.gdata.from_xml_opt_empty(node, 'as-override')
    yang.gdata.maybe_add(children, 'as-override', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__as_override, child_as_override)
    child_authentication_algorithm = yang.gdata.from_xml_opt_str(node, 'authentication-algorithm')
    yang.gdata.maybe_add(children, 'authentication-algorithm', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm, child_authentication_algorithm)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop, child_multihop)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    passive: ?bool
    import_: list[str]
    export: list[str]
    neighbor: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, passive: ?bool, import_: ?list[str]=None, export: ?list[str]=None, neighbor: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.passive = passive
        self.import_ = import_ if import_ is not None else []
        self.export = export if export is not None else []
        self.neighbor = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.LeafList('string', _import_, user_order=True)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.LeafList('string', _export, user_order=True)
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name=n.get_str('name'), passive=n.get_opt_empty('passive'), import_=n.get_opt_strs('import'), export=n.get_opt_strs('export'), neighbor=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list('neighbor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group({repr(self.name)})')
        leaves = []
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/protocols/bgp/group/neighbor element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__name, child_name)
    child_passive = yang.gdata.from_xml_opt_empty(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__passive, child_passive)
    child_import_ = yang.gdata.from_xml_opt_strs(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__import, child_import_)
    child_export = yang.gdata.from_xml_opt_strs(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__export, child_export)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group

    mut def __init__(self, group: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.group = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group.from_gdata(n.get_opt_list('group')))
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp()')
        leaves = []
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/protocols/bgp/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group, child_group)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__no_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__protocols__evpn(yang.adata.MNode):
    control_word: ?bool
    no_mac_learning: ?bool

    mut def __init__(self, control_word: ?bool, no_mac_learning: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.control_word = control_word
        self.no_mac_learning = no_mac_learning

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _control_word = self.control_word
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('empty', _control_word)
        _no_mac_learning = self.no_mac_learning
        if _no_mac_learning is not None:
            children['no-mac-learning'] = yang.gdata.Leaf('empty', _no_mac_learning)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__evpn(control_word=n.get_opt_empty('control-word'), no_mac_learning=n.get_opt_empty('no-mac-learning'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/evpn')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__evpn()')
        leaves = []
        _control_word = self.control_word
        if _control_word is not None:
            leaves.append('{self_name}.control_word = {repr(_control_word)}')
        _no_mac_learning = self.no_mac_learning
        if _no_mac_learning is not None:
            leaves.append('{self_name}.no_mac_learning = {repr(_no_mac_learning)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_control_word = yang.gdata.from_xml_opt_empty(node, 'control-word')
    yang.gdata.maybe_add(children, 'control-word', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__control_word, child_control_word)
    child_no_mac_learning = yang.gdata.from_xml_opt_empty(node, 'no-mac-learning')
    yang.gdata.maybe_add(children, 'no-mac-learning', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn__no_mac_learning, child_no_mac_learning)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__routing_instances__instance__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__routing_instances__instance__protocols__bgp
    evpn: ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn

    mut def __init__(self, bgp: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp=None, evpn: ?junos_conf_root__configuration__routing_instances__instance__protocols__evpn=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.bgp = bgp if bgp is not None else junos_conf_root__configuration__routing_instances__instance__protocols__bgp()
        self.evpn = evpn

    mut def create_evpn(self):
        res = junos_conf_root__configuration__routing_instances__instance__protocols__evpn()
        self.evpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__routing_instances__instance__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), evpn=junos_conf_root__configuration__routing_instances__instance__protocols__evpn.from_gdata(n.get_opt_cnt('evpn')))
        return junos_conf_root__configuration__routing_instances__instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.extend(_bgp.prsrc('{self_name}.bgp', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.append('')
            res.append('# P-container: /configuration/routing-instances/instance/protocols/evpn')
            res.append('evpn = {self_name}.create_evpn()')
            res.extend(_evpn.prsrc('evpn', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp, child_bgp)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__evpn, child_evpn)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool
    vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label
    protocols: junos_conf_root__configuration__routing_instances__instance__protocols

    mut def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool, vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label=None, protocols: ?junos_conf_root__configuration__routing_instances__instance__protocols=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.apply_groups = apply_groups if apply_groups is not None else []
        self.apply_groups_except = apply_groups_except if apply_groups_except is not None else []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__routing_instances__instance__interface(elements=interface)
        self.route_distinguisher = route_distinguisher if route_distinguisher is not None else junos_conf_root__configuration__routing_instances__instance__route_distinguisher()
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        self.vrf_target = vrf_target if vrf_target is not None else junos_conf_root__configuration__routing_instances__instance__vrf_target()
        self.no_vrf_advertise = no_vrf_advertise
        self.vrf_table_label = vrf_table_label
        self.protocols = protocols if protocols is not None else junos_conf_root__configuration__routing_instances__instance__protocols()

    mut def create_vrf_table_label(self):
        res = junos_conf_root__configuration__routing_instances__instance__vrf_table_label()
        self.vrf_table_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _apply_groups = self.apply_groups
        if _apply_groups is not None:
            children['apply-groups'] = yang.gdata.LeafList('string', _apply_groups, user_order=True)
        _apply_groups_except = self.apply_groups_except
        if _apply_groups_except is not None:
            children['apply-groups-except'] = yang.gdata.LeafList('string', _apply_groups_except, user_order=True)
        _instance_type = self.instance_type
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        _export_default_action = self.export_default_action
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        _import_default_action = self.import_default_action
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        _no_vrf_advertise = self.no_vrf_advertise
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            children['vrf-table-label'] = _vrf_table_label.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=n.get_str('name'), apply_groups=n.get_opt_strs('apply-groups'), apply_groups_except=n.get_opt_strs('apply-groups-except'), instance_type=n.get_opt_str('instance-type'), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_gdata(n.get_opt_list('interface')), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_cnt('route-distinguisher')), export_default_action=n.get_opt_str('export-default-action'), import_default_action=n.get_opt_str('import-default-action'), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_gdata(n.get_opt_cnt('vrf-target')), no_vrf_advertise=n.get_opt_empty('no-vrf-advertise'), vrf_table_label=junos_conf_root__configuration__routing_instances__instance__vrf_table_label.from_gdata(n.get_opt_cnt('vrf-table-label')), protocols=junos_conf_root__configuration__routing_instances__instance__protocols.from_gdata(n.get_opt_cnt('protocols')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance({repr(self.name)})')
        leaves = []
        _apply_groups = self.apply_groups
        if _apply_groups is not None:
            leaves.append('{self_name}.apply_groups = {repr(_apply_groups)}')
        _apply_groups_except = self.apply_groups_except
        if _apply_groups_except is not None:
            leaves.append('{self_name}.apply_groups_except = {repr(_apply_groups_except)}')
        _instance_type = self.instance_type
        if _instance_type is not None:
            leaves.append('{self_name}.instance_type = {repr(_instance_type)}')
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            res.extend(_route_distinguisher.prsrc('{self_name}.route_distinguisher', False).splitlines())
        _export_default_action = self.export_default_action
        if _export_default_action is not None:
            leaves.append('{self_name}.export_default_action = {repr(_export_default_action)}')
        _import_default_action = self.import_default_action
        if _import_default_action is not None:
            leaves.append('{self_name}.import_default_action = {repr(_import_default_action)}')
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            res.extend(_vrf_target.prsrc('{self_name}.vrf_target', False).splitlines())
        _no_vrf_advertise = self.no_vrf_advertise
        if _no_vrf_advertise is not None:
            leaves.append('{self_name}.no_vrf_advertise = {repr(_no_vrf_advertise)}')
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            res.append('')
            res.append('# P-container: /configuration/routing-instances/instance/vrf-table-label')
            res.append('vrf_table_label = {self_name}.create_vrf_table_label()')
            res.extend(_vrf_table_label.prsrc('vrf_table_label', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__name, child_name)
    child_apply_groups = yang.gdata.from_xml_opt_strs(node, 'apply-groups')
    yang.gdata.maybe_add(children, 'apply-groups', from_xml_junos_conf_root__configuration__routing_instances__instance__apply_groups, child_apply_groups)
    child_apply_groups_except = yang.gdata.from_xml_opt_strs(node, 'apply-groups-except')
    yang.gdata.maybe_add(children, 'apply-groups-except', from_xml_junos_conf_root__configuration__routing_instances__instance__apply_groups_except, child_apply_groups_except)
    child_instance_type = yang.gdata.from_xml_opt_str(node, 'instance-type')
    yang.gdata.maybe_add(children, 'instance-type', from_xml_junos_conf_root__configuration__routing_instances__instance__instance_type, child_instance_type)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__routing_instances__instance__interface, child_interface)
    child_route_distinguisher = yang.gdata.from_xml_opt_cnt(node, 'route-distinguisher')
    yang.gdata.maybe_add(children, 'route-distinguisher', from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher, child_route_distinguisher)
    child_export_default_action = yang.gdata.from_xml_opt_str(node, 'export-default-action')
    yang.gdata.maybe_add(children, 'export-default-action', from_xml_junos_conf_root__configuration__routing_instances__instance__export_default_action, child_export_default_action)
    child_import_default_action = yang.gdata.from_xml_opt_str(node, 'import-default-action')
    yang.gdata.maybe_add(children, 'import-default-action', from_xml_junos_conf_root__configuration__routing_instances__instance__import_default_action, child_import_default_action)
    child_vrf_target = yang.gdata.from_xml_opt_cnt(node, 'vrf-target')
    yang.gdata.maybe_add(children, 'vrf-target', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target, child_vrf_target)
    child_no_vrf_advertise = yang.gdata.from_xml_opt_empty(node, 'no-vrf-advertise')
    yang.gdata.maybe_add(children, 'no-vrf-advertise', from_xml_junos_conf_root__configuration__routing_instances__instance__no_vrf_advertise, child_no_vrf_advertise)
    child_vrf_table_label = yang.gdata.from_xml_opt_cnt(node, 'vrf-table-label')
    yang.gdata.maybe_add(children, 'vrf-table-label', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label, child_vrf_table_label)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols, child_protocols)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__routing_instances__instance_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.instance = junos_conf_root__configuration__routing_instances__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances:
        if n is not None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_gdata(n.get_opt_list('instance')))
        return junos_conf_root__configuration__routing_instances()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances()')
        leaves = []
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_junos_conf_root__configuration__routing_instances__instance, child_instance)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__when__time__start_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__when__time__to__end_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__when__time__to(yang.adata.MNode):
    end_time: ?str

    mut def __init__(self, end_time: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.end_time = end_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _end_time = self.end_time
        if _end_time is not None:
            children['end-time'] = yang.gdata.Leaf('string', _end_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time__to:
        if n is not None:
            return junos_conf_root__configuration__groups__when__time__to(end_time=n.get_opt_str('end-time'))
        return junos_conf_root__configuration__groups__when__time__to()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/when/time/to')
            res.append('{self_name} = junos_conf_root__configuration__groups__when__time__to()')
        leaves = []
        _end_time = self.end_time
        if _end_time is not None:
            leaves.append('{self_name}.end_time = {repr(_end_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/when/time/to'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__when__time__to(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_end_time = yang.gdata.from_xml_opt_str(node, 'end-time')
    yang.gdata.maybe_add(children, 'end-time', from_xml_junos_conf_root__configuration__groups__when__time__to__end_time, child_end_time)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__groups__when__time(yang.adata.MNode):
    start_time: ?str
    to: junos_conf_root__configuration__groups__when__time__to

    mut def __init__(self, start_time: ?str, to: ?junos_conf_root__configuration__groups__when__time__to=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.start_time = start_time
        self.to = to if to is not None else junos_conf_root__configuration__groups__when__time__to()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_time = self.start_time
        if _start_time is not None:
            children['start-time'] = yang.gdata.Leaf('string', _start_time)
        _to = self.to
        if _to is not None:
            children['to'] = _to.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when__time:
        if n is not None:
            return junos_conf_root__configuration__groups__when__time(start_time=n.get_opt_str('start-time'), to=junos_conf_root__configuration__groups__when__time__to.from_gdata(n.get_opt_cnt('to')))
        return junos_conf_root__configuration__groups__when__time()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/when/time')
            res.append('{self_name} = junos_conf_root__configuration__groups__when__time()')
        leaves = []
        _start_time = self.start_time
        if _start_time is not None:
            leaves.append('{self_name}.start_time = {repr(_start_time)}')
        _to = self.to
        if _to is not None:
            res.extend(_to.prsrc('{self_name}.to', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/when/time'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__when__time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_start_time = yang.gdata.from_xml_opt_str(node, 'start-time')
    yang.gdata.maybe_add(children, 'start-time', from_xml_junos_conf_root__configuration__groups__when__time__start_time, child_start_time)
    child_to = yang.gdata.from_xml_opt_cnt(node, 'to')
    yang.gdata.maybe_add(children, 'to', from_xml_junos_conf_root__configuration__groups__when__time__to, child_to)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__when__chassis(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__when__model(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__when__routing_engine(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__when__member(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__when__node(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class junos_conf_root__configuration__groups__when(yang.adata.MNode):
    time: junos_conf_root__configuration__groups__when__time
    chassis: ?str
    model: ?str
    routing_engine: ?str
    member: ?str
    node: ?str

    mut def __init__(self, time: ?junos_conf_root__configuration__groups__when__time=None, chassis: ?str, model: ?str, routing_engine: ?str, member: ?str, node: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.time = time if time is not None else junos_conf_root__configuration__groups__when__time()
        self.chassis = chassis
        self.model = model
        self.routing_engine = routing_engine
        self.member = member
        self.node = node

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _time = self.time
        if _time is not None:
            children['time'] = _time.to_gdata()
        _chassis = self.chassis
        if _chassis is not None:
            children['chassis'] = yang.gdata.Leaf('enumeration', _chassis)
        _model = self.model
        if _model is not None:
            children['model'] = yang.gdata.Leaf('string', _model)
        _routing_engine = self.routing_engine
        if _routing_engine is not None:
            children['routing-engine'] = yang.gdata.Leaf('enumeration', _routing_engine)
        _member = self.member
        if _member is not None:
            children['member'] = yang.gdata.Leaf('string', _member)
        _node = self.node
        if _node is not None:
            children['node'] = yang.gdata.Leaf('enumeration', _node)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__when:
        if n is not None:
            return junos_conf_root__configuration__groups__when(time=junos_conf_root__configuration__groups__when__time.from_gdata(n.get_opt_cnt('time')), chassis=n.get_opt_str('chassis'), model=n.get_opt_str('model'), routing_engine=n.get_opt_str('routing-engine'), member=n.get_opt_str('member'), node=n.get_opt_str('node'))
        return junos_conf_root__configuration__groups__when()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/when')
            res.append('{self_name} = junos_conf_root__configuration__groups__when()')
        leaves = []
        _time = self.time
        if _time is not None:
            res.extend(_time.prsrc('{self_name}.time', False).splitlines())
        _chassis = self.chassis
        if _chassis is not None:
            leaves.append('{self_name}.chassis = {repr(_chassis)}')
        _model = self.model
        if _model is not None:
            leaves.append('{self_name}.model = {repr(_model)}')
        _routing_engine = self.routing_engine
        if _routing_engine is not None:
            leaves.append('{self_name}.routing_engine = {repr(_routing_engine)}')
        _member = self.member
        if _member is not None:
            leaves.append('{self_name}.member = {repr(_member)}')
        _node = self.node
        if _node is not None:
            leaves.append('{self_name}.node = {repr(_node)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/when'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__when(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_time = yang.gdata.from_xml_opt_cnt(node, 'time')
    yang.gdata.maybe_add(children, 'time', from_xml_junos_conf_root__configuration__groups__when__time, child_time)
    child_chassis = yang.gdata.from_xml_opt_str(node, 'chassis')
    yang.gdata.maybe_add(children, 'chassis', from_xml_junos_conf_root__configuration__groups__when__chassis, child_chassis)
    child_model = yang.gdata.from_xml_opt_str(node, 'model')
    yang.gdata.maybe_add(children, 'model', from_xml_junos_conf_root__configuration__groups__when__model, child_model)
    child_routing_engine = yang.gdata.from_xml_opt_str(node, 'routing-engine')
    yang.gdata.maybe_add(children, 'routing-engine', from_xml_junos_conf_root__configuration__groups__when__routing_engine, child_routing_engine)
    child_member = yang.gdata.from_xml_opt_str(node, 'member')
    yang.gdata.maybe_add(children, 'member', from_xml_junos_conf_root__configuration__groups__when__member, child_member)
    child_node = yang.gdata.from_xml_opt_str(node, 'node')
    yang.gdata.maybe_add(children, 'node', from_xml_junos_conf_root__configuration__groups__when__node, child_node)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__system__services__netconf__rfc_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__system__services__netconf__yang_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__system__services__netconf(yang.adata.MNode):
    rfc_compliant: ?bool
    yang_compliant: ?bool

    mut def __init__(self, rfc_compliant: ?bool, yang_compliant: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rfc_compliant = rfc_compliant
        self.yang_compliant = yang_compliant

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            children['rfc-compliant'] = yang.gdata.Leaf('empty', _rfc_compliant)
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            children['yang-compliant'] = yang.gdata.Leaf('empty', _yang_compliant)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__system__services__netconf:
        if n is not None:
            return junos_conf_root__configuration__groups__system__services__netconf(rfc_compliant=n.get_opt_empty('rfc-compliant'), yang_compliant=n.get_opt_empty('yang-compliant'))
        return junos_conf_root__configuration__groups__system__services__netconf()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/system/services/netconf')
            res.append('{self_name} = junos_conf_root__configuration__groups__system__services__netconf()')
        leaves = []
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            leaves.append('{self_name}.rfc_compliant = {repr(_rfc_compliant)}')
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            leaves.append('{self_name}.yang_compliant = {repr(_yang_compliant)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/system/services/netconf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__system__services__netconf(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rfc_compliant = yang.gdata.from_xml_opt_empty(node, 'rfc-compliant')
    yang.gdata.maybe_add(children, 'rfc-compliant', from_xml_junos_conf_root__configuration__groups__system__services__netconf__rfc_compliant, child_rfc_compliant)
    child_yang_compliant = yang.gdata.from_xml_opt_empty(node, 'yang-compliant')
    yang.gdata.maybe_add(children, 'yang-compliant', from_xml_junos_conf_root__configuration__groups__system__services__netconf__yang_compliant, child_yang_compliant)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__groups__system__services(yang.adata.MNode):
    netconf: junos_conf_root__configuration__groups__system__services__netconf

    mut def __init__(self, netconf: ?junos_conf_root__configuration__groups__system__services__netconf=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.netconf = netconf if netconf is not None else junos_conf_root__configuration__groups__system__services__netconf()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _netconf = self.netconf
        if _netconf is not None:
            children['netconf'] = _netconf.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__system__services:
        if n is not None:
            return junos_conf_root__configuration__groups__system__services(netconf=junos_conf_root__configuration__groups__system__services__netconf.from_gdata(n.get_opt_cnt('netconf')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/system/services')
            res.append('{self_name} = junos_conf_root__configuration__groups__system__services()')
        leaves = []
        _netconf = self.netconf
        if _netconf is not None:
            res.extend(_netconf.prsrc('{self_name}.netconf', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/system/services'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__system__services(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_netconf = yang.gdata.from_xml_opt_cnt(node, 'netconf')
    yang.gdata.maybe_add(children, 'netconf', from_xml_junos_conf_root__configuration__groups__system__services__netconf, child_netconf)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__groups__system(yang.adata.MNode):
    host_name: ?str
    services: ?junos_conf_root__configuration__groups__system__services

    mut def __init__(self, host_name: ?str, services: ?junos_conf_root__configuration__groups__system__services=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.host_name = host_name
        self.services = services

    mut def create_services(self):
        res = junos_conf_root__configuration__groups__system__services()
        self.services = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        _services = self.services
        if _services is not None:
            children['services'] = _services.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__system:
        if n is not None:
            return junos_conf_root__configuration__groups__system(host_name=n.get_opt_str('host-name'), services=junos_conf_root__configuration__groups__system__services.from_gdata(n.get_opt_cnt('services')))
        return junos_conf_root__configuration__groups__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/system')
            res.append('{self_name} = junos_conf_root__configuration__groups__system()')
        leaves = []
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        _services = self.services
        if _services is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/system/services')
            res.append('services = {self_name}.create_services()')
            res.extend(_services.prsrc('services', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_junos_conf_root__configuration__groups__system__host_name, child_host_name)
    child_services = yang.gdata.from_xml_opt_cnt(node, 'services')
    yang.gdata.maybe_add(children, 'services', from_xml_junos_conf_root__configuration__groups__system__services, child_services)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/inet/address')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/inet/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/inet')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/groups/interfaces/interface/unit/family/inet/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/inet'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/inet6/address')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/inet6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/inet6')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/groups/interfaces/interface/unit/family/inet6/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/inet6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/iso/address')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/iso/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(yang.adata.MNode):
    address: junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address

    mut def __init__(self, address: list[junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family/iso')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/groups/interfaces/interface/unit/family/iso/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family/iso'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso__address, child_address)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__groups__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet
    inet6: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6
    iso: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso

    mut def __init__(self, inet: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet=None, inet6: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6=None, iso: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.inet = inet
        self.inet6 = inet6
        self.iso = iso

    mut def create_inet(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def create_inet6(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6()
        self.inet6 = res
        return res

    mut def create_iso(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso()
        self.iso = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        _inet6 = self.inet6
        if _inet6 is not None:
            children['inet6'] = _inet6.to_gdata()
        _iso = self.iso
        if _iso is not None:
            children['iso'] = _iso.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit__family:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces__interface__unit__family(inet=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_cnt('inet')), inet6=junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6.from_gdata(n.get_opt_cnt('inet6')), iso=junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso.from_gdata(n.get_opt_cnt('iso')))
        return junos_conf_root__configuration__groups__interfaces__interface__unit__family()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit/family')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit__family()')
        leaves = []
        _inet = self.inet
        if _inet is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/interfaces/interface/unit/family/inet')
            res.append('inet = {self_name}.create_inet()')
            res.extend(_inet.prsrc('inet', False).splitlines())
        _inet6 = self.inet6
        if _inet6 is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/interfaces/interface/unit/family/inet6')
            res.append('inet6 = {self_name}.create_inet6()')
            res.extend(_inet6.prsrc('inet6', False).splitlines())
        _iso = self.iso
        if _iso is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/interfaces/interface/unit/family/iso')
            res.append('iso = {self_name}.create_iso()')
            res.extend(_iso.prsrc('iso', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inet = yang.gdata.from_xml_opt_cnt(node, 'inet')
    yang.gdata.maybe_add(children, 'inet', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet, child_inet)
    child_inet6 = yang.gdata.from_xml_opt_cnt(node, 'inet6')
    yang.gdata.maybe_add(children, 'inet6', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__inet6, child_inet6)
    child_iso = yang.gdata.from_xml_opt_cnt(node, 'iso')
    yang.gdata.maybe_add(children, 'iso', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family__iso, child_iso)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__groups__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__groups__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        self.family = family if family is not None else junos_conf_root__configuration__groups__interfaces__interface__unit__family()
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _alias = self.alias
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name=n.get_str('name'), alias=n.get_opt_str('alias'), description=n.get_opt_str('description'), vlan_id=n.get_opt_str('vlan-id'), encapsulation=n.get_opt_str('encapsulation'), family=junos_conf_root__configuration__groups__interfaces__interface__unit__family.from_gdata(n.get_opt_cnt('family')), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/unit')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__unit({repr(self.name)})')
        leaves = []
        _alias = self.alias
        if _alias is not None:
            leaves.append('{self_name}.alias = {repr(_alias)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            leaves.append('{self_name}.vlan_id = {repr(_vlan_id)}')
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _family = self.family
        if _family is not None:
            res.extend(_family.prsrc('{self_name}.family', False).splitlines())
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/unit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__interfaces__interface__unit_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__name, child_name)
    child_alias = yang.gdata.from_xml_opt_str(node, 'alias')
    yang.gdata.maybe_add(children, 'alias', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__alias, child_alias)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__description, child_description)
    child_vlan_id = yang.gdata.from_xml_opt_str(node, 'vlan-id')
    yang.gdata.maybe_add(children, 'vlan-id', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__vlan_id, child_vlan_id)
    child_encapsulation = yang.gdata.from_xml_opt_str(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__encapsulation, child_encapsulation)
    child_family = yang.gdata.from_xml_opt_cnt(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__family, child_family)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit__mac, child_mac)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__stacked_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__flexible_vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__vlan_vci_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__no_per_unit_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__shared_scheduler(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface/hierarchical-scheduler')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface/hierarchical-scheduler'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__groups__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__groups__interfaces__interface__unit
    encapsulation: ?str
    vlan_tagging: ?bool
    stacked_vlan_tagging: ?bool
    flexible_vlan_tagging: ?bool
    vlan_vci_tagging: ?bool
    per_unit_scheduler: ?bool
    no_per_unit_scheduler: ?bool
    shared_scheduler: ?bool
    hierarchical_scheduler: ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__groups__interfaces__interface__unit_entry]=[], encapsulation: ?str, vlan_tagging: ?bool, stacked_vlan_tagging: ?bool, flexible_vlan_tagging: ?bool, vlan_vci_tagging: ?bool, per_unit_scheduler: ?bool, no_per_unit_scheduler: ?bool, shared_scheduler: ?bool, hierarchical_scheduler: ?junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__groups__interfaces__interface__unit(elements=unit)
        self.encapsulation = encapsulation
        self.vlan_tagging = vlan_tagging
        self.stacked_vlan_tagging = stacked_vlan_tagging
        self.flexible_vlan_tagging = flexible_vlan_tagging
        self.vlan_vci_tagging = vlan_vci_tagging
        self.per_unit_scheduler = per_unit_scheduler
        self.no_per_unit_scheduler = no_per_unit_scheduler
        self.shared_scheduler = shared_scheduler
        self.hierarchical_scheduler = hierarchical_scheduler

    mut def create_hierarchical_scheduler(self):
        res = junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler()
        self.hierarchical_scheduler = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        _unit = self.unit
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('empty', _vlan_tagging)
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        if _stacked_vlan_tagging is not None:
            children['stacked-vlan-tagging'] = yang.gdata.Leaf('empty', _stacked_vlan_tagging)
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        if _flexible_vlan_tagging is not None:
            children['flexible-vlan-tagging'] = yang.gdata.Leaf('empty', _flexible_vlan_tagging)
        _vlan_vci_tagging = self.vlan_vci_tagging
        if _vlan_vci_tagging is not None:
            children['vlan-vci-tagging'] = yang.gdata.Leaf('empty', _vlan_vci_tagging)
        _per_unit_scheduler = self.per_unit_scheduler
        if _per_unit_scheduler is not None:
            children['per-unit-scheduler'] = yang.gdata.Leaf('empty', _per_unit_scheduler)
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        if _no_per_unit_scheduler is not None:
            children['no-per-unit-scheduler'] = yang.gdata.Leaf('empty', _no_per_unit_scheduler)
        _shared_scheduler = self.shared_scheduler
        if _shared_scheduler is not None:
            children['shared-scheduler'] = yang.gdata.Leaf('empty', _shared_scheduler)
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _hierarchical_scheduler is not None:
            children['hierarchical-scheduler'] = _hierarchical_scheduler.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces__interface_entry:
        return junos_conf_root__configuration__groups__interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'), native_vlan_id=n.get_opt_value('native-vlan-id'), unit=junos_conf_root__configuration__groups__interfaces__interface__unit.from_gdata(n.get_opt_list('unit')), encapsulation=n.get_opt_str('encapsulation'), vlan_tagging=n.get_opt_empty('vlan-tagging'), stacked_vlan_tagging=n.get_opt_empty('stacked-vlan-tagging'), flexible_vlan_tagging=n.get_opt_empty('flexible-vlan-tagging'), vlan_vci_tagging=n.get_opt_empty('vlan-vci-tagging'), per_unit_scheduler=n.get_opt_empty('per-unit-scheduler'), no_per_unit_scheduler=n.get_opt_empty('no-per-unit-scheduler'), shared_scheduler=n.get_opt_empty('shared-scheduler'), hierarchical_scheduler=junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler.from_gdata(n.get_opt_cnt('hierarchical-scheduler')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces/interface')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            leaves.append('{self_name}.native_vlan_id = {repr(_native_vlan_id)}')
        _unit = self.unit
        for _element in _unit.elements:
            res.append('')
            res.append("# List /configuration/groups/interfaces/interface/unit element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'unit_element = {self_name}.unit.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('unit_element', False, list_element=True).splitlines())
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            leaves.append('{self_name}.vlan_tagging = {repr(_vlan_tagging)}')
        _stacked_vlan_tagging = self.stacked_vlan_tagging
        if _stacked_vlan_tagging is not None:
            leaves.append('{self_name}.stacked_vlan_tagging = {repr(_stacked_vlan_tagging)}')
        _flexible_vlan_tagging = self.flexible_vlan_tagging
        if _flexible_vlan_tagging is not None:
            leaves.append('{self_name}.flexible_vlan_tagging = {repr(_flexible_vlan_tagging)}')
        _vlan_vci_tagging = self.vlan_vci_tagging
        if _vlan_vci_tagging is not None:
            leaves.append('{self_name}.vlan_vci_tagging = {repr(_vlan_vci_tagging)}')
        _per_unit_scheduler = self.per_unit_scheduler
        if _per_unit_scheduler is not None:
            leaves.append('{self_name}.per_unit_scheduler = {repr(_per_unit_scheduler)}')
        _no_per_unit_scheduler = self.no_per_unit_scheduler
        if _no_per_unit_scheduler is not None:
            leaves.append('{self_name}.no_per_unit_scheduler = {repr(_no_per_unit_scheduler)}')
        _shared_scheduler = self.shared_scheduler
        if _shared_scheduler is not None:
            leaves.append('{self_name}.shared_scheduler = {repr(_shared_scheduler)}')
        _hierarchical_scheduler = self.hierarchical_scheduler
        if _hierarchical_scheduler is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/interfaces/interface/hierarchical-scheduler')
            res.append('hierarchical_scheduler = {self_name}.create_hierarchical_scheduler()')
            res.extend(_hierarchical_scheduler.prsrc('hierarchical_scheduler', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__interfaces__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__groups__interfaces__interface__description, child_description)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__groups__interfaces__interface__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__groups__interfaces__interface__mac, child_mac)
    child_native_vlan_id = yang.gdata.from_xml_opt_value(node, 'native-vlan-id')
    yang.gdata.maybe_add(children, 'native-vlan-id', from_xml_junos_conf_root__configuration__groups__interfaces__interface__native_vlan_id, child_native_vlan_id)
    child_unit = yang.gdata.from_xml_opt_list(node, 'unit')
    yang.gdata.maybe_add(children, 'unit', from_xml_junos_conf_root__configuration__groups__interfaces__interface__unit, child_unit)
    child_encapsulation = yang.gdata.from_xml_opt_str(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__groups__interfaces__interface__encapsulation, child_encapsulation)
    child_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'vlan-tagging')
    yang.gdata.maybe_add(children, 'vlan-tagging', from_xml_junos_conf_root__configuration__groups__interfaces__interface__vlan_tagging, child_vlan_tagging)
    child_stacked_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'stacked-vlan-tagging')
    yang.gdata.maybe_add(children, 'stacked-vlan-tagging', from_xml_junos_conf_root__configuration__groups__interfaces__interface__stacked_vlan_tagging, child_stacked_vlan_tagging)
    child_flexible_vlan_tagging = yang.gdata.from_xml_opt_empty(node, 'flexible-vlan-tagging')
    yang.gdata.maybe_add(children, 'flexible-vlan-tagging', from_xml_junos_conf_root__configuration__groups__interfaces__interface__flexible_vlan_tagging, child_flexible_vlan_tagging)
    child_vlan_vci_tagging = yang.gdata.from_xml_opt_empty(node, 'vlan-vci-tagging')
    yang.gdata.maybe_add(children, 'vlan-vci-tagging', from_xml_junos_conf_root__configuration__groups__interfaces__interface__vlan_vci_tagging, child_vlan_vci_tagging)
    child_per_unit_scheduler = yang.gdata.from_xml_opt_empty(node, 'per-unit-scheduler')
    yang.gdata.maybe_add(children, 'per-unit-scheduler', from_xml_junos_conf_root__configuration__groups__interfaces__interface__per_unit_scheduler, child_per_unit_scheduler)
    child_no_per_unit_scheduler = yang.gdata.from_xml_opt_empty(node, 'no-per-unit-scheduler')
    yang.gdata.maybe_add(children, 'no-per-unit-scheduler', from_xml_junos_conf_root__configuration__groups__interfaces__interface__no_per_unit_scheduler, child_no_per_unit_scheduler)
    child_shared_scheduler = yang.gdata.from_xml_opt_empty(node, 'shared-scheduler')
    yang.gdata.maybe_add(children, 'shared-scheduler', from_xml_junos_conf_root__configuration__groups__interfaces__interface__shared_scheduler, child_shared_scheduler)
    child_hierarchical_scheduler = yang.gdata.from_xml_opt_cnt(node, 'hierarchical-scheduler')
    yang.gdata.maybe_add(children, 'hierarchical-scheduler', from_xml_junos_conf_root__configuration__groups__interfaces__interface__hierarchical_scheduler, child_hierarchical_scheduler)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__groups__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__groups__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__groups__interfaces__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.interface = junos_conf_root__configuration__groups__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__interfaces:
        if n is not None:
            return junos_conf_root__configuration__groups__interfaces(interface=junos_conf_root__configuration__groups__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__groups__interfaces()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/interfaces')
            res.append('{self_name} = junos_conf_root__configuration__groups__interfaces()')
        leaves = []
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/groups/interfaces/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/interfaces'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__groups__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups_except(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _any = self.any
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name=n.get_str('name'), any=n.get_opt_empty('any'), unicast=n.get_opt_empty('unicast'), multicast=n.get_opt_empty('multicast'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/interface')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__interface({repr(self.name)})')
        leaves = []
        _any = self.any
        if _any is not None:
            leaves.append('{self_name}.any = {repr(_any)}')
        _unicast = self.unicast
        if _unicast is not None:
            leaves.append('{self_name}.unicast = {repr(_unicast)}')
        _multicast = self.multicast
        if _multicast is not None:
            leaves.append('{self_name}.multicast = {repr(_multicast)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__routing_instances__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__name, child_name)
    child_any = yang.gdata.from_xml_opt_empty(node, 'any')
    yang.gdata.maybe_add(children, 'any', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__any, child_any)
    child_unicast = yang.gdata.from_xml_opt_empty(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_empty(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__multicast, child_multicast)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str('rd-type'))
        return junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/route-distinguisher')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()')
        leaves = []
        _rd_type = self.rd_type
        if _rd_type is not None:
            leaves.append('{self_name}.rd_type = {repr(_rd_type)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/route-distinguisher'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rd_type = yang.gdata.from_xml_opt_str(node, 'rd-type')
    yang.gdata.maybe_add(children, 'rd-type', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher__rd_type, child_rd_type)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__export_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__import_default_action(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        _auto = self.auto
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__vrf_target:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(community=n.get_opt_str('community'), import_=n.get_opt_str('import'), export=n.get_opt_str('export'), auto=n.get_opt_empty('auto'))
        return junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/vrf-target')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()')
        leaves = []
        _community = self.community
        if _community is not None:
            leaves.append('{self_name}.community = {repr(_community)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _auto = self.auto
        if _auto is not None:
            leaves.append('{self_name}.auto = {repr(_auto)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/vrf-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_community = yang.gdata.from_xml_opt_str(node, 'community')
    yang.gdata.maybe_add(children, 'community', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__community, child_community)
    child_import_ = yang.gdata.from_xml_opt_str(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__import, child_import_)
    child_export = yang.gdata.from_xml_opt_str(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__export, child_export)
    child_auto = yang.gdata.from_xml_opt_empty(node, 'auto')
    yang.gdata.maybe_add(children, 'auto', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target__auto, child_auto)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__no_vrf_advertise(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__static(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__source_class_usage(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(yang.adata.MNode):
    static: ?value
    source_class_usage: ?bool

    mut def __init__(self, static: ?value, source_class_usage: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.static = static
        self.source_class_usage = source_class_usage

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _static = self.static
        if _static is not None:
            children['static'] = yang.gdata.Leaf('union', _static)
        _source_class_usage = self.source_class_usage
        if _source_class_usage is not None:
            children['source-class-usage'] = yang.gdata.Leaf('empty', _source_class_usage)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(static=n.get_opt_value('static'), source_class_usage=n.get_opt_empty('source-class-usage'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/vrf-table-label')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label()')
        leaves = []
        _static = self.static
        if _static is not None:
            leaves.append('{self_name}.static = {repr(_static)}')
        _source_class_usage = self.source_class_usage
        if _source_class_usage is not None:
            leaves.append('{self_name}.source_class_usage = {repr(_source_class_usage)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/vrf-table-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_static = yang.gdata.from_xml_opt_value(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__static, child_static)
    child_source_class_usage = yang.gdata.from_xml_opt_empty(node, 'source-class-usage')
    yang.gdata.maybe_add(children, 'source-class-usage', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label__source_class_usage, child_source_class_usage)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__as_override(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(yang.adata.MNode):
    ttl: ?value
    no_nexthop_change: ?bool

    mut def __init__(self, ttl: ?value, no_nexthop_change: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.ttl = ttl
        self.no_nexthop_change = no_nexthop_change

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ttl = self.ttl
        if _ttl is not None:
            children['ttl'] = yang.gdata.Leaf('union', _ttl)
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            children['no-nexthop-change'] = yang.gdata.Leaf('empty', _no_nexthop_change)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=n.get_opt_value('ttl'), no_nexthop_change=n.get_opt_empty('no-nexthop-change'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop()')
        leaves = []
        _ttl = self.ttl
        if _ttl is not None:
            leaves.append('{self_name}.ttl = {repr(_ttl)}')
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            leaves.append('{self_name}.no_nexthop_change = {repr(_no_nexthop_change)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ttl = yang.gdata.from_xml_opt_value(node, 'ttl')
    yang.gdata.maybe_add(children, 'ttl', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl, child_ttl)
    child_no_nexthop_change = yang.gdata.from_xml_opt_empty(node, 'no-nexthop-change')
    yang.gdata.maybe_add(children, 'no-nexthop-change', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change, child_no_nexthop_change)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    peer_as: ?str
    authentication_key: ?str
    as_override: ?bool
    authentication_algorithm: ?str
    multihop: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop

    mut def __init__(self, name: str, description: ?str, peer_as: ?str, authentication_key: ?str, as_override: ?bool, authentication_algorithm: ?str, multihop: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.peer_as = peer_as
        self.authentication_key = authentication_key
        self.as_override = as_override
        self.authentication_algorithm = authentication_algorithm
        self.multihop = multihop

    mut def create_multihop(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop()
        self.multihop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('string', _peer_as)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _as_override = self.as_override
        if _as_override is not None:
            children['as-override'] = yang.gdata.Leaf('empty', _as_override)
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=n.get_str('name'), description=n.get_opt_str('description'), peer_as=n.get_opt_str('peer-as'), authentication_key=n.get_opt_str('authentication-key'), as_override=n.get_opt_empty('as-override'), authentication_algorithm=n.get_opt_str('authentication-algorithm'), multihop=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_gdata(n.get_opt_cnt('multihop')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _as_override = self.as_override
        if _as_override is not None:
            leaves.append('{self_name}.as_override = {repr(_as_override)}')
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            leaves.append('{self_name}.authentication_algorithm = {repr(_authentication_algorithm)}')
        _multihop = self.multihop
        if _multihop is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('multihop = {self_name}.create_multihop()')
            res.extend(_multihop.prsrc('multihop', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__description, child_description)
    child_peer_as = yang.gdata.from_xml_opt_str(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__peer_as, child_peer_as)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key, child_authentication_key)
    child_as_override = yang.gdata.from_xml_opt_empty(node, 'as-override')
    yang.gdata.maybe_add(children, 'as-override', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__as_override, child_as_override)
    child_authentication_algorithm = yang.gdata.from_xml_opt_str(node, 'authentication-algorithm')
    yang.gdata.maybe_add(children, 'authentication-algorithm', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm, child_authentication_algorithm)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor__multihop, child_multihop)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    passive: ?bool
    import_: list[str]
    export: list[str]
    neighbor: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, passive: ?bool, import_: ?list[str]=None, export: ?list[str]=None, neighbor: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.passive = passive
        self.import_ = import_ if import_ is not None else []
        self.export = export if export is not None else []
        self.neighbor = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.LeafList('string', _import_, user_order=True)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.LeafList('string', _export, user_order=True)
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(name=n.get_str('name'), passive=n.get_opt_empty('passive'), import_=n.get_opt_strs('import'), export=n.get_opt_strs('export'), neighbor=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list('neighbor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols/bgp/group')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group({repr(self.name)})')
        leaves = []
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /configuration/groups/routing-instances/instance/protocols/bgp/group/neighbor element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__name, child_name)
    child_passive = yang.gdata.from_xml_opt_empty(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__passive, child_passive)
    child_import_ = yang.gdata.from_xml_opt_strs(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__import, child_import_)
    child_export = yang.gdata.from_xml_opt_strs(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__export, child_export)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group

    mut def __init__(self, group: list[junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.group = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group.from_gdata(n.get_opt_list('group')))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols/bgp')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()')
        leaves = []
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /configuration/groups/routing-instances/instance/protocols/bgp/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp__group, child_group)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__control_word(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__no_mac_learning(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(yang.adata.MNode):
    control_word: ?bool
    no_mac_learning: ?bool

    mut def __init__(self, control_word: ?bool, no_mac_learning: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.control_word = control_word
        self.no_mac_learning = no_mac_learning

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _control_word = self.control_word
        if _control_word is not None:
            children['control-word'] = yang.gdata.Leaf('empty', _control_word)
        _no_mac_learning = self.no_mac_learning
        if _no_mac_learning is not None:
            children['no-mac-learning'] = yang.gdata.Leaf('empty', _no_mac_learning)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(control_word=n.get_opt_empty('control-word'), no_mac_learning=n.get_opt_empty('no-mac-learning'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols/evpn')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn()')
        leaves = []
        _control_word = self.control_word
        if _control_word is not None:
            leaves.append('{self_name}.control_word = {repr(_control_word)}')
        _no_mac_learning = self.no_mac_learning
        if _no_mac_learning is not None:
            leaves.append('{self_name}.no_mac_learning = {repr(_no_mac_learning)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_control_word = yang.gdata.from_xml_opt_empty(node, 'control-word')
    yang.gdata.maybe_add(children, 'control-word', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__control_word, child_control_word)
    child_no_mac_learning = yang.gdata.from_xml_opt_empty(node, 'no-mac-learning')
    yang.gdata.maybe_add(children, 'no-mac-learning', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn__no_mac_learning, child_no_mac_learning)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__groups__routing_instances__instance__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp
    evpn: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn

    mut def __init__(self, bgp: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp=None, evpn: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.bgp = bgp if bgp is not None else junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp()
        self.evpn = evpn

    mut def create_evpn(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn()
        self.evpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance__protocols:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), evpn=junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn.from_gdata(n.get_opt_cnt('evpn')))
        return junos_conf_root__configuration__groups__routing_instances__instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance/protocols')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.extend(_bgp.prsrc('{self_name}.bgp', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/routing-instances/instance/protocols/evpn')
            res.append('evpn = {self_name}.create_evpn()')
            res.extend(_evpn.prsrc('evpn', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__bgp, child_bgp)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols__evpn, child_evpn)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__groups__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    apply_groups: list[str]
    apply_groups_except: list[str]
    instance_type: ?str
    interface: junos_conf_root__configuration__groups__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher
    export_default_action: ?str
    import_default_action: ?str
    vrf_target: junos_conf_root__configuration__groups__routing_instances__instance__vrf_target
    no_vrf_advertise: ?bool
    vrf_table_label: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label
    protocols: junos_conf_root__configuration__groups__routing_instances__instance__protocols

    mut def __init__(self, name: str, apply_groups: ?list[str]=None, apply_groups_except: ?list[str]=None, instance_type: ?str, interface: list[junos_conf_root__configuration__groups__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher=None, export_default_action: ?str, import_default_action: ?str, vrf_target: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_target=None, no_vrf_advertise: ?bool, vrf_table_label: ?junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label=None, protocols: ?junos_conf_root__configuration__groups__routing_instances__instance__protocols=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.apply_groups = apply_groups if apply_groups is not None else []
        self.apply_groups_except = apply_groups_except if apply_groups_except is not None else []
        self.instance_type = instance_type
        self.interface = junos_conf_root__configuration__groups__routing_instances__instance__interface(elements=interface)
        self.route_distinguisher = route_distinguisher if route_distinguisher is not None else junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher()
        self.export_default_action = export_default_action
        self.import_default_action = import_default_action
        self.vrf_target = vrf_target if vrf_target is not None else junos_conf_root__configuration__groups__routing_instances__instance__vrf_target()
        self.no_vrf_advertise = no_vrf_advertise
        self.vrf_table_label = vrf_table_label
        self.protocols = protocols if protocols is not None else junos_conf_root__configuration__groups__routing_instances__instance__protocols()

    mut def create_vrf_table_label(self):
        res = junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label()
        self.vrf_table_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _apply_groups = self.apply_groups
        if _apply_groups is not None:
            children['apply-groups'] = yang.gdata.LeafList('string', _apply_groups, user_order=True)
        _apply_groups_except = self.apply_groups_except
        if _apply_groups_except is not None:
            children['apply-groups-except'] = yang.gdata.LeafList('string', _apply_groups_except, user_order=True)
        _instance_type = self.instance_type
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        _export_default_action = self.export_default_action
        if _export_default_action is not None:
            children['export-default-action'] = yang.gdata.Leaf('enumeration', _export_default_action)
        _import_default_action = self.import_default_action
        if _import_default_action is not None:
            children['import-default-action'] = yang.gdata.Leaf('enumeration', _import_default_action)
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        _no_vrf_advertise = self.no_vrf_advertise
        if _no_vrf_advertise is not None:
            children['no-vrf-advertise'] = yang.gdata.Leaf('empty', _no_vrf_advertise)
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            children['vrf-table-label'] = _vrf_table_label.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances__instance_entry:
        return junos_conf_root__configuration__groups__routing_instances__instance_entry(name=n.get_str('name'), apply_groups=n.get_opt_strs('apply-groups'), apply_groups_except=n.get_opt_strs('apply-groups-except'), instance_type=n.get_opt_str('instance-type'), interface=junos_conf_root__configuration__groups__routing_instances__instance__interface.from_gdata(n.get_opt_list('interface')), route_distinguisher=junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_cnt('route-distinguisher')), export_default_action=n.get_opt_str('export-default-action'), import_default_action=n.get_opt_str('import-default-action'), vrf_target=junos_conf_root__configuration__groups__routing_instances__instance__vrf_target.from_gdata(n.get_opt_cnt('vrf-target')), no_vrf_advertise=n.get_opt_empty('no-vrf-advertise'), vrf_table_label=junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label.from_gdata(n.get_opt_cnt('vrf-table-label')), protocols=junos_conf_root__configuration__groups__routing_instances__instance__protocols.from_gdata(n.get_opt_cnt('protocols')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances/instance')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances__instance({repr(self.name)})')
        leaves = []
        _apply_groups = self.apply_groups
        if _apply_groups is not None:
            leaves.append('{self_name}.apply_groups = {repr(_apply_groups)}')
        _apply_groups_except = self.apply_groups_except
        if _apply_groups_except is not None:
            leaves.append('{self_name}.apply_groups_except = {repr(_apply_groups_except)}')
        _instance_type = self.instance_type
        if _instance_type is not None:
            leaves.append('{self_name}.instance_type = {repr(_instance_type)}')
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/groups/routing-instances/instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            res.extend(_route_distinguisher.prsrc('{self_name}.route_distinguisher', False).splitlines())
        _export_default_action = self.export_default_action
        if _export_default_action is not None:
            leaves.append('{self_name}.export_default_action = {repr(_export_default_action)}')
        _import_default_action = self.import_default_action
        if _import_default_action is not None:
            leaves.append('{self_name}.import_default_action = {repr(_import_default_action)}')
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            res.extend(_vrf_target.prsrc('{self_name}.vrf_target', False).splitlines())
        _no_vrf_advertise = self.no_vrf_advertise
        if _no_vrf_advertise is not None:
            leaves.append('{self_name}.no_vrf_advertise = {repr(_no_vrf_advertise)}')
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            res.append('')
            res.append('# P-container: /configuration/groups/routing-instances/instance/vrf-table-label')
            res.append('vrf_table_label = {self_name}.create_vrf_table_label()')
            res.extend(_vrf_table_label.prsrc('vrf_table_label', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups__routing_instances__instance_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups__routing_instances__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__name, child_name)
    child_apply_groups = yang.gdata.from_xml_opt_strs(node, 'apply-groups')
    yang.gdata.maybe_add(children, 'apply-groups', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups, child_apply_groups)
    child_apply_groups_except = yang.gdata.from_xml_opt_strs(node, 'apply-groups-except')
    yang.gdata.maybe_add(children, 'apply-groups-except', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__apply_groups_except, child_apply_groups_except)
    child_instance_type = yang.gdata.from_xml_opt_str(node, 'instance-type')
    yang.gdata.maybe_add(children, 'instance-type', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__instance_type, child_instance_type)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__interface, child_interface)
    child_route_distinguisher = yang.gdata.from_xml_opt_cnt(node, 'route-distinguisher')
    yang.gdata.maybe_add(children, 'route-distinguisher', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__route_distinguisher, child_route_distinguisher)
    child_export_default_action = yang.gdata.from_xml_opt_str(node, 'export-default-action')
    yang.gdata.maybe_add(children, 'export-default-action', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__export_default_action, child_export_default_action)
    child_import_default_action = yang.gdata.from_xml_opt_str(node, 'import-default-action')
    yang.gdata.maybe_add(children, 'import-default-action', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__import_default_action, child_import_default_action)
    child_vrf_target = yang.gdata.from_xml_opt_cnt(node, 'vrf-target')
    yang.gdata.maybe_add(children, 'vrf-target', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_target, child_vrf_target)
    child_no_vrf_advertise = yang.gdata.from_xml_opt_empty(node, 'no-vrf-advertise')
    yang.gdata.maybe_add(children, 'no-vrf-advertise', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__no_vrf_advertise, child_no_vrf_advertise)
    child_vrf_table_label = yang.gdata.from_xml_opt_cnt(node, 'vrf-table-label')
    yang.gdata.maybe_add(children, 'vrf-table-label', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__vrf_table_label, child_vrf_table_label)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_junos_conf_root__configuration__groups__routing_instances__instance__protocols, child_protocols)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups__routing_instances__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups__routing_instances__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__groups__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__groups__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__groups__routing_instances__instance_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.instance = junos_conf_root__configuration__groups__routing_instances__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__groups__routing_instances:
        if n is not None:
            return junos_conf_root__configuration__groups__routing_instances(instance=junos_conf_root__configuration__groups__routing_instances__instance.from_gdata(n.get_opt_list('instance')))
        return junos_conf_root__configuration__groups__routing_instances()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups/routing-instances')
            res.append('{self_name} = junos_conf_root__configuration__groups__routing_instances()')
        leaves = []
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /configuration/groups/routing-instances/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups/routing-instances'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__groups__routing_instances(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_junos_conf_root__configuration__groups__routing_instances__instance, child_instance)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__groups_entry(yang.adata.MNode):
    name: str
    when: junos_conf_root__configuration__groups__when
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__groups__system
    interfaces: junos_conf_root__configuration__groups__interfaces
    routing_instances: junos_conf_root__configuration__groups__routing_instances

    mut def __init__(self, name: str, when: ?junos_conf_root__configuration__groups__when=None, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__groups__system=None, interfaces: ?junos_conf_root__configuration__groups__interfaces=None, routing_instances: ?junos_conf_root__configuration__groups__routing_instances=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.when = when if when is not None else junos_conf_root__configuration__groups__when()
        self.rcsid = rcsid
        self.version = version
        self.system = system if system is not None else junos_conf_root__configuration__groups__system()
        self.interfaces = interfaces if interfaces is not None else junos_conf_root__configuration__groups__interfaces()
        self.routing_instances = routing_instances if routing_instances is not None else junos_conf_root__configuration__groups__routing_instances()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _when = self.when
        if _when is not None:
            children['when'] = _when.to_gdata()
        _rcsid = self.rcsid
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        _version = self.version
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__groups_entry:
        return junos_conf_root__configuration__groups_entry(name=n.get_str('name'), when=junos_conf_root__configuration__groups__when.from_gdata(n.get_opt_cnt('when')), rcsid=n.get_opt_str('rcsid'), version=n.get_opt_str('version'), system=junos_conf_root__configuration__groups__system.from_gdata(n.get_opt_cnt('system')), interfaces=junos_conf_root__configuration__groups__interfaces.from_gdata(n.get_opt_cnt('interfaces')), routing_instances=junos_conf_root__configuration__groups__routing_instances.from_gdata(n.get_opt_cnt('routing-instances')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/groups')
            res.append('{self_name} = junos_conf_root__configuration__groups({repr(self.name)})')
        leaves = []
        _when = self.when
        if _when is not None:
            res.extend(_when.prsrc('{self_name}.when', False).splitlines())
        _rcsid = self.rcsid
        if _rcsid is not None:
            leaves.append('{self_name}.rcsid = {repr(_rcsid)}')
        _version = self.version
        if _version is not None:
            leaves.append('{self_name}.version = {repr(_version)}')
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _interfaces = self.interfaces
        if _interfaces is not None:
            res.extend(_interfaces.prsrc('{self_name}.interfaces', False).splitlines())
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            res.extend(_routing_instances.prsrc('{self_name}.routing_instances', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/groups'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__groups(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__groups_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'groups'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__groups_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__groups_entry]:
        if n is not None:
            return [junos_conf_root__configuration__groups_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__groups_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__groups__name, child_name)
    child_when = yang.gdata.from_xml_opt_cnt(node, 'when')
    yang.gdata.maybe_add(children, 'when', from_xml_junos_conf_root__configuration__groups__when, child_when)
    child_rcsid = yang.gdata.from_xml_opt_str(node, 'rcsid')
    yang.gdata.maybe_add(children, 'rcsid', from_xml_junos_conf_root__configuration__groups__rcsid, child_rcsid)
    child_version = yang.gdata.from_xml_opt_str(node, 'version')
    yang.gdata.maybe_add(children, 'version', from_xml_junos_conf_root__configuration__groups__version, child_version)
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system')
    yang.gdata.maybe_add(children, 'system', from_xml_junos_conf_root__configuration__groups__system, child_system)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_junos_conf_root__configuration__groups__interfaces, child_interfaces)
    child_routing_instances = yang.gdata.from_xml_opt_cnt(node, 'routing-instances')
    yang.gdata.maybe_add(children, 'routing-instances', from_xml_junos_conf_root__configuration__groups__routing_instances, child_routing_instances)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__groups(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__groups_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_options__autonomous_system__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__routing_options__autonomous_system(yang.adata.MNode):
    as_number: ?str

    mut def __init__(self, as_number: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.as_number = as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options__autonomous_system:
        if n is not None:
            return junos_conf_root__configuration__routing_options__autonomous_system(as_number=n.get_opt_str('as-number'))
        return junos_conf_root__configuration__routing_options__autonomous_system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-options/autonomous-system')
            res.append('{self_name} = junos_conf_root__configuration__routing_options__autonomous_system()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-options/autonomous-system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_options__autonomous_system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_junos_conf_root__configuration__routing_options__autonomous_system__as_number, child_as_number)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__routing_options(yang.adata.MNode):
    autonomous_system: junos_conf_root__configuration__routing_options__autonomous_system

    mut def __init__(self, autonomous_system: ?junos_conf_root__configuration__routing_options__autonomous_system=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.autonomous_system = autonomous_system if autonomous_system is not None else junos_conf_root__configuration__routing_options__autonomous_system()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = _autonomous_system.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options:
        if n is not None:
            return junos_conf_root__configuration__routing_options(autonomous_system=junos_conf_root__configuration__routing_options__autonomous_system.from_gdata(n.get_opt_cnt('autonomous-system')))
        return junos_conf_root__configuration__routing_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-options')
            res.append('{self_name} = junos_conf_root__configuration__routing_options()')
        leaves = []
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            res.extend(_autonomous_system.prsrc('{self_name}.autonomous_system', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_autonomous_system = yang.gdata.from_xml_opt_cnt(node, 'autonomous-system')
    yang.gdata.maybe_add(children, 'autonomous-system', from_xml_junos_conf_root__configuration__routing_options__autonomous_system, child_autonomous_system)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__l2vpn_use_bgp_rules(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__cisco_non_deterministic(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__always_compare_med(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__med_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__igp_multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(yang.adata.MNode):
    med_multiplier: ?value
    igp_multiplier: ?value

    mut def __init__(self, med_multiplier: ?value, igp_multiplier: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.med_multiplier = med_multiplier
        self.igp_multiplier = igp_multiplier

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _med_multiplier = self.med_multiplier
        if _med_multiplier is not None:
            children['med-multiplier'] = yang.gdata.Leaf('union', _med_multiplier)
        _igp_multiplier = self.igp_multiplier
        if _igp_multiplier is not None:
            children['igp-multiplier'] = yang.gdata.Leaf('union', _igp_multiplier)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(med_multiplier=n.get_opt_value('med-multiplier'), igp_multiplier=n.get_opt_value('igp-multiplier'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/path-selection/med-plus-igp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp()')
        leaves = []
        _med_multiplier = self.med_multiplier
        if _med_multiplier is not None:
            leaves.append('{self_name}.med_multiplier = {repr(_med_multiplier)}')
        _igp_multiplier = self.igp_multiplier
        if _igp_multiplier is not None:
            leaves.append('{self_name}.igp_multiplier = {repr(_igp_multiplier)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/path-selection/med-plus-igp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_med_multiplier = yang.gdata.from_xml_opt_value(node, 'med-multiplier')
    yang.gdata.maybe_add(children, 'med-multiplier', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__med_multiplier, child_med_multiplier)
    child_igp_multiplier = yang.gdata.from_xml_opt_value(node, 'igp-multiplier')
    yang.gdata.maybe_add(children, 'igp-multiplier', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp__igp_multiplier, child_igp_multiplier)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__external_router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__as_path_ignore(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__path_selection(yang.adata.MNode):
    l2vpn_use_bgp_rules: ?bool
    cisco_non_deterministic: ?bool
    always_compare_med: ?bool
    med_plus_igp: ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp
    external_router_id: ?bool
    as_path_ignore: ?bool

    mut def __init__(self, l2vpn_use_bgp_rules: ?bool, cisco_non_deterministic: ?bool, always_compare_med: ?bool, med_plus_igp: ?junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp=None, external_router_id: ?bool, as_path_ignore: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.l2vpn_use_bgp_rules = l2vpn_use_bgp_rules
        self.cisco_non_deterministic = cisco_non_deterministic
        self.always_compare_med = always_compare_med
        self.med_plus_igp = med_plus_igp
        self.external_router_id = external_router_id
        self.as_path_ignore = as_path_ignore

    mut def create_med_plus_igp(self):
        res = junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp()
        self.med_plus_igp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _l2vpn_use_bgp_rules = self.l2vpn_use_bgp_rules
        if _l2vpn_use_bgp_rules is not None:
            children['l2vpn-use-bgp-rules'] = yang.gdata.Leaf('empty', _l2vpn_use_bgp_rules)
        _cisco_non_deterministic = self.cisco_non_deterministic
        if _cisco_non_deterministic is not None:
            children['cisco-non-deterministic'] = yang.gdata.Leaf('empty', _cisco_non_deterministic)
        _always_compare_med = self.always_compare_med
        if _always_compare_med is not None:
            children['always-compare-med'] = yang.gdata.Leaf('empty', _always_compare_med)
        _med_plus_igp = self.med_plus_igp
        if _med_plus_igp is not None:
            children['med-plus-igp'] = _med_plus_igp.to_gdata()
        _external_router_id = self.external_router_id
        if _external_router_id is not None:
            children['external-router-id'] = yang.gdata.Leaf('empty', _external_router_id)
        _as_path_ignore = self.as_path_ignore
        if _as_path_ignore is not None:
            children['as-path-ignore'] = yang.gdata.Leaf('empty', _as_path_ignore)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__path_selection:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__path_selection(l2vpn_use_bgp_rules=n.get_opt_empty('l2vpn-use-bgp-rules'), cisco_non_deterministic=n.get_opt_empty('cisco-non-deterministic'), always_compare_med=n.get_opt_empty('always-compare-med'), med_plus_igp=junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp.from_gdata(n.get_opt_cnt('med-plus-igp')), external_router_id=n.get_opt_empty('external-router-id'), as_path_ignore=n.get_opt_empty('as-path-ignore'))
        return junos_conf_root__configuration__protocols__bgp__path_selection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/path-selection')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__path_selection()')
        leaves = []
        _l2vpn_use_bgp_rules = self.l2vpn_use_bgp_rules
        if _l2vpn_use_bgp_rules is not None:
            leaves.append('{self_name}.l2vpn_use_bgp_rules = {repr(_l2vpn_use_bgp_rules)}')
        _cisco_non_deterministic = self.cisco_non_deterministic
        if _cisco_non_deterministic is not None:
            leaves.append('{self_name}.cisco_non_deterministic = {repr(_cisco_non_deterministic)}')
        _always_compare_med = self.always_compare_med
        if _always_compare_med is not None:
            leaves.append('{self_name}.always_compare_med = {repr(_always_compare_med)}')
        _med_plus_igp = self.med_plus_igp
        if _med_plus_igp is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/path-selection/med-plus-igp')
            res.append('med_plus_igp = {self_name}.create_med_plus_igp()')
            res.extend(_med_plus_igp.prsrc('med_plus_igp', False).splitlines())
        _external_router_id = self.external_router_id
        if _external_router_id is not None:
            leaves.append('{self_name}.external_router_id = {repr(_external_router_id)}')
        _as_path_ignore = self.as_path_ignore
        if _as_path_ignore is not None:
            leaves.append('{self_name}.as_path_ignore = {repr(_as_path_ignore)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/path-selection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__path_selection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_l2vpn_use_bgp_rules = yang.gdata.from_xml_opt_empty(node, 'l2vpn-use-bgp-rules')
    yang.gdata.maybe_add(children, 'l2vpn-use-bgp-rules', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__l2vpn_use_bgp_rules, child_l2vpn_use_bgp_rules)
    child_cisco_non_deterministic = yang.gdata.from_xml_opt_empty(node, 'cisco-non-deterministic')
    yang.gdata.maybe_add(children, 'cisco-non-deterministic', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__cisco_non_deterministic, child_cisco_non_deterministic)
    child_always_compare_med = yang.gdata.from_xml_opt_empty(node, 'always-compare-med')
    yang.gdata.maybe_add(children, 'always-compare-med', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__always_compare_med, child_always_compare_med)
    child_med_plus_igp = yang.gdata.from_xml_opt_cnt(node, 'med-plus-igp')
    yang.gdata.maybe_add(children, 'med-plus-igp', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__med_plus_igp, child_med_plus_igp)
    child_external_router_id = yang.gdata.from_xml_opt_empty(node, 'external-router-id')
    yang.gdata.maybe_add(children, 'external-router-id', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__external_router_id, child_external_router_id)
    child_as_path_ignore = yang.gdata.from_xml_opt_empty(node, 'as-path-ignore')
    yang.gdata.maybe_add(children, 'as-path-ignore', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection__as_path_ignore, child_as_path_ignore)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=n.get_opt_empty('forever'), timeout=n.get_opt_value('timeout'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown/idle-timeout')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout()')
        leaves = []
        _forever = self.forever
        if _forever is not None:
            leaves.append('{self_name}.forever = {repr(_forever)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown/idle-timeout'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forever = yang.gdata.from_xml_opt_empty(node, 'forever')
    yang.gdata.maybe_add(children, 'forever', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__forever, child_forever)
    child_timeout = yang.gdata.from_xml_opt_value(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout, child_timeout)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(limit_threshold=n.get_opt_value('limit-threshold'), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_cnt('idle-timeout')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown/idle-timeout')
            res.append('idle_timeout = {self_name}.create_idle_timeout()')
            res.extend(_idle_timeout.prsrc('idle_timeout', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__limit_threshold, child_limit_threshold)
    child_idle_timeout = yang.gdata.from_xml_opt_cnt(node, 'idle-timeout')
    yang.gdata.maybe_add(children, 'idle-timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown__idle_timeout, child_idle_timeout)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/drop-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/drop-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/hide-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/hide-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        _teardown = self.teardown
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(maximum=n.get_opt_value('maximum'), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown.from_gdata(n.get_opt_cnt('teardown')), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess.from_gdata(n.get_opt_cnt('drop-excess')), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess.from_gdata(n.get_opt_cnt('hide-excess')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()')
        leaves = []
        _maximum = self.maximum
        if _maximum is not None:
            leaves.append('{self_name}.maximum = {repr(_maximum)}')
        _teardown = self.teardown
        if _teardown is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/teardown')
            res.append('teardown = {self_name}.create_teardown()')
            res.extend(_teardown.prsrc('teardown', False).splitlines())
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/drop-excess')
            res.append('drop_excess = {self_name}.create_drop_excess()')
            res.extend(_drop_excess.prsrc('drop_excess', False).splitlines())
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit/hide-excess')
            res.append('hide_excess = {self_name}.create_hide_excess()')
            res.extend(_hide_excess.prsrc('hide_excess', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/prefix-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum = yang.gdata.from_xml_opt_value(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__maximum, child_maximum)
    child_teardown = yang.gdata.from_xml_opt_cnt(node, 'teardown')
    yang.gdata.maybe_add(children, 'teardown', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__teardown, child_teardown)
    child_drop_excess = yang.gdata.from_xml_opt_cnt(node, 'drop-excess')
    yang.gdata.maybe_add(children, 'drop-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__drop_excess, child_drop_excess)
    child_hide_excess = yang.gdata.from_xml_opt_cnt(node, 'hide-excess')
    yang.gdata.maybe_add(children, 'hide-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit__hide_excess, child_hide_excess)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=n.get_opt_empty('forever'), timeout=n.get_opt_value('timeout'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()')
        leaves = []
        _forever = self.forever
        if _forever is not None:
            leaves.append('{self_name}.forever = {repr(_forever)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forever = yang.gdata.from_xml_opt_empty(node, 'forever')
    yang.gdata.maybe_add(children, 'forever', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever, child_forever)
    child_timeout = yang.gdata.from_xml_opt_value(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout, child_timeout)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=n.get_opt_value('limit-threshold'), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_cnt('idle-timeout')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout')
            res.append('idle_timeout = {self_name}.create_idle_timeout()')
            res.extend(_idle_timeout.prsrc('idle_timeout', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold, child_limit_threshold)
    child_idle_timeout = yang.gdata.from_xml_opt_cnt(node, 'idle-timeout')
    yang.gdata.maybe_add(children, 'idle-timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout, child_idle_timeout)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/drop-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/drop-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/hide-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/hide-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        _teardown = self.teardown
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(maximum=n.get_opt_value('maximum'), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown.from_gdata(n.get_opt_cnt('teardown')), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess.from_gdata(n.get_opt_cnt('drop-excess')), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess.from_gdata(n.get_opt_cnt('hide-excess')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()')
        leaves = []
        _maximum = self.maximum
        if _maximum is not None:
            leaves.append('{self_name}.maximum = {repr(_maximum)}')
        _teardown = self.teardown
        if _teardown is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/teardown')
            res.append('teardown = {self_name}.create_teardown()')
            res.extend(_teardown.prsrc('teardown', False).splitlines())
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/drop-excess')
            res.append('drop_excess = {self_name}.create_drop_excess()')
            res.extend(_drop_excess.prsrc('drop_excess', False).splitlines())
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit/hide-excess')
            res.append('hide_excess = {self_name}.create_hide_excess()')
            res.extend(_hide_excess.prsrc('hide_excess', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/accepted-prefix-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum = yang.gdata.from_xml_opt_value(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__maximum, child_maximum)
    child_teardown = yang.gdata.from_xml_opt_cnt(node, 'teardown')
    yang.gdata.maybe_add(children, 'teardown', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__teardown, child_teardown)
    child_drop_excess = yang.gdata.from_xml_opt_cnt(node, 'drop-excess')
    yang.gdata.maybe_add(children, 'drop-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__drop_excess, child_drop_excess)
    child_hide_excess = yang.gdata.from_xml_opt_cnt(node, 'hide-excess')
    yang.gdata.maybe_add(children, 'hide-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit__hide_excess, child_hide_excess)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group__ribgroup_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(yang.adata.MNode):
    ribgroup_name: ?str

    mut def __init__(self, ribgroup_name: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.ribgroup_name = ribgroup_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            children['ribgroup-name'] = yang.gdata.Leaf('string', _ribgroup_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(ribgroup_name=n.get_opt_str('ribgroup-name'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/rib-group')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()')
        leaves = []
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            leaves.append('{self_name}.ribgroup_name = {repr(_ribgroup_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/rib-group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ribgroup_name = yang.gdata.from_xml_opt_str(node, 'ribgroup-name')
    yang.gdata.maybe_add(children, 'ribgroup-name', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group__ribgroup_name, child_ribgroup_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__all_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(yang.adata.MNode):
    all_paths: ?bool
    equal_cost_paths: ?bool

    mut def __init__(self, all_paths: ?bool, equal_cost_paths: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.all_paths = all_paths
        self.equal_cost_paths = equal_cost_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_paths = self.all_paths
        if _all_paths is not None:
            children['all-paths'] = yang.gdata.Leaf('empty', _all_paths)
        _equal_cost_paths = self.equal_cost_paths
        if _equal_cost_paths is not None:
            children['equal-cost-paths'] = yang.gdata.Leaf('empty', _equal_cost_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(all_paths=n.get_opt_empty('all-paths'), equal_cost_paths=n.get_opt_empty('equal-cost-paths'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path/send/path-selection-mode')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()')
        leaves = []
        _all_paths = self.all_paths
        if _all_paths is not None:
            leaves.append('{self_name}.all_paths = {repr(_all_paths)}')
        _equal_cost_paths = self.equal_cost_paths
        if _equal_cost_paths is not None:
            leaves.append('{self_name}.equal_cost_paths = {repr(_equal_cost_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path/send/path-selection-mode'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_all_paths = yang.gdata.from_xml_opt_empty(node, 'all-paths')
    yang.gdata.maybe_add(children, 'all-paths', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__all_paths, child_all_paths)
    child_equal_cost_paths = yang.gdata.from_xml_opt_empty(node, 'equal-cost-paths')
    yang.gdata.maybe_add(children, 'equal-cost-paths', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths, child_equal_cost_paths)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__include_backup_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(yang.adata.MNode):
    path_selection_mode: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode
    prefix_policy: list[str]
    path_count: ?value
    include_backup_path: ?value
    multipath: ?bool

    mut def __init__(self, path_selection_mode: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode=None, prefix_policy: ?list[str]=None, path_count: ?value, include_backup_path: ?value, multipath: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.path_selection_mode = path_selection_mode if path_selection_mode is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode()
        self.prefix_policy = prefix_policy if prefix_policy is not None else []
        self.path_count = path_count
        self.include_backup_path = include_backup_path
        self.multipath = multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection_mode = self.path_selection_mode
        if _path_selection_mode is not None:
            children['path-selection-mode'] = _path_selection_mode.to_gdata()
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            children['prefix-policy'] = yang.gdata.LeafList('string', _prefix_policy, user_order=True)
        _path_count = self.path_count
        if _path_count is not None:
            children['path-count'] = yang.gdata.Leaf('union', _path_count)
        _include_backup_path = self.include_backup_path
        if _include_backup_path is not None:
            children['include-backup-path'] = yang.gdata.Leaf('union', _include_backup_path)
        _multipath = self.multipath
        if _multipath is not None:
            children['multipath'] = yang.gdata.Leaf('empty', _multipath)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode.from_gdata(n.get_opt_cnt('path-selection-mode')), prefix_policy=n.get_opt_strs('prefix-policy'), path_count=n.get_opt_value('path-count'), include_backup_path=n.get_opt_value('include-backup-path'), multipath=n.get_opt_empty('multipath'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path/send')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send()')
        leaves = []
        _path_selection_mode = self.path_selection_mode
        if _path_selection_mode is not None:
            res.extend(_path_selection_mode.prsrc('{self_name}.path_selection_mode', False).splitlines())
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            leaves.append('{self_name}.prefix_policy = {repr(_prefix_policy)}')
        _path_count = self.path_count
        if _path_count is not None:
            leaves.append('{self_name}.path_count = {repr(_path_count)}')
        _include_backup_path = self.include_backup_path
        if _include_backup_path is not None:
            leaves.append('{self_name}.include_backup_path = {repr(_include_backup_path)}')
        _multipath = self.multipath
        if _multipath is not None:
            leaves.append('{self_name}.multipath = {repr(_multipath)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path/send'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_path_selection_mode = yang.gdata.from_xml_opt_cnt(node, 'path-selection-mode')
    yang.gdata.maybe_add(children, 'path-selection-mode', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_selection_mode, child_path_selection_mode)
    child_prefix_policy = yang.gdata.from_xml_opt_strs(node, 'prefix-policy')
    yang.gdata.maybe_add(children, 'prefix-policy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__prefix_policy, child_prefix_policy)
    child_path_count = yang.gdata.from_xml_opt_value(node, 'path-count')
    yang.gdata.maybe_add(children, 'path-count', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__path_count, child_path_count)
    child_include_backup_path = yang.gdata.from_xml_opt_value(node, 'include-backup-path')
    yang.gdata.maybe_add(children, 'include-backup-path', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__include_backup_path, child_include_backup_path)
    child_multipath = yang.gdata.from_xml_opt_empty(node, 'multipath')
    yang.gdata.maybe_add(children, 'multipath', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send__multipath, child_multipath)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(yang.adata.MNode):
    receive: ?bool
    send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send

    mut def __init__(self, receive: ?bool, send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.receive = receive
        self.send = send

    mut def create_send(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send()
        self.send = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('empty', _receive)
        _send = self.send
        if _send is not None:
            children['send'] = _send.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(receive=n.get_opt_empty('receive'), send=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send.from_gdata(n.get_opt_cnt('send')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _send = self.send
        if _send is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path/send')
            res.append('send = {self_name}.create_send()')
            res.extend(_send.prsrc('send', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/add-path'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_empty(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__receive, child_receive)
    child_send = yang.gdata.from_xml_opt_cnt(node, 'send')
    yang.gdata.maybe_add(children, 'send', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path__send, child_send)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(yang.adata.MNode):
    disable: ?bool

    mut def __init__(self, disable: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(disable=n.get_opt_empty('disable'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aigp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aigp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp__disable, child_disable)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__local_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops__loops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(yang.adata.MNode):
    loops: ?value

    mut def __init__(self, loops: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.loops = loops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _loops = self.loops
        if _loops is not None:
            children['loops'] = yang.gdata.Leaf('union', _loops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(loops=n.get_opt_value('loops'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/loops')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()')
        leaves = []
        _loops = self.loops
        if _loops is not None:
            leaves.append('{self_name}.loops = {repr(_loops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/loops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_loops = yang.gdata.from_xml_opt_value(node, 'loops')
    yang.gdata.maybe_add(children, 'loops', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops__loops, child_loops)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(yang.adata.MNode):
    routing_uptime: ?value
    inbound_convergence: ?value

    mut def __init__(self, routing_uptime: ?value, inbound_convergence: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.routing_uptime = routing_uptime
        self.inbound_convergence = inbound_convergence

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        _inbound_convergence = self.inbound_convergence
        if _inbound_convergence is not None:
            children['inbound-convergence'] = yang.gdata.Leaf('union', _inbound_convergence)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=n.get_opt_value('routing-uptime'), inbound_convergence=n.get_opt_value('inbound-convergence'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements/minimum-delay')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()')
        leaves = []
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            leaves.append('{self_name}.routing_uptime = {repr(_routing_uptime)}')
        _inbound_convergence = self.inbound_convergence
        if _inbound_convergence is not None:
            leaves.append('{self_name}.inbound_convergence = {repr(_inbound_convergence)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements/minimum-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_routing_uptime = yang.gdata.from_xml_opt_value(node, 'routing-uptime')
    yang.gdata.maybe_add(children, 'routing-uptime', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime, child_routing_uptime)
    child_inbound_convergence = yang.gdata.from_xml_opt_value(node, 'inbound-convergence')
    yang.gdata.maybe_add(children, 'inbound-convergence', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence, child_inbound_convergence)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__route_age(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(yang.adata.MNode):
    route_age: ?value
    routing_uptime: ?value

    mut def __init__(self, route_age: ?value, routing_uptime: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.route_age = route_age
        self.routing_uptime = routing_uptime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_age = self.route_age
        if _route_age is not None:
            children['route-age'] = yang.gdata.Leaf('union', _route_age)
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=n.get_opt_value('route-age'), routing_uptime=n.get_opt_value('routing-uptime'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements/maximum-delay')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()')
        leaves = []
        _route_age = self.route_age
        if _route_age is not None:
            leaves.append('{self_name}.route_age = {repr(_route_age)}')
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            leaves.append('{self_name}.routing_uptime = {repr(_routing_uptime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements/maximum-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_age = yang.gdata.from_xml_opt_value(node, 'route-age')
    yang.gdata.maybe_add(children, 'route-age', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__route_age, child_route_age)
    child_routing_uptime = yang.gdata.from_xml_opt_value(node, 'routing-uptime')
    yang.gdata.maybe_add(children, 'routing-uptime', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime, child_routing_uptime)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(yang.adata.MNode):
    always_wait_for_krt_drain: ?bool
    minimum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay
    maximum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay

    mut def __init__(self, always_wait_for_krt_drain: ?bool, minimum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay=None, maximum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.always_wait_for_krt_drain = always_wait_for_krt_drain
        self.minimum_delay = minimum_delay if minimum_delay is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay()
        self.maximum_delay = maximum_delay if maximum_delay is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        if _always_wait_for_krt_drain is not None:
            children['always-wait-for-krt-drain'] = yang.gdata.Leaf('empty', _always_wait_for_krt_drain)
        _minimum_delay = self.minimum_delay
        if _minimum_delay is not None:
            children['minimum-delay'] = _minimum_delay.to_gdata()
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = _maximum_delay.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=n.get_opt_empty('always-wait-for-krt-drain'), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay.from_gdata(n.get_opt_cnt('minimum-delay')), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay.from_gdata(n.get_opt_cnt('maximum-delay')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements()')
        leaves = []
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        if _always_wait_for_krt_drain is not None:
            leaves.append('{self_name}.always_wait_for_krt_drain = {repr(_always_wait_for_krt_drain)}')
        _minimum_delay = self.minimum_delay
        if _minimum_delay is not None:
            res.extend(_minimum_delay.prsrc('{self_name}.minimum_delay', False).splitlines())
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            res.extend(_maximum_delay.prsrc('{self_name}.maximum_delay', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_always_wait_for_krt_drain = yang.gdata.from_xml_opt_empty(node, 'always-wait-for-krt-drain')
    yang.gdata.maybe_add(children, 'always-wait-for-krt-drain', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain, child_always_wait_for_krt_drain)
    child_minimum_delay = yang.gdata.from_xml_opt_cnt(node, 'minimum-delay')
    yang.gdata.maybe_add(children, 'minimum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__minimum_delay, child_minimum_delay)
    child_maximum_delay = yang.gdata.from_xml_opt_cnt(node, 'maximum-delay')
    yang.gdata.maybe_add(children, 'maximum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements__maximum_delay, child_maximum_delay)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__no_resolution(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(yang.adata.MNode):
    no_resolution: ?bool
    preserve_nexthop_hierarchy: ?bool

    mut def __init__(self, no_resolution: ?bool, preserve_nexthop_hierarchy: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.no_resolution = no_resolution
        self.preserve_nexthop_hierarchy = preserve_nexthop_hierarchy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_resolution = self.no_resolution
        if _no_resolution is not None:
            children['no-resolution'] = yang.gdata.Leaf('empty', _no_resolution)
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _preserve_nexthop_hierarchy is not None:
            children['preserve-nexthop-hierarchy'] = yang.gdata.Leaf('empty', _preserve_nexthop_hierarchy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(no_resolution=n.get_opt_empty('no-resolution'), preserve_nexthop_hierarchy=n.get_opt_empty('preserve-nexthop-hierarchy'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/nexthop-resolution')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()')
        leaves = []
        _no_resolution = self.no_resolution
        if _no_resolution is not None:
            leaves.append('{self_name}.no_resolution = {repr(_no_resolution)}')
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _preserve_nexthop_hierarchy is not None:
            leaves.append('{self_name}.preserve_nexthop_hierarchy = {repr(_preserve_nexthop_hierarchy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/nexthop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_no_resolution = yang.gdata.from_xml_opt_empty(node, 'no-resolution')
    yang.gdata.maybe_add(children, 'no-resolution', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__no_resolution, child_no_resolution)
    child_preserve_nexthop_hierarchy = yang.gdata.from_xml_opt_empty(node, 'preserve-nexthop-hierarchy')
    yang.gdata.maybe_add(children, 'preserve-nexthop-hierarchy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy, child_preserve_nexthop_hierarchy)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build__maximum_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(yang.adata.MNode):
    maximum_delay: ?value

    mut def __init__(self, maximum_delay: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum_delay = maximum_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = yang.gdata.Leaf('union', _maximum_delay)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(maximum_delay=n.get_opt_value('maximum-delay'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/defer-initial-multipath-build')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build()')
        leaves = []
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            leaves.append('{self_name}.maximum_delay = {repr(_maximum_delay)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/defer-initial-multipath-build'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_delay = yang.gdata.from_xml_opt_value(node, 'maximum-delay')
    yang.gdata.maybe_add(children, 'maximum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build__maximum_delay, child_maximum_delay)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__stale_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(yang.adata.MNode):
    disable: ?bool
    stale_time: ?str

    mut def __init__(self, disable: ?bool, stale_time: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.stale_time = stale_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _stale_time = self.stale_time
        if _stale_time is not None:
            children['stale-time'] = yang.gdata.Leaf('string', _stale_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(disable=n.get_opt_empty('disable'), stale_time=n.get_opt_str('stale-time'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/restarter')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _stale_time = self.stale_time
        if _stale_time is not None:
            leaves.append('{self_name}.stale_time = {repr(_stale_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/restarter'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__disable, child_disable)
    child_stale_time = yang.gdata.from_xml_opt_str(node, 'stale-time')
    yang.gdata.maybe_add(children, 'stale-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter__stale_time, child_stale_time)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(yang.adata.MNode):
    disable: ?bool
    retention_time: ?str
    retention_policy: list[str]

    mut def __init__(self, disable: ?bool, retention_time: ?str, retention_policy: ?list[str]=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.retention_time = retention_time
        self.retention_policy = retention_policy if retention_policy is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _retention_time = self.retention_time
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('string', _retention_time)
        _retention_policy = self.retention_policy
        if _retention_policy is not None:
            children['retention-policy'] = yang.gdata.LeafList('string', _retention_policy, user_order=True)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=n.get_opt_empty('disable'), retention_time=n.get_opt_str('retention-time'), retention_policy=n.get_opt_strs('retention-policy'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/extended-route-retention')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _retention_time = self.retention_time
        if _retention_time is not None:
            leaves.append('{self_name}.retention_time = {repr(_retention_time)}')
        _retention_policy = self.retention_policy
        if _retention_policy is not None:
            leaves.append('{self_name}.retention_policy = {repr(_retention_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/extended-route-retention'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable, child_disable)
    child_retention_time = yang.gdata.from_xml_opt_str(node, 'retention-time')
    yang.gdata.maybe_add(children, 'retention-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time, child_retention_time)
    child_retention_policy = yang.gdata.from_xml_opt_strs(node, 'retention-policy')
    yang.gdata.maybe_add(children, 'retention-policy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy, child_retention_policy)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(yang.adata.MNode):
    restarter: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter
    extended_route_retention: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention

    mut def __init__(self, restarter: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter=None, extended_route_retention: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.restarter = restarter if restarter is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter()
        self.extended_route_retention = extended_route_retention if extended_route_retention is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restarter = self.restarter
        if _restarter is not None:
            children['restarter'] = _restarter.to_gdata()
        _extended_route_retention = self.extended_route_retention
        if _extended_route_retention is not None:
            children['extended-route-retention'] = _extended_route_retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter.from_gdata(n.get_opt_cnt('restarter')), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_gdata(n.get_opt_cnt('extended-route-retention')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()')
        leaves = []
        _restarter = self.restarter
        if _restarter is not None:
            res.extend(_restarter.prsrc('{self_name}.restarter', False).splitlines())
        _extended_route_retention = self.extended_route_retention
        if _extended_route_retention is not None:
            res.extend(_extended_route_retention.prsrc('{self_name}.extended_route_retention', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_restarter = yang.gdata.from_xml_opt_cnt(node, 'restarter')
    yang.gdata.maybe_add(children, 'restarter', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__restarter, child_restarter)
    child_extended_route_retention = yang.gdata.from_xml_opt_cnt(node, 'extended-route-retention')
    yang.gdata.maybe_add(children, 'extended-route-retention', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived__extended_route_retention, child_extended_route_retention)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__forwarding_state_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(yang.adata.MNode):
    long_lived: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived
    forwarding_state_bit: ?str

    mut def __init__(self, long_lived: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived=None, forwarding_state_bit: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.long_lived = long_lived if long_lived is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived()
        self.forwarding_state_bit = forwarding_state_bit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _long_lived = self.long_lived
        if _long_lived is not None:
            children['long-lived'] = _long_lived.to_gdata()
        _forwarding_state_bit = self.forwarding_state_bit
        if _forwarding_state_bit is not None:
            children['forwarding-state-bit'] = yang.gdata.Leaf('enumeration', _forwarding_state_bit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived.from_gdata(n.get_opt_cnt('long-lived')), forwarding_state_bit=n.get_opt_str('forwarding-state-bit'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()')
        leaves = []
        _long_lived = self.long_lived
        if _long_lived is not None:
            res.extend(_long_lived.prsrc('{self_name}.long_lived', False).splitlines())
        _forwarding_state_bit = self.forwarding_state_bit
        if _forwarding_state_bit is not None:
            leaves.append('{self_name}.forwarding_state_bit = {repr(_forwarding_state_bit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_long_lived = yang.gdata.from_xml_opt_cnt(node, 'long-lived')
    yang.gdata.maybe_add(children, 'long-lived', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__long_lived, child_long_lived)
    child_forwarding_state_bit = yang.gdata.from_xml_opt_str(node, 'forwarding-state-bit')
    yang.gdata.maybe_add(children, 'forwarding-state-bit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart__forwarding_state_bit, child_forwarding_state_bit)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_color(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_tunnel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__no_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_age_bgp_view(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/output-queue-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/output-queue-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/route-refresh-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/route-refresh-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/withdraw-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/withdraw-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__advertise_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(yang.adata.MNode):
    community: ?str

    mut def __init__(self, community: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.community = community

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(community=n.get_opt_str('community'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aggregate-label')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label()')
        leaves = []
        _community = self.community
        if _community is not None:
            leaves.append('{self_name}.community = {repr(_community)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aggregate-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_community = yang.gdata.from_xml_opt_str(node, 'community')
    yang.gdata.maybe_add(children, 'community', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label__community, child_community)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier__context_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(yang.adata.MNode):
    context_id: ?str

    mut def __init__(self, context_id: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.context_id = context_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_id = self.context_id
        if _context_id is not None:
            children['context-id'] = yang.gdata.Leaf('string', _context_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(context_id=n.get_opt_str('context-id'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/egress-protection/context-identifier')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()')
        leaves = []
        _context_id = self.context_id
        if _context_id is not None:
            leaves.append('{self_name}.context_id = {repr(_context_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/egress-protection/context-identifier'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_context_id = yang.gdata.from_xml_opt_str(node, 'context-id')
    yang.gdata.maybe_add(children, 'context-id', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier__context_id, child_context_id)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__keep_import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(yang.adata.MNode):
    context_identifier: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier
    keep_import: list[str]

    mut def __init__(self, context_identifier: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier=None, keep_import: ?list[str]=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.context_identifier = context_identifier if context_identifier is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier()
        self.keep_import = keep_import if keep_import is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            children['context-identifier'] = _context_identifier.to_gdata()
        _keep_import = self.keep_import
        if _keep_import is not None:
            children['keep-import'] = yang.gdata.LeafList('string', _keep_import, user_order=True)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier.from_gdata(n.get_opt_cnt('context-identifier')), keep_import=n.get_opt_strs('keep-import'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast/egress-protection')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection()')
        leaves = []
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            res.extend(_context_identifier.prsrc('{self_name}.context_identifier', False).splitlines())
        _keep_import = self.keep_import
        if _keep_import is not None:
            leaves.append('{self_name}.keep_import = {repr(_keep_import)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/egress-protection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_context_identifier = yang.gdata.from_xml_opt_cnt(node, 'context-identifier')
    yang.gdata.maybe_add(children, 'context-identifier', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__context_identifier, child_context_identifier)
    child_keep_import = yang.gdata.from_xml_opt_strs(node, 'keep-import')
    yang.gdata.maybe_add(children, 'keep-import', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection__keep_import, child_keep_import)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_local_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_own(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(yang.adata.MNode):
    prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit
    accepted_prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit
    rib_group: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group
    add_path: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path
    aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp
    damping: ?bool
    local_ipv4_address: ?str
    loops: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops
    delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements
    nexthop_resolution: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution
    defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build
    graceful_restart: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart
    extended_nexthop: ?bool
    extended_nexthop_color: ?bool
    extended_nexthop_tunnel: ?bool
    no_install: ?bool
    route_age_bgp_view: ?bool
    output_queue_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority
    route_refresh_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority
    withdraw_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority
    advertise_srv6_service: ?bool
    accept_srv6_service: ?bool
    aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label
    egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection
    accept_local_nexthop: ?bool
    accept_own: ?bool

    mut def __init__(self, prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit=None, accepted_prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit=None, rib_group: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group=None, add_path: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path=None, aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp=None, damping: ?bool, local_ipv4_address: ?str, loops: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops=None, delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements=None, nexthop_resolution: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution=None, defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build=None, graceful_restart: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart=None, extended_nexthop: ?bool, extended_nexthop_color: ?bool, extended_nexthop_tunnel: ?bool, no_install: ?bool, route_age_bgp_view: ?bool, output_queue_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority=None, route_refresh_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority=None, withdraw_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority=None, advertise_srv6_service: ?bool, accept_srv6_service: ?bool, aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label=None, egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection=None, accept_local_nexthop: ?bool, accept_own: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.prefix_limit = prefix_limit if prefix_limit is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit()
        self.accepted_prefix_limit = accepted_prefix_limit if accepted_prefix_limit is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit()
        self.rib_group = rib_group if rib_group is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group()
        self.add_path = add_path if add_path is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path()
        self.aigp = aigp
        self.damping = damping
        self.local_ipv4_address = local_ipv4_address
        self.loops = loops if loops is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops()
        self.delay_route_advertisements = delay_route_advertisements
        self.nexthop_resolution = nexthop_resolution if nexthop_resolution is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution()
        self.defer_initial_multipath_build = defer_initial_multipath_build
        self.graceful_restart = graceful_restart if graceful_restart is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart()
        self.extended_nexthop = extended_nexthop
        self.extended_nexthop_color = extended_nexthop_color
        self.extended_nexthop_tunnel = extended_nexthop_tunnel
        self.no_install = no_install
        self.route_age_bgp_view = route_age_bgp_view
        self.output_queue_priority = output_queue_priority if output_queue_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority()
        self.route_refresh_priority = route_refresh_priority if route_refresh_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority()
        self.withdraw_priority = withdraw_priority if withdraw_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority()
        self.advertise_srv6_service = advertise_srv6_service
        self.accept_srv6_service = accept_srv6_service
        self.aggregate_label = aggregate_label
        self.egress_protection = egress_protection
        self.accept_local_nexthop = accept_local_nexthop
        self.accept_own = accept_own

    mut def create_aigp(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp()
        self.aigp = res
        return res

    mut def create_delay_route_advertisements(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements()
        self.delay_route_advertisements = res
        return res

    mut def create_defer_initial_multipath_build(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build()
        self.defer_initial_multipath_build = res
        return res

    mut def create_aggregate_label(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label()
        self.aggregate_label = res
        return res

    mut def create_egress_protection(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection()
        self.egress_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit = self.prefix_limit
        if _prefix_limit is not None:
            children['prefix-limit'] = _prefix_limit.to_gdata()
        _accepted_prefix_limit = self.accepted_prefix_limit
        if _accepted_prefix_limit is not None:
            children['accepted-prefix-limit'] = _accepted_prefix_limit.to_gdata()
        _rib_group = self.rib_group
        if _rib_group is not None:
            children['rib-group'] = _rib_group.to_gdata()
        _add_path = self.add_path
        if _add_path is not None:
            children['add-path'] = _add_path.to_gdata()
        _aigp = self.aigp
        if _aigp is not None:
            children['aigp'] = _aigp.to_gdata()
        _damping = self.damping
        if _damping is not None:
            children['damping'] = yang.gdata.Leaf('empty', _damping)
        _local_ipv4_address = self.local_ipv4_address
        if _local_ipv4_address is not None:
            children['local-ipv4-address'] = yang.gdata.Leaf('string', _local_ipv4_address)
        _loops = self.loops
        if _loops is not None:
            children['loops'] = _loops.to_gdata()
        _delay_route_advertisements = self.delay_route_advertisements
        if _delay_route_advertisements is not None:
            children['delay-route-advertisements'] = _delay_route_advertisements.to_gdata()
        _nexthop_resolution = self.nexthop_resolution
        if _nexthop_resolution is not None:
            children['nexthop-resolution'] = _nexthop_resolution.to_gdata()
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        if _defer_initial_multipath_build is not None:
            children['defer-initial-multipath-build'] = _defer_initial_multipath_build.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _extended_nexthop = self.extended_nexthop
        if _extended_nexthop is not None:
            children['extended-nexthop'] = yang.gdata.Leaf('empty', _extended_nexthop)
        _extended_nexthop_color = self.extended_nexthop_color
        if _extended_nexthop_color is not None:
            children['extended-nexthop-color'] = yang.gdata.Leaf('empty', _extended_nexthop_color)
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        if _extended_nexthop_tunnel is not None:
            children['extended-nexthop-tunnel'] = yang.gdata.Leaf('empty', _extended_nexthop_tunnel)
        _no_install = self.no_install
        if _no_install is not None:
            children['no-install'] = yang.gdata.Leaf('empty', _no_install)
        _route_age_bgp_view = self.route_age_bgp_view
        if _route_age_bgp_view is not None:
            children['route-age-bgp-view'] = yang.gdata.Leaf('empty', _route_age_bgp_view)
        _output_queue_priority = self.output_queue_priority
        if _output_queue_priority is not None:
            children['output-queue-priority'] = _output_queue_priority.to_gdata()
        _route_refresh_priority = self.route_refresh_priority
        if _route_refresh_priority is not None:
            children['route-refresh-priority'] = _route_refresh_priority.to_gdata()
        _withdraw_priority = self.withdraw_priority
        if _withdraw_priority is not None:
            children['withdraw-priority'] = _withdraw_priority.to_gdata()
        _advertise_srv6_service = self.advertise_srv6_service
        if _advertise_srv6_service is not None:
            children['advertise-srv6-service'] = yang.gdata.Leaf('empty', _advertise_srv6_service)
        _accept_srv6_service = self.accept_srv6_service
        if _accept_srv6_service is not None:
            children['accept-srv6-service'] = yang.gdata.Leaf('empty', _accept_srv6_service)
        _aggregate_label = self.aggregate_label
        if _aggregate_label is not None:
            children['aggregate-label'] = _aggregate_label.to_gdata()
        _egress_protection = self.egress_protection
        if _egress_protection is not None:
            children['egress-protection'] = _egress_protection.to_gdata()
        _accept_local_nexthop = self.accept_local_nexthop
        if _accept_local_nexthop is not None:
            children['accept-local-nexthop'] = yang.gdata.Leaf('empty', _accept_local_nexthop)
        _accept_own = self.accept_own
        if _accept_own is not None:
            children['accept-own'] = yang.gdata.Leaf('empty', _accept_own)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit.from_gdata(n.get_opt_cnt('prefix-limit')), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit.from_gdata(n.get_opt_cnt('accepted-prefix-limit')), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group.from_gdata(n.get_opt_cnt('rib-group')), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path.from_gdata(n.get_opt_cnt('add-path')), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp.from_gdata(n.get_opt_cnt('aigp')), damping=n.get_opt_empty('damping'), local_ipv4_address=n.get_opt_str('local-ipv4-address'), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops.from_gdata(n.get_opt_cnt('loops')), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements.from_gdata(n.get_opt_cnt('delay-route-advertisements')), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution.from_gdata(n.get_opt_cnt('nexthop-resolution')), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build.from_gdata(n.get_opt_cnt('defer-initial-multipath-build')), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), extended_nexthop=n.get_opt_empty('extended-nexthop'), extended_nexthop_color=n.get_opt_empty('extended-nexthop-color'), extended_nexthop_tunnel=n.get_opt_empty('extended-nexthop-tunnel'), no_install=n.get_opt_empty('no-install'), route_age_bgp_view=n.get_opt_empty('route-age-bgp-view'), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority.from_gdata(n.get_opt_cnt('output-queue-priority')), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority.from_gdata(n.get_opt_cnt('route-refresh-priority')), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority.from_gdata(n.get_opt_cnt('withdraw-priority')), advertise_srv6_service=n.get_opt_empty('advertise-srv6-service'), accept_srv6_service=n.get_opt_empty('accept-srv6-service'), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label.from_gdata(n.get_opt_cnt('aggregate-label')), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection.from_gdata(n.get_opt_cnt('egress-protection')), accept_local_nexthop=n.get_opt_empty('accept-local-nexthop'), accept_own=n.get_opt_empty('accept-own'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()')
        leaves = []
        _prefix_limit = self.prefix_limit
        if _prefix_limit is not None:
            res.extend(_prefix_limit.prsrc('{self_name}.prefix_limit', False).splitlines())
        _accepted_prefix_limit = self.accepted_prefix_limit
        if _accepted_prefix_limit is not None:
            res.extend(_accepted_prefix_limit.prsrc('{self_name}.accepted_prefix_limit', False).splitlines())
        _rib_group = self.rib_group
        if _rib_group is not None:
            res.extend(_rib_group.prsrc('{self_name}.rib_group', False).splitlines())
        _add_path = self.add_path
        if _add_path is not None:
            res.extend(_add_path.prsrc('{self_name}.add_path', False).splitlines())
        _aigp = self.aigp
        if _aigp is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aigp')
            res.append('aigp = {self_name}.create_aigp()')
            res.extend(_aigp.prsrc('aigp', False).splitlines())
        _damping = self.damping
        if _damping is not None:
            leaves.append('{self_name}.damping = {repr(_damping)}')
        _local_ipv4_address = self.local_ipv4_address
        if _local_ipv4_address is not None:
            leaves.append('{self_name}.local_ipv4_address = {repr(_local_ipv4_address)}')
        _loops = self.loops
        if _loops is not None:
            res.extend(_loops.prsrc('{self_name}.loops', False).splitlines())
        _delay_route_advertisements = self.delay_route_advertisements
        if _delay_route_advertisements is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/delay-route-advertisements')
            res.append('delay_route_advertisements = {self_name}.create_delay_route_advertisements()')
            res.extend(_delay_route_advertisements.prsrc('delay_route_advertisements', False).splitlines())
        _nexthop_resolution = self.nexthop_resolution
        if _nexthop_resolution is not None:
            res.extend(_nexthop_resolution.prsrc('{self_name}.nexthop_resolution', False).splitlines())
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        if _defer_initial_multipath_build is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/defer-initial-multipath-build')
            res.append('defer_initial_multipath_build = {self_name}.create_defer_initial_multipath_build()')
            res.extend(_defer_initial_multipath_build.prsrc('defer_initial_multipath_build', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _extended_nexthop = self.extended_nexthop
        if _extended_nexthop is not None:
            leaves.append('{self_name}.extended_nexthop = {repr(_extended_nexthop)}')
        _extended_nexthop_color = self.extended_nexthop_color
        if _extended_nexthop_color is not None:
            leaves.append('{self_name}.extended_nexthop_color = {repr(_extended_nexthop_color)}')
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        if _extended_nexthop_tunnel is not None:
            leaves.append('{self_name}.extended_nexthop_tunnel = {repr(_extended_nexthop_tunnel)}')
        _no_install = self.no_install
        if _no_install is not None:
            leaves.append('{self_name}.no_install = {repr(_no_install)}')
        _route_age_bgp_view = self.route_age_bgp_view
        if _route_age_bgp_view is not None:
            leaves.append('{self_name}.route_age_bgp_view = {repr(_route_age_bgp_view)}')
        _output_queue_priority = self.output_queue_priority
        if _output_queue_priority is not None:
            res.extend(_output_queue_priority.prsrc('{self_name}.output_queue_priority', False).splitlines())
        _route_refresh_priority = self.route_refresh_priority
        if _route_refresh_priority is not None:
            res.extend(_route_refresh_priority.prsrc('{self_name}.route_refresh_priority', False).splitlines())
        _withdraw_priority = self.withdraw_priority
        if _withdraw_priority is not None:
            res.extend(_withdraw_priority.prsrc('{self_name}.withdraw_priority', False).splitlines())
        _advertise_srv6_service = self.advertise_srv6_service
        if _advertise_srv6_service is not None:
            leaves.append('{self_name}.advertise_srv6_service = {repr(_advertise_srv6_service)}')
        _accept_srv6_service = self.accept_srv6_service
        if _accept_srv6_service is not None:
            leaves.append('{self_name}.accept_srv6_service = {repr(_accept_srv6_service)}')
        _aggregate_label = self.aggregate_label
        if _aggregate_label is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/aggregate-label')
            res.append('aggregate_label = {self_name}.create_aggregate_label()')
            res.extend(_aggregate_label.prsrc('aggregate_label', False).splitlines())
        _egress_protection = self.egress_protection
        if _egress_protection is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/egress-protection')
            res.append('egress_protection = {self_name}.create_egress_protection()')
            res.extend(_egress_protection.prsrc('egress_protection', False).splitlines())
        _accept_local_nexthop = self.accept_local_nexthop
        if _accept_local_nexthop is not None:
            leaves.append('{self_name}.accept_local_nexthop = {repr(_accept_local_nexthop)}')
        _accept_own = self.accept_own
        if _accept_own is not None:
            leaves.append('{self_name}.accept_own = {repr(_accept_own)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit')
    yang.gdata.maybe_add(children, 'prefix-limit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__prefix_limit, child_prefix_limit)
    child_accepted_prefix_limit = yang.gdata.from_xml_opt_cnt(node, 'accepted-prefix-limit')
    yang.gdata.maybe_add(children, 'accepted-prefix-limit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accepted_prefix_limit, child_accepted_prefix_limit)
    child_rib_group = yang.gdata.from_xml_opt_cnt(node, 'rib-group')
    yang.gdata.maybe_add(children, 'rib-group', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__rib_group, child_rib_group)
    child_add_path = yang.gdata.from_xml_opt_cnt(node, 'add-path')
    yang.gdata.maybe_add(children, 'add-path', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__add_path, child_add_path)
    child_aigp = yang.gdata.from_xml_opt_cnt(node, 'aigp')
    yang.gdata.maybe_add(children, 'aigp', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aigp, child_aigp)
    child_damping = yang.gdata.from_xml_opt_empty(node, 'damping')
    yang.gdata.maybe_add(children, 'damping', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__damping, child_damping)
    child_local_ipv4_address = yang.gdata.from_xml_opt_str(node, 'local-ipv4-address')
    yang.gdata.maybe_add(children, 'local-ipv4-address', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__local_ipv4_address, child_local_ipv4_address)
    child_loops = yang.gdata.from_xml_opt_cnt(node, 'loops')
    yang.gdata.maybe_add(children, 'loops', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__loops, child_loops)
    child_delay_route_advertisements = yang.gdata.from_xml_opt_cnt(node, 'delay-route-advertisements')
    yang.gdata.maybe_add(children, 'delay-route-advertisements', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__delay_route_advertisements, child_delay_route_advertisements)
    child_nexthop_resolution = yang.gdata.from_xml_opt_cnt(node, 'nexthop-resolution')
    yang.gdata.maybe_add(children, 'nexthop-resolution', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__nexthop_resolution, child_nexthop_resolution)
    child_defer_initial_multipath_build = yang.gdata.from_xml_opt_cnt(node, 'defer-initial-multipath-build')
    yang.gdata.maybe_add(children, 'defer-initial-multipath-build', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__defer_initial_multipath_build, child_defer_initial_multipath_build)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__graceful_restart, child_graceful_restart)
    child_extended_nexthop = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop')
    yang.gdata.maybe_add(children, 'extended-nexthop', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop, child_extended_nexthop)
    child_extended_nexthop_color = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop-color')
    yang.gdata.maybe_add(children, 'extended-nexthop-color', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_color, child_extended_nexthop_color)
    child_extended_nexthop_tunnel = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop-tunnel')
    yang.gdata.maybe_add(children, 'extended-nexthop-tunnel', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__extended_nexthop_tunnel, child_extended_nexthop_tunnel)
    child_no_install = yang.gdata.from_xml_opt_empty(node, 'no-install')
    yang.gdata.maybe_add(children, 'no-install', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__no_install, child_no_install)
    child_route_age_bgp_view = yang.gdata.from_xml_opt_empty(node, 'route-age-bgp-view')
    yang.gdata.maybe_add(children, 'route-age-bgp-view', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_age_bgp_view, child_route_age_bgp_view)
    child_output_queue_priority = yang.gdata.from_xml_opt_cnt(node, 'output-queue-priority')
    yang.gdata.maybe_add(children, 'output-queue-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__output_queue_priority, child_output_queue_priority)
    child_route_refresh_priority = yang.gdata.from_xml_opt_cnt(node, 'route-refresh-priority')
    yang.gdata.maybe_add(children, 'route-refresh-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__route_refresh_priority, child_route_refresh_priority)
    child_withdraw_priority = yang.gdata.from_xml_opt_cnt(node, 'withdraw-priority')
    yang.gdata.maybe_add(children, 'withdraw-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__withdraw_priority, child_withdraw_priority)
    child_advertise_srv6_service = yang.gdata.from_xml_opt_empty(node, 'advertise-srv6-service')
    yang.gdata.maybe_add(children, 'advertise-srv6-service', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__advertise_srv6_service, child_advertise_srv6_service)
    child_accept_srv6_service = yang.gdata.from_xml_opt_empty(node, 'accept-srv6-service')
    yang.gdata.maybe_add(children, 'accept-srv6-service', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_srv6_service, child_accept_srv6_service)
    child_aggregate_label = yang.gdata.from_xml_opt_cnt(node, 'aggregate-label')
    yang.gdata.maybe_add(children, 'aggregate-label', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__aggregate_label, child_aggregate_label)
    child_egress_protection = yang.gdata.from_xml_opt_cnt(node, 'egress-protection')
    yang.gdata.maybe_add(children, 'egress-protection', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__egress_protection, child_egress_protection)
    child_accept_local_nexthop = yang.gdata.from_xml_opt_empty(node, 'accept-local-nexthop')
    yang.gdata.maybe_add(children, 'accept-local-nexthop', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_local_nexthop, child_accept_local_nexthop)
    child_accept_own = yang.gdata.from_xml_opt_empty(node, 'accept-own')
    yang.gdata.maybe_add(children, 'accept-own', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast__accept_own, child_accept_own)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast.from_gdata(n.get_opt_cnt('unicast')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()')
        leaves = []
        _unicast = self.unicast
        if _unicast is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast')
            res.append('unicast = {self_name}.create_unicast()')
            res.extend(_unicast.prsrc('unicast', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast, child_unicast)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(forever=n.get_opt_empty('forever'), timeout=n.get_opt_value('timeout'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown/idle-timeout')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout()')
        leaves = []
        _forever = self.forever
        if _forever is not None:
            leaves.append('{self_name}.forever = {repr(_forever)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown/idle-timeout'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forever = yang.gdata.from_xml_opt_empty(node, 'forever')
    yang.gdata.maybe_add(children, 'forever', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__forever, child_forever)
    child_timeout = yang.gdata.from_xml_opt_value(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout__timeout, child_timeout)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(limit_threshold=n.get_opt_value('limit-threshold'), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_cnt('idle-timeout')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown/idle-timeout')
            res.append('idle_timeout = {self_name}.create_idle_timeout()')
            res.extend(_idle_timeout.prsrc('idle_timeout', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__limit_threshold, child_limit_threshold)
    child_idle_timeout = yang.gdata.from_xml_opt_cnt(node, 'idle-timeout')
    yang.gdata.maybe_add(children, 'idle-timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown__idle_timeout, child_idle_timeout)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/drop-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/drop-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/hide-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/hide-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        _teardown = self.teardown
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(maximum=n.get_opt_value('maximum'), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown.from_gdata(n.get_opt_cnt('teardown')), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess.from_gdata(n.get_opt_cnt('drop-excess')), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess.from_gdata(n.get_opt_cnt('hide-excess')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()')
        leaves = []
        _maximum = self.maximum
        if _maximum is not None:
            leaves.append('{self_name}.maximum = {repr(_maximum)}')
        _teardown = self.teardown
        if _teardown is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/teardown')
            res.append('teardown = {self_name}.create_teardown()')
            res.extend(_teardown.prsrc('teardown', False).splitlines())
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/drop-excess')
            res.append('drop_excess = {self_name}.create_drop_excess()')
            res.extend(_drop_excess.prsrc('drop_excess', False).splitlines())
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit/hide-excess')
            res.append('hide_excess = {self_name}.create_hide_excess()')
            res.extend(_hide_excess.prsrc('hide_excess', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/prefix-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum = yang.gdata.from_xml_opt_value(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__maximum, child_maximum)
    child_teardown = yang.gdata.from_xml_opt_cnt(node, 'teardown')
    yang.gdata.maybe_add(children, 'teardown', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__teardown, child_teardown)
    child_drop_excess = yang.gdata.from_xml_opt_cnt(node, 'drop-excess')
    yang.gdata.maybe_add(children, 'drop-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__drop_excess, child_drop_excess)
    child_hide_excess = yang.gdata.from_xml_opt_cnt(node, 'hide-excess')
    yang.gdata.maybe_add(children, 'hide-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit__hide_excess, child_hide_excess)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__maximum(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(yang.adata.MNode):
    forever: ?bool
    timeout: ?value

    mut def __init__(self, forever: ?bool, timeout: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.forever = forever
        self.timeout = timeout

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _forever = self.forever
        if _forever is not None:
            children['forever'] = yang.gdata.Leaf('empty', _forever)
        _timeout = self.timeout
        if _timeout is not None:
            children['timeout'] = yang.gdata.Leaf('union', _timeout)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(forever=n.get_opt_empty('forever'), timeout=n.get_opt_value('timeout'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()')
        leaves = []
        _forever = self.forever
        if _forever is not None:
            leaves.append('{self_name}.forever = {repr(_forever)}')
        _timeout = self.timeout
        if _timeout is not None:
            leaves.append('{self_name}.timeout = {repr(_timeout)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_forever = yang.gdata.from_xml_opt_empty(node, 'forever')
    yang.gdata.maybe_add(children, 'forever', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__forever, child_forever)
    child_timeout = yang.gdata.from_xml_opt_value(node, 'timeout')
    yang.gdata.maybe_add(children, 'timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout__timeout, child_timeout)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(yang.adata.MNode):
    limit_threshold: ?value
    idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout

    mut def __init__(self, limit_threshold: ?value, idle_timeout: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold
        self.idle_timeout = idle_timeout

    mut def create_idle_timeout(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout()
        self.idle_timeout = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            children['idle-timeout'] = _idle_timeout.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(limit_threshold=n.get_opt_value('limit-threshold'), idle_timeout=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout.from_gdata(n.get_opt_cnt('idle-timeout')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        _idle_timeout = self.idle_timeout
        if _idle_timeout is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown/idle-timeout')
            res.append('idle_timeout = {self_name}.create_idle_timeout()')
            res.extend(_idle_timeout.prsrc('idle_timeout', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__limit_threshold, child_limit_threshold)
    child_idle_timeout = yang.gdata.from_xml_opt_cnt(node, 'idle-timeout')
    yang.gdata.maybe_add(children, 'idle-timeout', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown__idle_timeout, child_idle_timeout)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/drop-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/drop-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(yang.adata.MNode):
    limit_threshold: ?value

    mut def __init__(self, limit_threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.limit_threshold = limit_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            children['limit-threshold'] = yang.gdata.Leaf('union', _limit_threshold)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(limit_threshold=n.get_opt_value('limit-threshold'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/hide-excess')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess()')
        leaves = []
        _limit_threshold = self.limit_threshold
        if _limit_threshold is not None:
            leaves.append('{self_name}.limit_threshold = {repr(_limit_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/hide-excess'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_limit_threshold = yang.gdata.from_xml_opt_value(node, 'limit-threshold')
    yang.gdata.maybe_add(children, 'limit-threshold', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess__limit_threshold, child_limit_threshold)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(yang.adata.MNode):
    maximum: ?value
    teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown
    drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess
    hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess

    mut def __init__(self, maximum: ?value, teardown: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown=None, drop_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess=None, hide_excess: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum = maximum
        self.teardown = teardown
        self.drop_excess = drop_excess
        self.hide_excess = hide_excess

    mut def create_teardown(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown()
        self.teardown = res
        return res

    mut def create_drop_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess()
        self.drop_excess = res
        return res

    mut def create_hide_excess(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess()
        self.hide_excess = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum = self.maximum
        if _maximum is not None:
            children['maximum'] = yang.gdata.Leaf('union', _maximum)
        _teardown = self.teardown
        if _teardown is not None:
            children['teardown'] = _teardown.to_gdata()
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            children['drop-excess'] = _drop_excess.to_gdata()
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            children['hide-excess'] = _hide_excess.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(maximum=n.get_opt_value('maximum'), teardown=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown.from_gdata(n.get_opt_cnt('teardown')), drop_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess.from_gdata(n.get_opt_cnt('drop-excess')), hide_excess=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess.from_gdata(n.get_opt_cnt('hide-excess')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()')
        leaves = []
        _maximum = self.maximum
        if _maximum is not None:
            leaves.append('{self_name}.maximum = {repr(_maximum)}')
        _teardown = self.teardown
        if _teardown is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/teardown')
            res.append('teardown = {self_name}.create_teardown()')
            res.extend(_teardown.prsrc('teardown', False).splitlines())
        _drop_excess = self.drop_excess
        if _drop_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/drop-excess')
            res.append('drop_excess = {self_name}.create_drop_excess()')
            res.extend(_drop_excess.prsrc('drop_excess', False).splitlines())
        _hide_excess = self.hide_excess
        if _hide_excess is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit/hide-excess')
            res.append('hide_excess = {self_name}.create_hide_excess()')
            res.extend(_hide_excess.prsrc('hide_excess', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/accepted-prefix-limit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum = yang.gdata.from_xml_opt_value(node, 'maximum')
    yang.gdata.maybe_add(children, 'maximum', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__maximum, child_maximum)
    child_teardown = yang.gdata.from_xml_opt_cnt(node, 'teardown')
    yang.gdata.maybe_add(children, 'teardown', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__teardown, child_teardown)
    child_drop_excess = yang.gdata.from_xml_opt_cnt(node, 'drop-excess')
    yang.gdata.maybe_add(children, 'drop-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__drop_excess, child_drop_excess)
    child_hide_excess = yang.gdata.from_xml_opt_cnt(node, 'hide-excess')
    yang.gdata.maybe_add(children, 'hide-excess', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit__hide_excess, child_hide_excess)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group__ribgroup_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(yang.adata.MNode):
    ribgroup_name: ?str

    mut def __init__(self, ribgroup_name: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.ribgroup_name = ribgroup_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            children['ribgroup-name'] = yang.gdata.Leaf('string', _ribgroup_name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(ribgroup_name=n.get_opt_str('ribgroup-name'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/rib-group')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()')
        leaves = []
        _ribgroup_name = self.ribgroup_name
        if _ribgroup_name is not None:
            leaves.append('{self_name}.ribgroup_name = {repr(_ribgroup_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/rib-group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ribgroup_name = yang.gdata.from_xml_opt_str(node, 'ribgroup-name')
    yang.gdata.maybe_add(children, 'ribgroup-name', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group__ribgroup_name, child_ribgroup_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__receive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__all_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(yang.adata.MNode):
    all_paths: ?bool
    equal_cost_paths: ?bool

    mut def __init__(self, all_paths: ?bool, equal_cost_paths: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.all_paths = all_paths
        self.equal_cost_paths = equal_cost_paths

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _all_paths = self.all_paths
        if _all_paths is not None:
            children['all-paths'] = yang.gdata.Leaf('empty', _all_paths)
        _equal_cost_paths = self.equal_cost_paths
        if _equal_cost_paths is not None:
            children['equal-cost-paths'] = yang.gdata.Leaf('empty', _equal_cost_paths)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(all_paths=n.get_opt_empty('all-paths'), equal_cost_paths=n.get_opt_empty('equal-cost-paths'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path/send/path-selection-mode')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()')
        leaves = []
        _all_paths = self.all_paths
        if _all_paths is not None:
            leaves.append('{self_name}.all_paths = {repr(_all_paths)}')
        _equal_cost_paths = self.equal_cost_paths
        if _equal_cost_paths is not None:
            leaves.append('{self_name}.equal_cost_paths = {repr(_equal_cost_paths)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path/send/path-selection-mode'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_all_paths = yang.gdata.from_xml_opt_empty(node, 'all-paths')
    yang.gdata.maybe_add(children, 'all-paths', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__all_paths, child_all_paths)
    child_equal_cost_paths = yang.gdata.from_xml_opt_empty(node, 'equal-cost-paths')
    yang.gdata.maybe_add(children, 'equal-cost-paths', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode__equal_cost_paths, child_equal_cost_paths)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__prefix_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_count(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__include_backup_path(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__multipath(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(yang.adata.MNode):
    path_selection_mode: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode
    prefix_policy: list[str]
    path_count: ?value
    include_backup_path: ?value
    multipath: ?bool

    mut def __init__(self, path_selection_mode: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode=None, prefix_policy: ?list[str]=None, path_count: ?value, include_backup_path: ?value, multipath: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.path_selection_mode = path_selection_mode if path_selection_mode is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode()
        self.prefix_policy = prefix_policy if prefix_policy is not None else []
        self.path_count = path_count
        self.include_backup_path = include_backup_path
        self.multipath = multipath

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection_mode = self.path_selection_mode
        if _path_selection_mode is not None:
            children['path-selection-mode'] = _path_selection_mode.to_gdata()
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            children['prefix-policy'] = yang.gdata.LeafList('string', _prefix_policy, user_order=True)
        _path_count = self.path_count
        if _path_count is not None:
            children['path-count'] = yang.gdata.Leaf('union', _path_count)
        _include_backup_path = self.include_backup_path
        if _include_backup_path is not None:
            children['include-backup-path'] = yang.gdata.Leaf('union', _include_backup_path)
        _multipath = self.multipath
        if _multipath is not None:
            children['multipath'] = yang.gdata.Leaf('empty', _multipath)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(path_selection_mode=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode.from_gdata(n.get_opt_cnt('path-selection-mode')), prefix_policy=n.get_opt_strs('prefix-policy'), path_count=n.get_opt_value('path-count'), include_backup_path=n.get_opt_value('include-backup-path'), multipath=n.get_opt_empty('multipath'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path/send')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send()')
        leaves = []
        _path_selection_mode = self.path_selection_mode
        if _path_selection_mode is not None:
            res.extend(_path_selection_mode.prsrc('{self_name}.path_selection_mode', False).splitlines())
        _prefix_policy = self.prefix_policy
        if _prefix_policy is not None:
            leaves.append('{self_name}.prefix_policy = {repr(_prefix_policy)}')
        _path_count = self.path_count
        if _path_count is not None:
            leaves.append('{self_name}.path_count = {repr(_path_count)}')
        _include_backup_path = self.include_backup_path
        if _include_backup_path is not None:
            leaves.append('{self_name}.include_backup_path = {repr(_include_backup_path)}')
        _multipath = self.multipath
        if _multipath is not None:
            leaves.append('{self_name}.multipath = {repr(_multipath)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path/send'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_path_selection_mode = yang.gdata.from_xml_opt_cnt(node, 'path-selection-mode')
    yang.gdata.maybe_add(children, 'path-selection-mode', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_selection_mode, child_path_selection_mode)
    child_prefix_policy = yang.gdata.from_xml_opt_strs(node, 'prefix-policy')
    yang.gdata.maybe_add(children, 'prefix-policy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__prefix_policy, child_prefix_policy)
    child_path_count = yang.gdata.from_xml_opt_value(node, 'path-count')
    yang.gdata.maybe_add(children, 'path-count', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__path_count, child_path_count)
    child_include_backup_path = yang.gdata.from_xml_opt_value(node, 'include-backup-path')
    yang.gdata.maybe_add(children, 'include-backup-path', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__include_backup_path, child_include_backup_path)
    child_multipath = yang.gdata.from_xml_opt_empty(node, 'multipath')
    yang.gdata.maybe_add(children, 'multipath', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send__multipath, child_multipath)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(yang.adata.MNode):
    receive: ?bool
    send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send

    mut def __init__(self, receive: ?bool, send: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.receive = receive
        self.send = send

    mut def create_send(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send()
        self.send = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _receive = self.receive
        if _receive is not None:
            children['receive'] = yang.gdata.Leaf('empty', _receive)
        _send = self.send
        if _send is not None:
            children['send'] = _send.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(receive=n.get_opt_empty('receive'), send=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send.from_gdata(n.get_opt_cnt('send')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()')
        leaves = []
        _receive = self.receive
        if _receive is not None:
            leaves.append('{self_name}.receive = {repr(_receive)}')
        _send = self.send
        if _send is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path/send')
            res.append('send = {self_name}.create_send()')
            res.extend(_send.prsrc('send', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/add-path'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_receive = yang.gdata.from_xml_opt_empty(node, 'receive')
    yang.gdata.maybe_add(children, 'receive', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__receive, child_receive)
    child_send = yang.gdata.from_xml_opt_cnt(node, 'send')
    yang.gdata.maybe_add(children, 'send', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path__send, child_send)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(yang.adata.MNode):
    disable: ?bool

    mut def __init__(self, disable: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(disable=n.get_opt_empty('disable'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aigp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aigp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp__disable, child_disable)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__local_ipv4_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops__loops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(yang.adata.MNode):
    loops: ?value

    mut def __init__(self, loops: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.loops = loops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _loops = self.loops
        if _loops is not None:
            children['loops'] = yang.gdata.Leaf('union', _loops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(loops=n.get_opt_value('loops'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/loops')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()')
        leaves = []
        _loops = self.loops
        if _loops is not None:
            leaves.append('{self_name}.loops = {repr(_loops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/loops'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_loops = yang.gdata.from_xml_opt_value(node, 'loops')
    yang.gdata.maybe_add(children, 'loops', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops__loops, child_loops)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(yang.adata.MNode):
    routing_uptime: ?value
    inbound_convergence: ?value

    mut def __init__(self, routing_uptime: ?value, inbound_convergence: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.routing_uptime = routing_uptime
        self.inbound_convergence = inbound_convergence

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        _inbound_convergence = self.inbound_convergence
        if _inbound_convergence is not None:
            children['inbound-convergence'] = yang.gdata.Leaf('union', _inbound_convergence)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(routing_uptime=n.get_opt_value('routing-uptime'), inbound_convergence=n.get_opt_value('inbound-convergence'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements/minimum-delay')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()')
        leaves = []
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            leaves.append('{self_name}.routing_uptime = {repr(_routing_uptime)}')
        _inbound_convergence = self.inbound_convergence
        if _inbound_convergence is not None:
            leaves.append('{self_name}.inbound_convergence = {repr(_inbound_convergence)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements/minimum-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_routing_uptime = yang.gdata.from_xml_opt_value(node, 'routing-uptime')
    yang.gdata.maybe_add(children, 'routing-uptime', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__routing_uptime, child_routing_uptime)
    child_inbound_convergence = yang.gdata.from_xml_opt_value(node, 'inbound-convergence')
    yang.gdata.maybe_add(children, 'inbound-convergence', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay__inbound_convergence, child_inbound_convergence)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__route_age(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(yang.adata.MNode):
    route_age: ?value
    routing_uptime: ?value

    mut def __init__(self, route_age: ?value, routing_uptime: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.route_age = route_age
        self.routing_uptime = routing_uptime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _route_age = self.route_age
        if _route_age is not None:
            children['route-age'] = yang.gdata.Leaf('union', _route_age)
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            children['routing-uptime'] = yang.gdata.Leaf('union', _routing_uptime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(route_age=n.get_opt_value('route-age'), routing_uptime=n.get_opt_value('routing-uptime'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements/maximum-delay')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()')
        leaves = []
        _route_age = self.route_age
        if _route_age is not None:
            leaves.append('{self_name}.route_age = {repr(_route_age)}')
        _routing_uptime = self.routing_uptime
        if _routing_uptime is not None:
            leaves.append('{self_name}.routing_uptime = {repr(_routing_uptime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements/maximum-delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_route_age = yang.gdata.from_xml_opt_value(node, 'route-age')
    yang.gdata.maybe_add(children, 'route-age', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__route_age, child_route_age)
    child_routing_uptime = yang.gdata.from_xml_opt_value(node, 'routing-uptime')
    yang.gdata.maybe_add(children, 'routing-uptime', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay__routing_uptime, child_routing_uptime)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(yang.adata.MNode):
    always_wait_for_krt_drain: ?bool
    minimum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay
    maximum_delay: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay

    mut def __init__(self, always_wait_for_krt_drain: ?bool, minimum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay=None, maximum_delay: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.always_wait_for_krt_drain = always_wait_for_krt_drain
        self.minimum_delay = minimum_delay if minimum_delay is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay()
        self.maximum_delay = maximum_delay if maximum_delay is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        if _always_wait_for_krt_drain is not None:
            children['always-wait-for-krt-drain'] = yang.gdata.Leaf('empty', _always_wait_for_krt_drain)
        _minimum_delay = self.minimum_delay
        if _minimum_delay is not None:
            children['minimum-delay'] = _minimum_delay.to_gdata()
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = _maximum_delay.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(always_wait_for_krt_drain=n.get_opt_empty('always-wait-for-krt-drain'), minimum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay.from_gdata(n.get_opt_cnt('minimum-delay')), maximum_delay=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay.from_gdata(n.get_opt_cnt('maximum-delay')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements()')
        leaves = []
        _always_wait_for_krt_drain = self.always_wait_for_krt_drain
        if _always_wait_for_krt_drain is not None:
            leaves.append('{self_name}.always_wait_for_krt_drain = {repr(_always_wait_for_krt_drain)}')
        _minimum_delay = self.minimum_delay
        if _minimum_delay is not None:
            res.extend(_minimum_delay.prsrc('{self_name}.minimum_delay', False).splitlines())
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            res.extend(_maximum_delay.prsrc('{self_name}.maximum_delay', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_always_wait_for_krt_drain = yang.gdata.from_xml_opt_empty(node, 'always-wait-for-krt-drain')
    yang.gdata.maybe_add(children, 'always-wait-for-krt-drain', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__always_wait_for_krt_drain, child_always_wait_for_krt_drain)
    child_minimum_delay = yang.gdata.from_xml_opt_cnt(node, 'minimum-delay')
    yang.gdata.maybe_add(children, 'minimum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__minimum_delay, child_minimum_delay)
    child_maximum_delay = yang.gdata.from_xml_opt_cnt(node, 'maximum-delay')
    yang.gdata.maybe_add(children, 'maximum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements__maximum_delay, child_maximum_delay)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__no_resolution(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(yang.adata.MNode):
    no_resolution: ?bool
    preserve_nexthop_hierarchy: ?bool

    mut def __init__(self, no_resolution: ?bool, preserve_nexthop_hierarchy: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.no_resolution = no_resolution
        self.preserve_nexthop_hierarchy = preserve_nexthop_hierarchy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_resolution = self.no_resolution
        if _no_resolution is not None:
            children['no-resolution'] = yang.gdata.Leaf('empty', _no_resolution)
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _preserve_nexthop_hierarchy is not None:
            children['preserve-nexthop-hierarchy'] = yang.gdata.Leaf('empty', _preserve_nexthop_hierarchy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(no_resolution=n.get_opt_empty('no-resolution'), preserve_nexthop_hierarchy=n.get_opt_empty('preserve-nexthop-hierarchy'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/nexthop-resolution')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()')
        leaves = []
        _no_resolution = self.no_resolution
        if _no_resolution is not None:
            leaves.append('{self_name}.no_resolution = {repr(_no_resolution)}')
        _preserve_nexthop_hierarchy = self.preserve_nexthop_hierarchy
        if _preserve_nexthop_hierarchy is not None:
            leaves.append('{self_name}.preserve_nexthop_hierarchy = {repr(_preserve_nexthop_hierarchy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/nexthop-resolution'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_no_resolution = yang.gdata.from_xml_opt_empty(node, 'no-resolution')
    yang.gdata.maybe_add(children, 'no-resolution', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__no_resolution, child_no_resolution)
    child_preserve_nexthop_hierarchy = yang.gdata.from_xml_opt_empty(node, 'preserve-nexthop-hierarchy')
    yang.gdata.maybe_add(children, 'preserve-nexthop-hierarchy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution__preserve_nexthop_hierarchy, child_preserve_nexthop_hierarchy)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build__maximum_delay(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(yang.adata.MNode):
    maximum_delay: ?value

    mut def __init__(self, maximum_delay: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.maximum_delay = maximum_delay

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            children['maximum-delay'] = yang.gdata.Leaf('union', _maximum_delay)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(maximum_delay=n.get_opt_value('maximum-delay'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/defer-initial-multipath-build')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build()')
        leaves = []
        _maximum_delay = self.maximum_delay
        if _maximum_delay is not None:
            leaves.append('{self_name}.maximum_delay = {repr(_maximum_delay)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/defer-initial-multipath-build'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_maximum_delay = yang.gdata.from_xml_opt_value(node, 'maximum-delay')
    yang.gdata.maybe_add(children, 'maximum-delay', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build__maximum_delay, child_maximum_delay)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__stale_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(yang.adata.MNode):
    disable: ?bool
    stale_time: ?str

    mut def __init__(self, disable: ?bool, stale_time: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.stale_time = stale_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _stale_time = self.stale_time
        if _stale_time is not None:
            children['stale-time'] = yang.gdata.Leaf('string', _stale_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(disable=n.get_opt_empty('disable'), stale_time=n.get_opt_str('stale-time'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/restarter')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _stale_time = self.stale_time
        if _stale_time is not None:
            leaves.append('{self_name}.stale_time = {repr(_stale_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/restarter'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__disable, child_disable)
    child_stale_time = yang.gdata.from_xml_opt_str(node, 'stale-time')
    yang.gdata.maybe_add(children, 'stale-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter__stale_time, child_stale_time)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(yang.adata.MNode):
    disable: ?bool
    retention_time: ?str
    retention_policy: list[str]

    mut def __init__(self, disable: ?bool, retention_time: ?str, retention_policy: ?list[str]=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.retention_time = retention_time
        self.retention_policy = retention_policy if retention_policy is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _retention_time = self.retention_time
        if _retention_time is not None:
            children['retention-time'] = yang.gdata.Leaf('string', _retention_time)
        _retention_policy = self.retention_policy
        if _retention_policy is not None:
            children['retention-policy'] = yang.gdata.LeafList('string', _retention_policy, user_order=True)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(disable=n.get_opt_empty('disable'), retention_time=n.get_opt_str('retention-time'), retention_policy=n.get_opt_strs('retention-policy'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/extended-route-retention')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _retention_time = self.retention_time
        if _retention_time is not None:
            leaves.append('{self_name}.retention_time = {repr(_retention_time)}')
        _retention_policy = self.retention_policy
        if _retention_policy is not None:
            leaves.append('{self_name}.retention_policy = {repr(_retention_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/extended-route-retention'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__disable, child_disable)
    child_retention_time = yang.gdata.from_xml_opt_str(node, 'retention-time')
    yang.gdata.maybe_add(children, 'retention-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_time, child_retention_time)
    child_retention_policy = yang.gdata.from_xml_opt_strs(node, 'retention-policy')
    yang.gdata.maybe_add(children, 'retention-policy', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention__retention_policy, child_retention_policy)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(yang.adata.MNode):
    restarter: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter
    extended_route_retention: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention

    mut def __init__(self, restarter: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter=None, extended_route_retention: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.restarter = restarter if restarter is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter()
        self.extended_route_retention = extended_route_retention if extended_route_retention is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restarter = self.restarter
        if _restarter is not None:
            children['restarter'] = _restarter.to_gdata()
        _extended_route_retention = self.extended_route_retention
        if _extended_route_retention is not None:
            children['extended-route-retention'] = _extended_route_retention.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(restarter=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter.from_gdata(n.get_opt_cnt('restarter')), extended_route_retention=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention.from_gdata(n.get_opt_cnt('extended-route-retention')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()')
        leaves = []
        _restarter = self.restarter
        if _restarter is not None:
            res.extend(_restarter.prsrc('{self_name}.restarter', False).splitlines())
        _extended_route_retention = self.extended_route_retention
        if _extended_route_retention is not None:
            res.extend(_extended_route_retention.prsrc('{self_name}.extended_route_retention', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_restarter = yang.gdata.from_xml_opt_cnt(node, 'restarter')
    yang.gdata.maybe_add(children, 'restarter', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__restarter, child_restarter)
    child_extended_route_retention = yang.gdata.from_xml_opt_cnt(node, 'extended-route-retention')
    yang.gdata.maybe_add(children, 'extended-route-retention', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived__extended_route_retention, child_extended_route_retention)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__forwarding_state_bit(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(yang.adata.MNode):
    long_lived: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived
    forwarding_state_bit: ?str

    mut def __init__(self, long_lived: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived=None, forwarding_state_bit: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.long_lived = long_lived if long_lived is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived()
        self.forwarding_state_bit = forwarding_state_bit

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _long_lived = self.long_lived
        if _long_lived is not None:
            children['long-lived'] = _long_lived.to_gdata()
        _forwarding_state_bit = self.forwarding_state_bit
        if _forwarding_state_bit is not None:
            children['forwarding-state-bit'] = yang.gdata.Leaf('enumeration', _forwarding_state_bit)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(long_lived=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived.from_gdata(n.get_opt_cnt('long-lived')), forwarding_state_bit=n.get_opt_str('forwarding-state-bit'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()')
        leaves = []
        _long_lived = self.long_lived
        if _long_lived is not None:
            res.extend(_long_lived.prsrc('{self_name}.long_lived', False).splitlines())
        _forwarding_state_bit = self.forwarding_state_bit
        if _forwarding_state_bit is not None:
            leaves.append('{self_name}.forwarding_state_bit = {repr(_forwarding_state_bit)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_long_lived = yang.gdata.from_xml_opt_cnt(node, 'long-lived')
    yang.gdata.maybe_add(children, 'long-lived', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__long_lived, child_long_lived)
    child_forwarding_state_bit = yang.gdata.from_xml_opt_str(node, 'forwarding-state-bit')
    yang.gdata.maybe_add(children, 'forwarding-state-bit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart__forwarding_state_bit, child_forwarding_state_bit)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_color(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_tunnel(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__no_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_age_bgp_view(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/output-queue-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/output-queue-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/route-refresh-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/route-refresh-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__expedited(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(yang.adata.MNode):
    priority: ?value
    expedited: ?bool

    mut def __init__(self, priority: ?value, expedited: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.priority = priority
        self.expedited = expedited

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('union', _priority)
        _expedited = self.expedited
        if _expedited is not None:
            children['expedited'] = yang.gdata.Leaf('empty', _expedited)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(priority=n.get_opt_value('priority'), expedited=n.get_opt_empty('expedited'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/withdraw-priority')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()')
        leaves = []
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _expedited = self.expedited
        if _expedited is not None:
            leaves.append('{self_name}.expedited = {repr(_expedited)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/withdraw-priority'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_priority = yang.gdata.from_xml_opt_value(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__priority, child_priority)
    child_expedited = yang.gdata.from_xml_opt_empty(node, 'expedited')
    yang.gdata.maybe_add(children, 'expedited', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority__expedited, child_expedited)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__advertise_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_srv6_service(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(yang.adata.MNode):
    community: ?str

    mut def __init__(self, community: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.community = community

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(community=n.get_opt_str('community'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aggregate-label')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label()')
        leaves = []
        _community = self.community
        if _community is not None:
            leaves.append('{self_name}.community = {repr(_community)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aggregate-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_community = yang.gdata.from_xml_opt_str(node, 'community')
    yang.gdata.maybe_add(children, 'community', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label__community, child_community)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier__context_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(yang.adata.MNode):
    context_id: ?str

    mut def __init__(self, context_id: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.context_id = context_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_id = self.context_id
        if _context_id is not None:
            children['context-id'] = yang.gdata.Leaf('string', _context_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(context_id=n.get_opt_str('context-id'))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/egress-protection/context-identifier')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()')
        leaves = []
        _context_id = self.context_id
        if _context_id is not None:
            leaves.append('{self_name}.context_id = {repr(_context_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/egress-protection/context-identifier'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_context_id = yang.gdata.from_xml_opt_str(node, 'context-id')
    yang.gdata.maybe_add(children, 'context-id', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier__context_id, child_context_id)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__keep_import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(yang.adata.MNode):
    context_identifier: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier
    keep_import: list[str]

    mut def __init__(self, context_identifier: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier=None, keep_import: ?list[str]=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.context_identifier = context_identifier if context_identifier is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier()
        self.keep_import = keep_import if keep_import is not None else []

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            children['context-identifier'] = _context_identifier.to_gdata()
        _keep_import = self.keep_import
        if _keep_import is not None:
            children['keep-import'] = yang.gdata.LeafList('string', _keep_import, user_order=True)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(context_identifier=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier.from_gdata(n.get_opt_cnt('context-identifier')), keep_import=n.get_opt_strs('keep-import'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/egress-protection')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection()')
        leaves = []
        _context_identifier = self.context_identifier
        if _context_identifier is not None:
            res.extend(_context_identifier.prsrc('{self_name}.context_identifier', False).splitlines())
        _keep_import = self.keep_import
        if _keep_import is not None:
            leaves.append('{self_name}.keep_import = {repr(_keep_import)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/egress-protection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_context_identifier = yang.gdata.from_xml_opt_cnt(node, 'context-identifier')
    yang.gdata.maybe_add(children, 'context-identifier', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__context_identifier, child_context_identifier)
    child_keep_import = yang.gdata.from_xml_opt_strs(node, 'keep-import')
    yang.gdata.maybe_add(children, 'keep-import', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection__keep_import, child_keep_import)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_local_nexthop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_own(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(yang.adata.MNode):
    prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit
    accepted_prefix_limit: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit
    rib_group: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group
    add_path: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path
    aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp
    damping: ?bool
    local_ipv4_address: ?str
    loops: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops
    delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements
    nexthop_resolution: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution
    defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build
    graceful_restart: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart
    extended_nexthop: ?bool
    extended_nexthop_color: ?bool
    extended_nexthop_tunnel: ?bool
    no_install: ?bool
    route_age_bgp_view: ?bool
    output_queue_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority
    route_refresh_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority
    withdraw_priority: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority
    advertise_srv6_service: ?bool
    accept_srv6_service: ?bool
    aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label
    egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection
    accept_local_nexthop: ?bool
    accept_own: ?bool

    mut def __init__(self, prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit=None, accepted_prefix_limit: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit=None, rib_group: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group=None, add_path: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path=None, aigp: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp=None, damping: ?bool, local_ipv4_address: ?str, loops: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops=None, delay_route_advertisements: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements=None, nexthop_resolution: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution=None, defer_initial_multipath_build: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build=None, graceful_restart: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart=None, extended_nexthop: ?bool, extended_nexthop_color: ?bool, extended_nexthop_tunnel: ?bool, no_install: ?bool, route_age_bgp_view: ?bool, output_queue_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority=None, route_refresh_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority=None, withdraw_priority: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority=None, advertise_srv6_service: ?bool, accept_srv6_service: ?bool, aggregate_label: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label=None, egress_protection: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection=None, accept_local_nexthop: ?bool, accept_own: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.prefix_limit = prefix_limit if prefix_limit is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit()
        self.accepted_prefix_limit = accepted_prefix_limit if accepted_prefix_limit is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit()
        self.rib_group = rib_group if rib_group is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group()
        self.add_path = add_path if add_path is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path()
        self.aigp = aigp
        self.damping = damping
        self.local_ipv4_address = local_ipv4_address
        self.loops = loops if loops is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops()
        self.delay_route_advertisements = delay_route_advertisements
        self.nexthop_resolution = nexthop_resolution if nexthop_resolution is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution()
        self.defer_initial_multipath_build = defer_initial_multipath_build
        self.graceful_restart = graceful_restart if graceful_restart is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart()
        self.extended_nexthop = extended_nexthop
        self.extended_nexthop_color = extended_nexthop_color
        self.extended_nexthop_tunnel = extended_nexthop_tunnel
        self.no_install = no_install
        self.route_age_bgp_view = route_age_bgp_view
        self.output_queue_priority = output_queue_priority if output_queue_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority()
        self.route_refresh_priority = route_refresh_priority if route_refresh_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority()
        self.withdraw_priority = withdraw_priority if withdraw_priority is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority()
        self.advertise_srv6_service = advertise_srv6_service
        self.accept_srv6_service = accept_srv6_service
        self.aggregate_label = aggregate_label
        self.egress_protection = egress_protection
        self.accept_local_nexthop = accept_local_nexthop
        self.accept_own = accept_own

    mut def create_aigp(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp()
        self.aigp = res
        return res

    mut def create_delay_route_advertisements(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements()
        self.delay_route_advertisements = res
        return res

    mut def create_defer_initial_multipath_build(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build()
        self.defer_initial_multipath_build = res
        return res

    mut def create_aggregate_label(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label()
        self.aggregate_label = res
        return res

    mut def create_egress_protection(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection()
        self.egress_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _prefix_limit = self.prefix_limit
        if _prefix_limit is not None:
            children['prefix-limit'] = _prefix_limit.to_gdata()
        _accepted_prefix_limit = self.accepted_prefix_limit
        if _accepted_prefix_limit is not None:
            children['accepted-prefix-limit'] = _accepted_prefix_limit.to_gdata()
        _rib_group = self.rib_group
        if _rib_group is not None:
            children['rib-group'] = _rib_group.to_gdata()
        _add_path = self.add_path
        if _add_path is not None:
            children['add-path'] = _add_path.to_gdata()
        _aigp = self.aigp
        if _aigp is not None:
            children['aigp'] = _aigp.to_gdata()
        _damping = self.damping
        if _damping is not None:
            children['damping'] = yang.gdata.Leaf('empty', _damping)
        _local_ipv4_address = self.local_ipv4_address
        if _local_ipv4_address is not None:
            children['local-ipv4-address'] = yang.gdata.Leaf('string', _local_ipv4_address)
        _loops = self.loops
        if _loops is not None:
            children['loops'] = _loops.to_gdata()
        _delay_route_advertisements = self.delay_route_advertisements
        if _delay_route_advertisements is not None:
            children['delay-route-advertisements'] = _delay_route_advertisements.to_gdata()
        _nexthop_resolution = self.nexthop_resolution
        if _nexthop_resolution is not None:
            children['nexthop-resolution'] = _nexthop_resolution.to_gdata()
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        if _defer_initial_multipath_build is not None:
            children['defer-initial-multipath-build'] = _defer_initial_multipath_build.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _extended_nexthop = self.extended_nexthop
        if _extended_nexthop is not None:
            children['extended-nexthop'] = yang.gdata.Leaf('empty', _extended_nexthop)
        _extended_nexthop_color = self.extended_nexthop_color
        if _extended_nexthop_color is not None:
            children['extended-nexthop-color'] = yang.gdata.Leaf('empty', _extended_nexthop_color)
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        if _extended_nexthop_tunnel is not None:
            children['extended-nexthop-tunnel'] = yang.gdata.Leaf('empty', _extended_nexthop_tunnel)
        _no_install = self.no_install
        if _no_install is not None:
            children['no-install'] = yang.gdata.Leaf('empty', _no_install)
        _route_age_bgp_view = self.route_age_bgp_view
        if _route_age_bgp_view is not None:
            children['route-age-bgp-view'] = yang.gdata.Leaf('empty', _route_age_bgp_view)
        _output_queue_priority = self.output_queue_priority
        if _output_queue_priority is not None:
            children['output-queue-priority'] = _output_queue_priority.to_gdata()
        _route_refresh_priority = self.route_refresh_priority
        if _route_refresh_priority is not None:
            children['route-refresh-priority'] = _route_refresh_priority.to_gdata()
        _withdraw_priority = self.withdraw_priority
        if _withdraw_priority is not None:
            children['withdraw-priority'] = _withdraw_priority.to_gdata()
        _advertise_srv6_service = self.advertise_srv6_service
        if _advertise_srv6_service is not None:
            children['advertise-srv6-service'] = yang.gdata.Leaf('empty', _advertise_srv6_service)
        _accept_srv6_service = self.accept_srv6_service
        if _accept_srv6_service is not None:
            children['accept-srv6-service'] = yang.gdata.Leaf('empty', _accept_srv6_service)
        _aggregate_label = self.aggregate_label
        if _aggregate_label is not None:
            children['aggregate-label'] = _aggregate_label.to_gdata()
        _egress_protection = self.egress_protection
        if _egress_protection is not None:
            children['egress-protection'] = _egress_protection.to_gdata()
        _accept_local_nexthop = self.accept_local_nexthop
        if _accept_local_nexthop is not None:
            children['accept-local-nexthop'] = yang.gdata.Leaf('empty', _accept_local_nexthop)
        _accept_own = self.accept_own
        if _accept_own is not None:
            children['accept-own'] = yang.gdata.Leaf('empty', _accept_own)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit.from_gdata(n.get_opt_cnt('prefix-limit')), accepted_prefix_limit=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit.from_gdata(n.get_opt_cnt('accepted-prefix-limit')), rib_group=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group.from_gdata(n.get_opt_cnt('rib-group')), add_path=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path.from_gdata(n.get_opt_cnt('add-path')), aigp=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp.from_gdata(n.get_opt_cnt('aigp')), damping=n.get_opt_empty('damping'), local_ipv4_address=n.get_opt_str('local-ipv4-address'), loops=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops.from_gdata(n.get_opt_cnt('loops')), delay_route_advertisements=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements.from_gdata(n.get_opt_cnt('delay-route-advertisements')), nexthop_resolution=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution.from_gdata(n.get_opt_cnt('nexthop-resolution')), defer_initial_multipath_build=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build.from_gdata(n.get_opt_cnt('defer-initial-multipath-build')), graceful_restart=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), extended_nexthop=n.get_opt_empty('extended-nexthop'), extended_nexthop_color=n.get_opt_empty('extended-nexthop-color'), extended_nexthop_tunnel=n.get_opt_empty('extended-nexthop-tunnel'), no_install=n.get_opt_empty('no-install'), route_age_bgp_view=n.get_opt_empty('route-age-bgp-view'), output_queue_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority.from_gdata(n.get_opt_cnt('output-queue-priority')), route_refresh_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority.from_gdata(n.get_opt_cnt('route-refresh-priority')), withdraw_priority=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority.from_gdata(n.get_opt_cnt('withdraw-priority')), advertise_srv6_service=n.get_opt_empty('advertise-srv6-service'), accept_srv6_service=n.get_opt_empty('accept-srv6-service'), aggregate_label=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label.from_gdata(n.get_opt_cnt('aggregate-label')), egress_protection=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection.from_gdata(n.get_opt_cnt('egress-protection')), accept_local_nexthop=n.get_opt_empty('accept-local-nexthop'), accept_own=n.get_opt_empty('accept-own'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()')
        leaves = []
        _prefix_limit = self.prefix_limit
        if _prefix_limit is not None:
            res.extend(_prefix_limit.prsrc('{self_name}.prefix_limit', False).splitlines())
        _accepted_prefix_limit = self.accepted_prefix_limit
        if _accepted_prefix_limit is not None:
            res.extend(_accepted_prefix_limit.prsrc('{self_name}.accepted_prefix_limit', False).splitlines())
        _rib_group = self.rib_group
        if _rib_group is not None:
            res.extend(_rib_group.prsrc('{self_name}.rib_group', False).splitlines())
        _add_path = self.add_path
        if _add_path is not None:
            res.extend(_add_path.prsrc('{self_name}.add_path', False).splitlines())
        _aigp = self.aigp
        if _aigp is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aigp')
            res.append('aigp = {self_name}.create_aigp()')
            res.extend(_aigp.prsrc('aigp', False).splitlines())
        _damping = self.damping
        if _damping is not None:
            leaves.append('{self_name}.damping = {repr(_damping)}')
        _local_ipv4_address = self.local_ipv4_address
        if _local_ipv4_address is not None:
            leaves.append('{self_name}.local_ipv4_address = {repr(_local_ipv4_address)}')
        _loops = self.loops
        if _loops is not None:
            res.extend(_loops.prsrc('{self_name}.loops', False).splitlines())
        _delay_route_advertisements = self.delay_route_advertisements
        if _delay_route_advertisements is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/delay-route-advertisements')
            res.append('delay_route_advertisements = {self_name}.create_delay_route_advertisements()')
            res.extend(_delay_route_advertisements.prsrc('delay_route_advertisements', False).splitlines())
        _nexthop_resolution = self.nexthop_resolution
        if _nexthop_resolution is not None:
            res.extend(_nexthop_resolution.prsrc('{self_name}.nexthop_resolution', False).splitlines())
        _defer_initial_multipath_build = self.defer_initial_multipath_build
        if _defer_initial_multipath_build is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/defer-initial-multipath-build')
            res.append('defer_initial_multipath_build = {self_name}.create_defer_initial_multipath_build()')
            res.extend(_defer_initial_multipath_build.prsrc('defer_initial_multipath_build', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _extended_nexthop = self.extended_nexthop
        if _extended_nexthop is not None:
            leaves.append('{self_name}.extended_nexthop = {repr(_extended_nexthop)}')
        _extended_nexthop_color = self.extended_nexthop_color
        if _extended_nexthop_color is not None:
            leaves.append('{self_name}.extended_nexthop_color = {repr(_extended_nexthop_color)}')
        _extended_nexthop_tunnel = self.extended_nexthop_tunnel
        if _extended_nexthop_tunnel is not None:
            leaves.append('{self_name}.extended_nexthop_tunnel = {repr(_extended_nexthop_tunnel)}')
        _no_install = self.no_install
        if _no_install is not None:
            leaves.append('{self_name}.no_install = {repr(_no_install)}')
        _route_age_bgp_view = self.route_age_bgp_view
        if _route_age_bgp_view is not None:
            leaves.append('{self_name}.route_age_bgp_view = {repr(_route_age_bgp_view)}')
        _output_queue_priority = self.output_queue_priority
        if _output_queue_priority is not None:
            res.extend(_output_queue_priority.prsrc('{self_name}.output_queue_priority', False).splitlines())
        _route_refresh_priority = self.route_refresh_priority
        if _route_refresh_priority is not None:
            res.extend(_route_refresh_priority.prsrc('{self_name}.route_refresh_priority', False).splitlines())
        _withdraw_priority = self.withdraw_priority
        if _withdraw_priority is not None:
            res.extend(_withdraw_priority.prsrc('{self_name}.withdraw_priority', False).splitlines())
        _advertise_srv6_service = self.advertise_srv6_service
        if _advertise_srv6_service is not None:
            leaves.append('{self_name}.advertise_srv6_service = {repr(_advertise_srv6_service)}')
        _accept_srv6_service = self.accept_srv6_service
        if _accept_srv6_service is not None:
            leaves.append('{self_name}.accept_srv6_service = {repr(_accept_srv6_service)}')
        _aggregate_label = self.aggregate_label
        if _aggregate_label is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/aggregate-label')
            res.append('aggregate_label = {self_name}.create_aggregate_label()')
            res.extend(_aggregate_label.prsrc('aggregate_label', False).splitlines())
        _egress_protection = self.egress_protection
        if _egress_protection is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/egress-protection')
            res.append('egress_protection = {self_name}.create_egress_protection()')
            res.extend(_egress_protection.prsrc('egress_protection', False).splitlines())
        _accept_local_nexthop = self.accept_local_nexthop
        if _accept_local_nexthop is not None:
            leaves.append('{self_name}.accept_local_nexthop = {repr(_accept_local_nexthop)}')
        _accept_own = self.accept_own
        if _accept_own is not None:
            leaves.append('{self_name}.accept_own = {repr(_accept_own)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_prefix_limit = yang.gdata.from_xml_opt_cnt(node, 'prefix-limit')
    yang.gdata.maybe_add(children, 'prefix-limit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__prefix_limit, child_prefix_limit)
    child_accepted_prefix_limit = yang.gdata.from_xml_opt_cnt(node, 'accepted-prefix-limit')
    yang.gdata.maybe_add(children, 'accepted-prefix-limit', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accepted_prefix_limit, child_accepted_prefix_limit)
    child_rib_group = yang.gdata.from_xml_opt_cnt(node, 'rib-group')
    yang.gdata.maybe_add(children, 'rib-group', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__rib_group, child_rib_group)
    child_add_path = yang.gdata.from_xml_opt_cnt(node, 'add-path')
    yang.gdata.maybe_add(children, 'add-path', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__add_path, child_add_path)
    child_aigp = yang.gdata.from_xml_opt_cnt(node, 'aigp')
    yang.gdata.maybe_add(children, 'aigp', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aigp, child_aigp)
    child_damping = yang.gdata.from_xml_opt_empty(node, 'damping')
    yang.gdata.maybe_add(children, 'damping', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__damping, child_damping)
    child_local_ipv4_address = yang.gdata.from_xml_opt_str(node, 'local-ipv4-address')
    yang.gdata.maybe_add(children, 'local-ipv4-address', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__local_ipv4_address, child_local_ipv4_address)
    child_loops = yang.gdata.from_xml_opt_cnt(node, 'loops')
    yang.gdata.maybe_add(children, 'loops', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__loops, child_loops)
    child_delay_route_advertisements = yang.gdata.from_xml_opt_cnt(node, 'delay-route-advertisements')
    yang.gdata.maybe_add(children, 'delay-route-advertisements', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__delay_route_advertisements, child_delay_route_advertisements)
    child_nexthop_resolution = yang.gdata.from_xml_opt_cnt(node, 'nexthop-resolution')
    yang.gdata.maybe_add(children, 'nexthop-resolution', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__nexthop_resolution, child_nexthop_resolution)
    child_defer_initial_multipath_build = yang.gdata.from_xml_opt_cnt(node, 'defer-initial-multipath-build')
    yang.gdata.maybe_add(children, 'defer-initial-multipath-build', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__defer_initial_multipath_build, child_defer_initial_multipath_build)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__graceful_restart, child_graceful_restart)
    child_extended_nexthop = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop')
    yang.gdata.maybe_add(children, 'extended-nexthop', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop, child_extended_nexthop)
    child_extended_nexthop_color = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop-color')
    yang.gdata.maybe_add(children, 'extended-nexthop-color', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_color, child_extended_nexthop_color)
    child_extended_nexthop_tunnel = yang.gdata.from_xml_opt_empty(node, 'extended-nexthop-tunnel')
    yang.gdata.maybe_add(children, 'extended-nexthop-tunnel', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__extended_nexthop_tunnel, child_extended_nexthop_tunnel)
    child_no_install = yang.gdata.from_xml_opt_empty(node, 'no-install')
    yang.gdata.maybe_add(children, 'no-install', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__no_install, child_no_install)
    child_route_age_bgp_view = yang.gdata.from_xml_opt_empty(node, 'route-age-bgp-view')
    yang.gdata.maybe_add(children, 'route-age-bgp-view', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_age_bgp_view, child_route_age_bgp_view)
    child_output_queue_priority = yang.gdata.from_xml_opt_cnt(node, 'output-queue-priority')
    yang.gdata.maybe_add(children, 'output-queue-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__output_queue_priority, child_output_queue_priority)
    child_route_refresh_priority = yang.gdata.from_xml_opt_cnt(node, 'route-refresh-priority')
    yang.gdata.maybe_add(children, 'route-refresh-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__route_refresh_priority, child_route_refresh_priority)
    child_withdraw_priority = yang.gdata.from_xml_opt_cnt(node, 'withdraw-priority')
    yang.gdata.maybe_add(children, 'withdraw-priority', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__withdraw_priority, child_withdraw_priority)
    child_advertise_srv6_service = yang.gdata.from_xml_opt_empty(node, 'advertise-srv6-service')
    yang.gdata.maybe_add(children, 'advertise-srv6-service', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__advertise_srv6_service, child_advertise_srv6_service)
    child_accept_srv6_service = yang.gdata.from_xml_opt_empty(node, 'accept-srv6-service')
    yang.gdata.maybe_add(children, 'accept-srv6-service', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_srv6_service, child_accept_srv6_service)
    child_aggregate_label = yang.gdata.from_xml_opt_cnt(node, 'aggregate-label')
    yang.gdata.maybe_add(children, 'aggregate-label', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__aggregate_label, child_aggregate_label)
    child_egress_protection = yang.gdata.from_xml_opt_cnt(node, 'egress-protection')
    yang.gdata.maybe_add(children, 'egress-protection', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__egress_protection, child_egress_protection)
    child_accept_local_nexthop = yang.gdata.from_xml_opt_empty(node, 'accept-local-nexthop')
    yang.gdata.maybe_add(children, 'accept-local-nexthop', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_local_nexthop, child_accept_local_nexthop)
    child_accept_own = yang.gdata.from_xml_opt_empty(node, 'accept-own')
    yang.gdata.maybe_add(children, 'accept-own', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast__accept_own, child_accept_own)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast.from_gdata(n.get_opt_cnt('unicast')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()')
        leaves = []
        _unicast = self.unicast
        if _unicast is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast')
            res.append('unicast = {self_name}.create_unicast()')
            res.extend(_unicast.prsrc('unicast', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast, child_unicast)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/evpn/signaling')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/evpn/signaling'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__evpn(yang.adata.MNode):
    signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling

    mut def __init__(self, signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.signaling = signaling

    mut def create_signaling(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        self.signaling = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _signaling = self.signaling
        if _signaling is not None:
            children['signaling'] = _signaling.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__evpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn(signaling=junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling.from_gdata(n.get_opt_cnt('signaling')))
        return junos_conf_root__configuration__protocols__bgp__group__family__evpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/evpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__evpn()')
        leaves = []
        _signaling = self.signaling
        if _signaling is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/evpn/signaling')
            res.append('signaling = {self_name}.create_signaling()')
            res.extend(_signaling.prsrc('signaling', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_signaling = yang.gdata.from_xml_opt_cnt(node, 'signaling')
    yang.gdata.maybe_add(children, 'signaling', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling, child_signaling)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__route_target(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__route_target:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/route-target')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__route_target()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family(yang.adata.MNode):
    inet_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn
    inet6_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn
    evpn: junos_conf_root__configuration__protocols__bgp__group__family__evpn
    route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target

    mut def __init__(self, inet_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn=None, inet6_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn=None, evpn: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn=None, route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.inet_vpn = inet_vpn if inet_vpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()
        self.inet6_vpn = inet6_vpn if inet6_vpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()
        self.evpn = evpn if evpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__evpn()
        self.route_target = route_target

    mut def create_route_target(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        self.route_target = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet_vpn = self.inet_vpn
        if _inet_vpn is not None:
            children['inet-vpn'] = _inet_vpn.to_gdata()
        _inet6_vpn = self.inet6_vpn
        if _inet6_vpn is not None:
            children['inet6-vpn'] = _inet6_vpn.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family(inet_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn.from_gdata(n.get_opt_cnt('inet-vpn')), inet6_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn.from_gdata(n.get_opt_cnt('inet6-vpn')), evpn=junos_conf_root__configuration__protocols__bgp__group__family__evpn.from_gdata(n.get_opt_cnt('evpn')), route_target=junos_conf_root__configuration__protocols__bgp__group__family__route_target.from_gdata(n.get_opt_cnt('route-target')))
        return junos_conf_root__configuration__protocols__bgp__group__family()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family()')
        leaves = []
        _inet_vpn = self.inet_vpn
        if _inet_vpn is not None:
            res.extend(_inet_vpn.prsrc('{self_name}.inet_vpn', False).splitlines())
        _inet6_vpn = self.inet6_vpn
        if _inet6_vpn is not None:
            res.extend(_inet6_vpn.prsrc('{self_name}.inet6_vpn', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.extend(_evpn.prsrc('{self_name}.evpn', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/route-target')
            res.append('route_target = {self_name}.create_route_target()')
            res.extend(_route_target.prsrc('route_target', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inet_vpn = yang.gdata.from_xml_opt_cnt(node, 'inet-vpn')
    yang.gdata.maybe_add(children, 'inet-vpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn, child_inet_vpn)
    child_inet6_vpn = yang.gdata.from_xml_opt_cnt(node, 'inet6-vpn')
    yang.gdata.maybe_add(children, 'inet6-vpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn, child_inet6_vpn)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn, child_evpn)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__route_target, child_route_target)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__tcpao_auth_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key_chain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    passive: ?bool

    mut def __init__(self, name: str, description: ?str, passive: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.description = description
        self.passive = passive

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name=n.get_str('name'), description=n.get_opt_str('description'), passive=n.get_opt_empty('passive'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/neighbor')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__neighbor({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__bgp__group__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__description, child_description)
    child_passive = yang.gdata.from_xml_opt_empty(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__passive, child_passive)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    type: ?str
    description: ?str
    local_address: ?str
    hold_time: ?value
    family: junos_conf_root__configuration__protocols__bgp__group__family
    authentication_key: ?str
    authentication_algorithm: ?str
    tcpao_auth_mismatch: ?str
    authentication_key_chain: ?str
    export: list[str]
    tcp_mss: ?value
    neighbor: junos_conf_root__configuration__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, type: ?str, description: ?str, local_address: ?str, hold_time: ?value, family: ?junos_conf_root__configuration__protocols__bgp__group__family=None, authentication_key: ?str, authentication_algorithm: ?str, tcpao_auth_mismatch: ?str, authentication_key_chain: ?str, export: ?list[str]=None, tcp_mss: ?value, neighbor: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.type = type
        self.description = description
        self.local_address = local_address
        self.hold_time = hold_time
        self.family = family if family is not None else junos_conf_root__configuration__protocols__bgp__group__family()
        self.authentication_key = authentication_key
        self.authentication_algorithm = authentication_algorithm
        self.tcpao_auth_mismatch = tcpao_auth_mismatch
        self.authentication_key_chain = authentication_key_chain
        self.export = export if export is not None else []
        self.tcp_mss = tcp_mss
        self.neighbor = junos_conf_root__configuration__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _local_address = self.local_address
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('string', _local_address)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        _tcpao_auth_mismatch = self.tcpao_auth_mismatch
        if _tcpao_auth_mismatch is not None:
            children['tcpao-auth-mismatch'] = yang.gdata.Leaf('enumeration', _tcpao_auth_mismatch)
        _authentication_key_chain = self.authentication_key_chain
        if _authentication_key_chain is not None:
            children['authentication-key-chain'] = yang.gdata.Leaf('string', _authentication_key_chain)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.LeafList('string', _export, user_order=True)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('union', _tcp_mss)
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group_entry:
        return junos_conf_root__configuration__protocols__bgp__group_entry(name=n.get_str('name'), type=n.get_opt_str('type'), description=n.get_opt_str('description'), local_address=n.get_opt_str('local-address'), hold_time=n.get_opt_value('hold-time'), family=junos_conf_root__configuration__protocols__bgp__group__family.from_gdata(n.get_opt_cnt('family')), authentication_key=n.get_opt_str('authentication-key'), authentication_algorithm=n.get_opt_str('authentication-algorithm'), tcpao_auth_mismatch=n.get_opt_str('tcpao-auth-mismatch'), authentication_key_chain=n.get_opt_str('authentication-key-chain'), export=n.get_opt_strs('export'), tcp_mss=n.get_opt_value('tcp-mss'), neighbor=junos_conf_root__configuration__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list('neighbor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group({repr(self.name)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _local_address = self.local_address
        if _local_address is not None:
            leaves.append('{self_name}.local_address = {repr(_local_address)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _family = self.family
        if _family is not None:
            res.extend(_family.prsrc('{self_name}.family', False).splitlines())
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            leaves.append('{self_name}.authentication_algorithm = {repr(_authentication_algorithm)}')
        _tcpao_auth_mismatch = self.tcpao_auth_mismatch
        if _tcpao_auth_mismatch is not None:
            leaves.append('{self_name}.tcpao_auth_mismatch = {repr(_tcpao_auth_mismatch)}')
        _authentication_key_chain = self.authentication_key_chain
        if _authentication_key_chain is not None:
            leaves.append('{self_name}.authentication_key_chain = {repr(_authentication_key_chain)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /configuration/protocols/bgp/group/neighbor element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__bgp__group__name, child_name)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_junos_conf_root__configuration__protocols__bgp__group__type, child_type)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__protocols__bgp__group__description, child_description)
    child_local_address = yang.gdata.from_xml_opt_str(node, 'local-address')
    yang.gdata.maybe_add(children, 'local-address', from_xml_junos_conf_root__configuration__protocols__bgp__group__local_address, child_local_address)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__hold_time, child_hold_time)
    child_family = yang.gdata.from_xml_opt_cnt(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__protocols__bgp__group__family, child_family)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key, child_authentication_key)
    child_authentication_algorithm = yang.gdata.from_xml_opt_str(node, 'authentication-algorithm')
    yang.gdata.maybe_add(children, 'authentication-algorithm', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_algorithm, child_authentication_algorithm)
    child_tcpao_auth_mismatch = yang.gdata.from_xml_opt_str(node, 'tcpao-auth-mismatch')
    yang.gdata.maybe_add(children, 'tcpao-auth-mismatch', from_xml_junos_conf_root__configuration__protocols__bgp__group__tcpao_auth_mismatch, child_tcpao_auth_mismatch)
    child_authentication_key_chain = yang.gdata.from_xml_opt_str(node, 'authentication-key-chain')
    yang.gdata.maybe_add(children, 'authentication-key-chain', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key_chain, child_authentication_key_chain)
    child_export = yang.gdata.from_xml_opt_strs(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__protocols__bgp__group__export, child_export)
    child_tcp_mss = yang.gdata.from_xml_opt_value(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_junos_conf_root__configuration__protocols__bgp__group__tcp_mss, child_tcp_mss)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__log_updown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp(yang.adata.MNode):
    path_selection: junos_conf_root__configuration__protocols__bgp__path_selection
    group: junos_conf_root__configuration__protocols__bgp__group
    log_updown: ?bool

    mut def __init__(self, path_selection: ?junos_conf_root__configuration__protocols__bgp__path_selection=None, group: list[junos_conf_root__configuration__protocols__bgp__group_entry]=[], log_updown: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.path_selection = path_selection if path_selection is not None else junos_conf_root__configuration__protocols__bgp__path_selection()
        self.group = junos_conf_root__configuration__protocols__bgp__group(elements=group)
        self.log_updown = log_updown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _path_selection = self.path_selection
        if _path_selection is not None:
            children['path-selection'] = _path_selection.to_gdata()
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        _log_updown = self.log_updown
        if _log_updown is not None:
            children['log-updown'] = yang.gdata.Leaf('empty', _log_updown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp(path_selection=junos_conf_root__configuration__protocols__bgp__path_selection.from_gdata(n.get_opt_cnt('path-selection')), group=junos_conf_root__configuration__protocols__bgp__group.from_gdata(n.get_opt_list('group')), log_updown=n.get_opt_empty('log-updown'))
        return junos_conf_root__configuration__protocols__bgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp()')
        leaves = []
        _path_selection = self.path_selection
        if _path_selection is not None:
            res.extend(_path_selection.prsrc('{self_name}.path_selection', False).splitlines())
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /configuration/protocols/bgp/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        _log_updown = self.log_updown
        if _log_updown is not None:
            leaves.append('{self_name}.log_updown = {repr(_log_updown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_path_selection = yang.gdata.from_xml_opt_cnt(node, 'path-selection')
    yang.gdata.maybe_add(children, 'path-selection', from_xml_junos_conf_root__configuration__protocols__bgp__path_selection, child_path_selection)
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_junos_conf_root__configuration__protocols__bgp__group, child_group)
    child_log_updown = yang.gdata.from_xml_opt_empty(node, 'log-updown')
    yang.gdata.maybe_add(children, 'log-updown', from_xml_junos_conf_root__configuration__protocols__bgp__log_updown, child_log_updown)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(yang.adata.MNode):
    disable: ?bool
    hold_time: ?value

    mut def __init__(self, disable: ?bool, hold_time: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.hold_time = hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(disable=n.get_opt_empty('disable'), hold_time=n.get_opt_value('hold-time'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/ldp-synchronization')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/ldp-synchronization'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__disable, child_disable)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__hold_time, child_hold_time)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    metric: ?value

    mut def __init__(self, name: value, disable: ?bool, metric: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.disable = disable
        self.metric = metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('union', _metric)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__level_entry:
        return junos_conf_root__configuration__protocols__isis__interface__level_entry(name=n.get_value('name'), disable=n.get_opt_empty('disable'), metric=n.get_opt_value('metric'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/level')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__level({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _metric = self.metric
        if _metric is not None:
            leaves.append('{self_name}.metric = {repr(_metric)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__level_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_value(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__disable, child_disable)
    child_metric = yang.gdata.from_xml_opt_value(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__metric, child_metric)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__lsp_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__point_to_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_iso(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__isis__interface__passive(yang.adata.MNode):
    remote_node_iso: ?str
    remote_node_id: ?str

    mut def __init__(self, remote_node_iso: ?str, remote_node_id: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.remote_node_iso = remote_node_iso
        self.remote_node_id = remote_node_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remote_node_iso = self.remote_node_iso
        if _remote_node_iso is not None:
            children['remote-node-iso'] = yang.gdata.Leaf('string', _remote_node_iso)
        _remote_node_id = self.remote_node_id
        if _remote_node_id is not None:
            children['remote-node-id'] = yang.gdata.Leaf('string', _remote_node_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__passive:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__passive(remote_node_iso=n.get_opt_str('remote-node-iso'), remote_node_id=n.get_opt_str('remote-node-id'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/passive')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__passive()')
        leaves = []
        _remote_node_iso = self.remote_node_iso
        if _remote_node_iso is not None:
            leaves.append('{self_name}.remote_node_iso = {repr(_remote_node_iso)}')
        _remote_node_id = self.remote_node_id
        if _remote_node_id is not None:
            leaves.append('{self_name}.remote_node_id = {repr(_remote_node_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/passive'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_remote_node_iso = yang.gdata.from_xml_opt_str(node, 'remote-node-iso')
    yang.gdata.maybe_add(children, 'remote-node-iso', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_iso, child_remote_node_iso)
    child_remote_node_id = yang.gdata.from_xml_opt_str(node, 'remote-node-id')
    yang.gdata.maybe_add(children, 'remote-node-id', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_id, child_remote_node_id)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_transmit_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_receive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__multiplier(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__inline_disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__pdu_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__no_adaptation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(yang.adata.MNode):
    minimum_interval: ?value
    threshold: ?value

    mut def __init__(self, minimum_interval: ?value, threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.minimum_interval = minimum_interval
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        _threshold = self.threshold
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('union', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(minimum_interval=n.get_opt_value('minimum-interval'), threshold=n.get_opt_value('threshold'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection/transmit-interval')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()')
        leaves = []
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            leaves.append('{self_name}.minimum_interval = {repr(_minimum_interval)}')
        _threshold = self.threshold
        if _threshold is not None:
            leaves.append('{self_name}.threshold = {repr(_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection/transmit-interval'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_minimum_interval = yang.gdata.from_xml_opt_value(node, 'minimum-interval')
    yang.gdata.maybe_add(children, 'minimum-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__minimum_interval, child_minimum_interval)
    child_threshold = yang.gdata.from_xml_opt_value(node, 'threshold')
    yang.gdata.maybe_add(children, 'threshold', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval__threshold, child_threshold)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time__threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(yang.adata.MNode):
    threshold: ?value

    mut def __init__(self, threshold: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.threshold = threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _threshold = self.threshold
        if _threshold is not None:
            children['threshold'] = yang.gdata.Leaf('union', _threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(threshold=n.get_opt_value('threshold'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection/detection-time')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()')
        leaves = []
        _threshold = self.threshold
        if _threshold is not None:
            leaves.append('{self_name}.threshold = {repr(_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection/detection-time'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_threshold = yang.gdata.from_xml_opt_value(node, 'threshold')
    yang.gdata.maybe_add(children, 'threshold', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time__threshold, child_threshold)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__key_chain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__loose_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(yang.adata.MNode):
    key_chain: ?str
    algorithm: ?str
    loose_check: ?bool

    mut def __init__(self, key_chain: ?str, algorithm: ?str, loose_check: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.key_chain = key_chain
        self.algorithm = algorithm
        self.loose_check = loose_check

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _key_chain = self.key_chain
        if _key_chain is not None:
            children['key-chain'] = yang.gdata.Leaf('string', _key_chain)
        _algorithm = self.algorithm
        if _algorithm is not None:
            children['algorithm'] = yang.gdata.Leaf('enumeration', _algorithm)
        _loose_check = self.loose_check
        if _loose_check is not None:
            children['loose-check'] = yang.gdata.Leaf('empty', _loose_check)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(key_chain=n.get_opt_str('key-chain'), algorithm=n.get_opt_str('algorithm'), loose_check=n.get_opt_empty('loose-check'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection/authentication')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()')
        leaves = []
        _key_chain = self.key_chain
        if _key_chain is not None:
            leaves.append('{self_name}.key_chain = {repr(_key_chain)}')
        _algorithm = self.algorithm
        if _algorithm is not None:
            leaves.append('{self_name}.algorithm = {repr(_algorithm)}')
        _loose_check = self.loose_check
        if _loose_check is not None:
            leaves.append('{self_name}.loose_check = {repr(_loose_check)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_key_chain = yang.gdata.from_xml_opt_str(node, 'key-chain')
    yang.gdata.maybe_add(children, 'key-chain', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__key_chain, child_key_chain)
    child_algorithm = yang.gdata.from_xml_opt_str(node, 'algorithm')
    yang.gdata.maybe_add(children, 'algorithm', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__algorithm, child_algorithm)
    child_loose_check = yang.gdata.from_xml_opt_empty(node, 'loose-check')
    yang.gdata.maybe_add(children, 'loose-check', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication__loose_check, child_loose_check)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(yang.adata.MNode):
    minimum_interval: ?value

    mut def __init__(self, minimum_interval: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.minimum_interval = minimum_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(minimum_interval=n.get_opt_value('minimum-interval'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection/echo')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()')
        leaves = []
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            leaves.append('{self_name}.minimum_interval = {repr(_minimum_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection/echo'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_minimum_interval = yang.gdata.from_xml_opt_value(node, 'minimum-interval')
    yang.gdata.maybe_add(children, 'minimum-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo__minimum_interval, child_minimum_interval)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite__minimum_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(yang.adata.MNode):
    minimum_interval: ?value

    mut def __init__(self, minimum_interval: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.minimum_interval = minimum_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(minimum_interval=n.get_opt_value('minimum-interval'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection/echo-lite')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()')
        leaves = []
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            leaves.append('{self_name}.minimum_interval = {repr(_minimum_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection/echo-lite'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_minimum_interval = yang.gdata.from_xml_opt_value(node, 'minimum-interval')
    yang.gdata.maybe_add(children, 'minimum-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite__minimum_interval, child_minimum_interval)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__holddown_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(yang.adata.MNode):
    version: ?str
    minimum_interval: ?value
    minimum_transmit_interval: ?value
    minimum_receive_interval: ?value
    multiplier: ?value
    inline_disable: ?bool
    pdu_size: ?value
    no_adaptation: ?bool
    transmit_interval: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval
    detection_time: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time
    authentication: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication
    echo: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo
    echo_lite: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite
    holddown_interval: ?value

    mut def __init__(self, version: ?str, minimum_interval: ?value, minimum_transmit_interval: ?value, minimum_receive_interval: ?value, multiplier: ?value, inline_disable: ?bool, pdu_size: ?value, no_adaptation: ?bool, transmit_interval: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval=None, detection_time: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time=None, authentication: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication=None, echo: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo=None, echo_lite: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite=None, holddown_interval: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.version = version
        self.minimum_interval = minimum_interval
        self.minimum_transmit_interval = minimum_transmit_interval
        self.minimum_receive_interval = minimum_receive_interval
        self.multiplier = multiplier
        self.inline_disable = inline_disable
        self.pdu_size = pdu_size
        self.no_adaptation = no_adaptation
        self.transmit_interval = transmit_interval if transmit_interval is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval()
        self.detection_time = detection_time if detection_time is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time()
        self.authentication = authentication if authentication is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication()
        self.echo = echo if echo is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo()
        self.echo_lite = echo_lite if echo_lite is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite()
        self.holddown_interval = holddown_interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _version = self.version
        if _version is not None:
            children['version'] = yang.gdata.Leaf('enumeration', _version)
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            children['minimum-interval'] = yang.gdata.Leaf('union', _minimum_interval)
        _minimum_transmit_interval = self.minimum_transmit_interval
        if _minimum_transmit_interval is not None:
            children['minimum-transmit-interval'] = yang.gdata.Leaf('union', _minimum_transmit_interval)
        _minimum_receive_interval = self.minimum_receive_interval
        if _minimum_receive_interval is not None:
            children['minimum-receive-interval'] = yang.gdata.Leaf('union', _minimum_receive_interval)
        _multiplier = self.multiplier
        if _multiplier is not None:
            children['multiplier'] = yang.gdata.Leaf('union', _multiplier)
        _inline_disable = self.inline_disable
        if _inline_disable is not None:
            children['inline-disable'] = yang.gdata.Leaf('empty', _inline_disable)
        _pdu_size = self.pdu_size
        if _pdu_size is not None:
            children['pdu-size'] = yang.gdata.Leaf('union', _pdu_size)
        _no_adaptation = self.no_adaptation
        if _no_adaptation is not None:
            children['no-adaptation'] = yang.gdata.Leaf('empty', _no_adaptation)
        _transmit_interval = self.transmit_interval
        if _transmit_interval is not None:
            children['transmit-interval'] = _transmit_interval.to_gdata()
        _detection_time = self.detection_time
        if _detection_time is not None:
            children['detection-time'] = _detection_time.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _echo = self.echo
        if _echo is not None:
            children['echo'] = _echo.to_gdata()
        _echo_lite = self.echo_lite
        if _echo_lite is not None:
            children['echo-lite'] = _echo_lite.to_gdata()
        _holddown_interval = self.holddown_interval
        if _holddown_interval is not None:
            children['holddown-interval'] = yang.gdata.Leaf('union', _holddown_interval)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(version=n.get_opt_str('version'), minimum_interval=n.get_opt_value('minimum-interval'), minimum_transmit_interval=n.get_opt_value('minimum-transmit-interval'), minimum_receive_interval=n.get_opt_value('minimum-receive-interval'), multiplier=n.get_opt_value('multiplier'), inline_disable=n.get_opt_empty('inline-disable'), pdu_size=n.get_opt_value('pdu-size'), no_adaptation=n.get_opt_empty('no-adaptation'), transmit_interval=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval.from_gdata(n.get_opt_cnt('transmit-interval')), detection_time=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time.from_gdata(n.get_opt_cnt('detection-time')), authentication=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication.from_gdata(n.get_opt_cnt('authentication')), echo=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo.from_gdata(n.get_opt_cnt('echo')), echo_lite=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite.from_gdata(n.get_opt_cnt('echo-lite')), holddown_interval=n.get_opt_value('holddown-interval'))
        return junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family/bfd-liveness-detection')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()')
        leaves = []
        _version = self.version
        if _version is not None:
            leaves.append('{self_name}.version = {repr(_version)}')
        _minimum_interval = self.minimum_interval
        if _minimum_interval is not None:
            leaves.append('{self_name}.minimum_interval = {repr(_minimum_interval)}')
        _minimum_transmit_interval = self.minimum_transmit_interval
        if _minimum_transmit_interval is not None:
            leaves.append('{self_name}.minimum_transmit_interval = {repr(_minimum_transmit_interval)}')
        _minimum_receive_interval = self.minimum_receive_interval
        if _minimum_receive_interval is not None:
            leaves.append('{self_name}.minimum_receive_interval = {repr(_minimum_receive_interval)}')
        _multiplier = self.multiplier
        if _multiplier is not None:
            leaves.append('{self_name}.multiplier = {repr(_multiplier)}')
        _inline_disable = self.inline_disable
        if _inline_disable is not None:
            leaves.append('{self_name}.inline_disable = {repr(_inline_disable)}')
        _pdu_size = self.pdu_size
        if _pdu_size is not None:
            leaves.append('{self_name}.pdu_size = {repr(_pdu_size)}')
        _no_adaptation = self.no_adaptation
        if _no_adaptation is not None:
            leaves.append('{self_name}.no_adaptation = {repr(_no_adaptation)}')
        _transmit_interval = self.transmit_interval
        if _transmit_interval is not None:
            res.extend(_transmit_interval.prsrc('{self_name}.transmit_interval', False).splitlines())
        _detection_time = self.detection_time
        if _detection_time is not None:
            res.extend(_detection_time.prsrc('{self_name}.detection_time', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _echo = self.echo
        if _echo is not None:
            res.extend(_echo.prsrc('{self_name}.echo', False).splitlines())
        _echo_lite = self.echo_lite
        if _echo_lite is not None:
            res.extend(_echo_lite.prsrc('{self_name}.echo_lite', False).splitlines())
        _holddown_interval = self.holddown_interval
        if _holddown_interval is not None:
            leaves.append('{self_name}.holddown_interval = {repr(_holddown_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family/bfd-liveness-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_version = yang.gdata.from_xml_opt_str(node, 'version')
    yang.gdata.maybe_add(children, 'version', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__version, child_version)
    child_minimum_interval = yang.gdata.from_xml_opt_value(node, 'minimum-interval')
    yang.gdata.maybe_add(children, 'minimum-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_interval, child_minimum_interval)
    child_minimum_transmit_interval = yang.gdata.from_xml_opt_value(node, 'minimum-transmit-interval')
    yang.gdata.maybe_add(children, 'minimum-transmit-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_transmit_interval, child_minimum_transmit_interval)
    child_minimum_receive_interval = yang.gdata.from_xml_opt_value(node, 'minimum-receive-interval')
    yang.gdata.maybe_add(children, 'minimum-receive-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__minimum_receive_interval, child_minimum_receive_interval)
    child_multiplier = yang.gdata.from_xml_opt_value(node, 'multiplier')
    yang.gdata.maybe_add(children, 'multiplier', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__multiplier, child_multiplier)
    child_inline_disable = yang.gdata.from_xml_opt_empty(node, 'inline-disable')
    yang.gdata.maybe_add(children, 'inline-disable', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__inline_disable, child_inline_disable)
    child_pdu_size = yang.gdata.from_xml_opt_value(node, 'pdu-size')
    yang.gdata.maybe_add(children, 'pdu-size', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__pdu_size, child_pdu_size)
    child_no_adaptation = yang.gdata.from_xml_opt_empty(node, 'no-adaptation')
    yang.gdata.maybe_add(children, 'no-adaptation', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__no_adaptation, child_no_adaptation)
    child_transmit_interval = yang.gdata.from_xml_opt_cnt(node, 'transmit-interval')
    yang.gdata.maybe_add(children, 'transmit-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__transmit_interval, child_transmit_interval)
    child_detection_time = yang.gdata.from_xml_opt_cnt(node, 'detection-time')
    yang.gdata.maybe_add(children, 'detection-time', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__detection_time, child_detection_time)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__authentication, child_authentication)
    child_echo = yang.gdata.from_xml_opt_cnt(node, 'echo')
    yang.gdata.maybe_add(children, 'echo', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo, child_echo)
    child_echo_lite = yang.gdata.from_xml_opt_cnt(node, 'echo-lite')
    yang.gdata.maybe_add(children, 'echo-lite', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__echo_lite, child_echo_lite)
    child_holddown_interval = yang.gdata.from_xml_opt_value(node, 'holddown-interval')
    yang.gdata.maybe_add(children, 'holddown-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection__holddown_interval, child_holddown_interval)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__isis__interface__family_entry(yang.adata.MNode):
    name: str
    bfd_liveness_detection: junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection

    mut def __init__(self, name: str, bfd_liveness_detection: ?junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.bfd_liveness_detection = bfd_liveness_detection if bfd_liveness_detection is not None else junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        _bfd_liveness_detection = self.bfd_liveness_detection
        if _bfd_liveness_detection is not None:
            children['bfd-liveness-detection'] = _bfd_liveness_detection.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family_entry:
        return junos_conf_root__configuration__protocols__isis__interface__family_entry(name=n.get_str('name'), bfd_liveness_detection=junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection.from_gdata(n.get_opt_cnt('bfd-liveness-detection')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family({repr(self.name)})')
        leaves = []
        _bfd_liveness_detection = self.bfd_liveness_detection
        if _bfd_liveness_detection is not None:
            res.extend(_bfd_liveness_detection.prsrc('{self_name}.bfd_liveness_detection', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface__family(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'family'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__family_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__family_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface__family_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__name, child_name)
    child_bfd_liveness_detection = yang.gdata.from_xml_opt_cnt(node, 'bfd-liveness-detection')
    yang.gdata.maybe_add(children, 'bfd-liveness-detection', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__bfd_liveness_detection, child_bfd_liveness_detection)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface__family_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__protocols__isis__interface_entry(yang.adata.MNode):
    name: str
    ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization
    level: junos_conf_root__configuration__protocols__isis__interface__level
    lsp_interval: ?value
    point_to_point: ?bool
    passive: ?junos_conf_root__configuration__protocols__isis__interface__passive
    family: junos_conf_root__configuration__protocols__isis__interface__family

    mut def __init__(self, name: str, ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization=None, level: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]=[], lsp_interval: ?value, point_to_point: ?bool, passive: ?junos_conf_root__configuration__protocols__isis__interface__passive=None, family: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.ldp_synchronization = ldp_synchronization
        self.level = junos_conf_root__configuration__protocols__isis__interface__level(elements=level)
        self.lsp_interval = lsp_interval
        self.point_to_point = point_to_point
        self.passive = passive
        self.family = junos_conf_root__configuration__protocols__isis__interface__family(elements=family)

    mut def create_ldp_synchronization(self):
        res = junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization()
        self.ldp_synchronization = res
        return res

    mut def create_passive(self):
        res = junos_conf_root__configuration__protocols__isis__interface__passive()
        self.passive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _ldp_synchronization = self.ldp_synchronization
        if _ldp_synchronization is not None:
            children['ldp-synchronization'] = _ldp_synchronization.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _lsp_interval = self.lsp_interval
        if _lsp_interval is not None:
            children['lsp-interval'] = yang.gdata.Leaf('union', _lsp_interval)
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            children['point-to-point'] = yang.gdata.Leaf('empty', _point_to_point)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface_entry:
        return junos_conf_root__configuration__protocols__isis__interface_entry(name=n.get_str('name'), ldp_synchronization=junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization.from_gdata(n.get_opt_cnt('ldp-synchronization')), level=junos_conf_root__configuration__protocols__isis__interface__level.from_gdata(n.get_opt_list('level')), lsp_interval=n.get_opt_value('lsp-interval'), point_to_point=n.get_opt_empty('point-to-point'), passive=junos_conf_root__configuration__protocols__isis__interface__passive.from_gdata(n.get_opt_cnt('passive')), family=junos_conf_root__configuration__protocols__isis__interface__family.from_gdata(n.get_opt_list('family')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface({repr(self.name)})')
        leaves = []
        _ldp_synchronization = self.ldp_synchronization
        if _ldp_synchronization is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/interface/ldp-synchronization')
            res.append('ldp_synchronization = {self_name}.create_ldp_synchronization()')
            res.extend(_ldp_synchronization.prsrc('ldp_synchronization', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface/level element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _lsp_interval = self.lsp_interval
        if _lsp_interval is not None:
            leaves.append('{self_name}.lsp_interval = {repr(_lsp_interval)}')
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            leaves.append('{self_name}.point_to_point = {repr(_point_to_point)}')
        _passive = self.passive
        if _passive is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/interface/passive')
            res.append('passive = {self_name}.create_passive()')
            res.extend(_passive.prsrc('passive', False).splitlines())
        _family = self.family
        for _element in _family.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface/family element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'family_element = {self_name}.family.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('family_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__name, child_name)
    child_ldp_synchronization = yang.gdata.from_xml_opt_cnt(node, 'ldp-synchronization')
    yang.gdata.maybe_add(children, 'ldp-synchronization', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization, child_ldp_synchronization)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_junos_conf_root__configuration__protocols__isis__interface__level, child_level)
    child_lsp_interval = yang.gdata.from_xml_opt_value(node, 'lsp-interval')
    yang.gdata.maybe_add(children, 'lsp-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__lsp_interval, child_lsp_interval)
    child_point_to_point = yang.gdata.from_xml_opt_empty(node, 'point-to-point')
    yang.gdata.maybe_add(children, 'point-to-point', from_xml_junos_conf_root__configuration__protocols__isis__interface__point_to_point, child_point_to_point)
    child_passive = yang.gdata.from_xml_opt_cnt(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive, child_passive)
    child_family = yang.gdata.from_xml_opt_list(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__protocols__isis__interface__family, child_family)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(yang.adata.MNode):
    hold_time: ?value

    mut def __init__(self, hold_time: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.hold_time = hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(hold_time=n.get_opt_value('hold-time'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/adjacency-segment')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()')
        leaves = []
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/adjacency-segment'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment__hold_time, child_hold_time)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__decapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(yang.adata.MNode):
    encapsulation: ?bool
    decapsulation: ?bool

    mut def __init__(self, encapsulation: ?bool, decapsulation: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.encapsulation = encapsulation
        self.decapsulation = decapsulation

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('empty', _encapsulation)
        _decapsulation = self.decapsulation
        if _decapsulation is not None:
            children['decapsulation'] = yang.gdata.Leaf('empty', _decapsulation)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(encapsulation=n.get_opt_empty('encapsulation'), decapsulation=n.get_opt_empty('decapsulation'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/udp-tunneling')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()')
        leaves = []
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _decapsulation = self.decapsulation
        if _decapsulation is not None:
            leaves.append('{self_name}.decapsulation = {repr(_decapsulation)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/udp-tunneling'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_encapsulation = yang.gdata.from_xml_opt_empty(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__encapsulation, child_encapsulation)
    child_decapsulation = yang.gdata.from_xml_opt_empty(node, 'decapsulation')
    yang.gdata.maybe_add(children, 'decapsulation', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling__decapsulation, child_decapsulation)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__start_label(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__index_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(yang.adata.MNode):
    start_label: ?value
    index_range: ?value

    mut def __init__(self, start_label: ?value, index_range: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.start_label = start_label
        self.index_range = index_range

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _start_label = self.start_label
        if _start_label is not None:
            children['start-label'] = yang.gdata.Leaf('union', _start_label)
        _index_range = self.index_range
        if _index_range is not None:
            children['index-range'] = yang.gdata.Leaf('union', _index_range)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(start_label=n.get_opt_value('start-label'), index_range=n.get_opt_value('index-range'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srgb')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()')
        leaves = []
        _start_label = self.start_label
        if _start_label is not None:
            leaves.append('{self_name}.start_label = {repr(_start_label)}')
        _index_range = self.index_range
        if _index_range is not None:
            leaves.append('{self_name}.index_range = {repr(_index_range)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srgb'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_start_label = yang.gdata.from_xml_opt_value(node, 'start-label')
    yang.gdata.maybe_add(children, 'start-label', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__start_label, child_start_label)
    child_index_range = yang.gdata.from_xml_opt_value(node, 'index-range')
    yang.gdata.maybe_add(children, 'index-range', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb__index_range, child_index_range)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv4_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv6_index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__index_range(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(yang.adata.MNode):
    ipv4_index: ?value
    ipv6_index: ?value
    index_range: ?value

    mut def __init__(self, ipv4_index: ?value, ipv6_index: ?value, index_range: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.ipv4_index = ipv4_index
        self.ipv6_index = ipv6_index
        self.index_range = index_range

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_index = self.ipv4_index
        if _ipv4_index is not None:
            children['ipv4-index'] = yang.gdata.Leaf('union', _ipv4_index)
        _ipv6_index = self.ipv6_index
        if _ipv6_index is not None:
            children['ipv6-index'] = yang.gdata.Leaf('union', _ipv6_index)
        _index_range = self.index_range
        if _index_range is not None:
            children['index-range'] = yang.gdata.Leaf('union', _index_range)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(ipv4_index=n.get_opt_value('ipv4-index'), ipv6_index=n.get_opt_value('ipv6-index'), index_range=n.get_opt_value('index-range'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/node-segment')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()')
        leaves = []
        _ipv4_index = self.ipv4_index
        if _ipv4_index is not None:
            leaves.append('{self_name}.ipv4_index = {repr(_ipv4_index)}')
        _ipv6_index = self.ipv6_index
        if _ipv6_index is not None:
            leaves.append('{self_name}.ipv6_index = {repr(_ipv6_index)}')
        _index_range = self.index_range
        if _index_range is not None:
            leaves.append('{self_name}.index_range = {repr(_index_range)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/node-segment'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_index = yang.gdata.from_xml_opt_value(node, 'ipv4-index')
    yang.gdata.maybe_add(children, 'ipv4-index', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv4_index, child_ipv4_index)
    child_ipv6_index = yang.gdata.from_xml_opt_value(node, 'ipv6-index')
    yang.gdata.maybe_add(children, 'ipv6-index', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__ipv6_index, child_ipv6_index)
    child_index_range = yang.gdata.from_xml_opt_value(node, 'index-range')
    yang.gdata.maybe_add(children, 'index-range', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment__index_range, child_index_range)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__flex_algorithm(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__use_flex_algorithm_metric_always(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__strict_asla_based_flex_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__new_capability_subtlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__explicit_null(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__mapping_server(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_strict_spf(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_binding_sid_leaking(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__ldp_stitching(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__anycast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__psp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(yang.adata.MNode):
    psp: ?bool
    usp: ?bool
    usd: ?bool

    mut def __init__(self, psp: ?bool, usp: ?bool, usd: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.psp = psp
        self.usp = usp
        self.usd = usd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _psp = self.psp
        if _psp is not None:
            children['psp'] = yang.gdata.Leaf('empty', _psp)
        _usp = self.usp
        if _usp is not None:
            children['usp'] = yang.gdata.Leaf('empty', _usp)
        _usd = self.usd
        if _usd is not None:
            children['usd'] = yang.gdata.Leaf('empty', _usd)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(psp=n.get_opt_empty('psp'), usp=n.get_opt_empty('usp'), usd=n.get_opt_empty('usd'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid/flavor')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor()')
        leaves = []
        _psp = self.psp
        if _psp is not None:
            leaves.append('{self_name}.psp = {repr(_psp)}')
        _usp = self.usp
        if _usp is not None:
            leaves.append('{self_name}.usp = {repr(_usp)}')
        _usd = self.usd
        if _usd is not None:
            leaves.append('{self_name}.usd = {repr(_usd)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid/flavor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_psp = yang.gdata.from_xml_opt_empty(node, 'psp')
    yang.gdata.maybe_add(children, 'psp', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__psp, child_psp)
    child_usp = yang.gdata.from_xml_opt_empty(node, 'usp')
    yang.gdata.maybe_add(children, 'usp', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usp, child_usp)
    child_usd = yang.gdata.from_xml_opt_empty(node, 'usd')
    yang.gdata.maybe_add(children, 'usd', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor__usd, child_usd)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(yang.adata.MNode):
    name: str
    flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor

    mut def __init__(self, name: str, flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.flavor = flavor

    mut def create_flavor(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor()
        self.flavor = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _flavor = self.flavor
        if _flavor is not None:
            children['flavor'] = _flavor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(name=n.get_str('name'), flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor.from_gdata(n.get_opt_cnt('flavor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid({repr(self.name)})')
        leaves = []
        _flavor = self.flavor
        if _flavor is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid/flavor')
            res.append('flavor = {self_name}.create_flavor()')
            res.extend(_flavor.prsrc('flavor', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'end-sid'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__name, child_name)
    child_flavor = yang.gdata.from_xml_opt_cnt(node, 'flavor')
    yang.gdata.maybe_add(children, 'flavor', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid__flavor, child_flavor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__psp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(yang.adata.MNode):
    psp: ?bool
    usp: ?bool
    usd: ?bool

    mut def __init__(self, psp: ?bool, usp: ?bool, usd: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.psp = psp
        self.usp = usp
        self.usd = usd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _psp = self.psp
        if _psp is not None:
            children['psp'] = yang.gdata.Leaf('empty', _psp)
        _usp = self.usp
        if _usp is not None:
            children['usp'] = yang.gdata.Leaf('empty', _usp)
        _usd = self.usd
        if _usd is not None:
            children['usd'] = yang.gdata.Leaf('empty', _usd)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(psp=n.get_opt_empty('psp'), usp=n.get_opt_empty('usp'), usd=n.get_opt_empty('usd'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid/flavor')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor()')
        leaves = []
        _psp = self.psp
        if _psp is not None:
            leaves.append('{self_name}.psp = {repr(_psp)}')
        _usp = self.usp
        if _usp is not None:
            leaves.append('{self_name}.usp = {repr(_usp)}')
        _usd = self.usd
        if _usd is not None:
            leaves.append('{self_name}.usd = {repr(_usd)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid/flavor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_psp = yang.gdata.from_xml_opt_empty(node, 'psp')
    yang.gdata.maybe_add(children, 'psp', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__psp, child_psp)
    child_usp = yang.gdata.from_xml_opt_empty(node, 'usp')
    yang.gdata.maybe_add(children, 'usp', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usp, child_usp)
    child_usd = yang.gdata.from_xml_opt_empty(node, 'usd')
    yang.gdata.maybe_add(children, 'usd', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor__usd, child_usd)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(yang.adata.MNode):
    flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor

    mut def __init__(self, flavor: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.flavor = flavor

    mut def create_flavor(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor()
        self.flavor = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _flavor = self.flavor
        if _flavor is not None:
            children['flavor'] = _flavor.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(flavor=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor.from_gdata(n.get_opt_cnt('flavor')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid()')
        leaves = []
        _flavor = self.flavor
        if _flavor is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid/flavor')
            res.append('flavor = {self_name}.create_flavor()')
            res.extend(_flavor.prsrc('flavor', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_flavor = yang.gdata.from_xml_opt_cnt(node, 'flavor')
    yang.gdata.maybe_add(children, 'flavor', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid__flavor, child_flavor)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__micro_node_sid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(yang.adata.MNode):
    name: str
    anycast: ?bool
    end_sid: junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid
    dynamic_end_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid
    micro_node_sid: ?bool

    mut def __init__(self, name: str, anycast: ?bool, end_sid: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid_entry]=[], dynamic_end_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid=None, micro_node_sid: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.anycast = anycast
        self.end_sid = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid(elements=end_sid)
        self.dynamic_end_sid = dynamic_end_sid
        self.micro_node_sid = micro_node_sid

    mut def create_dynamic_end_sid(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid()
        self.dynamic_end_sid = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _anycast = self.anycast
        if _anycast is not None:
            children['anycast'] = yang.gdata.Leaf('empty', _anycast)
        _end_sid = self.end_sid
        if _end_sid is not None:
            children['end-sid'] = _end_sid.to_gdata()
        _dynamic_end_sid = self.dynamic_end_sid
        if _dynamic_end_sid is not None:
            children['dynamic-end-sid'] = _dynamic_end_sid.to_gdata()
        _micro_node_sid = self.micro_node_sid
        if _micro_node_sid is not None:
            children['micro-node-sid'] = yang.gdata.Leaf('empty', _micro_node_sid)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry:
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(name=n.get_str('name'), anycast=n.get_opt_empty('anycast'), end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid.from_gdata(n.get_opt_list('end-sid')), dynamic_end_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid.from_gdata(n.get_opt_cnt('dynamic-end-sid')), micro_node_sid=n.get_opt_empty('micro-node-sid'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6/locator')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator({repr(self.name)})')
        leaves = []
        _anycast = self.anycast
        if _anycast is not None:
            leaves.append('{self_name}.anycast = {repr(_anycast)}')
        _end_sid = self.end_sid
        for _element in _end_sid.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/source-packet-routing/srv6/locator/end-sid element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'end_sid_element = {self_name}.end_sid.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('end_sid_element', False, list_element=True).splitlines())
        _dynamic_end_sid = self.dynamic_end_sid
        if _dynamic_end_sid is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing/srv6/locator/dynamic-end-sid')
            res.append('dynamic_end_sid = {self_name}.create_dynamic_end_sid()')
            res.extend(_dynamic_end_sid.prsrc('dynamic_end_sid', False).splitlines())
        _micro_node_sid = self.micro_node_sid
        if _micro_node_sid is not None:
            leaves.append('{self_name}.micro_node_sid = {repr(_micro_node_sid)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6/locator'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'locator'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__name, child_name)
    child_anycast = yang.gdata.from_xml_opt_empty(node, 'anycast')
    yang.gdata.maybe_add(children, 'anycast', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__anycast, child_anycast)
    child_end_sid = yang.gdata.from_xml_opt_list(node, 'end-sid')
    yang.gdata.maybe_add(children, 'end-sid', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__end_sid, child_end_sid)
    child_dynamic_end_sid = yang.gdata.from_xml_opt_cnt(node, 'dynamic-end-sid')
    yang.gdata.maybe_add(children, 'dynamic-end-sid', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__dynamic_end_sid, child_dynamic_end_sid)
    child_micro_node_sid = yang.gdata.from_xml_opt_empty(node, 'micro-node-sid')
    yang.gdata.maybe_add(children, 'micro-node-sid', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator__micro_node_sid, child_micro_node_sid)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(yang.adata.MNode):
    locator: junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator

    mut def __init__(self, locator: list[junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.locator = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator(elements=locator)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _locator = self.locator
        if _locator is not None:
            children['locator'] = _locator.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(locator=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator.from_gdata(n.get_opt_list('locator')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/srv6')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6()')
        leaves = []
        _locator = self.locator
        for _element in _locator.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/source-packet-routing/srv6/locator element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'locator_element = {self_name}.locator.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('locator_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/srv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_locator = yang.gdata.from_xml_opt_list(node, 'locator')
    yang.gdata.maybe_add(children, 'locator', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6__locator, child_locator)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('empty', _ingress)
        _egress = self.egress
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('empty', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(ingress=n.get_opt_empty('ingress'), egress=n.get_opt_empty('egress'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/per-interface-per-member-link')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()')
        leaves = []
        _ingress = self.ingress
        if _ingress is not None:
            leaves.append('{self_name}.ingress = {repr(_ingress)}')
        _egress = self.egress
        if _egress is not None:
            leaves.append('{self_name}.egress = {repr(_egress)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/per-interface-per-member-link'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ingress = yang.gdata.from_xml_opt_empty(node, 'ingress')
    yang.gdata.maybe_add(children, 'ingress', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__ingress, child_ingress)
    child_egress = yang.gdata.from_xml_opt_empty(node, 'egress')
    yang.gdata.maybe_add(children, 'egress', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link__egress, child_egress)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__ingress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__egress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(yang.adata.MNode):
    ingress: ?bool
    egress: ?bool

    mut def __init__(self, ingress: ?bool, egress: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.ingress = ingress
        self.egress = egress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ingress = self.ingress
        if _ingress is not None:
            children['ingress'] = yang.gdata.Leaf('empty', _ingress)
        _egress = self.egress
        if _egress is not None:
            children['egress'] = yang.gdata.Leaf('empty', _egress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(ingress=n.get_opt_empty('ingress'), egress=n.get_opt_empty('egress'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/per-sid')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()')
        leaves = []
        _ingress = self.ingress
        if _ingress is not None:
            leaves.append('{self_name}.ingress = {repr(_ingress)}')
        _egress = self.egress
        if _egress is not None:
            leaves.append('{self_name}.egress = {repr(_egress)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/per-sid'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ingress = yang.gdata.from_xml_opt_empty(node, 'ingress')
    yang.gdata.maybe_add(children, 'ingress', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__ingress, child_ingress)
    child_egress = yang.gdata.from_xml_opt_empty(node, 'egress')
    yang.gdata.maybe_add(children, 'egress', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid__egress, child_egress)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(yang.adata.MNode):
    interval: ?value

    mut def __init__(self, interval: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.interval = interval

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interval = self.interval
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(interval=n.get_opt_value('interval'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/subscribe')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe()')
        leaves = []
        _interval = self.interval
        if _interval is not None:
            leaves.append('{self_name}.interval = {repr(_interval)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/subscribe'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interval = yang.gdata.from_xml_opt_value(node, 'interval')
    yang.gdata.maybe_add(children, 'interval', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe__interval, child_interval)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(yang.adata.MNode):
    per_interface_per_member_link: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link
    per_sid: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid
    subscribe: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe

    mut def __init__(self, per_interface_per_member_link: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link=None, per_sid: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid=None, subscribe: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.per_interface_per_member_link = per_interface_per_member_link if per_interface_per_member_link is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link()
        self.per_sid = per_sid if per_sid is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid()
        self.subscribe = subscribe

    mut def create_subscribe(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe()
        self.subscribe = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _per_interface_per_member_link = self.per_interface_per_member_link
        if _per_interface_per_member_link is not None:
            children['per-interface-per-member-link'] = _per_interface_per_member_link.to_gdata()
        _per_sid = self.per_sid
        if _per_sid is not None:
            children['per-sid'] = _per_sid.to_gdata()
        _subscribe = self.subscribe
        if _subscribe is not None:
            children['subscribe'] = _subscribe.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(per_interface_per_member_link=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link.from_gdata(n.get_opt_cnt('per-interface-per-member-link')), per_sid=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid.from_gdata(n.get_opt_cnt('per-sid')), subscribe=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe.from_gdata(n.get_opt_cnt('subscribe')))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/sensor-based-stats')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()')
        leaves = []
        _per_interface_per_member_link = self.per_interface_per_member_link
        if _per_interface_per_member_link is not None:
            res.extend(_per_interface_per_member_link.prsrc('{self_name}.per_interface_per_member_link', False).splitlines())
        _per_sid = self.per_sid
        if _per_sid is not None:
            res.extend(_per_sid.prsrc('{self_name}.per_sid', False).splitlines())
        _subscribe = self.subscribe
        if _subscribe is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing/sensor-based-stats/subscribe')
            res.append('subscribe = {self_name}.create_subscribe()')
            res.extend(_subscribe.prsrc('subscribe', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/sensor-based-stats'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_per_interface_per_member_link = yang.gdata.from_xml_opt_cnt(node, 'per-interface-per-member-link')
    yang.gdata.maybe_add(children, 'per-interface-per-member-link', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_interface_per_member_link, child_per_interface_per_member_link)
    child_per_sid = yang.gdata.from_xml_opt_cnt(node, 'per-sid')
    yang.gdata.maybe_add(children, 'per-sid', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__per_sid, child_per_sid)
    child_subscribe = yang.gdata.from_xml_opt_cnt(node, 'subscribe')
    yang.gdata.maybe_add(children, 'subscribe', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats__subscribe, child_subscribe)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity__per_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(yang.adata.MNode):
    per_interface: ?bool

    mut def __init__(self, per_interface: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.per_interface = per_interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _per_interface = self.per_interface
        if _per_interface is not None:
            children['per-interface'] = yang.gdata.Leaf('empty', _per_interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(per_interface=n.get_opt_empty('per-interface'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/traffic-statistics/statistics-granularity')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()')
        leaves = []
        _per_interface = self.per_interface
        if _per_interface is not None:
            leaves.append('{self_name}.per_interface = {repr(_per_interface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/traffic-statistics/statistics-granularity'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_per_interface = yang.gdata.from_xml_opt_empty(node, 'per-interface')
    yang.gdata.maybe_add(children, 'per-interface', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity__per_interface, child_per_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__congestion_protection(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__auto_bandwidth(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(yang.adata.MNode):
    statistics_granularity: junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity
    congestion_protection: ?bool
    auto_bandwidth: ?str

    mut def __init__(self, statistics_granularity: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity=None, congestion_protection: ?bool, auto_bandwidth: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.statistics_granularity = statistics_granularity if statistics_granularity is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity()
        self.congestion_protection = congestion_protection
        self.auto_bandwidth = auto_bandwidth

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _statistics_granularity = self.statistics_granularity
        if _statistics_granularity is not None:
            children['statistics-granularity'] = _statistics_granularity.to_gdata()
        _congestion_protection = self.congestion_protection
        if _congestion_protection is not None:
            children['congestion-protection'] = yang.gdata.Leaf('empty', _congestion_protection)
        _auto_bandwidth = self.auto_bandwidth
        if _auto_bandwidth is not None:
            children['auto-bandwidth'] = yang.gdata.Leaf('string', _auto_bandwidth)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(statistics_granularity=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity.from_gdata(n.get_opt_cnt('statistics-granularity')), congestion_protection=n.get_opt_empty('congestion-protection'), auto_bandwidth=n.get_opt_str('auto-bandwidth'))
        return junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing/traffic-statistics')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()')
        leaves = []
        _statistics_granularity = self.statistics_granularity
        if _statistics_granularity is not None:
            res.extend(_statistics_granularity.prsrc('{self_name}.statistics_granularity', False).splitlines())
        _congestion_protection = self.congestion_protection
        if _congestion_protection is not None:
            leaves.append('{self_name}.congestion_protection = {repr(_congestion_protection)}')
        _auto_bandwidth = self.auto_bandwidth
        if _auto_bandwidth is not None:
            leaves.append('{self_name}.auto_bandwidth = {repr(_auto_bandwidth)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing/traffic-statistics'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_statistics_granularity = yang.gdata.from_xml_opt_cnt(node, 'statistics-granularity')
    yang.gdata.maybe_add(children, 'statistics-granularity', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__statistics_granularity, child_statistics_granularity)
    child_congestion_protection = yang.gdata.from_xml_opt_empty(node, 'congestion-protection')
    yang.gdata.maybe_add(children, 'congestion-protection', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__congestion_protection, child_congestion_protection)
    child_auto_bandwidth = yang.gdata.from_xml_opt_str(node, 'auto-bandwidth')
    yang.gdata.maybe_add(children, 'auto-bandwidth', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics__auto_bandwidth, child_auto_bandwidth)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__isis__source_packet_routing(yang.adata.MNode):
    adjacency_segment: junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment
    udp_tunneling: junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling
    srgb: junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb
    node_segment: junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment
    flex_algorithm: list[value]
    use_flex_algorithm_metric_always: ?bool
    strict_asla_based_flex_algorithm: ?bool
    new_capability_subtlv: ?bool
    explicit_null: ?bool
    mapping_server: ?str
    no_strict_spf: ?bool
    no_binding_sid_leaking: ?bool
    ldp_stitching: ?bool
    srv6: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6
    sensor_based_stats: junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats
    traffic_statistics: junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics

    mut def __init__(self, adjacency_segment: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment=None, udp_tunneling: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling=None, srgb: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb=None, node_segment: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment=None, flex_algorithm: ?list[value]=None, use_flex_algorithm_metric_always: ?bool, strict_asla_based_flex_algorithm: ?bool, new_capability_subtlv: ?bool, explicit_null: ?bool, mapping_server: ?str, no_strict_spf: ?bool, no_binding_sid_leaking: ?bool, ldp_stitching: ?bool, srv6: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6=None, sensor_based_stats: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats=None, traffic_statistics: ?junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.adjacency_segment = adjacency_segment if adjacency_segment is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment()
        self.udp_tunneling = udp_tunneling if udp_tunneling is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling()
        self.srgb = srgb if srgb is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb()
        self.node_segment = node_segment if node_segment is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment()
        self.flex_algorithm = flex_algorithm if flex_algorithm is not None else []
        self.use_flex_algorithm_metric_always = use_flex_algorithm_metric_always
        self.strict_asla_based_flex_algorithm = strict_asla_based_flex_algorithm
        self.new_capability_subtlv = new_capability_subtlv
        self.explicit_null = explicit_null
        self.mapping_server = mapping_server
        self.no_strict_spf = no_strict_spf
        self.no_binding_sid_leaking = no_binding_sid_leaking
        self.ldp_stitching = ldp_stitching
        self.srv6 = srv6
        self.sensor_based_stats = sensor_based_stats if sensor_based_stats is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats()
        self.traffic_statistics = traffic_statistics if traffic_statistics is not None else junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics()

    mut def create_srv6(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6()
        self.srv6 = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _adjacency_segment = self.adjacency_segment
        if _adjacency_segment is not None:
            children['adjacency-segment'] = _adjacency_segment.to_gdata()
        _udp_tunneling = self.udp_tunneling
        if _udp_tunneling is not None:
            children['udp-tunneling'] = _udp_tunneling.to_gdata()
        _srgb = self.srgb
        if _srgb is not None:
            children['srgb'] = _srgb.to_gdata()
        _node_segment = self.node_segment
        if _node_segment is not None:
            children['node-segment'] = _node_segment.to_gdata()
        _flex_algorithm = self.flex_algorithm
        if _flex_algorithm is not None:
            children['flex-algorithm'] = yang.gdata.LeafList('union', _flex_algorithm)
        _use_flex_algorithm_metric_always = self.use_flex_algorithm_metric_always
        if _use_flex_algorithm_metric_always is not None:
            children['use-flex-algorithm-metric-always'] = yang.gdata.Leaf('empty', _use_flex_algorithm_metric_always)
        _strict_asla_based_flex_algorithm = self.strict_asla_based_flex_algorithm
        if _strict_asla_based_flex_algorithm is not None:
            children['strict-asla-based-flex-algorithm'] = yang.gdata.Leaf('empty', _strict_asla_based_flex_algorithm)
        _new_capability_subtlv = self.new_capability_subtlv
        if _new_capability_subtlv is not None:
            children['new-capability-subtlv'] = yang.gdata.Leaf('empty', _new_capability_subtlv)
        _explicit_null = self.explicit_null
        if _explicit_null is not None:
            children['explicit-null'] = yang.gdata.Leaf('empty', _explicit_null)
        _mapping_server = self.mapping_server
        if _mapping_server is not None:
            children['mapping-server'] = yang.gdata.Leaf('string', _mapping_server)
        _no_strict_spf = self.no_strict_spf
        if _no_strict_spf is not None:
            children['no-strict-spf'] = yang.gdata.Leaf('empty', _no_strict_spf)
        _no_binding_sid_leaking = self.no_binding_sid_leaking
        if _no_binding_sid_leaking is not None:
            children['no-binding-sid-leaking'] = yang.gdata.Leaf('empty', _no_binding_sid_leaking)
        _ldp_stitching = self.ldp_stitching
        if _ldp_stitching is not None:
            children['ldp-stitching'] = yang.gdata.Leaf('empty', _ldp_stitching)
        _srv6 = self.srv6
        if _srv6 is not None:
            children['srv6'] = _srv6.to_gdata()
        _sensor_based_stats = self.sensor_based_stats
        if _sensor_based_stats is not None:
            children['sensor-based-stats'] = _sensor_based_stats.to_gdata()
        _traffic_statistics = self.traffic_statistics
        if _traffic_statistics is not None:
            children['traffic-statistics'] = _traffic_statistics.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__source_packet_routing:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__source_packet_routing(adjacency_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment.from_gdata(n.get_opt_cnt('adjacency-segment')), udp_tunneling=junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling.from_gdata(n.get_opt_cnt('udp-tunneling')), srgb=junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb.from_gdata(n.get_opt_cnt('srgb')), node_segment=junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment.from_gdata(n.get_opt_cnt('node-segment')), flex_algorithm=n.get_opt_values('flex-algorithm'), use_flex_algorithm_metric_always=n.get_opt_empty('use-flex-algorithm-metric-always'), strict_asla_based_flex_algorithm=n.get_opt_empty('strict-asla-based-flex-algorithm'), new_capability_subtlv=n.get_opt_empty('new-capability-subtlv'), explicit_null=n.get_opt_empty('explicit-null'), mapping_server=n.get_opt_str('mapping-server'), no_strict_spf=n.get_opt_empty('no-strict-spf'), no_binding_sid_leaking=n.get_opt_empty('no-binding-sid-leaking'), ldp_stitching=n.get_opt_empty('ldp-stitching'), srv6=junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6.from_gdata(n.get_opt_cnt('srv6')), sensor_based_stats=junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats.from_gdata(n.get_opt_cnt('sensor-based-stats')), traffic_statistics=junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics.from_gdata(n.get_opt_cnt('traffic-statistics')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/source-packet-routing')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__source_packet_routing()')
        leaves = []
        _adjacency_segment = self.adjacency_segment
        if _adjacency_segment is not None:
            res.extend(_adjacency_segment.prsrc('{self_name}.adjacency_segment', False).splitlines())
        _udp_tunneling = self.udp_tunneling
        if _udp_tunneling is not None:
            res.extend(_udp_tunneling.prsrc('{self_name}.udp_tunneling', False).splitlines())
        _srgb = self.srgb
        if _srgb is not None:
            res.extend(_srgb.prsrc('{self_name}.srgb', False).splitlines())
        _node_segment = self.node_segment
        if _node_segment is not None:
            res.extend(_node_segment.prsrc('{self_name}.node_segment', False).splitlines())
        _flex_algorithm = self.flex_algorithm
        if _flex_algorithm is not None:
            leaves.append('{self_name}.flex_algorithm = {repr(_flex_algorithm)}')
        _use_flex_algorithm_metric_always = self.use_flex_algorithm_metric_always
        if _use_flex_algorithm_metric_always is not None:
            leaves.append('{self_name}.use_flex_algorithm_metric_always = {repr(_use_flex_algorithm_metric_always)}')
        _strict_asla_based_flex_algorithm = self.strict_asla_based_flex_algorithm
        if _strict_asla_based_flex_algorithm is not None:
            leaves.append('{self_name}.strict_asla_based_flex_algorithm = {repr(_strict_asla_based_flex_algorithm)}')
        _new_capability_subtlv = self.new_capability_subtlv
        if _new_capability_subtlv is not None:
            leaves.append('{self_name}.new_capability_subtlv = {repr(_new_capability_subtlv)}')
        _explicit_null = self.explicit_null
        if _explicit_null is not None:
            leaves.append('{self_name}.explicit_null = {repr(_explicit_null)}')
        _mapping_server = self.mapping_server
        if _mapping_server is not None:
            leaves.append('{self_name}.mapping_server = {repr(_mapping_server)}')
        _no_strict_spf = self.no_strict_spf
        if _no_strict_spf is not None:
            leaves.append('{self_name}.no_strict_spf = {repr(_no_strict_spf)}')
        _no_binding_sid_leaking = self.no_binding_sid_leaking
        if _no_binding_sid_leaking is not None:
            leaves.append('{self_name}.no_binding_sid_leaking = {repr(_no_binding_sid_leaking)}')
        _ldp_stitching = self.ldp_stitching
        if _ldp_stitching is not None:
            leaves.append('{self_name}.ldp_stitching = {repr(_ldp_stitching)}')
        _srv6 = self.srv6
        if _srv6 is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing/srv6')
            res.append('srv6 = {self_name}.create_srv6()')
            res.extend(_srv6.prsrc('srv6', False).splitlines())
        _sensor_based_stats = self.sensor_based_stats
        if _sensor_based_stats is not None:
            res.extend(_sensor_based_stats.prsrc('{self_name}.sensor_based_stats', False).splitlines())
        _traffic_statistics = self.traffic_statistics
        if _traffic_statistics is not None:
            res.extend(_traffic_statistics.prsrc('{self_name}.traffic_statistics', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/source-packet-routing'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_adjacency_segment = yang.gdata.from_xml_opt_cnt(node, 'adjacency-segment')
    yang.gdata.maybe_add(children, 'adjacency-segment', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__adjacency_segment, child_adjacency_segment)
    child_udp_tunneling = yang.gdata.from_xml_opt_cnt(node, 'udp-tunneling')
    yang.gdata.maybe_add(children, 'udp-tunneling', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__udp_tunneling, child_udp_tunneling)
    child_srgb = yang.gdata.from_xml_opt_cnt(node, 'srgb')
    yang.gdata.maybe_add(children, 'srgb', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srgb, child_srgb)
    child_node_segment = yang.gdata.from_xml_opt_cnt(node, 'node-segment')
    yang.gdata.maybe_add(children, 'node-segment', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__node_segment, child_node_segment)
    child_flex_algorithm = yang.gdata.from_xml_opt_values(node, 'flex-algorithm')
    yang.gdata.maybe_add(children, 'flex-algorithm', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__flex_algorithm, child_flex_algorithm)
    child_use_flex_algorithm_metric_always = yang.gdata.from_xml_opt_empty(node, 'use-flex-algorithm-metric-always')
    yang.gdata.maybe_add(children, 'use-flex-algorithm-metric-always', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__use_flex_algorithm_metric_always, child_use_flex_algorithm_metric_always)
    child_strict_asla_based_flex_algorithm = yang.gdata.from_xml_opt_empty(node, 'strict-asla-based-flex-algorithm')
    yang.gdata.maybe_add(children, 'strict-asla-based-flex-algorithm', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__strict_asla_based_flex_algorithm, child_strict_asla_based_flex_algorithm)
    child_new_capability_subtlv = yang.gdata.from_xml_opt_empty(node, 'new-capability-subtlv')
    yang.gdata.maybe_add(children, 'new-capability-subtlv', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__new_capability_subtlv, child_new_capability_subtlv)
    child_explicit_null = yang.gdata.from_xml_opt_empty(node, 'explicit-null')
    yang.gdata.maybe_add(children, 'explicit-null', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__explicit_null, child_explicit_null)
    child_mapping_server = yang.gdata.from_xml_opt_str(node, 'mapping-server')
    yang.gdata.maybe_add(children, 'mapping-server', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__mapping_server, child_mapping_server)
    child_no_strict_spf = yang.gdata.from_xml_opt_empty(node, 'no-strict-spf')
    yang.gdata.maybe_add(children, 'no-strict-spf', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_strict_spf, child_no_strict_spf)
    child_no_binding_sid_leaking = yang.gdata.from_xml_opt_empty(node, 'no-binding-sid-leaking')
    yang.gdata.maybe_add(children, 'no-binding-sid-leaking', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__no_binding_sid_leaking, child_no_binding_sid_leaking)
    child_ldp_stitching = yang.gdata.from_xml_opt_empty(node, 'ldp-stitching')
    yang.gdata.maybe_add(children, 'ldp-stitching', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__ldp_stitching, child_ldp_stitching)
    child_srv6 = yang.gdata.from_xml_opt_cnt(node, 'srv6')
    yang.gdata.maybe_add(children, 'srv6', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__srv6, child_srv6)
    child_sensor_based_stats = yang.gdata.from_xml_opt_cnt(node, 'sensor-based-stats')
    yang.gdata.maybe_add(children, 'sensor-based-stats', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__sensor_based_stats, child_sensor_based_stats)
    child_traffic_statistics = yang.gdata.from_xml_opt_cnt(node, 'traffic-statistics')
    yang.gdata.maybe_add(children, 'traffic-statistics', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing__traffic_statistics, child_traffic_statistics)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_hello_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_csnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_psnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__wide_metrics_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    authentication_key: ?str
    authentication_type: ?str
    no_hello_authentication: ?bool
    no_csnp_authentication: ?bool
    no_psnp_authentication: ?bool
    wide_metrics_only: ?bool

    mut def __init__(self, name: value, disable: ?bool, authentication_key: ?str, authentication_type: ?str, no_hello_authentication: ?bool, no_csnp_authentication: ?bool, no_psnp_authentication: ?bool, wide_metrics_only: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.disable = disable
        self.authentication_key = authentication_key
        self.authentication_type = authentication_type
        self.no_hello_authentication = no_hello_authentication
        self.no_csnp_authentication = no_csnp_authentication
        self.no_psnp_authentication = no_psnp_authentication
        self.wide_metrics_only = wide_metrics_only

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _authentication_type = self.authentication_type
        if _authentication_type is not None:
            children['authentication-type'] = yang.gdata.Leaf('enumeration', _authentication_type)
        _no_hello_authentication = self.no_hello_authentication
        if _no_hello_authentication is not None:
            children['no-hello-authentication'] = yang.gdata.Leaf('empty', _no_hello_authentication)
        _no_csnp_authentication = self.no_csnp_authentication
        if _no_csnp_authentication is not None:
            children['no-csnp-authentication'] = yang.gdata.Leaf('empty', _no_csnp_authentication)
        _no_psnp_authentication = self.no_psnp_authentication
        if _no_psnp_authentication is not None:
            children['no-psnp-authentication'] = yang.gdata.Leaf('empty', _no_psnp_authentication)
        _wide_metrics_only = self.wide_metrics_only
        if _wide_metrics_only is not None:
            children['wide-metrics-only'] = yang.gdata.Leaf('empty', _wide_metrics_only)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__level_entry:
        return junos_conf_root__configuration__protocols__isis__level_entry(name=n.get_value('name'), disable=n.get_opt_empty('disable'), authentication_key=n.get_opt_str('authentication-key'), authentication_type=n.get_opt_str('authentication-type'), no_hello_authentication=n.get_opt_empty('no-hello-authentication'), no_csnp_authentication=n.get_opt_empty('no-csnp-authentication'), no_psnp_authentication=n.get_opt_empty('no-psnp-authentication'), wide_metrics_only=n.get_opt_empty('wide-metrics-only'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/level')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__level({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _authentication_type = self.authentication_type
        if _authentication_type is not None:
            leaves.append('{self_name}.authentication_type = {repr(_authentication_type)}')
        _no_hello_authentication = self.no_hello_authentication
        if _no_hello_authentication is not None:
            leaves.append('{self_name}.no_hello_authentication = {repr(_no_hello_authentication)}')
        _no_csnp_authentication = self.no_csnp_authentication
        if _no_csnp_authentication is not None:
            leaves.append('{self_name}.no_csnp_authentication = {repr(_no_csnp_authentication)}')
        _no_psnp_authentication = self.no_psnp_authentication
        if _no_psnp_authentication is not None:
            leaves.append('{self_name}.no_psnp_authentication = {repr(_no_psnp_authentication)}')
        _wide_metrics_only = self.wide_metrics_only
        if _wide_metrics_only is not None:
            leaves.append('{self_name}.wide_metrics_only = {repr(_wide_metrics_only)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__level_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_value(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__level__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__level__disable, child_disable)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_key, child_authentication_key)
    child_authentication_type = yang.gdata.from_xml_opt_str(node, 'authentication-type')
    yang.gdata.maybe_add(children, 'authentication-type', from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_type, child_authentication_type)
    child_no_hello_authentication = yang.gdata.from_xml_opt_empty(node, 'no-hello-authentication')
    yang.gdata.maybe_add(children, 'no-hello-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_hello_authentication, child_no_hello_authentication)
    child_no_csnp_authentication = yang.gdata.from_xml_opt_empty(node, 'no-csnp-authentication')
    yang.gdata.maybe_add(children, 'no-csnp-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_csnp_authentication, child_no_csnp_authentication)
    child_no_psnp_authentication = yang.gdata.from_xml_opt_empty(node, 'no-psnp-authentication')
    yang.gdata.maybe_add(children, 'no-psnp-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_psnp_authentication, child_no_psnp_authentication)
    child_wide_metrics_only = yang.gdata.from_xml_opt_empty(node, 'wide-metrics-only')
    yang.gdata.maybe_add(children, 'wide-metrics-only', from_xml_junos_conf_root__configuration__protocols__isis__level__wide_metrics_only, child_wide_metrics_only)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__lsp_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis(yang.adata.MNode):
    interface: junos_conf_root__configuration__protocols__isis__interface
    source_packet_routing: ?junos_conf_root__configuration__protocols__isis__source_packet_routing
    level: junos_conf_root__configuration__protocols__isis__level
    lsp_lifetime: ?value

    mut def __init__(self, interface: list[junos_conf_root__configuration__protocols__isis__interface_entry]=[], source_packet_routing: ?junos_conf_root__configuration__protocols__isis__source_packet_routing=None, level: list[junos_conf_root__configuration__protocols__isis__level_entry]=[], lsp_lifetime: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.interface = junos_conf_root__configuration__protocols__isis__interface(elements=interface)
        self.source_packet_routing = source_packet_routing
        self.level = junos_conf_root__configuration__protocols__isis__level(elements=level)
        self.lsp_lifetime = lsp_lifetime

    mut def create_source_packet_routing(self):
        res = junos_conf_root__configuration__protocols__isis__source_packet_routing()
        self.source_packet_routing = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _source_packet_routing = self.source_packet_routing
        if _source_packet_routing is not None:
            children['source-packet-routing'] = _source_packet_routing.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            children['lsp-lifetime'] = yang.gdata.Leaf('union', _lsp_lifetime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis(interface=junos_conf_root__configuration__protocols__isis__interface.from_gdata(n.get_opt_list('interface')), source_packet_routing=junos_conf_root__configuration__protocols__isis__source_packet_routing.from_gdata(n.get_opt_cnt('source-packet-routing')), level=junos_conf_root__configuration__protocols__isis__level.from_gdata(n.get_opt_list('level')), lsp_lifetime=n.get_opt_value('lsp-lifetime'))
        return junos_conf_root__configuration__protocols__isis()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis()')
        leaves = []
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _source_packet_routing = self.source_packet_routing
        if _source_packet_routing is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/source-packet-routing')
            res.append('source_packet_routing = {self_name}.create_source_packet_routing()')
            res.extend(_source_packet_routing.prsrc('source_packet_routing', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/level element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            leaves.append('{self_name}.lsp_lifetime = {repr(_lsp_lifetime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__isis__interface, child_interface)
    child_source_packet_routing = yang.gdata.from_xml_opt_cnt(node, 'source-packet-routing')
    yang.gdata.maybe_add(children, 'source-packet-routing', from_xml_junos_conf_root__configuration__protocols__isis__source_packet_routing, child_source_packet_routing)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_junos_conf_root__configuration__protocols__isis__level, child_level)
    child_lsp_lifetime = yang.gdata.from_xml_opt_value(node, 'lsp-lifetime')
    yang.gdata.maybe_add(children, 'lsp-lifetime', from_xml_junos_conf_root__configuration__protocols__isis__lsp_lifetime, child_lsp_lifetime)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__filename(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__replace(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__files(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_stamp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__world_readable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_world_readable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(yang.adata.MNode):
    filename: ?str
    replace: ?bool
    size: ?str
    files: ?value
    no_stamp: ?bool
    world_readable: ?bool
    no_world_readable: ?bool

    mut def __init__(self, filename: ?str, replace: ?bool, size: ?str, files: ?value, no_stamp: ?bool, world_readable: ?bool, no_world_readable: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.filename = filename
        self.replace = replace
        self.size = size
        self.files = files
        self.no_stamp = no_stamp
        self.world_readable = world_readable
        self.no_world_readable = no_world_readable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _filename = self.filename
        if _filename is not None:
            children['filename'] = yang.gdata.Leaf('string', _filename)
        _replace = self.replace
        if _replace is not None:
            children['replace'] = yang.gdata.Leaf('empty', _replace)
        _size = self.size
        if _size is not None:
            children['size'] = yang.gdata.Leaf('string', _size)
        _files = self.files
        if _files is not None:
            children['files'] = yang.gdata.Leaf('union', _files)
        _no_stamp = self.no_stamp
        if _no_stamp is not None:
            children['no-stamp'] = yang.gdata.Leaf('empty', _no_stamp)
        _world_readable = self.world_readable
        if _world_readable is not None:
            children['world-readable'] = yang.gdata.Leaf('empty', _world_readable)
        _no_world_readable = self.no_world_readable
        if _no_world_readable is not None:
            children['no-world-readable'] = yang.gdata.Leaf('empty', _no_world_readable)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics__file:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(filename=n.get_opt_str('filename'), replace=n.get_opt_empty('replace'), size=n.get_opt_str('size'), files=n.get_opt_value('files'), no_stamp=n.get_opt_empty('no-stamp'), world_readable=n.get_opt_empty('world-readable'), no_world_readable=n.get_opt_empty('no-world-readable'))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/traffic-statistics/file')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()')
        leaves = []
        _filename = self.filename
        if _filename is not None:
            leaves.append('{self_name}.filename = {repr(_filename)}')
        _replace = self.replace
        if _replace is not None:
            leaves.append('{self_name}.replace = {repr(_replace)}')
        _size = self.size
        if _size is not None:
            leaves.append('{self_name}.size = {repr(_size)}')
        _files = self.files
        if _files is not None:
            leaves.append('{self_name}.files = {repr(_files)}')
        _no_stamp = self.no_stamp
        if _no_stamp is not None:
            leaves.append('{self_name}.no_stamp = {repr(_no_stamp)}')
        _world_readable = self.world_readable
        if _world_readable is not None:
            leaves.append('{self_name}.world_readable = {repr(_world_readable)}')
        _no_world_readable = self.no_world_readable
        if _no_world_readable is not None:
            leaves.append('{self_name}.no_world_readable = {repr(_no_world_readable)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/traffic-statistics/file'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_filename = yang.gdata.from_xml_opt_str(node, 'filename')
    yang.gdata.maybe_add(children, 'filename', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__filename, child_filename)
    child_replace = yang.gdata.from_xml_opt_empty(node, 'replace')
    yang.gdata.maybe_add(children, 'replace', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__replace, child_replace)
    child_size = yang.gdata.from_xml_opt_str(node, 'size')
    yang.gdata.maybe_add(children, 'size', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__size, child_size)
    child_files = yang.gdata.from_xml_opt_value(node, 'files')
    yang.gdata.maybe_add(children, 'files', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__files, child_files)
    child_no_stamp = yang.gdata.from_xml_opt_empty(node, 'no-stamp')
    yang.gdata.maybe_add(children, 'no-stamp', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_stamp, child_no_stamp)
    child_world_readable = yang.gdata.from_xml_opt_empty(node, 'world-readable')
    yang.gdata.maybe_add(children, 'world-readable', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__world_readable, child_world_readable)
    child_no_world_readable = yang.gdata.from_xml_opt_empty(node, 'no-world-readable')
    yang.gdata.maybe_add(children, 'no-world-readable', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file__no_world_readable, child_no_world_readable)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__sensor_based_stats(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__no_penultimate_hop(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__ldp__traffic_statistics(yang.adata.MNode):
    file: junos_conf_root__configuration__protocols__ldp__traffic_statistics__file
    interval: ?value
    sensor_based_stats: ?bool
    no_penultimate_hop: ?bool

    mut def __init__(self, file: ?junos_conf_root__configuration__protocols__ldp__traffic_statistics__file=None, interval: ?value, sensor_based_stats: ?bool, no_penultimate_hop: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.file = file if file is not None else junos_conf_root__configuration__protocols__ldp__traffic_statistics__file()
        self.interval = interval
        self.sensor_based_stats = sensor_based_stats
        self.no_penultimate_hop = no_penultimate_hop

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _file = self.file
        if _file is not None:
            children['file'] = _file.to_gdata()
        _interval = self.interval
        if _interval is not None:
            children['interval'] = yang.gdata.Leaf('union', _interval)
        _sensor_based_stats = self.sensor_based_stats
        if _sensor_based_stats is not None:
            children['sensor-based-stats'] = yang.gdata.Leaf('empty', _sensor_based_stats)
        _no_penultimate_hop = self.no_penultimate_hop
        if _no_penultimate_hop is not None:
            children['no-penultimate-hop'] = yang.gdata.Leaf('empty', _no_penultimate_hop)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__traffic_statistics:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__traffic_statistics(file=junos_conf_root__configuration__protocols__ldp__traffic_statistics__file.from_gdata(n.get_opt_cnt('file')), interval=n.get_opt_value('interval'), sensor_based_stats=n.get_opt_empty('sensor-based-stats'), no_penultimate_hop=n.get_opt_empty('no-penultimate-hop'))
        return junos_conf_root__configuration__protocols__ldp__traffic_statistics()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/traffic-statistics')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__traffic_statistics()')
        leaves = []
        _file = self.file
        if _file is not None:
            res.extend(_file.prsrc('{self_name}.file', False).splitlines())
        _interval = self.interval
        if _interval is not None:
            leaves.append('{self_name}.interval = {repr(_interval)}')
        _sensor_based_stats = self.sensor_based_stats
        if _sensor_based_stats is not None:
            leaves.append('{self_name}.sensor_based_stats = {repr(_sensor_based_stats)}')
        _no_penultimate_hop = self.no_penultimate_hop
        if _no_penultimate_hop is not None:
            leaves.append('{self_name}.no_penultimate_hop = {repr(_no_penultimate_hop)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/traffic-statistics'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_file = yang.gdata.from_xml_opt_cnt(node, 'file')
    yang.gdata.maybe_add(children, 'file', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__file, child_file)
    child_interval = yang.gdata.from_xml_opt_value(node, 'interval')
    yang.gdata.maybe_add(children, 'interval', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__interval, child_interval)
    child_sensor_based_stats = yang.gdata.from_xml_opt_empty(node, 'sensor-based-stats')
    yang.gdata.maybe_add(children, 'sensor-based-stats', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__sensor_based_stats, child_sensor_based_stats)
    child_no_penultimate_hop = yang.gdata.from_xml_opt_empty(node, 'no-penultimate-hop')
    yang.gdata.maybe_add(children, 'no-penultimate-hop', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics__no_penultimate_hop, child_no_penultimate_hop)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__ldp__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__transport_address:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__transport_address(router_id=n.get_opt_empty('router-id'), interface=n.get_opt_empty('interface'), address=n.get_opt_str('address'))
        return junos_conf_root__configuration__protocols__ldp__transport_address()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/transport-address')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__transport_address()')
        leaves = []
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _address = self.address
        if _address is not None:
            leaves.append('{self_name}.address = {repr(_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/transport-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router_id = yang.gdata.from_xml_opt_empty(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__router_id, child_router_id)
    child_interface = yang.gdata.from_xml_opt_empty(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__interface, child_interface)
    child_address = yang.gdata.from_xml_opt_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__hello_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection__dynamic_rsvp_lsp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__ldp__interface__link_protection(yang.adata.MNode):
    disable: ?bool
    dynamic_rsvp_lsp: ?bool

    mut def __init__(self, disable: ?bool, dynamic_rsvp_lsp: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.disable = disable
        self.dynamic_rsvp_lsp = dynamic_rsvp_lsp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _dynamic_rsvp_lsp = self.dynamic_rsvp_lsp
        if _dynamic_rsvp_lsp is not None:
            children['dynamic-rsvp-lsp'] = yang.gdata.Leaf('empty', _dynamic_rsvp_lsp)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__ldp__interface__link_protection:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__interface__link_protection(disable=n.get_opt_empty('disable'), dynamic_rsvp_lsp=n.get_opt_empty('dynamic-rsvp-lsp'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/interface/link-protection')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__interface__link_protection()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _dynamic_rsvp_lsp = self.dynamic_rsvp_lsp
        if _dynamic_rsvp_lsp is not None:
            leaves.append('{self_name}.dynamic_rsvp_lsp = {repr(_dynamic_rsvp_lsp)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/interface/link-protection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection__disable, child_disable)
    child_dynamic_rsvp_lsp = yang.gdata.from_xml_opt_empty(node, 'dynamic-rsvp-lsp')
    yang.gdata.maybe_add(children, 'dynamic-rsvp-lsp', from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection__dynamic_rsvp_lsp, child_dynamic_rsvp_lsp)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__ldp__interface__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface__transport_address:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__interface__transport_address(router_id=n.get_opt_empty('router-id'), interface=n.get_opt_empty('interface'), address=n.get_opt_str('address'))
        return junos_conf_root__configuration__protocols__ldp__interface__transport_address()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/interface/transport-address')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__interface__transport_address()')
        leaves = []
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _address = self.address
        if _address is not None:
            leaves.append('{self_name}.address = {repr(_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/interface/transport-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router_id = yang.gdata.from_xml_opt_empty(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__router_id, child_router_id)
    child_interface = yang.gdata.from_xml_opt_empty(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__interface, child_interface)
    child_address = yang.gdata.from_xml_opt_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__allow_subnet_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__no_allow_subnet_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__ldp__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool
    hello_interval: ?value
    hold_time: ?value
    link_protection: ?junos_conf_root__configuration__protocols__ldp__interface__link_protection
    transport_address: junos_conf_root__configuration__protocols__ldp__interface__transport_address
    allow_subnet_mismatch: ?bool
    no_allow_subnet_mismatch: ?bool

    mut def __init__(self, name: str, disable: ?bool, hello_interval: ?value, hold_time: ?value, link_protection: ?junos_conf_root__configuration__protocols__ldp__interface__link_protection=None, transport_address: ?junos_conf_root__configuration__protocols__ldp__interface__transport_address=None, allow_subnet_mismatch: ?bool, no_allow_subnet_mismatch: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.disable = disable
        self.hello_interval = hello_interval
        self.hold_time = hold_time
        self.link_protection = link_protection
        self.transport_address = transport_address if transport_address is not None else junos_conf_root__configuration__protocols__ldp__interface__transport_address()
        self.allow_subnet_mismatch = allow_subnet_mismatch
        self.no_allow_subnet_mismatch = no_allow_subnet_mismatch

    mut def create_link_protection(self):
        res = junos_conf_root__configuration__protocols__ldp__interface__link_protection()
        self.link_protection = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            children['hello-interval'] = yang.gdata.Leaf('union', _hello_interval)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        _link_protection = self.link_protection
        if _link_protection is not None:
            children['link-protection'] = _link_protection.to_gdata()
        _transport_address = self.transport_address
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        _allow_subnet_mismatch = self.allow_subnet_mismatch
        if _allow_subnet_mismatch is not None:
            children['allow-subnet-mismatch'] = yang.gdata.Leaf('empty', _allow_subnet_mismatch)
        _no_allow_subnet_mismatch = self.no_allow_subnet_mismatch
        if _no_allow_subnet_mismatch is not None:
            children['no-allow-subnet-mismatch'] = yang.gdata.Leaf('empty', _no_allow_subnet_mismatch)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface_entry:
        return junos_conf_root__configuration__protocols__ldp__interface_entry(name=n.get_str('name'), disable=n.get_opt_empty('disable'), hello_interval=n.get_opt_value('hello-interval'), hold_time=n.get_opt_value('hold-time'), link_protection=junos_conf_root__configuration__protocols__ldp__interface__link_protection.from_gdata(n.get_opt_cnt('link-protection')), transport_address=junos_conf_root__configuration__protocols__ldp__interface__transport_address.from_gdata(n.get_opt_cnt('transport-address')), allow_subnet_mismatch=n.get_opt_empty('allow-subnet-mismatch'), no_allow_subnet_mismatch=n.get_opt_empty('no-allow-subnet-mismatch'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__interface({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            leaves.append('{self_name}.hello_interval = {repr(_hello_interval)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _link_protection = self.link_protection
        if _link_protection is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/ldp/interface/link-protection')
            res.append('link_protection = {self_name}.create_link_protection()')
            res.extend(_link_protection.prsrc('link_protection', False).splitlines())
        _transport_address = self.transport_address
        if _transport_address is not None:
            res.extend(_transport_address.prsrc('{self_name}.transport_address', False).splitlines())
        _allow_subnet_mismatch = self.allow_subnet_mismatch
        if _allow_subnet_mismatch is not None:
            leaves.append('{self_name}.allow_subnet_mismatch = {repr(_allow_subnet_mismatch)}')
        _no_allow_subnet_mismatch = self.no_allow_subnet_mismatch
        if _no_allow_subnet_mismatch is not None:
            leaves.append('{self_name}.no_allow_subnet_mismatch = {repr(_no_allow_subnet_mismatch)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__ldp__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__ldp__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__ldp__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__ldp__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__ldp__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__ldp__interface__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__ldp__interface__disable, child_disable)
    child_hello_interval = yang.gdata.from_xml_opt_value(node, 'hello-interval')
    yang.gdata.maybe_add(children, 'hello-interval', from_xml_junos_conf_root__configuration__protocols__ldp__interface__hello_interval, child_hello_interval)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__ldp__interface__hold_time, child_hold_time)
    child_link_protection = yang.gdata.from_xml_opt_cnt(node, 'link-protection')
    yang.gdata.maybe_add(children, 'link-protection', from_xml_junos_conf_root__configuration__protocols__ldp__interface__link_protection, child_link_protection)
    child_transport_address = yang.gdata.from_xml_opt_cnt(node, 'transport-address')
    yang.gdata.maybe_add(children, 'transport-address', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address, child_transport_address)
    child_allow_subnet_mismatch = yang.gdata.from_xml_opt_empty(node, 'allow-subnet-mismatch')
    yang.gdata.maybe_add(children, 'allow-subnet-mismatch', from_xml_junos_conf_root__configuration__protocols__ldp__interface__allow_subnet_mismatch, child_allow_subnet_mismatch)
    child_no_allow_subnet_mismatch = yang.gdata.from_xml_opt_empty(node, 'no-allow-subnet-mismatch')
    yang.gdata.maybe_add(children, 'no-allow-subnet-mismatch', from_xml_junos_conf_root__configuration__protocols__ldp__interface__no_allow_subnet_mismatch, child_no_allow_subnet_mismatch)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__ldp__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__ldp(yang.adata.MNode):
    traffic_statistics: junos_conf_root__configuration__protocols__ldp__traffic_statistics
    preference: ?value
    transport_address: junos_conf_root__configuration__protocols__ldp__transport_address
    interface: junos_conf_root__configuration__protocols__ldp__interface

    mut def __init__(self, traffic_statistics: ?junos_conf_root__configuration__protocols__ldp__traffic_statistics=None, preference: ?value, transport_address: ?junos_conf_root__configuration__protocols__ldp__transport_address=None, interface: list[junos_conf_root__configuration__protocols__ldp__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.traffic_statistics = traffic_statistics if traffic_statistics is not None else junos_conf_root__configuration__protocols__ldp__traffic_statistics()
        self.preference = preference
        self.transport_address = transport_address if transport_address is not None else junos_conf_root__configuration__protocols__ldp__transport_address()
        self.interface = junos_conf_root__configuration__protocols__ldp__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _traffic_statistics = self.traffic_statistics
        if _traffic_statistics is not None:
            children['traffic-statistics'] = _traffic_statistics.to_gdata()
        _preference = self.preference
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('union', _preference)
        _transport_address = self.transport_address
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp(traffic_statistics=junos_conf_root__configuration__protocols__ldp__traffic_statistics.from_gdata(n.get_opt_cnt('traffic-statistics')), preference=n.get_opt_value('preference'), transport_address=junos_conf_root__configuration__protocols__ldp__transport_address.from_gdata(n.get_opt_cnt('transport-address')), interface=junos_conf_root__configuration__protocols__ldp__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__protocols__ldp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp()')
        leaves = []
        _traffic_statistics = self.traffic_statistics
        if _traffic_statistics is not None:
            res.extend(_traffic_statistics.prsrc('{self_name}.traffic_statistics', False).splitlines())
        _preference = self.preference
        if _preference is not None:
            leaves.append('{self_name}.preference = {repr(_preference)}')
        _transport_address = self.transport_address
        if _transport_address is not None:
            res.extend(_transport_address.prsrc('{self_name}.transport_address', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/ldp/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_traffic_statistics = yang.gdata.from_xml_opt_cnt(node, 'traffic-statistics')
    yang.gdata.maybe_add(children, 'traffic-statistics', from_xml_junos_conf_root__configuration__protocols__ldp__traffic_statistics, child_traffic_statistics)
    child_preference = yang.gdata.from_xml_opt_value(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_junos_conf_root__configuration__protocols__ldp__preference, child_preference)
    child_transport_address = yang.gdata.from_xml_opt_cnt(node, 'transport-address')
    yang.gdata.maybe_add(children, 'transport-address', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address, child_transport_address)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__no_propagate_ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__ipv6_tunneling(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__srlg(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__always_mark_connection_protection_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__switch_away_lsps(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__admin_group(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__admin_group_extended(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__static__protection_revert_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__mpls__interface__static(yang.adata.MNode):
    protection_revert_time: ?value

    mut def __init__(self, protection_revert_time: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.protection_revert_time = protection_revert_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _protection_revert_time = self.protection_revert_time
        if _protection_revert_time is not None:
            children['protection-revert-time'] = yang.gdata.Leaf('union', _protection_revert_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls__interface__static:
        if n is not None:
            return junos_conf_root__configuration__protocols__mpls__interface__static(protection_revert_time=n.get_opt_value('protection-revert-time'))
        return junos_conf_root__configuration__protocols__mpls__interface__static()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/mpls/interface/static')
            res.append('{self_name} = junos_conf_root__configuration__protocols__mpls__interface__static()')
        leaves = []
        _protection_revert_time = self.protection_revert_time
        if _protection_revert_time is not None:
            leaves.append('{self_name}.protection_revert_time = {repr(_protection_revert_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/mpls/interface/static'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__static(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_protection_revert_time = yang.gdata.from_xml_opt_value(node, 'protection-revert-time')
    yang.gdata.maybe_add(children, 'protection-revert-time', from_xml_junos_conf_root__configuration__protocols__mpls__interface__static__protection_revert_time, child_protection_revert_time)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__mpls__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool
    srlg: list[str]
    always_mark_connection_protection_tlv: ?bool
    switch_away_lsps: ?bool
    admin_group: list[str]
    admin_group_extended: list[str]
    static: junos_conf_root__configuration__protocols__mpls__interface__static

    mut def __init__(self, name: str, disable: ?bool, srlg: ?list[str]=None, always_mark_connection_protection_tlv: ?bool, switch_away_lsps: ?bool, admin_group: ?list[str]=None, admin_group_extended: ?list[str]=None, static: ?junos_conf_root__configuration__protocols__mpls__interface__static=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.name = name
        self.disable = disable
        self.srlg = srlg if srlg is not None else []
        self.always_mark_connection_protection_tlv = always_mark_connection_protection_tlv
        self.switch_away_lsps = switch_away_lsps
        self.admin_group = admin_group if admin_group is not None else []
        self.admin_group_extended = admin_group_extended if admin_group_extended is not None else []
        self.static = static if static is not None else junos_conf_root__configuration__protocols__mpls__interface__static()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _srlg = self.srlg
        if _srlg is not None:
            children['srlg'] = yang.gdata.LeafList('string', _srlg, user_order=True)
        _always_mark_connection_protection_tlv = self.always_mark_connection_protection_tlv
        if _always_mark_connection_protection_tlv is not None:
            children['always-mark-connection-protection-tlv'] = yang.gdata.Leaf('empty', _always_mark_connection_protection_tlv)
        _switch_away_lsps = self.switch_away_lsps
        if _switch_away_lsps is not None:
            children['switch-away-lsps'] = yang.gdata.Leaf('empty', _switch_away_lsps)
        _admin_group = self.admin_group
        if _admin_group is not None:
            children['admin-group'] = yang.gdata.LeafList('string', _admin_group, user_order=True)
        _admin_group_extended = self.admin_group_extended
        if _admin_group_extended is not None:
            children['admin-group-extended'] = yang.gdata.LeafList('string', _admin_group_extended, user_order=True)
        _static = self.static
        if _static is not None:
            children['static'] = _static.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls__interface_entry:
        return junos_conf_root__configuration__protocols__mpls__interface_entry(name=n.get_str('name'), disable=n.get_opt_empty('disable'), srlg=n.get_opt_strs('srlg'), always_mark_connection_protection_tlv=n.get_opt_empty('always-mark-connection-protection-tlv'), switch_away_lsps=n.get_opt_empty('switch-away-lsps'), admin_group=n.get_opt_strs('admin-group'), admin_group_extended=n.get_opt_strs('admin-group-extended'), static=junos_conf_root__configuration__protocols__mpls__interface__static.from_gdata(n.get_opt_cnt('static')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/mpls/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__mpls__interface({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _srlg = self.srlg
        if _srlg is not None:
            leaves.append('{self_name}.srlg = {repr(_srlg)}')
        _always_mark_connection_protection_tlv = self.always_mark_connection_protection_tlv
        if _always_mark_connection_protection_tlv is not None:
            leaves.append('{self_name}.always_mark_connection_protection_tlv = {repr(_always_mark_connection_protection_tlv)}')
        _switch_away_lsps = self.switch_away_lsps
        if _switch_away_lsps is not None:
            leaves.append('{self_name}.switch_away_lsps = {repr(_switch_away_lsps)}')
        _admin_group = self.admin_group
        if _admin_group is not None:
            leaves.append('{self_name}.admin_group = {repr(_admin_group)}')
        _admin_group_extended = self.admin_group_extended
        if _admin_group_extended is not None:
            leaves.append('{self_name}.admin_group_extended = {repr(_admin_group_extended)}')
        _static = self.static
        if _static is not None:
            res.extend(_static.prsrc('{self_name}.static', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/mpls/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__mpls__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__mpls__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__mpls__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__mpls__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__mpls__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__mpls__interface__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__mpls__interface__disable, child_disable)
    child_srlg = yang.gdata.from_xml_opt_strs(node, 'srlg')
    yang.gdata.maybe_add(children, 'srlg', from_xml_junos_conf_root__configuration__protocols__mpls__interface__srlg, child_srlg)
    child_always_mark_connection_protection_tlv = yang.gdata.from_xml_opt_empty(node, 'always-mark-connection-protection-tlv')
    yang.gdata.maybe_add(children, 'always-mark-connection-protection-tlv', from_xml_junos_conf_root__configuration__protocols__mpls__interface__always_mark_connection_protection_tlv, child_always_mark_connection_protection_tlv)
    child_switch_away_lsps = yang.gdata.from_xml_opt_empty(node, 'switch-away-lsps')
    yang.gdata.maybe_add(children, 'switch-away-lsps', from_xml_junos_conf_root__configuration__protocols__mpls__interface__switch_away_lsps, child_switch_away_lsps)
    child_admin_group = yang.gdata.from_xml_opt_strs(node, 'admin-group')
    yang.gdata.maybe_add(children, 'admin-group', from_xml_junos_conf_root__configuration__protocols__mpls__interface__admin_group, child_admin_group)
    child_admin_group_extended = yang.gdata.from_xml_opt_strs(node, 'admin-group-extended')
    yang.gdata.maybe_add(children, 'admin-group-extended', from_xml_junos_conf_root__configuration__protocols__mpls__interface__admin_group_extended, child_admin_group_extended)
    child_static = yang.gdata.from_xml_opt_cnt(node, 'static')
    yang.gdata.maybe_add(children, 'static', from_xml_junos_conf_root__configuration__protocols__mpls__interface__static, child_static)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__mpls__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__mpls(yang.adata.MNode):
    no_propagate_ttl: ?bool
    ipv6_tunneling: ?bool
    interface: junos_conf_root__configuration__protocols__mpls__interface

    mut def __init__(self, no_propagate_ttl: ?bool, ipv6_tunneling: ?bool, interface: list[junos_conf_root__configuration__protocols__mpls__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.no_propagate_ttl = no_propagate_ttl
        self.ipv6_tunneling = ipv6_tunneling
        self.interface = junos_conf_root__configuration__protocols__mpls__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_propagate_ttl = self.no_propagate_ttl
        if _no_propagate_ttl is not None:
            children['no-propagate-ttl'] = yang.gdata.Leaf('empty', _no_propagate_ttl)
        _ipv6_tunneling = self.ipv6_tunneling
        if _ipv6_tunneling is not None:
            children['ipv6-tunneling'] = yang.gdata.Leaf('empty', _ipv6_tunneling)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls:
        if n is not None:
            return junos_conf_root__configuration__protocols__mpls(no_propagate_ttl=n.get_opt_empty('no-propagate-ttl'), ipv6_tunneling=n.get_opt_empty('ipv6-tunneling'), interface=junos_conf_root__configuration__protocols__mpls__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__protocols__mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/mpls')
            res.append('{self_name} = junos_conf_root__configuration__protocols__mpls()')
        leaves = []
        _no_propagate_ttl = self.no_propagate_ttl
        if _no_propagate_ttl is not None:
            leaves.append('{self_name}.no_propagate_ttl = {repr(_no_propagate_ttl)}')
        _ipv6_tunneling = self.ipv6_tunneling
        if _ipv6_tunneling is not None:
            leaves.append('{self_name}.ipv6_tunneling = {repr(_ipv6_tunneling)}')
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/mpls/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_no_propagate_ttl = yang.gdata.from_xml_opt_empty(node, 'no-propagate-ttl')
    yang.gdata.maybe_add(children, 'no-propagate-ttl', from_xml_junos_conf_root__configuration__protocols__mpls__no_propagate_ttl, child_no_propagate_ttl)
    child_ipv6_tunneling = yang.gdata.from_xml_opt_empty(node, 'ipv6-tunneling')
    yang.gdata.maybe_add(children, 'ipv6-tunneling', from_xml_junos_conf_root__configuration__protocols__mpls__ipv6_tunneling, child_ipv6_tunneling)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__mpls__interface, child_interface)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__protocols__bgp
    isis: junos_conf_root__configuration__protocols__isis
    ldp: junos_conf_root__configuration__protocols__ldp
    mpls: junos_conf_root__configuration__protocols__mpls

    mut def __init__(self, bgp: ?junos_conf_root__configuration__protocols__bgp=None, isis: ?junos_conf_root__configuration__protocols__isis=None, ldp: ?junos_conf_root__configuration__protocols__ldp=None, mpls: ?junos_conf_root__configuration__protocols__mpls=None):
        self._ns = 'http://yang.juniper.net/junos/conf/protocols'
        self.bgp = bgp if bgp is not None else junos_conf_root__configuration__protocols__bgp()
        self.isis = isis if isis is not None else junos_conf_root__configuration__protocols__isis()
        self.ldp = ldp if ldp is not None else junos_conf_root__configuration__protocols__ldp()
        self.mpls = mpls if mpls is not None else junos_conf_root__configuration__protocols__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        _ldp = self.ldp
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/protocols', module='junos-conf-protocols')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols:
        if n is not None:
            return junos_conf_root__configuration__protocols(bgp=junos_conf_root__configuration__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), isis=junos_conf_root__configuration__protocols__isis.from_gdata(n.get_opt_cnt('isis')), ldp=junos_conf_root__configuration__protocols__ldp.from_gdata(n.get_opt_cnt('ldp')), mpls=junos_conf_root__configuration__protocols__mpls.from_gdata(n.get_opt_cnt('mpls')))
        return junos_conf_root__configuration__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols')
            res.append('{self_name} = junos_conf_root__configuration__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.extend(_bgp.prsrc('{self_name}.bgp', False).splitlines())
        _isis = self.isis
        if _isis is not None:
            res.extend(_isis.prsrc('{self_name}.isis', False).splitlines())
        _ldp = self.ldp
        if _ldp is not None:
            res.extend(_ldp.prsrc('{self_name}.ldp', False).splitlines())
        _mpls = self.mpls
        if _mpls is not None:
            res.extend(_mpls.prsrc('{self_name}.mpls', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_junos_conf_root__configuration__protocols__bgp, child_bgp)
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_junos_conf_root__configuration__protocols__isis, child_isis)
    child_ldp = yang.gdata.from_xml_opt_cnt(node, 'ldp')
    yang.gdata.maybe_add(children, 'ldp', from_xml_junos_conf_root__configuration__protocols__ldp, child_ldp)
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_junos_conf_root__configuration__protocols__mpls, child_mpls)
    return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/protocols', module='junos-conf-protocols')

class junos_conf_root__configuration(yang.adata.MNode):
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__system
    interfaces: junos_conf_root__configuration__interfaces
    routing_instances: junos_conf_root__configuration__routing_instances
    groups: junos_conf_root__configuration__groups
    routing_options: junos_conf_root__configuration__routing_options
    protocols: junos_conf_root__configuration__protocols

    mut def __init__(self, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__system=None, interfaces: ?junos_conf_root__configuration__interfaces=None, routing_instances: ?junos_conf_root__configuration__routing_instances=None, groups: list[junos_conf_root__configuration__groups_entry]=[], routing_options: ?junos_conf_root__configuration__routing_options=None, protocols: ?junos_conf_root__configuration__protocols=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rcsid = rcsid
        self.version = version
        self.system = system if system is not None else junos_conf_root__configuration__system()
        self.interfaces = interfaces if interfaces is not None else junos_conf_root__configuration__interfaces()
        self.routing_instances = routing_instances if routing_instances is not None else junos_conf_root__configuration__routing_instances()
        self.groups = junos_conf_root__configuration__groups(elements=groups)
        self.routing_options = routing_options if routing_options is not None else junos_conf_root__configuration__routing_options()
        self.protocols = protocols if protocols is not None else junos_conf_root__configuration__protocols()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rcsid = self.rcsid
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        _version = self.version
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        _groups = self.groups
        if _groups is not None:
            children['groups'] = _groups.to_gdata()
        _routing_options = self.routing_options
        if _routing_options is not None:
            children['routing-options'] = _routing_options.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root', module='junos-conf-root')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration:
        if n is not None:
            return junos_conf_root__configuration(rcsid=n.get_opt_str('rcsid'), version=n.get_opt_str('version'), system=junos_conf_root__configuration__system.from_gdata(n.get_opt_cnt('system')), interfaces=junos_conf_root__configuration__interfaces.from_gdata(n.get_opt_cnt('interfaces')), routing_instances=junos_conf_root__configuration__routing_instances.from_gdata(n.get_opt_cnt('routing-instances')), groups=junos_conf_root__configuration__groups.from_gdata(n.get_opt_list('groups')), routing_options=junos_conf_root__configuration__routing_options.from_gdata(n.get_opt_cnt('routing-options')), protocols=junos_conf_root__configuration__protocols.from_gdata(n.get_opt_cnt('protocols')))
        return junos_conf_root__configuration()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration')
            res.append('{self_name} = junos_conf_root__configuration()')
        leaves = []
        _rcsid = self.rcsid
        if _rcsid is not None:
            leaves.append('{self_name}.rcsid = {repr(_rcsid)}')
        _version = self.version
        if _version is not None:
            leaves.append('{self_name}.version = {repr(_version)}')
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _interfaces = self.interfaces
        if _interfaces is not None:
            res.extend(_interfaces.prsrc('{self_name}.interfaces', False).splitlines())
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            res.extend(_routing_instances.prsrc('{self_name}.routing_instances', False).splitlines())
        _groups = self.groups
        for _element in _groups.elements:
            res.append('')
            res.append("# List /configuration/groups element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'groups_element = {self_name}.groups.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('groups_element', False, list_element=True).splitlines())
        _routing_options = self.routing_options
        if _routing_options is not None:
            res.extend(_routing_options.prsrc('{self_name}.routing_options', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rcsid = yang.gdata.from_xml_opt_str(node, 'rcsid')
    yang.gdata.maybe_add(children, 'rcsid', from_xml_junos_conf_root__configuration__rcsid, child_rcsid)
    child_version = yang.gdata.from_xml_opt_str(node, 'version')
    yang.gdata.maybe_add(children, 'version', from_xml_junos_conf_root__configuration__version, child_version)
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system')
    yang.gdata.maybe_add(children, 'system', from_xml_junos_conf_root__configuration__system, child_system)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_junos_conf_root__configuration__interfaces, child_interfaces)
    child_routing_instances = yang.gdata.from_xml_opt_cnt(node, 'routing-instances')
    yang.gdata.maybe_add(children, 'routing-instances', from_xml_junos_conf_root__configuration__routing_instances, child_routing_instances)
    child_groups = yang.gdata.from_xml_opt_list(node, 'groups')
    yang.gdata.maybe_add(children, 'groups', from_xml_junos_conf_root__configuration__groups, child_groups)
    child_routing_options = yang.gdata.from_xml_opt_cnt(node, 'routing-options')
    yang.gdata.maybe_add(children, 'routing-options', from_xml_junos_conf_root__configuration__routing_options, child_routing_options)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols', 'http://yang.juniper.net/junos/conf/protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_junos_conf_root__configuration__protocols, child_protocols)
    return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root', module='junos-conf-root')

class root(yang.adata.MNode):
    configuration: junos_conf_root__configuration

    mut def __init__(self, configuration: ?junos_conf_root__configuration=None):
        self._ns = ''
        self.configuration = configuration if configuration is not None else junos_conf_root__configuration()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _configuration = self.configuration
        if _configuration is not None:
            children['configuration'] = _configuration.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(configuration=junos_conf_root__configuration.from_gdata(n.get_opt_cnt('configuration')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _configuration = self.configuration
        if _configuration is not None:
            res.extend(_configuration.prsrc('{self_name}.configuration', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_configuration = yang.gdata.from_xml_opt_cnt(node, 'configuration', 'http://yang.juniper.net/junos/conf/root')
    yang.gdata.maybe_add(children, 'configuration', from_xml_junos_conf_root__configuration, child_configuration)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://yang.juniper.net/junos/conf/protocols',
    'http://yang.juniper.net/junos/conf/root',
}
