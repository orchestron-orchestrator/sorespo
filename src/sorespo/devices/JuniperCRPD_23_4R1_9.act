import base64
import json
import xml
import yang.adata
import yang.gdata
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


mut def from_xml_junos_conf_root__configuration__rcsid(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__version(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__system__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__system__services__netconf__rfc_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__system__services__netconf__yang_compliant(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__system__services__netconf(yang.adata.MNode):
    rfc_compliant: ?bool
    yang_compliant: ?bool

    mut def __init__(self, rfc_compliant: ?bool, yang_compliant: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rfc_compliant = rfc_compliant
        self.yang_compliant = yang_compliant

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            children['rfc-compliant'] = yang.gdata.Leaf('empty', _rfc_compliant)
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            children['yang-compliant'] = yang.gdata.Leaf('empty', _yang_compliant)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system__services__netconf:
        if n is not None:
            return junos_conf_root__configuration__system__services__netconf(rfc_compliant=n.get_opt_empty('rfc-compliant'), yang_compliant=n.get_opt_empty('yang-compliant'))
        return junos_conf_root__configuration__system__services__netconf()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system/services/netconf')
            res.append('{self_name} = junos_conf_root__configuration__system__services__netconf()')
        leaves = []
        _rfc_compliant = self.rfc_compliant
        if _rfc_compliant is not None:
            leaves.append('{self_name}.rfc_compliant = {repr(_rfc_compliant)}')
        _yang_compliant = self.yang_compliant
        if _yang_compliant is not None:
            leaves.append('{self_name}.yang_compliant = {repr(_yang_compliant)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system/services/netconf'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system__services__netconf(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rfc_compliant = yang.gdata.from_xml_opt_empty(node, 'rfc-compliant')
    yang.gdata.maybe_add(children, 'rfc-compliant', from_xml_junos_conf_root__configuration__system__services__netconf__rfc_compliant, child_rfc_compliant)
    child_yang_compliant = yang.gdata.from_xml_opt_empty(node, 'yang-compliant')
    yang.gdata.maybe_add(children, 'yang-compliant', from_xml_junos_conf_root__configuration__system__services__netconf__yang_compliant, child_yang_compliant)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__system__services(yang.adata.MNode):
    netconf: junos_conf_root__configuration__system__services__netconf

    mut def __init__(self, netconf: ?junos_conf_root__configuration__system__services__netconf=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.netconf = netconf if netconf is not None else junos_conf_root__configuration__system__services__netconf()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _netconf = self.netconf
        if _netconf is not None:
            children['netconf'] = _netconf.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__system__services:
        if n is not None:
            return junos_conf_root__configuration__system__services(netconf=junos_conf_root__configuration__system__services__netconf.from_gdata(n.get_opt_cnt('netconf')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system/services')
            res.append('{self_name} = junos_conf_root__configuration__system__services()')
        leaves = []
        _netconf = self.netconf
        if _netconf is not None:
            res.extend(_netconf.prsrc('{self_name}.netconf', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system/services'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system__services(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_netconf = yang.gdata.from_xml_opt_cnt(node, 'netconf')
    yang.gdata.maybe_add(children, 'netconf', from_xml_junos_conf_root__configuration__system__services__netconf, child_netconf)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__system(yang.adata.MNode):
    host_name: ?str
    services: ?junos_conf_root__configuration__system__services

    mut def __init__(self, host_name: ?str, services: ?junos_conf_root__configuration__system__services=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.host_name = host_name
        self.services = services

    mut def create_services(self):
        res = junos_conf_root__configuration__system__services()
        self.services = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        _services = self.services
        if _services is not None:
            children['services'] = _services.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__system:
        if n is not None:
            return junos_conf_root__configuration__system(host_name=n.get_opt_str('host-name'), services=junos_conf_root__configuration__system__services.from_gdata(n.get_opt_cnt('services')))
        return junos_conf_root__configuration__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/system')
            res.append('{self_name} = junos_conf_root__configuration__system()')
        leaves = []
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        _services = self.services
        if _services is not None:
            res.append('')
            res.append('# P-container: /configuration/system/services')
            res.append('services = {self_name}.create_services()')
            res.extend(_services.prsrc('services', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_junos_conf_root__configuration__system__host_name, child_host_name)
    child_services = yang.gdata.from_xml_opt_cnt(node, 'services')
    yang.gdata.maybe_add(children, 'services', from_xml_junos_conf_root__configuration__system__services, child_services)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__native_vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__alias(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__encapsulation(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/inet/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet6/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__inet6(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__inet6(address=junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/inet6')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__inet6()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/inet6/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/inet6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6__address, child_address)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry:
        return junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/iso/address')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/iso/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'address'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__interfaces__interface__unit__family__iso(yang.adata.MNode):
    address: junos_conf_root__configuration__interfaces__interface__unit__family__iso__address

    mut def __init__(self, address: list[junos_conf_root__configuration__interfaces__interface__unit__family__iso__address_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.address = junos_conf_root__configuration__interfaces__interface__unit__family__iso__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__interfaces__interface__unit__family__iso:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family__iso(address=junos_conf_root__configuration__interfaces__interface__unit__family__iso__address.from_gdata(n.get_opt_list('address')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family/iso')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family__iso()')
        leaves = []
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit/family/iso/address element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family/iso'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso__address, child_address)
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__interfaces__interface__unit__family(yang.adata.MNode):
    inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet
    inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6
    iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso

    mut def __init__(self, inet: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet=None, inet6: ?junos_conf_root__configuration__interfaces__interface__unit__family__inet6=None, iso: ?junos_conf_root__configuration__interfaces__interface__unit__family__iso=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.inet = inet
        self.inet6 = inet6
        self.iso = iso

    mut def create_inet(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet()
        self.inet = res
        return res

    mut def create_inet6(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__inet6()
        self.inet6 = res
        return res

    mut def create_iso(self):
        res = junos_conf_root__configuration__interfaces__interface__unit__family__iso()
        self.iso = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet = self.inet
        if _inet is not None:
            children['inet'] = _inet.to_gdata()
        _inet6 = self.inet6
        if _inet6 is not None:
            children['inet6'] = _inet6.to_gdata()
        _iso = self.iso
        if _iso is not None:
            children['iso'] = _iso.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit__family:
        if n is not None:
            return junos_conf_root__configuration__interfaces__interface__unit__family(inet=junos_conf_root__configuration__interfaces__interface__unit__family__inet.from_gdata(n.get_opt_cnt('inet')), inet6=junos_conf_root__configuration__interfaces__interface__unit__family__inet6.from_gdata(n.get_opt_cnt('inet6')), iso=junos_conf_root__configuration__interfaces__interface__unit__family__iso.from_gdata(n.get_opt_cnt('iso')))
        return junos_conf_root__configuration__interfaces__interface__unit__family()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit/family')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit__family()')
        leaves = []
        _inet = self.inet
        if _inet is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/inet')
            res.append('inet = {self_name}.create_inet()')
            res.extend(_inet.prsrc('inet', False).splitlines())
        _inet6 = self.inet6
        if _inet6 is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/inet6')
            res.append('inet6 = {self_name}.create_inet6()')
            res.extend(_inet6.prsrc('inet6', False).splitlines())
        _iso = self.iso
        if _iso is not None:
            res.append('')
            res.append('# P-container: /configuration/interfaces/interface/unit/family/iso')
            res.append('iso = {self_name}.create_iso()')
            res.extend(_iso.prsrc('iso', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inet = yang.gdata.from_xml_opt_cnt(node, 'inet')
    yang.gdata.maybe_add(children, 'inet', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet, child_inet)
    child_inet6 = yang.gdata.from_xml_opt_cnt(node, 'inet6')
    yang.gdata.maybe_add(children, 'inet6', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__inet6, child_inet6)
    child_iso = yang.gdata.from_xml_opt_cnt(node, 'iso')
    yang.gdata.maybe_add(children, 'iso', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family__iso, child_iso)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit__mac(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__interfaces__interface__unit_entry(yang.adata.MNode):
    name: str
    alias: ?str
    description: ?str
    vlan_id: ?str
    encapsulation: ?str
    family: junos_conf_root__configuration__interfaces__interface__unit__family
    mtu: ?value
    mac: ?str

    mut def __init__(self, name: str, alias: ?str, description: ?str, vlan_id: ?str, encapsulation: ?str, family: ?junos_conf_root__configuration__interfaces__interface__unit__family=None, mtu: ?value, mac: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.alias = alias
        self.description = description
        self.vlan_id = vlan_id
        self.encapsulation = encapsulation
        self.family = family if family is not None else junos_conf_root__configuration__interfaces__interface__unit__family()
        self.mtu = mtu
        self.mac = mac

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _alias = self.alias
        if _alias is not None:
            children['alias'] = yang.gdata.Leaf('string', _alias)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('string', _vlan_id)
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            children['encapsulation'] = yang.gdata.Leaf('enumeration', _encapsulation)
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface__unit_entry:
        return junos_conf_root__configuration__interfaces__interface__unit_entry(name=n.get_str('name'), alias=n.get_opt_str('alias'), description=n.get_opt_str('description'), vlan_id=n.get_opt_str('vlan-id'), encapsulation=n.get_opt_str('encapsulation'), family=junos_conf_root__configuration__interfaces__interface__unit__family.from_gdata(n.get_opt_cnt('family')), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface/unit')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface__unit({repr(self.name)})')
        leaves = []
        _alias = self.alias
        if _alias is not None:
            leaves.append('{self_name}.alias = {repr(_alias)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            leaves.append('{self_name}.vlan_id = {repr(_vlan_id)}')
        _encapsulation = self.encapsulation
        if _encapsulation is not None:
            leaves.append('{self_name}.encapsulation = {repr(_encapsulation)}')
        _family = self.family
        if _family is not None:
            res.extend(_family.prsrc('{self_name}.family', False).splitlines())
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface/unit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface__unit(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface__unit_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'unit'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface__unit_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface__unit_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface__unit_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__unit__name, child_name)
    child_alias = yang.gdata.from_xml_opt_str(node, 'alias')
    yang.gdata.maybe_add(children, 'alias', from_xml_junos_conf_root__configuration__interfaces__interface__unit__alias, child_alias)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__interfaces__interface__unit__description, child_description)
    child_vlan_id = yang.gdata.from_xml_opt_str(node, 'vlan-id')
    yang.gdata.maybe_add(children, 'vlan-id', from_xml_junos_conf_root__configuration__interfaces__interface__unit__vlan_id, child_vlan_id)
    child_encapsulation = yang.gdata.from_xml_opt_str(node, 'encapsulation')
    yang.gdata.maybe_add(children, 'encapsulation', from_xml_junos_conf_root__configuration__interfaces__interface__unit__encapsulation, child_encapsulation)
    child_family = yang.gdata.from_xml_opt_cnt(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__interfaces__interface__unit__family, child_family)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__interfaces__interface__unit__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__interfaces__interface__unit__mac, child_mac)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface__unit(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface__unit_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    mtu: ?value
    mac: ?str
    native_vlan_id: ?value
    unit: junos_conf_root__configuration__interfaces__interface__unit

    mut def __init__(self, name: str, description: ?str, mtu: ?value, mac: ?str, native_vlan_id: ?value, unit: list[junos_conf_root__configuration__interfaces__interface__unit_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.mtu = mtu
        self.mac = mac
        self.native_vlan_id = native_vlan_id
        self.unit = junos_conf_root__configuration__interfaces__interface__unit(elements=unit)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('union', _mtu)
        _mac = self.mac
        if _mac is not None:
            children['mac'] = yang.gdata.Leaf('string', _mac)
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            children['native-vlan-id'] = yang.gdata.Leaf('union', _native_vlan_id)
        _unit = self.unit
        if _unit is not None:
            children['unit'] = _unit.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__interfaces__interface_entry:
        return junos_conf_root__configuration__interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), mtu=n.get_opt_value('mtu'), mac=n.get_opt_str('mac'), native_vlan_id=n.get_opt_value('native-vlan-id'), unit=junos_conf_root__configuration__interfaces__interface__unit.from_gdata(n.get_opt_list('unit')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces/interface')
            res.append('{self_name} = junos_conf_root__configuration__interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _mac = self.mac
        if _mac is not None:
            leaves.append('{self_name}.mac = {repr(_mac)}')
        _native_vlan_id = self.native_vlan_id
        if _native_vlan_id is not None:
            leaves.append('{self_name}.native_vlan_id = {repr(_native_vlan_id)}')
        _unit = self.unit
        for _element in _unit.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface/unit element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'unit_element = {self_name}.unit.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('unit_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__interfaces__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__interfaces__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__interfaces__interface__description, child_description)
    child_mtu = yang.gdata.from_xml_opt_value(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_junos_conf_root__configuration__interfaces__interface__mtu, child_mtu)
    child_mac = yang.gdata.from_xml_opt_str(node, 'mac')
    yang.gdata.maybe_add(children, 'mac', from_xml_junos_conf_root__configuration__interfaces__interface__mac, child_mac)
    child_native_vlan_id = yang.gdata.from_xml_opt_value(node, 'native-vlan-id')
    yang.gdata.maybe_add(children, 'native-vlan-id', from_xml_junos_conf_root__configuration__interfaces__interface__native_vlan_id, child_native_vlan_id)
    child_unit = yang.gdata.from_xml_opt_list(node, 'unit')
    yang.gdata.maybe_add(children, 'unit', from_xml_junos_conf_root__configuration__interfaces__interface__unit, child_unit)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__interfaces(yang.adata.MNode):
    interface: junos_conf_root__configuration__interfaces__interface

    mut def __init__(self, interface: list[junos_conf_root__configuration__interfaces__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.interface = junos_conf_root__configuration__interfaces__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__interfaces:
        if n is not None:
            return junos_conf_root__configuration__interfaces(interface=junos_conf_root__configuration__interfaces__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__interfaces()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/interfaces')
            res.append('{self_name} = junos_conf_root__configuration__interfaces()')
        leaves = []
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/interfaces/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/interfaces'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__interfaces(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__interfaces__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__instance_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__import(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(yang.adata.MNode):
    ttl: ?value
    no_nexthop_change: ?bool

    mut def __init__(self, ttl: ?value, no_nexthop_change: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.ttl = ttl
        self.no_nexthop_change = no_nexthop_change

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ttl = self.ttl
        if _ttl is not None:
            children['ttl'] = yang.gdata.Leaf('union', _ttl)
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            children['no-nexthop-change'] = yang.gdata.Leaf('empty', _no_nexthop_change)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(ttl=n.get_opt_value('ttl'), no_nexthop_change=n.get_opt_empty('no-nexthop-change'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop()')
        leaves = []
        _ttl = self.ttl
        if _ttl is not None:
            leaves.append('{self_name}.ttl = {repr(_ttl)}')
        _no_nexthop_change = self.no_nexthop_change
        if _no_nexthop_change is not None:
            leaves.append('{self_name}.no_nexthop_change = {repr(_no_nexthop_change)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ttl = yang.gdata.from_xml_opt_value(node, 'ttl')
    yang.gdata.maybe_add(children, 'ttl', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__ttl, child_ttl)
    child_no_nexthop_change = yang.gdata.from_xml_opt_empty(node, 'no-nexthop-change')
    yang.gdata.maybe_add(children, 'no-nexthop-change', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop__no_nexthop_change, child_no_nexthop_change)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__as_override(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop
    authentication_key: ?str
    authentication_algorithm: ?str
    peer_as: ?str
    as_override: ?bool

    mut def __init__(self, name: str, description: ?str, multihop: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop=None, authentication_key: ?str, authentication_algorithm: ?str, peer_as: ?str, as_override: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.multihop = multihop
        self.authentication_key = authentication_key
        self.authentication_algorithm = authentication_algorithm
        self.peer_as = peer_as
        self.as_override = as_override

    mut def create_multihop(self):
        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop()
        self.multihop = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('string', _peer_as)
        _as_override = self.as_override
        if _as_override is not None:
            children['as-override'] = yang.gdata.Leaf('empty', _as_override)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name=n.get_str('name'), description=n.get_opt_str('description'), multihop=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop.from_gdata(n.get_opt_cnt('multihop')), authentication_key=n.get_opt_str('authentication-key'), authentication_algorithm=n.get_opt_str('authentication-algorithm'), peer_as=n.get_opt_str('peer-as'), as_override=n.get_opt_empty('as-override'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group/neighbor')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _multihop = self.multihop
        if _multihop is not None:
            res.append('')
            res.append('# P-container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor/multihop')
            res.append('multihop = {self_name}.create_multihop()')
            res.extend(_multihop.prsrc('multihop', False).splitlines())
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            leaves.append('{self_name}.authentication_algorithm = {repr(_authentication_algorithm)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _as_override = self.as_override
        if _as_override is not None:
            leaves.append('{self_name}.as_override = {repr(_as_override)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__description, child_description)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__multihop, child_multihop)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_key, child_authentication_key)
    child_authentication_algorithm = yang.gdata.from_xml_opt_str(node, 'authentication-algorithm')
    yang.gdata.maybe_add(children, 'authentication-algorithm', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__authentication_algorithm, child_authentication_algorithm)
    child_peer_as = yang.gdata.from_xml_opt_str(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__peer_as, child_peer_as)
    child_as_override = yang.gdata.from_xml_opt_empty(node, 'as-override')
    yang.gdata.maybe_add(children, 'as-override', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor__as_override, child_as_override)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    passive: ?bool
    import_: list[str]
    export: list[str]
    neighbor: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, passive: ?bool, import_: ?list[str]=None, export: ?list[str]=None, neighbor: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.passive = passive
        self.import_ = import_ if import_ is not None else []
        self.export = export if export is not None else []
        self.neighbor = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.LeafList('string', _import_, user_order=True)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.LeafList('string', _export, user_order=True)
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry:
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name=n.get_str('name'), passive=n.get_opt_empty('passive'), import_=n.get_opt_strs('import'), export=n.get_opt_strs('export'), neighbor=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list('neighbor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp/group')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group({repr(self.name)})')
        leaves = []
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/protocols/bgp/group/neighbor element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__name, child_name)
    child_passive = yang.gdata.from_xml_opt_empty(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__passive, child_passive)
    child_import_ = yang.gdata.from_xml_opt_strs(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__import, child_import_)
    child_export = yang.gdata.from_xml_opt_strs(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__export, child_export)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__routing_instances__instance__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group

    mut def __init__(self, group: list[junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.group = junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group(elements=group)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols__bgp:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols__bgp(group=junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group.from_gdata(n.get_opt_list('group')))
        return junos_conf_root__configuration__routing_instances__instance__protocols__bgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols/bgp')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols__bgp()')
        leaves = []
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/protocols/bgp/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp__group, child_group)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__routing_instances__instance__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__routing_instances__instance__protocols__bgp

    mut def __init__(self, bgp: ?junos_conf_root__configuration__routing_instances__instance__protocols__bgp=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.bgp = bgp if bgp is not None else junos_conf_root__configuration__routing_instances__instance__protocols__bgp()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__protocols:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__protocols(bgp=junos_conf_root__configuration__routing_instances__instance__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')))
        return junos_conf_root__configuration__routing_instances__instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/protocols')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.extend(_bgp.prsrc('{self_name}.bgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols__bgp, child_bgp)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__any(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__multicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__interface_entry(yang.adata.MNode):
    name: str
    any: ?bool
    unicast: ?bool
    multicast: ?bool
    primary: ?bool

    mut def __init__(self, name: str, any: ?bool, unicast: ?bool, multicast: ?bool, primary: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.any = any
        self.unicast = unicast
        self.multicast = multicast
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _any = self.any
        if _any is not None:
            children['any'] = yang.gdata.Leaf('empty', _any)
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = yang.gdata.Leaf('empty', _unicast)
        _multicast = self.multicast
        if _multicast is not None:
            children['multicast'] = yang.gdata.Leaf('empty', _multicast)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__interface_entry:
        return junos_conf_root__configuration__routing_instances__instance__interface_entry(name=n.get_str('name'), any=n.get_opt_empty('any'), unicast=n.get_opt_empty('unicast'), multicast=n.get_opt_empty('multicast'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/interface')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__interface({repr(self.name)})')
        leaves = []
        _any = self.any
        if _any is not None:
            leaves.append('{self_name}.any = {repr(_any)}')
        _unicast = self.unicast
        if _unicast is not None:
            leaves.append('{self_name}.unicast = {repr(_unicast)}')
        _multicast = self.multicast
        if _multicast is not None:
            leaves.append('{self_name}.multicast = {repr(_multicast)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__name, child_name)
    child_any = yang.gdata.from_xml_opt_empty(node, 'any')
    yang.gdata.maybe_add(children, 'any', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__any, child_any)
    child_unicast = yang.gdata.from_xml_opt_empty(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__unicast, child_unicast)
    child_multicast = yang.gdata.from_xml_opt_empty(node, 'multicast')
    yang.gdata.maybe_add(children, 'multicast', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__multicast, child_multicast)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_junos_conf_root__configuration__routing_instances__instance__interface__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__routing_instances__instance__route_distinguisher(yang.adata.MNode):
    rd_type: ?str

    mut def __init__(self, rd_type: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rd_type = rd_type

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd_type = self.rd_type
        if _rd_type is not None:
            children['rd-type'] = yang.gdata.Leaf('string', _rd_type)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__route_distinguisher:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__route_distinguisher(rd_type=n.get_opt_str('rd-type'))
        return junos_conf_root__configuration__routing_instances__instance__route_distinguisher()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/route-distinguisher')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__route_distinguisher()')
        leaves = []
        _rd_type = self.rd_type
        if _rd_type is not None:
            leaves.append('{self_name}.rd_type = {repr(_rd_type)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/route-distinguisher'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rd_type = yang.gdata.from_xml_opt_str(node, 'rd-type')
    yang.gdata.maybe_add(children, 'rd-type', from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher__rd_type, child_rd_type)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__community(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__export(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__routing_instances__instance__vrf_target(yang.adata.MNode):
    community: ?str
    import_: ?str
    export: ?str
    auto: ?bool

    mut def __init__(self, community: ?str, import_: ?str, export: ?str, auto: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.community = community
        self.import_ = import_
        self.export = export
        self.auto = auto

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _community = self.community
        if _community is not None:
            children['community'] = yang.gdata.Leaf('string', _community)
        _import_ = self.import_
        if _import_ is not None:
            children['import'] = yang.gdata.Leaf('string', _import_)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.Leaf('string', _export)
        _auto = self.auto
        if _auto is not None:
            children['auto'] = yang.gdata.Leaf('empty', _auto)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance__vrf_target:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_target(community=n.get_opt_str('community'), import_=n.get_opt_str('import'), export=n.get_opt_str('export'), auto=n.get_opt_empty('auto'))
        return junos_conf_root__configuration__routing_instances__instance__vrf_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/vrf-target')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__vrf_target()')
        leaves = []
        _community = self.community
        if _community is not None:
            leaves.append('{self_name}.community = {repr(_community)}')
        _import_ = self.import_
        if _import_ is not None:
            leaves.append('{self_name}.import_ = {repr(_import_)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _auto = self.auto
        if _auto is not None:
            leaves.append('{self_name}.auto = {repr(_auto)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/vrf-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_community = yang.gdata.from_xml_opt_str(node, 'community')
    yang.gdata.maybe_add(children, 'community', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__community, child_community)
    child_import_ = yang.gdata.from_xml_opt_str(node, 'import')
    yang.gdata.maybe_add(children, 'import', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__import, child_import_)
    child_export = yang.gdata.from_xml_opt_str(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__export, child_export)
    child_auto = yang.gdata.from_xml_opt_empty(node, 'auto')
    yang.gdata.maybe_add(children, 'auto', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target__auto, child_auto)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__routing_instances__instance__vrf_table_label(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label:
        if n is not None:
            return junos_conf_root__configuration__routing_instances__instance__vrf_table_label()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance/vrf-table-label')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance__vrf_table_label()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance/vrf-table-label'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__routing_instances__instance_entry(yang.adata.MNode):
    name: str
    instance_type: ?str
    protocols: junos_conf_root__configuration__routing_instances__instance__protocols
    interface: junos_conf_root__configuration__routing_instances__instance__interface
    route_distinguisher: junos_conf_root__configuration__routing_instances__instance__route_distinguisher
    vrf_target: junos_conf_root__configuration__routing_instances__instance__vrf_target
    vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label

    mut def __init__(self, name: str, instance_type: ?str, protocols: ?junos_conf_root__configuration__routing_instances__instance__protocols=None, interface: list[junos_conf_root__configuration__routing_instances__instance__interface_entry]=[], route_distinguisher: ?junos_conf_root__configuration__routing_instances__instance__route_distinguisher=None, vrf_target: ?junos_conf_root__configuration__routing_instances__instance__vrf_target=None, vrf_table_label: ?junos_conf_root__configuration__routing_instances__instance__vrf_table_label=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.instance_type = instance_type
        self.protocols = protocols if protocols is not None else junos_conf_root__configuration__routing_instances__instance__protocols()
        self.interface = junos_conf_root__configuration__routing_instances__instance__interface(elements=interface)
        self.route_distinguisher = route_distinguisher if route_distinguisher is not None else junos_conf_root__configuration__routing_instances__instance__route_distinguisher()
        self.vrf_target = vrf_target if vrf_target is not None else junos_conf_root__configuration__routing_instances__instance__vrf_target()
        self.vrf_table_label = vrf_table_label

    mut def create_vrf_table_label(self):
        res = junos_conf_root__configuration__routing_instances__instance__vrf_table_label()
        self.vrf_table_label = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _instance_type = self.instance_type
        if _instance_type is not None:
            children['instance-type'] = yang.gdata.Leaf('enumeration', _instance_type)
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            children['vrf-target'] = _vrf_target.to_gdata()
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            children['vrf-table-label'] = _vrf_table_label.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__routing_instances__instance_entry:
        return junos_conf_root__configuration__routing_instances__instance_entry(name=n.get_str('name'), instance_type=n.get_opt_str('instance-type'), protocols=junos_conf_root__configuration__routing_instances__instance__protocols.from_gdata(n.get_opt_cnt('protocols')), interface=junos_conf_root__configuration__routing_instances__instance__interface.from_gdata(n.get_opt_list('interface')), route_distinguisher=junos_conf_root__configuration__routing_instances__instance__route_distinguisher.from_gdata(n.get_opt_cnt('route-distinguisher')), vrf_target=junos_conf_root__configuration__routing_instances__instance__vrf_target.from_gdata(n.get_opt_cnt('vrf-target')), vrf_table_label=junos_conf_root__configuration__routing_instances__instance__vrf_table_label.from_gdata(n.get_opt_cnt('vrf-table-label')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances/instance')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances__instance({repr(self.name)})')
        leaves = []
        _instance_type = self.instance_type
        if _instance_type is not None:
            leaves.append('{self_name}.instance_type = {repr(_instance_type)}')
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            res.extend(_route_distinguisher.prsrc('{self_name}.route_distinguisher', False).splitlines())
        _vrf_target = self.vrf_target
        if _vrf_target is not None:
            res.extend(_vrf_target.prsrc('{self_name}.vrf_target', False).splitlines())
        _vrf_table_label = self.vrf_table_label
        if _vrf_table_label is not None:
            res.append('')
            res.append('# P-container: /configuration/routing-instances/instance/vrf-table-label')
            res.append('vrf_table_label = {self_name}.create_vrf_table_label()')
            res.extend(_vrf_table_label.prsrc('vrf_table_label', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__routing_instances__instance(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__routing_instances__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__routing_instances__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__routing_instances__instance_entry]:
        if n is not None:
            return [junos_conf_root__configuration__routing_instances__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__routing_instances__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__routing_instances__instance__name, child_name)
    child_instance_type = yang.gdata.from_xml_opt_str(node, 'instance-type')
    yang.gdata.maybe_add(children, 'instance-type', from_xml_junos_conf_root__configuration__routing_instances__instance__instance_type, child_instance_type)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_junos_conf_root__configuration__routing_instances__instance__protocols, child_protocols)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__routing_instances__instance__interface, child_interface)
    child_route_distinguisher = yang.gdata.from_xml_opt_cnt(node, 'route-distinguisher')
    yang.gdata.maybe_add(children, 'route-distinguisher', from_xml_junos_conf_root__configuration__routing_instances__instance__route_distinguisher, child_route_distinguisher)
    child_vrf_target = yang.gdata.from_xml_opt_cnt(node, 'vrf-target')
    yang.gdata.maybe_add(children, 'vrf-target', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_target, child_vrf_target)
    child_vrf_table_label = yang.gdata.from_xml_opt_cnt(node, 'vrf-table-label')
    yang.gdata.maybe_add(children, 'vrf-table-label', from_xml_junos_conf_root__configuration__routing_instances__instance__vrf_table_label, child_vrf_table_label)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_instances__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__routing_instances__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__routing_instances(yang.adata.MNode):
    instance: junos_conf_root__configuration__routing_instances__instance

    mut def __init__(self, instance: list[junos_conf_root__configuration__routing_instances__instance_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.instance = junos_conf_root__configuration__routing_instances__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_instances:
        if n is not None:
            return junos_conf_root__configuration__routing_instances(instance=junos_conf_root__configuration__routing_instances__instance.from_gdata(n.get_opt_list('instance')))
        return junos_conf_root__configuration__routing_instances()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-instances')
            res.append('{self_name} = junos_conf_root__configuration__routing_instances()')
        leaves = []
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /configuration/routing-instances/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-instances'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_instances(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_junos_conf_root__configuration__routing_instances__instance, child_instance)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__routing_options__autonomous_system__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__routing_options__autonomous_system(yang.adata.MNode):
    as_number: ?str

    mut def __init__(self, as_number: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.as_number = as_number

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('string', _as_number)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options__autonomous_system:
        if n is not None:
            return junos_conf_root__configuration__routing_options__autonomous_system(as_number=n.get_opt_str('as-number'))
        raise ValueError('Missing required subtree junos_conf_root__configuration__routing_options__autonomous_system')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-options/autonomous-system')
            res.append('{self_name} = junos_conf_root__configuration__routing_options__autonomous_system()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-options/autonomous-system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_options__autonomous_system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_str(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_junos_conf_root__configuration__routing_options__autonomous_system__as_number, child_as_number)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__routing_options(yang.adata.MNode):
    autonomous_system: junos_conf_root__configuration__routing_options__autonomous_system

    mut def __init__(self, autonomous_system: ?junos_conf_root__configuration__routing_options__autonomous_system=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.autonomous_system = autonomous_system if autonomous_system is not None else junos_conf_root__configuration__routing_options__autonomous_system()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = _autonomous_system.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__routing_options:
        if n is not None:
            return junos_conf_root__configuration__routing_options(autonomous_system=junos_conf_root__configuration__routing_options__autonomous_system.from_gdata(n.get_opt_cnt('autonomous-system')))
        raise ValueError('Missing required subtree junos_conf_root__configuration__routing_options')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/routing-options')
            res.append('{self_name} = junos_conf_root__configuration__routing_options()')
        leaves = []
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            res.extend(_autonomous_system.prsrc('{self_name}.autonomous_system', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/routing-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__routing_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_autonomous_system = yang.gdata.from_xml_opt_cnt(node, 'autonomous-system')
    yang.gdata.maybe_add(children, 'autonomous-system', from_xml_junos_conf_root__configuration__routing_options__autonomous_system, child_autonomous_system)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn/unicast')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast.from_gdata(n.get_opt_cnt('unicast')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet-vpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()')
        leaves = []
        _unicast = self.unicast
        if _unicast is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast')
            res.append('unicast = {self_name}.create_unicast()')
            res.extend(_unicast.prsrc('unicast', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn__unicast, child_unicast)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn/unicast')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(yang.adata.MNode):
    unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast

    mut def __init__(self, unicast: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.unicast = unicast

    mut def create_unicast(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast()
        self.unicast = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _unicast = self.unicast
        if _unicast is not None:
            children['unicast'] = _unicast.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(unicast=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast.from_gdata(n.get_opt_cnt('unicast')))
        return junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/inet6-vpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()')
        leaves = []
        _unicast = self.unicast
        if _unicast is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast')
            res.append('unicast = {self_name}.create_unicast()')
            res.extend(_unicast.prsrc('unicast', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/inet6-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_unicast = yang.gdata.from_xml_opt_cnt(node, 'unicast')
    yang.gdata.maybe_add(children, 'unicast', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn__unicast, child_unicast)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/evpn/signaling')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/evpn/signaling'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family__evpn(yang.adata.MNode):
    signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling

    mut def __init__(self, signaling: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.signaling = signaling

    mut def create_signaling(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling()
        self.signaling = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _signaling = self.signaling
        if _signaling is not None:
            children['signaling'] = _signaling.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family__evpn:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__evpn(signaling=junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling.from_gdata(n.get_opt_cnt('signaling')))
        return junos_conf_root__configuration__protocols__bgp__group__family__evpn()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/evpn')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__evpn()')
        leaves = []
        _signaling = self.signaling
        if _signaling is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/evpn/signaling')
            res.append('signaling = {self_name}.create_signaling()')
            res.extend(_signaling.prsrc('signaling', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_signaling = yang.gdata.from_xml_opt_cnt(node, 'signaling')
    yang.gdata.maybe_add(children, 'signaling', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn__signaling, child_signaling)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__bgp__group__family__route_target(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__bgp__group__family__route_target:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family/route-target')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family__route_target()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class junos_conf_root__configuration__protocols__bgp__group__family(yang.adata.MNode):
    inet_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn
    inet6_vpn: junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn
    evpn: junos_conf_root__configuration__protocols__bgp__group__family__evpn
    route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target

    mut def __init__(self, inet_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn=None, inet6_vpn: ?junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn=None, evpn: ?junos_conf_root__configuration__protocols__bgp__group__family__evpn=None, route_target: ?junos_conf_root__configuration__protocols__bgp__group__family__route_target=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.inet_vpn = inet_vpn if inet_vpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn()
        self.inet6_vpn = inet6_vpn if inet6_vpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn()
        self.evpn = evpn if evpn is not None else junos_conf_root__configuration__protocols__bgp__group__family__evpn()
        self.route_target = route_target

    mut def create_route_target(self):
        res = junos_conf_root__configuration__protocols__bgp__group__family__route_target()
        self.route_target = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _inet_vpn = self.inet_vpn
        if _inet_vpn is not None:
            children['inet-vpn'] = _inet_vpn.to_gdata()
        _inet6_vpn = self.inet6_vpn
        if _inet6_vpn is not None:
            children['inet6-vpn'] = _inet6_vpn.to_gdata()
        _evpn = self.evpn
        if _evpn is not None:
            children['evpn'] = _evpn.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__family:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp__group__family(inet_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn.from_gdata(n.get_opt_cnt('inet-vpn')), inet6_vpn=junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn.from_gdata(n.get_opt_cnt('inet6-vpn')), evpn=junos_conf_root__configuration__protocols__bgp__group__family__evpn.from_gdata(n.get_opt_cnt('evpn')), route_target=junos_conf_root__configuration__protocols__bgp__group__family__route_target.from_gdata(n.get_opt_cnt('route-target')))
        return junos_conf_root__configuration__protocols__bgp__group__family()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/family')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__family()')
        leaves = []
        _inet_vpn = self.inet_vpn
        if _inet_vpn is not None:
            res.extend(_inet_vpn.prsrc('{self_name}.inet_vpn', False).splitlines())
        _inet6_vpn = self.inet6_vpn
        if _inet6_vpn is not None:
            res.extend(_inet6_vpn.prsrc('{self_name}.inet6_vpn', False).splitlines())
        _evpn = self.evpn
        if _evpn is not None:
            res.extend(_evpn.prsrc('{self_name}.evpn', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/bgp/group/family/route-target')
            res.append('route_target = {self_name}.create_route_target()')
            res.extend(_route_target.prsrc('route_target', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__family(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_inet_vpn = yang.gdata.from_xml_opt_cnt(node, 'inet-vpn')
    yang.gdata.maybe_add(children, 'inet-vpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet_vpn, child_inet_vpn)
    child_inet6_vpn = yang.gdata.from_xml_opt_cnt(node, 'inet6-vpn')
    yang.gdata.maybe_add(children, 'inet6-vpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__inet6_vpn, child_inet6_vpn)
    child_evpn = yang.gdata.from_xml_opt_cnt(node, 'evpn')
    yang.gdata.maybe_add(children, 'evpn', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__evpn, child_evpn)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_junos_conf_root__configuration__protocols__bgp__group__family__route_target, child_route_target)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__tcpao_auth_mismatch(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key_chain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__export(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(yang.adata.MNode):
    name: str
    description: ?str
    passive: ?bool

    mut def __init__(self, name: str, description: ?str, passive: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.description = description
        self.passive = passive

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('empty', _passive)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group__neighbor_entry:
        return junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name=n.get_str('name'), description=n.get_opt_str('description'), passive=n.get_opt_empty('passive'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group/neighbor')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group__neighbor({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__bgp__group__neighbor(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group__neighbor_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__bgp__group__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__description, child_description)
    child_passive = yang.gdata.from_xml_opt_empty(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor__passive, child_passive)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__bgp__group_entry(yang.adata.MNode):
    name: str
    type: ?str
    description: ?str
    local_address: ?str
    hold_time: ?value
    family: junos_conf_root__configuration__protocols__bgp__group__family
    authentication_key: ?str
    authentication_algorithm: ?str
    tcpao_auth_mismatch: ?str
    authentication_key_chain: ?str
    export: list[str]
    tcp_mss: ?value
    neighbor: junos_conf_root__configuration__protocols__bgp__group__neighbor

    mut def __init__(self, name: str, type: ?str, description: ?str, local_address: ?str, hold_time: ?value, family: ?junos_conf_root__configuration__protocols__bgp__group__family=None, authentication_key: ?str, authentication_algorithm: ?str, tcpao_auth_mismatch: ?str, authentication_key_chain: ?str, export: ?list[str]=None, tcp_mss: ?value, neighbor: list[junos_conf_root__configuration__protocols__bgp__group__neighbor_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.type = type
        self.description = description
        self.local_address = local_address
        self.hold_time = hold_time
        self.family = family if family is not None else junos_conf_root__configuration__protocols__bgp__group__family()
        self.authentication_key = authentication_key
        self.authentication_algorithm = authentication_algorithm
        self.tcpao_auth_mismatch = tcpao_auth_mismatch
        self.authentication_key_chain = authentication_key_chain
        self.export = export if export is not None else []
        self.tcp_mss = tcp_mss
        self.neighbor = junos_conf_root__configuration__protocols__bgp__group__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _local_address = self.local_address
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('string', _local_address)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            children['authentication-algorithm'] = yang.gdata.Leaf('enumeration', _authentication_algorithm)
        _tcpao_auth_mismatch = self.tcpao_auth_mismatch
        if _tcpao_auth_mismatch is not None:
            children['tcpao-auth-mismatch'] = yang.gdata.Leaf('enumeration', _tcpao_auth_mismatch)
        _authentication_key_chain = self.authentication_key_chain
        if _authentication_key_chain is not None:
            children['authentication-key-chain'] = yang.gdata.Leaf('string', _authentication_key_chain)
        _export = self.export
        if _export is not None:
            children['export'] = yang.gdata.LeafList('string', _export, user_order=True)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('union', _tcp_mss)
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp__group_entry:
        return junos_conf_root__configuration__protocols__bgp__group_entry(name=n.get_str('name'), type=n.get_opt_str('type'), description=n.get_opt_str('description'), local_address=n.get_opt_str('local-address'), hold_time=n.get_opt_value('hold-time'), family=junos_conf_root__configuration__protocols__bgp__group__family.from_gdata(n.get_opt_cnt('family')), authentication_key=n.get_opt_str('authentication-key'), authentication_algorithm=n.get_opt_str('authentication-algorithm'), tcpao_auth_mismatch=n.get_opt_str('tcpao-auth-mismatch'), authentication_key_chain=n.get_opt_str('authentication-key-chain'), export=n.get_opt_strs('export'), tcp_mss=n.get_opt_value('tcp-mss'), neighbor=junos_conf_root__configuration__protocols__bgp__group__neighbor.from_gdata(n.get_opt_list('neighbor')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp/group')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp__group({repr(self.name)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _local_address = self.local_address
        if _local_address is not None:
            leaves.append('{self_name}.local_address = {repr(_local_address)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _family = self.family
        if _family is not None:
            res.extend(_family.prsrc('{self_name}.family', False).splitlines())
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _authentication_algorithm = self.authentication_algorithm
        if _authentication_algorithm is not None:
            leaves.append('{self_name}.authentication_algorithm = {repr(_authentication_algorithm)}')
        _tcpao_auth_mismatch = self.tcpao_auth_mismatch
        if _tcpao_auth_mismatch is not None:
            leaves.append('{self_name}.tcpao_auth_mismatch = {repr(_tcpao_auth_mismatch)}')
        _authentication_key_chain = self.authentication_key_chain
        if _authentication_key_chain is not None:
            leaves.append('{self_name}.authentication_key_chain = {repr(_authentication_key_chain)}')
        _export = self.export
        if _export is not None:
            leaves.append('{self_name}.export = {repr(_export)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /configuration/protocols/bgp/group/neighbor element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__bgp__group(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'group'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__bgp__group_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__bgp__group_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__bgp__group__name, child_name)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_junos_conf_root__configuration__protocols__bgp__group__type, child_type)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_junos_conf_root__configuration__protocols__bgp__group__description, child_description)
    child_local_address = yang.gdata.from_xml_opt_str(node, 'local-address')
    yang.gdata.maybe_add(children, 'local-address', from_xml_junos_conf_root__configuration__protocols__bgp__group__local_address, child_local_address)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__bgp__group__hold_time, child_hold_time)
    child_family = yang.gdata.from_xml_opt_cnt(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__protocols__bgp__group__family, child_family)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key, child_authentication_key)
    child_authentication_algorithm = yang.gdata.from_xml_opt_str(node, 'authentication-algorithm')
    yang.gdata.maybe_add(children, 'authentication-algorithm', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_algorithm, child_authentication_algorithm)
    child_tcpao_auth_mismatch = yang.gdata.from_xml_opt_str(node, 'tcpao-auth-mismatch')
    yang.gdata.maybe_add(children, 'tcpao-auth-mismatch', from_xml_junos_conf_root__configuration__protocols__bgp__group__tcpao_auth_mismatch, child_tcpao_auth_mismatch)
    child_authentication_key_chain = yang.gdata.from_xml_opt_str(node, 'authentication-key-chain')
    yang.gdata.maybe_add(children, 'authentication-key-chain', from_xml_junos_conf_root__configuration__protocols__bgp__group__authentication_key_chain, child_authentication_key_chain)
    child_export = yang.gdata.from_xml_opt_strs(node, 'export')
    yang.gdata.maybe_add(children, 'export', from_xml_junos_conf_root__configuration__protocols__bgp__group__export, child_export)
    child_tcp_mss = yang.gdata.from_xml_opt_value(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_junos_conf_root__configuration__protocols__bgp__group__tcp_mss, child_tcp_mss)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_junos_conf_root__configuration__protocols__bgp__group__neighbor, child_neighbor)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__bgp__log_updown(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__bgp(yang.adata.MNode):
    group: junos_conf_root__configuration__protocols__bgp__group
    log_updown: ?bool

    mut def __init__(self, group: list[junos_conf_root__configuration__protocols__bgp__group_entry]=[], log_updown: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.group = junos_conf_root__configuration__protocols__bgp__group(elements=group)
        self.log_updown = log_updown

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        _log_updown = self.log_updown
        if _log_updown is not None:
            children['log-updown'] = yang.gdata.Leaf('empty', _log_updown)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__bgp:
        if n is not None:
            return junos_conf_root__configuration__protocols__bgp(group=junos_conf_root__configuration__protocols__bgp__group.from_gdata(n.get_opt_list('group')), log_updown=n.get_opt_empty('log-updown'))
        return junos_conf_root__configuration__protocols__bgp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/bgp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__bgp()')
        leaves = []
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /configuration/protocols/bgp/group element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        _log_updown = self.log_updown
        if _log_updown is not None:
            leaves.append('{self_name}.log_updown = {repr(_log_updown)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_junos_conf_root__configuration__protocols__bgp__group, child_group)
    child_log_updown = yang.gdata.from_xml_opt_empty(node, 'log-updown')
    yang.gdata.maybe_add(children, 'log-updown', from_xml_junos_conf_root__configuration__protocols__bgp__log_updown, child_log_updown)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(yang.adata.MNode):
    disable: ?bool
    hold_time: ?value

    mut def __init__(self, disable: ?bool, hold_time: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.disable = disable
        self.hold_time = hold_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(disable=n.get_opt_empty('disable'), hold_time=n.get_opt_value('hold-time'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/ldp-synchronization')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization()')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/ldp-synchronization'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__disable, child_disable)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization__hold_time, child_hold_time)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis__interface__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    metric: ?value

    mut def __init__(self, name: value, disable: ?bool, metric: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.disable = disable
        self.metric = metric

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('union', _metric)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__level_entry:
        return junos_conf_root__configuration__protocols__isis__interface__level_entry(name=n.get_value('name'), disable=n.get_opt_empty('disable'), metric=n.get_opt_value('metric'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/level')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__level({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _metric = self.metric
        if _metric is not None:
            leaves.append('{self_name}.metric = {repr(_metric)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__level_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_value(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__disable, child_disable)
    child_metric = yang.gdata.from_xml_opt_value(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_junos_conf_root__configuration__protocols__isis__interface__level__metric, child_metric)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__lsp_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__point_to_point(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_iso(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__isis__interface__passive(yang.adata.MNode):
    remote_node_iso: ?str
    remote_node_id: ?str

    mut def __init__(self, remote_node_iso: ?str, remote_node_id: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.remote_node_iso = remote_node_iso
        self.remote_node_id = remote_node_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _remote_node_iso = self.remote_node_iso
        if _remote_node_iso is not None:
            children['remote-node-iso'] = yang.gdata.Leaf('string', _remote_node_iso)
        _remote_node_id = self.remote_node_id
        if _remote_node_id is not None:
            children['remote-node-id'] = yang.gdata.Leaf('string', _remote_node_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?junos_conf_root__configuration__protocols__isis__interface__passive:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis__interface__passive(remote_node_iso=n.get_opt_str('remote-node-iso'), remote_node_id=n.get_opt_str('remote-node-id'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/passive')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__passive()')
        leaves = []
        _remote_node_iso = self.remote_node_iso
        if _remote_node_iso is not None:
            leaves.append('{self_name}.remote_node_iso = {repr(_remote_node_iso)}')
        _remote_node_id = self.remote_node_id
        if _remote_node_id is not None:
            leaves.append('{self_name}.remote_node_id = {repr(_remote_node_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/passive'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__passive(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_remote_node_iso = yang.gdata.from_xml_opt_str(node, 'remote-node-iso')
    yang.gdata.maybe_add(children, 'remote-node-iso', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_iso, child_remote_node_iso)
    child_remote_node_id = yang.gdata.from_xml_opt_str(node, 'remote-node-id')
    yang.gdata.maybe_add(children, 'remote-node-id', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive__remote_node_id, child_remote_node_id)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class junos_conf_root__configuration__protocols__isis__interface__family_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('enumeration', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface__family_entry:
        return junos_conf_root__configuration__protocols__isis__interface__family_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface/family')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface__family({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface/family'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface__family(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'family'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface__family_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface__family_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface__family_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__family__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface__family(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface__family_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

class junos_conf_root__configuration__protocols__isis__interface_entry(yang.adata.MNode):
    name: str
    ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization
    level: junos_conf_root__configuration__protocols__isis__interface__level
    lsp_interval: ?value
    point_to_point: ?bool
    passive: ?junos_conf_root__configuration__protocols__isis__interface__passive
    family: junos_conf_root__configuration__protocols__isis__interface__family

    mut def __init__(self, name: str, ldp_synchronization: ?junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization=None, level: list[junos_conf_root__configuration__protocols__isis__interface__level_entry]=[], lsp_interval: ?value, point_to_point: ?bool, passive: ?junos_conf_root__configuration__protocols__isis__interface__passive=None, family: list[junos_conf_root__configuration__protocols__isis__interface__family_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.ldp_synchronization = ldp_synchronization
        self.level = junos_conf_root__configuration__protocols__isis__interface__level(elements=level)
        self.lsp_interval = lsp_interval
        self.point_to_point = point_to_point
        self.passive = passive
        self.family = junos_conf_root__configuration__protocols__isis__interface__family(elements=family)

    mut def create_ldp_synchronization(self):
        res = junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization()
        self.ldp_synchronization = res
        return res

    mut def create_passive(self):
        res = junos_conf_root__configuration__protocols__isis__interface__passive()
        self.passive = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _ldp_synchronization = self.ldp_synchronization
        if _ldp_synchronization is not None:
            children['ldp-synchronization'] = _ldp_synchronization.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _lsp_interval = self.lsp_interval
        if _lsp_interval is not None:
            children['lsp-interval'] = yang.gdata.Leaf('union', _lsp_interval)
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            children['point-to-point'] = yang.gdata.Leaf('empty', _point_to_point)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = _passive.to_gdata()
        _family = self.family
        if _family is not None:
            children['family'] = _family.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__interface_entry:
        return junos_conf_root__configuration__protocols__isis__interface_entry(name=n.get_str('name'), ldp_synchronization=junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization.from_gdata(n.get_opt_cnt('ldp-synchronization')), level=junos_conf_root__configuration__protocols__isis__interface__level.from_gdata(n.get_opt_list('level')), lsp_interval=n.get_opt_value('lsp-interval'), point_to_point=n.get_opt_empty('point-to-point'), passive=junos_conf_root__configuration__protocols__isis__interface__passive.from_gdata(n.get_opt_cnt('passive')), family=junos_conf_root__configuration__protocols__isis__interface__family.from_gdata(n.get_opt_list('family')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__interface({repr(self.name)})')
        leaves = []
        _ldp_synchronization = self.ldp_synchronization
        if _ldp_synchronization is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/interface/ldp-synchronization')
            res.append('ldp_synchronization = {self_name}.create_ldp_synchronization()')
            res.extend(_ldp_synchronization.prsrc('ldp_synchronization', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface/level element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _lsp_interval = self.lsp_interval
        if _lsp_interval is not None:
            leaves.append('{self_name}.lsp_interval = {repr(_lsp_interval)}')
        _point_to_point = self.point_to_point
        if _point_to_point is not None:
            leaves.append('{self_name}.point_to_point = {repr(_point_to_point)}')
        _passive = self.passive
        if _passive is not None:
            res.append('')
            res.append('# P-container: /configuration/protocols/isis/interface/passive')
            res.append('passive = {self_name}.create_passive()')
            res.extend(_passive.prsrc('passive', False).splitlines())
        _family = self.family
        for _element in _family.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface/family element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'family_element = {self_name}.family.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('family_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__interface__name, child_name)
    child_ldp_synchronization = yang.gdata.from_xml_opt_cnt(node, 'ldp-synchronization')
    yang.gdata.maybe_add(children, 'ldp-synchronization', from_xml_junos_conf_root__configuration__protocols__isis__interface__ldp_synchronization, child_ldp_synchronization)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_junos_conf_root__configuration__protocols__isis__interface__level, child_level)
    child_lsp_interval = yang.gdata.from_xml_opt_value(node, 'lsp-interval')
    yang.gdata.maybe_add(children, 'lsp-interval', from_xml_junos_conf_root__configuration__protocols__isis__interface__lsp_interval, child_lsp_interval)
    child_point_to_point = yang.gdata.from_xml_opt_empty(node, 'point-to-point')
    yang.gdata.maybe_add(children, 'point-to-point', from_xml_junos_conf_root__configuration__protocols__isis__interface__point_to_point, child_point_to_point)
    child_passive = yang.gdata.from_xml_opt_cnt(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_junos_conf_root__configuration__protocols__isis__interface__passive, child_passive)
    child_family = yang.gdata.from_xml_opt_list(node, 'family')
    yang.gdata.maybe_add(children, 'family', from_xml_junos_conf_root__configuration__protocols__isis__interface__family, child_family)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_key(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_hello_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_csnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__no_psnp_authentication(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level__wide_metrics_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__isis__level_entry(yang.adata.MNode):
    name: value
    disable: ?bool
    authentication_key: ?str
    authentication_type: ?str
    no_hello_authentication: ?bool
    no_csnp_authentication: ?bool
    no_psnp_authentication: ?bool
    wide_metrics_only: ?bool

    mut def __init__(self, name: value, disable: ?bool, authentication_key: ?str, authentication_type: ?str, no_hello_authentication: ?bool, no_csnp_authentication: ?bool, no_psnp_authentication: ?bool, wide_metrics_only: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.disable = disable
        self.authentication_key = authentication_key
        self.authentication_type = authentication_type
        self.no_hello_authentication = no_hello_authentication
        self.no_csnp_authentication = no_csnp_authentication
        self.no_psnp_authentication = no_psnp_authentication
        self.wide_metrics_only = wide_metrics_only

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            children['authentication-key'] = yang.gdata.Leaf('string', _authentication_key)
        _authentication_type = self.authentication_type
        if _authentication_type is not None:
            children['authentication-type'] = yang.gdata.Leaf('enumeration', _authentication_type)
        _no_hello_authentication = self.no_hello_authentication
        if _no_hello_authentication is not None:
            children['no-hello-authentication'] = yang.gdata.Leaf('empty', _no_hello_authentication)
        _no_csnp_authentication = self.no_csnp_authentication
        if _no_csnp_authentication is not None:
            children['no-csnp-authentication'] = yang.gdata.Leaf('empty', _no_csnp_authentication)
        _no_psnp_authentication = self.no_psnp_authentication
        if _no_psnp_authentication is not None:
            children['no-psnp-authentication'] = yang.gdata.Leaf('empty', _no_psnp_authentication)
        _wide_metrics_only = self.wide_metrics_only
        if _wide_metrics_only is not None:
            children['wide-metrics-only'] = yang.gdata.Leaf('empty', _wide_metrics_only)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis__level_entry:
        return junos_conf_root__configuration__protocols__isis__level_entry(name=n.get_value('name'), disable=n.get_opt_empty('disable'), authentication_key=n.get_opt_str('authentication-key'), authentication_type=n.get_opt_str('authentication-type'), no_hello_authentication=n.get_opt_empty('no-hello-authentication'), no_csnp_authentication=n.get_opt_empty('no-csnp-authentication'), no_psnp_authentication=n.get_opt_empty('no-psnp-authentication'), wide_metrics_only=n.get_opt_empty('wide-metrics-only'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis/level')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis__level({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _authentication_key = self.authentication_key
        if _authentication_key is not None:
            leaves.append('{self_name}.authentication_key = {repr(_authentication_key)}')
        _authentication_type = self.authentication_type
        if _authentication_type is not None:
            leaves.append('{self_name}.authentication_type = {repr(_authentication_type)}')
        _no_hello_authentication = self.no_hello_authentication
        if _no_hello_authentication is not None:
            leaves.append('{self_name}.no_hello_authentication = {repr(_no_hello_authentication)}')
        _no_csnp_authentication = self.no_csnp_authentication
        if _no_csnp_authentication is not None:
            leaves.append('{self_name}.no_csnp_authentication = {repr(_no_csnp_authentication)}')
        _no_psnp_authentication = self.no_psnp_authentication
        if _no_psnp_authentication is not None:
            leaves.append('{self_name}.no_psnp_authentication = {repr(_no_psnp_authentication)}')
        _wide_metrics_only = self.wide_metrics_only
        if _wide_metrics_only is not None:
            leaves.append('{self_name}.wide_metrics_only = {repr(_wide_metrics_only)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__isis__level(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__isis__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'level'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            e_name = e.name
            if isinstance(e_name, str) and isinstance(name, str):
                if e_name != name:
                    match = False
                    continue
            e_name = e.name
            if isinstance(e_name, int) and isinstance(name, int):
                if e_name != name:
                    match = False
                    continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__isis__level_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, user_order=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__isis__level_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__isis__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__isis__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_value(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__isis__level__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__isis__level__disable, child_disable)
    child_authentication_key = yang.gdata.from_xml_opt_str(node, 'authentication-key')
    yang.gdata.maybe_add(children, 'authentication-key', from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_key, child_authentication_key)
    child_authentication_type = yang.gdata.from_xml_opt_str(node, 'authentication-type')
    yang.gdata.maybe_add(children, 'authentication-type', from_xml_junos_conf_root__configuration__protocols__isis__level__authentication_type, child_authentication_type)
    child_no_hello_authentication = yang.gdata.from_xml_opt_empty(node, 'no-hello-authentication')
    yang.gdata.maybe_add(children, 'no-hello-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_hello_authentication, child_no_hello_authentication)
    child_no_csnp_authentication = yang.gdata.from_xml_opt_empty(node, 'no-csnp-authentication')
    yang.gdata.maybe_add(children, 'no-csnp-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_csnp_authentication, child_no_csnp_authentication)
    child_no_psnp_authentication = yang.gdata.from_xml_opt_empty(node, 'no-psnp-authentication')
    yang.gdata.maybe_add(children, 'no-psnp-authentication', from_xml_junos_conf_root__configuration__protocols__isis__level__no_psnp_authentication, child_no_psnp_authentication)
    child_wide_metrics_only = yang.gdata.from_xml_opt_empty(node, 'wide-metrics-only')
    yang.gdata.maybe_add(children, 'wide-metrics-only', from_xml_junos_conf_root__configuration__protocols__isis__level__wide_metrics_only, child_wide_metrics_only)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__isis__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__isis__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, user_order=True)

mut def from_xml_junos_conf_root__configuration__protocols__isis__lsp_lifetime(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class junos_conf_root__configuration__protocols__isis(yang.adata.MNode):
    interface: junos_conf_root__configuration__protocols__isis__interface
    level: junos_conf_root__configuration__protocols__isis__level
    lsp_lifetime: ?value

    mut def __init__(self, interface: list[junos_conf_root__configuration__protocols__isis__interface_entry]=[], level: list[junos_conf_root__configuration__protocols__isis__level_entry]=[], lsp_lifetime: ?value):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.interface = junos_conf_root__configuration__protocols__isis__interface(elements=interface)
        self.level = junos_conf_root__configuration__protocols__isis__level(elements=level)
        self.lsp_lifetime = lsp_lifetime

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            children['lsp-lifetime'] = yang.gdata.Leaf('union', _lsp_lifetime)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__isis:
        if n is not None:
            return junos_conf_root__configuration__protocols__isis(interface=junos_conf_root__configuration__protocols__isis__interface.from_gdata(n.get_opt_list('interface')), level=junos_conf_root__configuration__protocols__isis__level.from_gdata(n.get_opt_list('level')), lsp_lifetime=n.get_opt_value('lsp-lifetime'))
        return junos_conf_root__configuration__protocols__isis()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/isis')
            res.append('{self_name} = junos_conf_root__configuration__protocols__isis()')
        leaves = []
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /configuration/protocols/isis/level element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _lsp_lifetime = self.lsp_lifetime
        if _lsp_lifetime is not None:
            leaves.append('{self_name}.lsp_lifetime = {repr(_lsp_lifetime)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/isis'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__isis__interface, child_interface)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_junos_conf_root__configuration__protocols__isis__level, child_level)
    child_lsp_lifetime = yang.gdata.from_xml_opt_value(node, 'lsp-lifetime')
    yang.gdata.maybe_add(children, 'lsp-lifetime', from_xml_junos_conf_root__configuration__protocols__isis__lsp_lifetime, child_lsp_lifetime)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__ldp__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__transport_address:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__transport_address(router_id=n.get_opt_empty('router-id'), interface=n.get_opt_empty('interface'), address=n.get_opt_str('address'))
        return junos_conf_root__configuration__protocols__ldp__transport_address()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/transport-address')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__transport_address()')
        leaves = []
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _address = self.address
        if _address is not None:
            leaves.append('{self_name}.address = {repr(_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/transport-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__transport_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router_id = yang.gdata.from_xml_opt_empty(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__router_id, child_router_id)
    child_interface = yang.gdata.from_xml_opt_empty(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__interface, child_interface)
    child_address = yang.gdata.from_xml_opt_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__hello_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class junos_conf_root__configuration__protocols__ldp__interface__transport_address(yang.adata.MNode):
    router_id: ?bool
    interface: ?bool
    address: ?str

    mut def __init__(self, router_id: ?bool, interface: ?bool, address: ?str):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.router_id = router_id
        self.interface = interface
        self.address = address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('empty', _router_id)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('empty', _interface)
        _address = self.address
        if _address is not None:
            children['address'] = yang.gdata.Leaf('string', _address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface__transport_address:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp__interface__transport_address(router_id=n.get_opt_empty('router-id'), interface=n.get_opt_empty('interface'), address=n.get_opt_str('address'))
        return junos_conf_root__configuration__protocols__ldp__interface__transport_address()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/interface/transport-address')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__interface__transport_address()')
        leaves = []
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _address = self.address
        if _address is not None:
            leaves.append('{self_name}.address = {repr(_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/interface/transport-address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_router_id = yang.gdata.from_xml_opt_empty(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__router_id, child_router_id)
    child_interface = yang.gdata.from_xml_opt_empty(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__interface, child_interface)
    child_address = yang.gdata.from_xml_opt_str(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address__address, child_address)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols__ldp__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool
    hello_interval: ?value
    hold_time: ?value
    transport_address: junos_conf_root__configuration__protocols__ldp__interface__transport_address

    mut def __init__(self, name: str, disable: ?bool, hello_interval: ?value, hold_time: ?value, transport_address: ?junos_conf_root__configuration__protocols__ldp__interface__transport_address=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.disable = disable
        self.hello_interval = hello_interval
        self.hold_time = hold_time
        self.transport_address = transport_address if transport_address is not None else junos_conf_root__configuration__protocols__ldp__interface__transport_address()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            children['hello-interval'] = yang.gdata.Leaf('union', _hello_interval)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('union', _hold_time)
        _transport_address = self.transport_address
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp__interface_entry:
        return junos_conf_root__configuration__protocols__ldp__interface_entry(name=n.get_str('name'), disable=n.get_opt_empty('disable'), hello_interval=n.get_opt_value('hello-interval'), hold_time=n.get_opt_value('hold-time'), transport_address=junos_conf_root__configuration__protocols__ldp__interface__transport_address.from_gdata(n.get_opt_cnt('transport-address')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp__interface({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _hello_interval = self.hello_interval
        if _hello_interval is not None:
            leaves.append('{self_name}.hello_interval = {repr(_hello_interval)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _transport_address = self.transport_address
        if _transport_address is not None:
            res.extend(_transport_address.prsrc('{self_name}.transport_address', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__ldp__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__ldp__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__ldp__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__ldp__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__ldp__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__ldp__interface__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__ldp__interface__disable, child_disable)
    child_hello_interval = yang.gdata.from_xml_opt_value(node, 'hello-interval')
    yang.gdata.maybe_add(children, 'hello-interval', from_xml_junos_conf_root__configuration__protocols__ldp__interface__hello_interval, child_hello_interval)
    child_hold_time = yang.gdata.from_xml_opt_value(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_junos_conf_root__configuration__protocols__ldp__interface__hold_time, child_hold_time)
    child_transport_address = yang.gdata.from_xml_opt_cnt(node, 'transport-address')
    yang.gdata.maybe_add(children, 'transport-address', from_xml_junos_conf_root__configuration__protocols__ldp__interface__transport_address, child_transport_address)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__ldp__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__ldp__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__ldp(yang.adata.MNode):
    preference: ?value
    transport_address: junos_conf_root__configuration__protocols__ldp__transport_address
    interface: junos_conf_root__configuration__protocols__ldp__interface

    mut def __init__(self, preference: ?value, transport_address: ?junos_conf_root__configuration__protocols__ldp__transport_address=None, interface: list[junos_conf_root__configuration__protocols__ldp__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.preference = preference
        self.transport_address = transport_address if transport_address is not None else junos_conf_root__configuration__protocols__ldp__transport_address()
        self.interface = junos_conf_root__configuration__protocols__ldp__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _preference = self.preference
        if _preference is not None:
            children['preference'] = yang.gdata.Leaf('union', _preference)
        _transport_address = self.transport_address
        if _transport_address is not None:
            children['transport-address'] = _transport_address.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__ldp:
        if n is not None:
            return junos_conf_root__configuration__protocols__ldp(preference=n.get_opt_value('preference'), transport_address=junos_conf_root__configuration__protocols__ldp__transport_address.from_gdata(n.get_opt_cnt('transport-address')), interface=junos_conf_root__configuration__protocols__ldp__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__protocols__ldp()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/ldp')
            res.append('{self_name} = junos_conf_root__configuration__protocols__ldp()')
        leaves = []
        _preference = self.preference
        if _preference is not None:
            leaves.append('{self_name}.preference = {repr(_preference)}')
        _transport_address = self.transport_address
        if _transport_address is not None:
            res.extend(_transport_address.prsrc('{self_name}.transport_address', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/ldp/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/ldp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__ldp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_preference = yang.gdata.from_xml_opt_value(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_junos_conf_root__configuration__protocols__ldp__preference, child_preference)
    child_transport_address = yang.gdata.from_xml_opt_cnt(node, 'transport-address')
    yang.gdata.maybe_add(children, 'transport-address', from_xml_junos_conf_root__configuration__protocols__ldp__transport_address, child_transport_address)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__ldp__interface, child_interface)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__no_propagate_ttl(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class junos_conf_root__configuration__protocols__mpls__interface_entry(yang.adata.MNode):
    name: str
    disable: ?bool

    mut def __init__(self, name: str, disable: ?bool):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.name = name
        self.disable = disable

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('union', _name)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('empty', _disable)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls__interface_entry:
        return junos_conf_root__configuration__protocols__mpls__interface_entry(name=n.get_str('name'), disable=n.get_opt_empty('disable'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/mpls/interface')
            res.append('{self_name} = junos_conf_root__configuration__protocols__mpls__interface({repr(self.name)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/mpls/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class junos_conf_root__configuration__protocols__mpls__interface(yang.adata.MNode):
    elements: list[junos_conf_root__configuration__protocols__mpls__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = junos_conf_root__configuration__protocols__mpls__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[junos_conf_root__configuration__protocols__mpls__interface_entry]:
        if n is not None:
            return [junos_conf_root__configuration__protocols__mpls__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_junos_conf_root__configuration__protocols__mpls__interface__name, child_name)
    child_disable = yang.gdata.from_xml_opt_empty(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_junos_conf_root__configuration__protocols__mpls__interface__disable, child_disable)
    return yang.gdata.Container(children)

mut def from_xml_junos_conf_root__configuration__protocols__mpls__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_junos_conf_root__configuration__protocols__mpls__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class junos_conf_root__configuration__protocols__mpls(yang.adata.MNode):
    no_propagate_ttl: ?bool
    interface: junos_conf_root__configuration__protocols__mpls__interface

    mut def __init__(self, no_propagate_ttl: ?bool, interface: list[junos_conf_root__configuration__protocols__mpls__interface_entry]=[]):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.no_propagate_ttl = no_propagate_ttl
        self.interface = junos_conf_root__configuration__protocols__mpls__interface(elements=interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _no_propagate_ttl = self.no_propagate_ttl
        if _no_propagate_ttl is not None:
            children['no-propagate-ttl'] = yang.gdata.Leaf('empty', _no_propagate_ttl)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols__mpls:
        if n is not None:
            return junos_conf_root__configuration__protocols__mpls(no_propagate_ttl=n.get_opt_empty('no-propagate-ttl'), interface=junos_conf_root__configuration__protocols__mpls__interface.from_gdata(n.get_opt_list('interface')))
        return junos_conf_root__configuration__protocols__mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols/mpls')
            res.append('{self_name} = junos_conf_root__configuration__protocols__mpls()')
        leaves = []
        _no_propagate_ttl = self.no_propagate_ttl
        if _no_propagate_ttl is not None:
            leaves.append('{self_name}.no_propagate_ttl = {repr(_no_propagate_ttl)}')
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /configuration/protocols/mpls/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols/mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols__mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_no_propagate_ttl = yang.gdata.from_xml_opt_empty(node, 'no-propagate-ttl')
    yang.gdata.maybe_add(children, 'no-propagate-ttl', from_xml_junos_conf_root__configuration__protocols__mpls__no_propagate_ttl, child_no_propagate_ttl)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_junos_conf_root__configuration__protocols__mpls__interface, child_interface)
    return yang.gdata.Container(children)

class junos_conf_root__configuration__protocols(yang.adata.MNode):
    bgp: junos_conf_root__configuration__protocols__bgp
    isis: junos_conf_root__configuration__protocols__isis
    ldp: junos_conf_root__configuration__protocols__ldp
    mpls: junos_conf_root__configuration__protocols__mpls

    mut def __init__(self, bgp: ?junos_conf_root__configuration__protocols__bgp=None, isis: ?junos_conf_root__configuration__protocols__isis=None, ldp: ?junos_conf_root__configuration__protocols__ldp=None, mpls: ?junos_conf_root__configuration__protocols__mpls=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.bgp = bgp if bgp is not None else junos_conf_root__configuration__protocols__bgp()
        self.isis = isis if isis is not None else junos_conf_root__configuration__protocols__isis()
        self.ldp = ldp if ldp is not None else junos_conf_root__configuration__protocols__ldp()
        self.mpls = mpls if mpls is not None else junos_conf_root__configuration__protocols__mpls()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        _ldp = self.ldp
        if _ldp is not None:
            children['ldp'] = _ldp.to_gdata()
        _mpls = self.mpls
        if _mpls is not None:
            children['mpls'] = _mpls.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration__protocols:
        if n is not None:
            return junos_conf_root__configuration__protocols(bgp=junos_conf_root__configuration__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), isis=junos_conf_root__configuration__protocols__isis.from_gdata(n.get_opt_cnt('isis')), ldp=junos_conf_root__configuration__protocols__ldp.from_gdata(n.get_opt_cnt('ldp')), mpls=junos_conf_root__configuration__protocols__mpls.from_gdata(n.get_opt_cnt('mpls')))
        return junos_conf_root__configuration__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration/protocols')
            res.append('{self_name} = junos_conf_root__configuration__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.extend(_bgp.prsrc('{self_name}.bgp', False).splitlines())
        _isis = self.isis
        if _isis is not None:
            res.extend(_isis.prsrc('{self_name}.isis', False).splitlines())
        _ldp = self.ldp
        if _ldp is not None:
            res.extend(_ldp.prsrc('{self_name}.ldp', False).splitlines())
        _mpls = self.mpls
        if _mpls is not None:
            res.extend(_mpls.prsrc('{self_name}.mpls', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_junos_conf_root__configuration__protocols__bgp, child_bgp)
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_junos_conf_root__configuration__protocols__isis, child_isis)
    child_ldp = yang.gdata.from_xml_opt_cnt(node, 'ldp')
    yang.gdata.maybe_add(children, 'ldp', from_xml_junos_conf_root__configuration__protocols__ldp, child_ldp)
    child_mpls = yang.gdata.from_xml_opt_cnt(node, 'mpls')
    yang.gdata.maybe_add(children, 'mpls', from_xml_junos_conf_root__configuration__protocols__mpls, child_mpls)
    return yang.gdata.Container(children)

class junos_conf_root__configuration(yang.adata.MNode):
    rcsid: ?str
    version: ?str
    system: junos_conf_root__configuration__system
    interfaces: junos_conf_root__configuration__interfaces
    routing_instances: junos_conf_root__configuration__routing_instances
    routing_options: junos_conf_root__configuration__routing_options
    protocols: junos_conf_root__configuration__protocols

    mut def __init__(self, rcsid: ?str, version: ?str, system: ?junos_conf_root__configuration__system=None, interfaces: ?junos_conf_root__configuration__interfaces=None, routing_instances: ?junos_conf_root__configuration__routing_instances=None, routing_options: ?junos_conf_root__configuration__routing_options=None, protocols: ?junos_conf_root__configuration__protocols=None):
        self._ns = 'http://yang.juniper.net/junos/conf/root'
        self.rcsid = rcsid
        self.version = version
        self.system = system if system is not None else junos_conf_root__configuration__system()
        self.interfaces = interfaces if interfaces is not None else junos_conf_root__configuration__interfaces()
        self.routing_instances = routing_instances if routing_instances is not None else junos_conf_root__configuration__routing_instances()
        self.routing_options = routing_options if routing_options is not None else junos_conf_root__configuration__routing_options()
        self.protocols = protocols if protocols is not None else junos_conf_root__configuration__protocols()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rcsid = self.rcsid
        if _rcsid is not None:
            children['rcsid'] = yang.gdata.Leaf('string', _rcsid)
        _version = self.version
        if _version is not None:
            children['version'] = yang.gdata.Leaf('string', _version)
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _interfaces = self.interfaces
        if _interfaces is not None:
            children['interfaces'] = _interfaces.to_gdata()
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            children['routing-instances'] = _routing_instances.to_gdata()
        _routing_options = self.routing_options
        if _routing_options is not None:
            children['routing-options'] = _routing_options.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root', module='junos-conf-root')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> junos_conf_root__configuration:
        if n is not None:
            return junos_conf_root__configuration(rcsid=n.get_opt_str('rcsid'), version=n.get_opt_str('version'), system=junos_conf_root__configuration__system.from_gdata(n.get_opt_cnt('system')), interfaces=junos_conf_root__configuration__interfaces.from_gdata(n.get_opt_cnt('interfaces')), routing_instances=junos_conf_root__configuration__routing_instances.from_gdata(n.get_opt_cnt('routing-instances')), routing_options=junos_conf_root__configuration__routing_options.from_gdata(n.get_opt_cnt('routing-options')), protocols=junos_conf_root__configuration__protocols.from_gdata(n.get_opt_cnt('protocols')))
        return junos_conf_root__configuration()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /configuration')
            res.append('{self_name} = junos_conf_root__configuration()')
        leaves = []
        _rcsid = self.rcsid
        if _rcsid is not None:
            leaves.append('{self_name}.rcsid = {repr(_rcsid)}')
        _version = self.version
        if _version is not None:
            leaves.append('{self_name}.version = {repr(_version)}')
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _interfaces = self.interfaces
        if _interfaces is not None:
            res.extend(_interfaces.prsrc('{self_name}.interfaces', False).splitlines())
        _routing_instances = self.routing_instances
        if _routing_instances is not None:
            res.extend(_routing_instances.prsrc('{self_name}.routing_instances', False).splitlines())
        _routing_options = self.routing_options
        if _routing_options is not None:
            res.extend(_routing_options.prsrc('{self_name}.routing_options', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /configuration'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_junos_conf_root__configuration(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rcsid = yang.gdata.from_xml_opt_str(node, 'rcsid')
    yang.gdata.maybe_add(children, 'rcsid', from_xml_junos_conf_root__configuration__rcsid, child_rcsid)
    child_version = yang.gdata.from_xml_opt_str(node, 'version')
    yang.gdata.maybe_add(children, 'version', from_xml_junos_conf_root__configuration__version, child_version)
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system')
    yang.gdata.maybe_add(children, 'system', from_xml_junos_conf_root__configuration__system, child_system)
    child_interfaces = yang.gdata.from_xml_opt_cnt(node, 'interfaces')
    yang.gdata.maybe_add(children, 'interfaces', from_xml_junos_conf_root__configuration__interfaces, child_interfaces)
    child_routing_instances = yang.gdata.from_xml_opt_cnt(node, 'routing-instances')
    yang.gdata.maybe_add(children, 'routing-instances', from_xml_junos_conf_root__configuration__routing_instances, child_routing_instances)
    child_routing_options = yang.gdata.from_xml_opt_cnt(node, 'routing-options')
    yang.gdata.maybe_add(children, 'routing-options', from_xml_junos_conf_root__configuration__routing_options, child_routing_options)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_junos_conf_root__configuration__protocols, child_protocols)
    return yang.gdata.Container(children, ns='http://yang.juniper.net/junos/conf/root', module='junos-conf-root')

class root(yang.adata.MNode):
    configuration: junos_conf_root__configuration

    mut def __init__(self, configuration: ?junos_conf_root__configuration=None):
        self._ns = ''
        self.configuration = configuration if configuration is not None else junos_conf_root__configuration()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _configuration = self.configuration
        if _configuration is not None:
            children['configuration'] = _configuration.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(configuration=junos_conf_root__configuration.from_gdata(n.get_opt_cnt('configuration')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _configuration = self.configuration
        if _configuration is not None:
            res.extend(_configuration.prsrc('{self_name}.configuration', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_configuration = yang.gdata.from_xml_opt_cnt(node, 'configuration', 'http://yang.juniper.net/junos/conf/root')
    yang.gdata.maybe_add(children, 'configuration', from_xml_junos_conf_root__configuration, child_configuration)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'http://yang.juniper.net/junos/conf/root',
}
