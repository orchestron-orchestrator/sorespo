import base64
import json
import xml
import yang.adata
import yang.gdata
from yang.identity import complete_and_validate_identityref
from yang.identityref import Identityref, PartialIdentityref
from yang.schema import DIdentity

# == This file is generated ==


_base_srl_nokia_common_ip_route_type = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ip-route-type', base=[])
_base_srl_nokia_common_mpls_label_entry_type = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='mpls-label-entry-type', base=[])
_base_srl_nokia_common_tunnel_type = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='tunnel-type', base=[])
_base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-next-hop-resolution-tunnel-type', base=[])
_base_srl_nokia_common_routing_policy_protocol_match_type = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='routing-policy-protocol-match-type', base=[])
_base_srl_nokia_common_table_connection_protocol = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='table-connection-protocol', base=[])
_base_srl_nokia_common_bgp_address_family = DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-address-family', base=[])
_base_srl_nokia_interfaces_si_type = DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='si-type', base=[])
_base_srl_nokia_interfaces_transceiver_functional_type = DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='transceiver-functional-type', base=[])
_base_srl_nokia_network_instance_ni_type = DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='ni-type', base=[])
_base_srl_nokia_policy_types_bgp_well_known_community = DIdentity(module='srl_nokia-policy-types', namespace='urn:nokia.com:srlinux:general:policy-types', prefix='srl_nokia-pol-types', name='bgp-well-known-community', base=[])
_identities = [
    _base_srl_nokia_common_ip_route_type,
    _base_srl_nokia_common_mpls_label_entry_type,
    _base_srl_nokia_common_tunnel_type,
    _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type,
    _base_srl_nokia_common_routing_policy_protocol_match_type,
    _base_srl_nokia_common_table_connection_protocol,
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='aggregate', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='arp-nd', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_mpls_label_entry_type, _base_srl_nokia_common_tunnel_type, _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type, _base_srl_nokia_common_routing_policy_protocol_match_type, _base_srl_nokia_common_table_connection_protocol]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-evpn', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-evpn-ifl-host', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-ipvpn', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='bgp-label', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='dhcp', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='esi', base=[_base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='pseudowire', base=[_base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='gribi', base=[_base_srl_nokia_common_ip_route_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='host', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ip-in-ip', base=[_base_srl_nokia_common_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='gre', base=[_base_srl_nokia_common_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='isis', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type, _base_srl_nokia_common_table_connection_protocol]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='local', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type, _base_srl_nokia_common_table_connection_protocol]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ldp', base=[_base_srl_nokia_common_mpls_label_entry_type, _base_srl_nokia_common_tunnel_type, _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='linux', base=[_base_srl_nokia_common_ip_route_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ndk1', base=[_base_srl_nokia_common_ip_route_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ndk2', base=[_base_srl_nokia_common_ip_route_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='network-instance', base=[_base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ospfv2', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ospfv3', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='sr-isis', base=[_base_srl_nokia_common_tunnel_type, _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='sr-ospfv2', base=[_base_srl_nokia_common_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='sr-ospfv3', base=[_base_srl_nokia_common_tunnel_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='sr-mpls', base=[_base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='sr-submgmt', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='te-policy-sr-mpls-colored', base=[_base_srl_nokia_common_tunnel_type, _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type, _base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='te-policy-sr-mpls-uncolored', base=[_base_srl_nokia_common_tunnel_type, _base_srl_nokia_common_bgp_next_hop_resolution_tunnel_type, _base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='static', base=[_base_srl_nokia_common_ip_route_type, _base_srl_nokia_common_routing_policy_protocol_match_type, _base_srl_nokia_common_table_connection_protocol]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='static-mpls', base=[_base_srl_nokia_common_mpls_label_entry_type]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='vxlan', base=[_base_srl_nokia_common_tunnel_type]),
    _base_srl_nokia_common_bgp_address_family,
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ipv4-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ipv6-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='l3vpn-ipv4-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='l3vpn-ipv6-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ipv4-labeled-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='ipv6-labeled-unicast', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='evpn', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='route-target', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='srte-policy-ipv4', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='srte-policy-ipv6', base=[_base_srl_nokia_common_bgp_address_family]),
    DIdentity(module='srl_nokia-common', namespace='urn:nokia.com:srlinux:general:common', prefix='srl_nokia-comm', name='link-state', base=[_base_srl_nokia_common_bgp_address_family]),
    _base_srl_nokia_interfaces_si_type,
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='routed', base=[_base_srl_nokia_interfaces_si_type]),
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='bridged', base=[_base_srl_nokia_interfaces_si_type]),
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='local-mirror-dest', base=[_base_srl_nokia_interfaces_si_type]),
    _base_srl_nokia_interfaces_transceiver_functional_type,
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='standard', base=[_base_srl_nokia_interfaces_transceiver_functional_type]),
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='digital-coherent-optics', base=[_base_srl_nokia_interfaces_transceiver_functional_type]),
    DIdentity(module='srl_nokia-interfaces', namespace='urn:nokia.com:srlinux:chassis:interfaces', prefix='srl_nokia-if', name='optical-line-system', base=[_base_srl_nokia_interfaces_transceiver_functional_type]),
    _base_srl_nokia_network_instance_ni_type,
    DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='host', base=[_base_srl_nokia_network_instance_ni_type]),
    DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='default', base=[_base_srl_nokia_network_instance_ni_type]),
    DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='ip-vrf', base=[_base_srl_nokia_network_instance_ni_type]),
    DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='mac-vrf', base=[_base_srl_nokia_network_instance_ni_type]),
    DIdentity(module='srl_nokia-network-instance', namespace='urn:nokia.com:srlinux:net-inst:network-instance', prefix='srl_nokia-netinst', name='vpws', base=[_base_srl_nokia_network_instance_ni_type]),
    _base_srl_nokia_policy_types_bgp_well_known_community,
    DIdentity(module='srl_nokia-policy-types', namespace='urn:nokia.com:srlinux:general:policy-types', prefix='srl_nokia-pol-types', name='no-export', base=[_base_srl_nokia_policy_types_bgp_well_known_community]),
    DIdentity(module='srl_nokia-policy-types', namespace='urn:nokia.com:srlinux:general:policy-types', prefix='srl_nokia-pol-types', name='no-advertise', base=[_base_srl_nokia_policy_types_bgp_well_known_community]),
    DIdentity(module='srl_nokia-policy-types', namespace='urn:nokia.com:srlinux:general:policy-types', prefix='srl_nokia-pol-types', name='no-export-subconfed', base=[_base_srl_nokia_policy_types_bgp_well_known_community]),
]


# Identityref constants
srl_nokia_common_ip_route_type = Identityref('ip-route-type', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_mpls_label_entry_type = Identityref('mpls-label-entry-type', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_tunnel_type = Identityref('tunnel-type', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_next_hop_resolution_tunnel_type = Identityref('bgp-next-hop-resolution-tunnel-type', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_routing_policy_protocol_match_type = Identityref('routing-policy-protocol-match-type', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_table_connection_protocol = Identityref('table-connection-protocol', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_aggregate = Identityref('aggregate', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_arp_nd = Identityref('arp-nd', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp = Identityref('bgp', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_evpn = Identityref('bgp-evpn', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_evpn_ifl_host = Identityref('bgp-evpn-ifl-host', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_ipvpn = Identityref('bgp-ipvpn', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_label = Identityref('bgp-label', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_dhcp = Identityref('dhcp', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_esi = Identityref('esi', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_pseudowire = Identityref('pseudowire', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_gribi = Identityref('gribi', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_host = Identityref('host', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ip_in_ip = Identityref('ip-in-ip', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_gre = Identityref('gre', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_isis = Identityref('isis', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_local = Identityref('local', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ldp = Identityref('ldp', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_linux = Identityref('linux', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ndk1 = Identityref('ndk1', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ndk2 = Identityref('ndk2', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_network_instance = Identityref('network-instance', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ospfv2 = Identityref('ospfv2', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ospfv3 = Identityref('ospfv3', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_sr_isis = Identityref('sr-isis', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_sr_ospfv2 = Identityref('sr-ospfv2', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_sr_ospfv3 = Identityref('sr-ospfv3', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_sr_mpls = Identityref('sr-mpls', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_sr_submgmt = Identityref('sr-submgmt', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_te_policy_sr_mpls_colored = Identityref('te-policy-sr-mpls-colored', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_te_policy_sr_mpls_uncolored = Identityref('te-policy-sr-mpls-uncolored', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_static = Identityref('static', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_static_mpls = Identityref('static-mpls', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_vxlan = Identityref('vxlan', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_bgp_address_family = Identityref('bgp-address-family', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ipv4_unicast = Identityref('ipv4-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ipv6_unicast = Identityref('ipv6-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_l3vpn_ipv4_unicast = Identityref('l3vpn-ipv4-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_l3vpn_ipv6_unicast = Identityref('l3vpn-ipv6-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ipv4_labeled_unicast = Identityref('ipv4-labeled-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_ipv6_labeled_unicast = Identityref('ipv6-labeled-unicast', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_evpn = Identityref('evpn', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_route_target = Identityref('route-target', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_srte_policy_ipv4 = Identityref('srte-policy-ipv4', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_srte_policy_ipv6 = Identityref('srte-policy-ipv6', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_common_link_state = Identityref('link-state', ns='urn:nokia.com:srlinux:general:common', mod='srl_nokia-common', pfx='srl_nokia-comm')
srl_nokia_interfaces_si_type = Identityref('si-type', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_routed = Identityref('routed', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_bridged = Identityref('bridged', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_local_mirror_dest = Identityref('local-mirror-dest', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_transceiver_functional_type = Identityref('transceiver-functional-type', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_standard = Identityref('standard', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_digital_coherent_optics = Identityref('digital-coherent-optics', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_interfaces_optical_line_system = Identityref('optical-line-system', ns='urn:nokia.com:srlinux:chassis:interfaces', mod='srl_nokia-interfaces', pfx='srl_nokia-if')
srl_nokia_network_instance_ni_type = Identityref('ni-type', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_network_instance_host = Identityref('host', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_network_instance_default = Identityref('default', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_network_instance_ip_vrf = Identityref('ip-vrf', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_network_instance_mac_vrf = Identityref('mac-vrf', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_network_instance_vpws = Identityref('vpws', ns='urn:nokia.com:srlinux:net-inst:network-instance', mod='srl_nokia-network-instance', pfx='srl_nokia-netinst')
srl_nokia_policy_types_bgp_well_known_community = Identityref('bgp-well-known-community', ns='urn:nokia.com:srlinux:general:policy-types', mod='srl_nokia-policy-types', pfx='srl_nokia-pol-types')
srl_nokia_policy_types_no_export = Identityref('no-export', ns='urn:nokia.com:srlinux:general:policy-types', mod='srl_nokia-policy-types', pfx='srl_nokia-pol-types')
srl_nokia_policy_types_no_advertise = Identityref('no-advertise', ns='urn:nokia.com:srlinux:general:policy-types', mod='srl_nokia-policy-types', pfx='srl_nokia-pol-types')
srl_nokia_policy_types_no_export_subconfed = Identityref('no-export-subconfed', ns='urn:nokia.com:srlinux:general:policy-types', mod='srl_nokia-policy-types', pfx='srl_nokia-pol-types')


class srl_nokia_tunnel__tunnel(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:vxlan:tunnel', module='srl_nokia-tunnel')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel__tunnel:
        if n is not None:
            return srl_nokia_tunnel__tunnel()
        return srl_nokia_tunnel__tunnel()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel')
            res.append('{self_name} = srl_nokia_tunnel__tunnel()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel__tunnel(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:vxlan:tunnel', module='srl_nokia-tunnel')

mut def from_xml_srl_nokia_system__system__trace_options(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('enumeration', val)

class srl_nokia_system__system__management(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__management:
        if n is not None:
            return srl_nokia_system__system__management()
        return srl_nokia_system__system__management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/management')
            res.append('{self_name} = srl_nokia_system__system__management()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__output(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__output:
        if n is not None:
            return srl_nokia_system__system__control_plane_traffic__output()
        return srl_nokia_system__system__control_plane_traffic__output()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/output')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__output()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/output'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__output(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic__input(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic__input:
        if n is not None:
            return srl_nokia_system__system__control_plane_traffic__input()
        return srl_nokia_system__system__control_plane_traffic__input()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic/input')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic__input()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic/input'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic__input(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

class srl_nokia_system__system__control_plane_traffic(yang.adata.MNode):
    output: srl_nokia_system__system__control_plane_traffic__output
    input: srl_nokia_system__system__control_plane_traffic__input

    mut def __init__(self, output: ?srl_nokia_system__system__control_plane_traffic__output=None, input: ?srl_nokia_system__system__control_plane_traffic__input=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.output = output if output is not None else srl_nokia_system__system__control_plane_traffic__output()
        self.input = input if input is not None else srl_nokia_system__system__control_plane_traffic__input()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _output = self.output
        if _output is not None:
            children['output'] = _output.to_gdata()
        _input = self.input
        if _input is not None:
            children['input'] = _input.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__control_plane_traffic:
        if n is not None:
            return srl_nokia_system__system__control_plane_traffic(output=srl_nokia_system__system__control_plane_traffic__output.from_gdata(n.get_opt_cnt('output')), input=srl_nokia_system__system__control_plane_traffic__input.from_gdata(n.get_opt_cnt('input')))
        return srl_nokia_system__system__control_plane_traffic()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/control-plane-traffic')
            res.append('{self_name} = srl_nokia_system__system__control_plane_traffic()')
        leaves = []
        _output = self.output
        if _output is not None:
            res.extend(_output.prsrc('{self_name}.output', False).splitlines())
        _input = self.input
        if _input is not None:
            res.extend(_input.prsrc('{self_name}.input', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/control-plane-traffic'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__control_plane_traffic(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_output = yang.gdata.from_xml_opt_cnt(node, 'output')
    yang.gdata.maybe_add(children, 'output', from_xml_srl_nokia_system__system__control_plane_traffic__output, child_output)
    child_input = yang.gdata.from_xml_opt_cnt(node, 'input')
    yang.gdata.maybe_add(children, 'input', from_xml_srl_nokia_system__system__control_plane_traffic__input, child_input)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_system__system__protocols__bgp__restart_max_wait(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_system__system__protocols__bgp(yang.adata.MNode):
    restart_max_wait: ?int

    mut def __init__(self, restart_max_wait: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.restart_max_wait = restart_max_wait

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _restart_max_wait = self.restart_max_wait
        if _restart_max_wait is not None:
            children['restart-max-wait'] = yang.gdata.Leaf('uint16', _restart_max_wait)
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_system__system__protocols__bgp:
        if n is not None:
            return srl_nokia_system__system__protocols__bgp(restart_max_wait=n.get_opt_int('restart-max-wait'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/protocols/bgp')
            res.append('{self_name} = srl_nokia_system__system__protocols__bgp()')
        leaves = []
        _restart_max_wait = self.restart_max_wait
        if _restart_max_wait is not None:
            leaves.append('{self_name}.restart_max_wait = {repr(_restart_max_wait)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_restart_max_wait = yang.gdata.from_xml_opt_int(node, 'restart-max-wait')
    yang.gdata.maybe_add(children, 'restart-max-wait', from_xml_srl_nokia_system__system__protocols__bgp__restart_max_wait, child_restart_max_wait)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

class srl_nokia_system__system__protocols(yang.adata.MNode):
    bgp: ?srl_nokia_system__system__protocols__bgp

    mut def __init__(self, bgp: ?srl_nokia_system__system__protocols__bgp=None):
        self._ns = 'urn:nokia.com:srlinux:general:system-protocols'
        self.bgp = bgp

    mut def create_bgp(self):
        res = srl_nokia_system__system__protocols__bgp()
        self.bgp = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system-protocols', module='srl_nokia-system-protocols')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__protocols:
        if n is not None:
            return srl_nokia_system__system__protocols(bgp=srl_nokia_system__system__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')))
        return srl_nokia_system__system__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/protocols')
            res.append('{self_name} = srl_nokia_system__system__protocols()')
        leaves = []
        _bgp = self.bgp
        if _bgp is not None:
            res.append('')
            res.append('# P-container: /system/protocols/bgp')
            res.append('bgp = {self_name}.create_bgp()')
            res.extend(_bgp.prsrc('bgp', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp', 'urn:nokia.com:srlinux:bgp:bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_srl_nokia_system__system__protocols__bgp, child_bgp)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system-protocols', module='srl_nokia-system-protocols')

mut def from_xml_srl_nokia_system__system__name__domain_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_system__system__name__host_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_system__system__name(yang.adata.MNode):
    domain_name: ?str
    host_name: ?str

    mut def __init__(self, domain_name: ?str, host_name: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:system-name'
        self.domain_name = domain_name
        self.host_name = host_name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _domain_name = self.domain_name
        if _domain_name is not None:
            children['domain-name'] = yang.gdata.Leaf('string', _domain_name)
        _host_name = self.host_name
        if _host_name is not None:
            children['host-name'] = yang.gdata.Leaf('string', _host_name)
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system__name:
        if n is not None:
            return srl_nokia_system__system__name(domain_name=n.get_opt_str('domain-name'), host_name=n.get_opt_str('host-name'))
        return srl_nokia_system__system__name()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system/name')
            res.append('{self_name} = srl_nokia_system__system__name()')
        leaves = []
        _domain_name = self.domain_name
        if _domain_name is not None:
            leaves.append('{self_name}.domain_name = {repr(_domain_name)}')
        _host_name = self.host_name
        if _host_name is not None:
            leaves.append('{self_name}.host_name = {repr(_host_name)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /system/name'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system__name(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_domain_name = yang.gdata.from_xml_opt_str(node, 'domain-name')
    yang.gdata.maybe_add(children, 'domain-name', from_xml_srl_nokia_system__system__name__domain_name, child_domain_name)
    child_host_name = yang.gdata.from_xml_opt_str(node, 'host-name')
    yang.gdata.maybe_add(children, 'host-name', from_xml_srl_nokia_system__system__name__host_name, child_host_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:system-name', module='srl_nokia-system-name')

class srl_nokia_system__system(yang.adata.MNode):
    trace_options: list[str]
    management: srl_nokia_system__system__management
    control_plane_traffic: srl_nokia_system__system__control_plane_traffic
    protocols: srl_nokia_system__system__protocols
    name: srl_nokia_system__system__name

    mut def __init__(self, trace_options: ?list[str]=None, management: ?srl_nokia_system__system__management=None, control_plane_traffic: ?srl_nokia_system__system__control_plane_traffic=None, protocols: ?srl_nokia_system__system__protocols=None, name: ?srl_nokia_system__system__name=None):
        self._ns = 'urn:nokia.com:srlinux:general:system'
        self.trace_options = trace_options if trace_options is not None else []
        self.management = management if management is not None else srl_nokia_system__system__management()
        self.control_plane_traffic = control_plane_traffic if control_plane_traffic is not None else srl_nokia_system__system__control_plane_traffic()
        self.protocols = protocols if protocols is not None else srl_nokia_system__system__protocols()
        self.name = name if name is not None else srl_nokia_system__system__name()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _trace_options = self.trace_options
        if _trace_options is not None:
            children['trace-options'] = yang.gdata.LeafList('enumeration', _trace_options)
        _management = self.management
        if _management is not None:
            children['management'] = _management.to_gdata()
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            children['control-plane-traffic'] = _control_plane_traffic.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        _name = self.name
        if _name is not None:
            children['name'] = _name.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_system__system:
        if n is not None:
            return srl_nokia_system__system(trace_options=n.get_opt_strs('trace-options'), management=srl_nokia_system__system__management.from_gdata(n.get_opt_cnt('management')), control_plane_traffic=srl_nokia_system__system__control_plane_traffic.from_gdata(n.get_opt_cnt('control-plane-traffic')), protocols=srl_nokia_system__system__protocols.from_gdata(n.get_opt_cnt('protocols')), name=srl_nokia_system__system__name.from_gdata(n.get_opt_cnt('name')))
        return srl_nokia_system__system()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /system')
            res.append('{self_name} = srl_nokia_system__system()')
        leaves = []
        _trace_options = self.trace_options
        if _trace_options is not None:
            leaves.append('{self_name}.trace_options = {repr(_trace_options)}')
        _management = self.management
        if _management is not None:
            res.extend(_management.prsrc('{self_name}.management', False).splitlines())
        _control_plane_traffic = self.control_plane_traffic
        if _control_plane_traffic is not None:
            res.extend(_control_plane_traffic.prsrc('{self_name}.control_plane_traffic', False).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        _name = self.name
        if _name is not None:
            res.extend(_name.prsrc('{self_name}.name', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /system'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_system__system(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_trace_options = yang.gdata.from_xml_opt_strs(node, 'trace-options')
    yang.gdata.maybe_add(children, 'trace-options', from_xml_srl_nokia_system__system__trace_options, child_trace_options)
    child_management = yang.gdata.from_xml_opt_cnt(node, 'management')
    yang.gdata.maybe_add(children, 'management', from_xml_srl_nokia_system__system__management, child_management)
    child_control_plane_traffic = yang.gdata.from_xml_opt_cnt(node, 'control-plane-traffic')
    yang.gdata.maybe_add(children, 'control-plane-traffic', from_xml_srl_nokia_system__system__control_plane_traffic, child_control_plane_traffic)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols', 'urn:nokia.com:srlinux:general:system-protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_srl_nokia_system__system__protocols, child_protocols)
    child_name = yang.gdata.from_xml_opt_cnt(node, 'name', 'urn:nokia.com:srlinux:chassis:system-name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_system__system__name, child_name)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:general:system', module='srl_nokia-system')

mut def from_xml_srl_nokia_interfaces__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__type(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-if:si-type'], 'srl_nokia-interfaces')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf type: {error}')

mut def from_xml_srl_nokia_interfaces__interface__subinterface__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(yang.adata.MNode):
    ip_prefix: str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix=n.get_str('ip-prefix'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__address({repr(self.ip_prefix)})')
        leaves = []
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv4__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv4__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv4__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__ip_prefix, child_ip_prefix)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(yang.adata.MNode):
    admin_state: ?str
    interface: ?str

    mut def __init__(self, admin_state: ?str, interface: ?str):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.interface = interface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('string', _interface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(admin_state=n.get_opt_str('admin-state'), interface=n.get_opt_str('interface'))
        return srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4/unnumbered')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4/unnumbered'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__admin_state, child_admin_state)
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered__interface, child_interface)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__ipv4(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv4__address
    allow_directed_broadcast: ?bool
    unnumbered: srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv4__address_entry]=[], allow_directed_broadcast: ?bool, unnumbered: ?srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv4__address(elements=address)
        self.allow_directed_broadcast = allow_directed_broadcast
        self.unnumbered = unnumbered if unnumbered is not None else srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            children['allow-directed-broadcast'] = yang.gdata.Leaf('boolean', _allow_directed_broadcast)
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            children['unnumbered'] = _unnumbered.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv4:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__ipv4(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv4__address.from_gdata(n.get_opt_list('address')), allow_directed_broadcast=n.get_opt_bool('allow-directed-broadcast'), unnumbered=srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered.from_gdata(n.get_opt_cnt('unnumbered')))
        return srl_nokia_interfaces__interface__subinterface__ipv4()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv4')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv4()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv4/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        _allow_directed_broadcast = self.allow_directed_broadcast
        if _allow_directed_broadcast is not None:
            leaves.append('{self_name}.allow_directed_broadcast = {repr(_allow_directed_broadcast)}')
        _unnumbered = self.unnumbered
        if _unnumbered is not None:
            res.extend(_unnumbered.prsrc('{self_name}.unnumbered', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv4'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv4(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__address, child_address)
    child_allow_directed_broadcast = yang.gdata.from_xml_opt_bool(node, 'allow-directed-broadcast')
    yang.gdata.maybe_add(children, 'allow-directed-broadcast', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__allow_directed_broadcast, child_allow_directed_broadcast)
    child_unnumbered = yang.gdata.from_xml_opt_cnt(node, 'unnumbered')
    yang.gdata.maybe_add(children, 'unnumbered', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4__unnumbered, child_unnumbered)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('empty', val)

class srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(yang.adata.MNode):
    ip_prefix: str
    type: ?str
    anycast_gw: ?bool
    primary: ?bool

    mut def __init__(self, ip_prefix: str, type: ?str, anycast_gw: ?bool, primary: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.ip_prefix = ip_prefix
        self.type = type
        self.anycast_gw = anycast_gw
        self.primary = primary

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ip_prefix = self.ip_prefix
        if _ip_prefix is not None:
            children['ip-prefix'] = yang.gdata.Leaf('string', _ip_prefix)
        _type = self.type
        if _type is not None:
            children['type'] = yang.gdata.Leaf('enumeration', _type)
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            children['anycast-gw'] = yang.gdata.Leaf('boolean', _anycast_gw)
        _primary = self.primary
        if _primary is not None:
            children['primary'] = yang.gdata.Leaf('empty', _primary)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6__address_entry:
        return srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix=n.get_str('ip-prefix'), type=n.get_opt_str('type'), anycast_gw=n.get_opt_bool('anycast-gw'), primary=n.get_opt_empty('primary'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6/address')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6__address({repr(self.ip_prefix)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _anycast_gw = self.anycast_gw
        if _anycast_gw is not None:
            leaves.append('{self_name}.anycast_gw = {repr(_anycast_gw)}')
        _primary = self.primary
        if _primary is not None:
            leaves.append('{self_name}.primary = {repr(_primary)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6/address'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface__ipv6__address(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'address'
        self.elements = elements

    mut def create(self, ip_prefix):
        for e in self.elements:
            match = True
            if e.ip_prefix != ip_prefix:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface__ipv6__address_entry(ip_prefix)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['ip-prefix'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface__ipv6__address_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_ip_prefix = yang.gdata.from_xml_str(node, 'ip-prefix')
    yang.gdata.maybe_add(children, 'ip-prefix', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__ip_prefix, child_ip_prefix)
    child_type = yang.gdata.from_xml_opt_str(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__type, child_type)
    child_anycast_gw = yang.gdata.from_xml_opt_bool(node, 'anycast-gw')
    yang.gdata.maybe_add(children, 'anycast-gw', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__anycast_gw, child_anycast_gw)
    child_primary = yang.gdata.from_xml_opt_empty(node, 'primary')
    yang.gdata.maybe_add(children, 'primary', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address__primary, child_primary)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address_element(e) for e in nodes]
    return yang.gdata.List(keys=['ip-prefix'], elements=elements)

class srl_nokia_interfaces__interface__subinterface__ipv6(yang.adata.MNode):
    admin_state: ?str
    address: srl_nokia_interfaces__interface__subinterface__ipv6__address

    mut def __init__(self, admin_state: ?str, address: list[srl_nokia_interfaces__interface__subinterface__ipv6__address_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.admin_state = admin_state
        self.address = srl_nokia_interfaces__interface__subinterface__ipv6__address(elements=address)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _address = self.address
        if _address is not None:
            children['address'] = _address.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__ipv6:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__ipv6(admin_state=n.get_opt_str('admin-state'), address=srl_nokia_interfaces__interface__subinterface__ipv6__address.from_gdata(n.get_opt_list('address')))
        return srl_nokia_interfaces__interface__subinterface__ipv6()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/ipv6')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__ipv6()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _address = self.address
        for _element in _address.elements:
            res.append('')
            res.append("# List /interface/subinterface/ipv6/address element: {_element.to_gdata().key_str(['ip-prefix'])}")
            list_elem = 'address_element = {self_name}.address.create({repr(_element.ip_prefix)})'
            res.append(list_elem)
            res.extend(_element.prsrc('address_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/ipv6'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__ipv6(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__admin_state, child_admin_state)
    child_address = yang.gdata.from_xml_opt_list(node, 'address')
    yang.gdata.maybe_add(children, 'address', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6__address, child_address)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged__vlan_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(yang.adata.MNode):
    vlan_id: ?value

    mut def __init__(self, vlan_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces-vlans'
        self.vlan_id = vlan_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            children['vlan-id'] = yang.gdata.Leaf('union', _vlan_id)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(vlan_id=n.get_opt_value('vlan-id'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/vlan/encap/single-tagged')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged()')
        leaves = []
        _vlan_id = self.vlan_id
        if _vlan_id is not None:
            leaves.append('{self_name}.vlan_id = {repr(_vlan_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/vlan/encap/single-tagged'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vlan_id = yang.gdata.from_xml_opt_value(node, 'vlan-id')
    yang.gdata.maybe_add(children, 'vlan-id', from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged__vlan_id, child_vlan_id)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_interfaces__interface__subinterface__vlan__encap(yang.adata.MNode):
    single_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged

    mut def __init__(self, single_tagged: ?srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces-vlans'
        self.single_tagged = single_tagged

    mut def create_single_tagged(self):
        res = srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged()
        self.single_tagged = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _single_tagged = self.single_tagged
        if _single_tagged is not None:
            children['single-tagged'] = _single_tagged.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan__encap:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__vlan__encap(single_tagged=srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged.from_gdata(n.get_opt_cnt('single-tagged')))
        return srl_nokia_interfaces__interface__subinterface__vlan__encap()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/vlan/encap')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__vlan__encap()')
        leaves = []
        _single_tagged = self.single_tagged
        if _single_tagged is not None:
            res.append('')
            res.append('# P-container: /interface/subinterface/vlan/encap/single-tagged')
            res.append('single_tagged = {self_name}.create_single_tagged()')
            res.extend(_single_tagged.prsrc('single_tagged', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/vlan/encap'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_single_tagged = yang.gdata.from_xml_opt_cnt(node, 'single-tagged')
    yang.gdata.maybe_add(children, 'single-tagged', from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap__single_tagged, child_single_tagged)
    return yang.gdata.Container(children)

class srl_nokia_interfaces__interface__subinterface__vlan(yang.adata.MNode):
    encap: srl_nokia_interfaces__interface__subinterface__vlan__encap

    mut def __init__(self, encap: ?srl_nokia_interfaces__interface__subinterface__vlan__encap=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces-vlans'
        self.encap = encap if encap is not None else srl_nokia_interfaces__interface__subinterface__vlan__encap()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _encap = self.encap
        if _encap is not None:
            children['encap'] = _encap.to_gdata()
        return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans', module='srl_nokia-interfaces-vlans')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface__vlan:
        if n is not None:
            return srl_nokia_interfaces__interface__subinterface__vlan(encap=srl_nokia_interfaces__interface__subinterface__vlan__encap.from_gdata(n.get_opt_cnt('encap')))
        return srl_nokia_interfaces__interface__subinterface__vlan()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface/vlan')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface__vlan()')
        leaves = []
        _encap = self.encap
        if _encap is not None:
            res.extend(_encap.prsrc('{self_name}.encap', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface/vlan'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_interfaces__interface__subinterface__vlan(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_encap = yang.gdata.from_xml_opt_cnt(node, 'encap')
    yang.gdata.maybe_add(children, 'encap', from_xml_srl_nokia_interfaces__interface__subinterface__vlan__encap, child_encap)
    return yang.gdata.Container(children, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans', module='srl_nokia-interfaces-vlans')

class srl_nokia_interfaces__interface__subinterface_entry(yang.adata.MNode):
    index: int
    type: ?Identityref
    description: ?str
    admin_state: ?str
    ip_mtu: ?int
    l2_mtu: ?int
    mpls_mtu: ?int
    ipv4: srl_nokia_interfaces__interface__subinterface__ipv4
    ipv6: srl_nokia_interfaces__interface__subinterface__ipv6
    vlan: srl_nokia_interfaces__interface__subinterface__vlan

    mut def __init__(self, index: int, type: ?Identityref, description: ?str, admin_state: ?str, ip_mtu: ?int, l2_mtu: ?int, mpls_mtu: ?int, ipv4: ?srl_nokia_interfaces__interface__subinterface__ipv4=None, ipv6: ?srl_nokia_interfaces__interface__subinterface__ipv6=None, vlan: ?srl_nokia_interfaces__interface__subinterface__vlan=None):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.index = index
        self.type = type
        self.description = description
        self.admin_state = admin_state
        self.ip_mtu = ip_mtu
        self.l2_mtu = l2_mtu
        self.mpls_mtu = mpls_mtu
        self.ipv4 = ipv4 if ipv4 is not None else srl_nokia_interfaces__interface__subinterface__ipv4()
        self.ipv6 = ipv6 if ipv6 is not None else srl_nokia_interfaces__interface__subinterface__ipv6()
        self.vlan = vlan if vlan is not None else srl_nokia_interfaces__interface__subinterface__vlan()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _type = self.type
        if _type is not None:
            _identityref_type, error = complete_and_validate_identityref(_type, _identities, ['srl_nokia-if:si-type'], 'srl_nokia-interfaces')
            if _identityref_type is not None:
                _type = _identityref_type
            else:
                raise ValueError('Invalid value for identityref leaf type: {error}')
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            children['ip-mtu'] = yang.gdata.Leaf('uint16', _ip_mtu)
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            children['l2-mtu'] = yang.gdata.Leaf('uint16', _l2_mtu)
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            children['mpls-mtu'] = yang.gdata.Leaf('uint16', _mpls_mtu)
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            children['ipv4'] = _ipv4.to_gdata()
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            children['ipv6'] = _ipv6.to_gdata()
        _vlan = self.vlan
        if _vlan is not None:
            children['vlan'] = _vlan.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface__subinterface_entry:
        return srl_nokia_interfaces__interface__subinterface_entry(index=n.get_int('index'), type=n.get_opt_Identityref('type'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), ip_mtu=n.get_opt_int('ip-mtu'), l2_mtu=n.get_opt_int('l2-mtu'), mpls_mtu=n.get_opt_int('mpls-mtu'), ipv4=srl_nokia_interfaces__interface__subinterface__ipv4.from_gdata(n.get_opt_cnt('ipv4')), ipv6=srl_nokia_interfaces__interface__subinterface__ipv6.from_gdata(n.get_opt_cnt('ipv6')), vlan=srl_nokia_interfaces__interface__subinterface__vlan.from_gdata(n.get_opt_cnt('vlan')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface/subinterface')
            res.append('{self_name} = srl_nokia_interfaces__interface__subinterface({repr(self.index)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _ip_mtu = self.ip_mtu
        if _ip_mtu is not None:
            leaves.append('{self_name}.ip_mtu = {repr(_ip_mtu)}')
        _l2_mtu = self.l2_mtu
        if _l2_mtu is not None:
            leaves.append('{self_name}.l2_mtu = {repr(_l2_mtu)}')
        _mpls_mtu = self.mpls_mtu
        if _mpls_mtu is not None:
            leaves.append('{self_name}.mpls_mtu = {repr(_mpls_mtu)}')
        _ipv4 = self.ipv4
        if _ipv4 is not None:
            res.extend(_ipv4.prsrc('{self_name}.ipv4', False).splitlines())
        _ipv6 = self.ipv6
        if _ipv6 is not None:
            res.extend(_ipv6.prsrc('{self_name}.ipv6', False).splitlines())
        _vlan = self.vlan
        if _vlan is not None:
            res.extend(_vlan.prsrc('{self_name}.vlan', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface/subinterface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface__subinterface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface__subinterface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'subinterface'
        self.elements = elements

    mut def create(self, index):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface__subinterface_entry(index)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface__subinterface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface__subinterface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface__subinterface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_interfaces__interface__subinterface__index, child_index)
    child_type = yang.gdata.from_xml_opt_Identityref(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_interfaces__interface__subinterface__type, child_type)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__subinterface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__subinterface__admin_state, child_admin_state)
    child_ip_mtu = yang.gdata.from_xml_opt_int(node, 'ip-mtu')
    yang.gdata.maybe_add(children, 'ip-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__ip_mtu, child_ip_mtu)
    child_l2_mtu = yang.gdata.from_xml_opt_int(node, 'l2-mtu')
    yang.gdata.maybe_add(children, 'l2-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__l2_mtu, child_l2_mtu)
    child_mpls_mtu = yang.gdata.from_xml_opt_int(node, 'mpls-mtu')
    yang.gdata.maybe_add(children, 'mpls-mtu', from_xml_srl_nokia_interfaces__interface__subinterface__mpls_mtu, child_mpls_mtu)
    child_ipv4 = yang.gdata.from_xml_opt_cnt(node, 'ipv4')
    yang.gdata.maybe_add(children, 'ipv4', from_xml_srl_nokia_interfaces__interface__subinterface__ipv4, child_ipv4)
    child_ipv6 = yang.gdata.from_xml_opt_cnt(node, 'ipv6')
    yang.gdata.maybe_add(children, 'ipv6', from_xml_srl_nokia_interfaces__interface__subinterface__ipv6, child_ipv6)
    child_vlan = yang.gdata.from_xml_opt_cnt(node, 'vlan', 'urn:nokia.com:srlinux:chassis:interfaces-vlans')
    yang.gdata.maybe_add(children, 'vlan', from_xml_srl_nokia_interfaces__interface__subinterface__vlan, child_vlan)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface__subinterface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface__subinterface_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

mut def from_xml_srl_nokia_interfaces__interface__vlan_tagging(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans', module='srl_nokia-interfaces-vlans')

class srl_nokia_interfaces__interface_entry(yang.adata.MNode):
    name: str
    description: ?str
    admin_state: ?str
    mtu: ?int
    subinterface: srl_nokia_interfaces__interface__subinterface
    vlan_tagging: ?bool

    mut def __init__(self, name: str, description: ?str, admin_state: ?str, mtu: ?int, subinterface: list[srl_nokia_interfaces__interface__subinterface_entry]=[], vlan_tagging: ?bool):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self.name = name
        self.description = description
        self.admin_state = admin_state
        self.mtu = mtu
        self.subinterface = srl_nokia_interfaces__interface__subinterface(elements=subinterface)
        self.vlan_tagging = vlan_tagging

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _mtu = self.mtu
        if _mtu is not None:
            children['mtu'] = yang.gdata.Leaf('uint16', _mtu)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = _subinterface.to_gdata()
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            children['vlan-tagging'] = yang.gdata.Leaf('boolean', _vlan_tagging, ns='urn:nokia.com:srlinux:chassis:interfaces-vlans', module='srl_nokia-interfaces-vlans')
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_interfaces__interface_entry:
        return srl_nokia_interfaces__interface_entry(name=n.get_str('name'), description=n.get_opt_str('description'), admin_state=n.get_opt_str('admin-state'), mtu=n.get_opt_int('mtu'), subinterface=srl_nokia_interfaces__interface__subinterface.from_gdata(n.get_opt_list('subinterface')), vlan_tagging=n.get_opt_bool('vlan-tagging'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /interface')
            res.append('{self_name} = srl_nokia_interfaces__interface({repr(self.name)})')
        leaves = []
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _mtu = self.mtu
        if _mtu is not None:
            leaves.append('{self_name}.mtu = {repr(_mtu)}')
        _subinterface = self.subinterface
        for _element in _subinterface.elements:
            res.append('')
            res.append("# List /interface/subinterface element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'subinterface_element = {self_name}.subinterface.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('subinterface_element', False, list_element=True).splitlines())
        _vlan_tagging = self.vlan_tagging
        if _vlan_tagging is not None:
            leaves.append('{self_name}.vlan_tagging = {repr(_vlan_tagging)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_interfaces__interface(yang.adata.MNode):
    elements: list[srl_nokia_interfaces__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:chassis:interfaces'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_interfaces__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_interfaces__interface_entry]:
        if n is not None:
            return [srl_nokia_interfaces__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_interfaces__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_interfaces__interface__name, child_name)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_interfaces__interface__description, child_description)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_interfaces__interface__admin_state, child_admin_state)
    child_mtu = yang.gdata.from_xml_opt_int(node, 'mtu')
    yang.gdata.maybe_add(children, 'mtu', from_xml_srl_nokia_interfaces__interface__mtu, child_mtu)
    child_subinterface = yang.gdata.from_xml_opt_list(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_interfaces__interface__subinterface, child_subinterface)
    child_vlan_tagging = yang.gdata.from_xml_opt_bool(node, 'vlan-tagging', 'urn:nokia.com:srlinux:chassis:interfaces-vlans')
    yang.gdata.maybe_add(children, 'vlan-tagging', from_xml_srl_nokia_interfaces__interface__vlan_tagging, child_vlan_tagging)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_interfaces__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_interfaces__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:chassis:interfaces', module='srl_nokia-interfaces')

mut def from_xml_srl_nokia_network_instance__network_instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__type(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-netinst:ni-type'], 'srl_nokia-network-instance')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf type: {error}')

mut def from_xml_srl_nokia_network_instance__network_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface__interface_ref:
        if n is not None:
            return srl_nokia_network_instance__network_instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__interface_entry(yang.adata.MNode):
    name: str
    interface_ref: srl_nokia_network_instance__network_instance__interface__interface_ref

    mut def __init__(self, name: str, interface_ref: ?srl_nokia_network_instance__network_instance__interface__interface_ref=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__interface__interface_ref()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__interface_entry:
        return srl_nokia_network_instance__network_instance__interface_entry(name=n.get_str('name'), interface_ref=srl_nokia_network_instance__network_instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__interface({repr(self.name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__interface__name, child_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__interface__interface_ref, child_interface_ref)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__vxlan_interface_entry(yang.adata.MNode):
    name: str

    mut def __init__(self, name: str):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__vxlan_interface_entry:
        return srl_nokia_network_instance__network_instance__vxlan_interface_entry(name=n.get_str('name'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/vxlan-interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__vxlan_interface({repr(self.name)})')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/vxlan-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__vxlan_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__vxlan_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface__name, child_name)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__vxlan_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__vxlan_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vxlan_interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__evi(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(yang.adata.MNode):
    id: int
    admin_state: ?str
    vxlan_interface: ?str
    evi: ?int

    mut def __init__(self, id: int, admin_state: ?str, vxlan_interface: ?str, evi: ?int):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self.id = id
        self.admin_state = admin_state
        self.vxlan_interface = vxlan_interface
        self.evi = evi

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint8', _id)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = yang.gdata.Leaf('leafref', _vxlan_interface)
        _evi = self.evi
        if _evi is not None:
            children['evi'] = yang.gdata.Leaf('uint32', _evi)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(id=n.get_int('id'), admin_state=n.get_opt_str('admin-state'), vxlan_interface=n.get_opt_str('vxlan-interface'), evi=n.get_opt_int('evi'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn/bgp-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance({repr(self.id)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            leaves.append('{self_name}.vxlan_interface = {repr(_vxlan_interface)}')
        _evi = self.evi
        if _evi is not None:
            leaves.append('{self_name}.evi = {repr(_evi)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn/bgp-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:bgp-evpn'
        self._name = 'bgp-instance'
        self.elements = elements

    mut def create(self, id, evi):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry(id, evi)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements, ns='urn:nokia.com:srlinux:net-inst:bgp-evpn', module='srl_nokia-bgp-evpn')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_id = yang.gdata.from_xml_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__id, child_id)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__admin_state, child_admin_state)
    child_vxlan_interface = yang.gdata.from_xml_opt_str(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__vxlan_interface, child_vxlan_interface)
    child_evi = yang.gdata.from_xml_opt_int(node, 'evi')
    yang.gdata.maybe_add(children, 'evi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance__evi, child_evi)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['id'], elements=elements, ns='urn:nokia.com:srlinux:net-inst:bgp-evpn', module='srl_nokia-bgp-evpn')

class srl_nokia_network_instance__network_instance__protocols__bgp_evpn(yang.adata.MNode):
    bgp_instance: srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance

    mut def __init__(self, bgp_instance: list[srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.bgp_instance = srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance(elements=bgp_instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_instance = self.bgp_instance
        if _bgp_instance is not None:
            children['bgp-instance'] = _bgp_instance.to_gdata()
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_evpn(bgp_instance=srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance.from_gdata(n.get_opt_list('bgp-instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-evpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()')
        leaves = []
        _bgp_instance = self.bgp_instance
        for _element in _bgp_instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-evpn/bgp-instance element: {_element.to_gdata().key_str(['id'])}")
            list_elem = 'bgp_instance_element = {self_name}.bgp_instance.create({repr(_element.id)})'
            res.append(list_elem)
            res.extend(_element.prsrc('bgp_instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-evpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_instance = yang.gdata.from_xml_opt_list(node, 'bgp-instance', 'urn:nokia.com:srlinux:net-inst:bgp-evpn')
    yang.gdata.maybe_add(children, 'bgp-instance', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn__bgp_instance, child_bgp_instance)
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-ipvpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-ipvpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children, presence=True)

class srl_nokia_network_instance__network_instance__protocols__directly_connected(yang.adata.MNode):

    mut def __init__(self):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        pass

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__directly_connected:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__directly_connected()
        return srl_nokia_network_instance__network_instance__protocols__directly_connected()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/directly-connected')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__directly_connected()')
        leaves = []
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/directly-connected'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected(node: xml.Node) -> yang.gdata.Container:
    children = {}
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net(val: list[value]) -> yang.gdata.LeafList:
    return yang.gdata.LeafList('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(yang.adata.MNode):
    ignore: ?bool
    suppress: ?bool

    mut def __init__(self, ignore: ?bool, suppress: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.ignore = ignore
        self.suppress = suppress

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ignore = self.ignore
        if _ignore is not None:
            children['ignore'] = yang.gdata.Leaf('boolean', _ignore)
        _suppress = self.suppress
        if _suppress is not None:
            children['suppress'] = yang.gdata.Leaf('boolean', _suppress)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(ignore=n.get_opt_bool('ignore'), suppress=n.get_opt_bool('suppress'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/attached-bit')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()')
        leaves = []
        _ignore = self.ignore
        if _ignore is not None:
            leaves.append('{self_name}.ignore = {repr(_ignore)}')
        _suppress = self.suppress
        if _suppress is not None:
            leaves.append('{self_name}.suppress = {repr(_suppress)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/attached-bit'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ignore = yang.gdata.from_xml_opt_bool(node, 'ignore')
    yang.gdata.maybe_add(children, 'ignore', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__ignore, child_ignore)
    child_suppress = yang.gdata.from_xml_opt_bool(node, 'suppress')
    yang.gdata.maybe_add(children, 'suppress', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit__suppress, child_suppress)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(yang.adata.MNode):
    lsp_mtu_size: ?int

    mut def __init__(self, lsp_mtu_size: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.lsp_mtu_size = lsp_mtu_size

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            children['lsp-mtu-size'] = yang.gdata.Leaf('uint16', _lsp_mtu_size)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__transport:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(lsp_mtu_size=n.get_opt_int('lsp-mtu-size'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()')
        leaves = []
        _lsp_mtu_size = self.lsp_mtu_size
        if _lsp_mtu_size is not None:
            leaves.append('{self_name}.lsp_mtu_size = {repr(_lsp_mtu_size)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_lsp_mtu_size = yang.gdata.from_xml_opt_int(node, 'lsp-mtu-size')
    yang.gdata.maybe_add(children, 'lsp-mtu-size', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport__lsp_mtu_size, child_lsp_mtu_size)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication__key, child_key)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(yang.adata.MNode):
    interface: ?str
    subinterface: ?str

    mut def __init__(self, interface: ?str, subinterface: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface = interface
        self.subinterface = subinterface

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface = self.interface
        if _interface is not None:
            children['interface'] = yang.gdata.Leaf('leafref', _interface)
        _subinterface = self.subinterface
        if _subinterface is not None:
            children['subinterface'] = yang.gdata.Leaf('leafref', _subinterface)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(interface=n.get_opt_str('interface'), subinterface=n.get_opt_str('subinterface'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/interface-ref')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()')
        leaves = []
        _interface = self.interface
        if _interface is not None:
            leaves.append('{self_name}.interface = {repr(_interface)}')
        _subinterface = self.subinterface
        if _subinterface is not None:
            leaves.append('{self_name}.subinterface = {repr(_subinterface)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/interface-ref'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_interface = yang.gdata.from_xml_opt_str(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__interface, child_interface)
    child_subinterface = yang.gdata.from_xml_opt_str(node, 'subinterface')
    yang.gdata.maybe_add(children, 'subinterface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref__subinterface, child_subinterface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(yang.adata.MNode):
    delay_selection: ?str

    mut def __init__(self, delay_selection: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.delay_selection = delay_selection

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            children['delay-selection'] = yang.gdata.Leaf('enumeration', _delay_selection)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(delay_selection=n.get_opt_str('delay-selection'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/delay')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()')
        leaves = []
        _delay_selection = self.delay_selection
        if _delay_selection is not None:
            leaves.append('{self_name}.delay_selection = {repr(_delay_selection)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/delay'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_delay_selection = yang.gdata.from_xml_opt_str(node, 'delay-selection')
    yang.gdata.maybe_add(children, 'delay-selection', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay__delay_selection, child_delay_selection)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv4-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv4-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(yang.adata.MNode):
    admin_state: ?str
    enable_bfd: ?bool
    include_bfd_tlv: ?bool

    mut def __init__(self, admin_state: ?str, enable_bfd: ?bool, include_bfd_tlv: ?bool):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.admin_state = admin_state
        self.enable_bfd = enable_bfd
        self.include_bfd_tlv = include_bfd_tlv

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            children['include-bfd-tlv'] = yang.gdata.Leaf('boolean', _include_bfd_tlv)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(admin_state=n.get_opt_str('admin-state'), enable_bfd=n.get_opt_bool('enable-bfd'), include_bfd_tlv=n.get_opt_bool('include-bfd-tlv'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/ipv6-unicast')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _include_bfd_tlv = self.include_bfd_tlv
        if _include_bfd_tlv is not None:
            leaves.append('{self_name}.include_bfd_tlv = {repr(_include_bfd_tlv)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/ipv6-unicast'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__admin_state, child_admin_state)
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__enable_bfd, child_enable_bfd)
    child_include_bfd_tlv = yang.gdata.from_xml_opt_bool(node, 'include-bfd-tlv')
    yang.gdata.maybe_add(children, 'include-bfd-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast__include_bfd_tlv, child_include_bfd_tlv)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(yang.adata.MNode):
    level_number: int
    disable: ?bool
    ipv6_unicast_metric: ?int
    metric: ?int
    priority: ?int
    passive: ?bool
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication

    mut def __init__(self, level_number: int, disable: ?bool, ipv6_unicast_metric: ?int, metric: ?int, priority: ?int, passive: ?bool, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.disable = disable
        self.ipv6_unicast_metric = ipv6_unicast_metric
        self.metric = metric
        self.priority = priority
        self.passive = passive
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _disable = self.disable
        if _disable is not None:
            children['disable'] = yang.gdata.Leaf('boolean', _disable)
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            children['ipv6-unicast-metric'] = yang.gdata.Leaf('uint32', _ipv6_unicast_metric)
        _metric = self.metric
        if _metric is not None:
            children['metric'] = yang.gdata.Leaf('uint32', _metric)
        _priority = self.priority
        if _priority is not None:
            children['priority'] = yang.gdata.Leaf('uint8', _priority)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number=n.get_int('level-number'), disable=n.get_opt_bool('disable'), ipv6_unicast_metric=n.get_opt_int('ipv6-unicast-metric'), metric=n.get_opt_int('metric'), priority=n.get_opt_int('priority'), passive=n.get_opt_bool('passive'), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level({repr(self.level_number)})')
        leaves = []
        _disable = self.disable
        if _disable is not None:
            leaves.append('{self_name}.disable = {repr(_disable)}')
        _ipv6_unicast_metric = self.ipv6_unicast_metric
        if _ipv6_unicast_metric is not None:
            leaves.append('{self_name}.ipv6_unicast_metric = {repr(_ipv6_unicast_metric)}')
        _metric = self.metric
        if _metric is not None:
            leaves.append('{self_name}.metric = {repr(_metric)}')
        _priority = self.priority
        if _priority is not None:
            leaves.append('{self_name}.priority = {repr(_priority)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__level_number, child_level_number)
    child_disable = yang.gdata.from_xml_opt_bool(node, 'disable')
    yang.gdata.maybe_add(children, 'disable', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__disable, child_disable)
    child_ipv6_unicast_metric = yang.gdata.from_xml_opt_int(node, 'ipv6-unicast-metric')
    yang.gdata.maybe_add(children, 'ipv6-unicast-metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__ipv6_unicast_metric, child_ipv6_unicast_metric)
    child_metric = yang.gdata.from_xml_opt_int(node, 'metric')
    yang.gdata.maybe_add(children, 'metric', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__metric, child_metric)
    child_priority = yang.gdata.from_xml_opt_int(node, 'priority')
    yang.gdata.maybe_add(children, 'priority', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__priority, child_priority)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__passive, child_passive)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(yang.adata.MNode):
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key

    mut def __init__(self, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()')
        leaves = []
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__hello_authentication, child_hello_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(yang.adata.MNode):
    interface_name: str
    interface_ref: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref
    admin_state: ?str
    circuit_type: ?str
    delay: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay
    hello_padding: ?str
    passive: ?bool
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication

    mut def __init__(self, interface_name: str, interface_ref: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref=None, admin_state: ?str, circuit_type: ?str, delay: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay=None, hello_padding: ?str, passive: ?bool, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast=None, level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level_entry]=[], authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.interface_name = interface_name
        self.interface_ref = interface_ref if interface_ref is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref()
        self.admin_state = admin_state
        self.circuit_type = circuit_type
        self.delay = delay if delay is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay()
        self.hello_padding = hello_padding
        self.passive = passive
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast()
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level(elements=level)
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _interface_name = self.interface_name
        if _interface_name is not None:
            children['interface-name'] = yang.gdata.Leaf('string', _interface_name)
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            children['interface-ref'] = _interface_ref.to_gdata()
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            children['circuit-type'] = yang.gdata.Leaf('enumeration', _circuit_type)
        _delay = self.delay
        if _delay is not None:
            children['delay'] = _delay.to_gdata()
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _passive = self.passive
        if _passive is not None:
            children['passive'] = yang.gdata.Leaf('boolean', _passive)
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name=n.get_str('interface-name'), interface_ref=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref.from_gdata(n.get_opt_cnt('interface-ref')), admin_state=n.get_opt_str('admin-state'), circuit_type=n.get_opt_str('circuit-type'), delay=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay.from_gdata(n.get_opt_cnt('delay')), hello_padding=n.get_opt_str('hello-padding'), passive=n.get_opt_bool('passive'), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level.from_gdata(n.get_opt_list('level')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/interface')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface({repr(self.interface_name)})')
        leaves = []
        _interface_ref = self.interface_ref
        if _interface_ref is not None:
            res.extend(_interface_ref.prsrc('{self_name}.interface_ref', False).splitlines())
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _circuit_type = self.circuit_type
        if _circuit_type is not None:
            leaves.append('{self_name}.circuit_type = {repr(_circuit_type)}')
        _delay = self.delay
        if _delay is not None:
            res.extend(_delay.prsrc('{self_name}.delay', False).splitlines())
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _passive = self.passive
        if _passive is not None:
            leaves.append('{self_name}.passive = {repr(_passive)}')
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'interface'
        self.elements = elements

    mut def create(self, interface_name):
        for e in self.elements:
            match = True
            if e.interface_name != interface_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry(interface_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['interface-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_interface_name = yang.gdata.from_xml_str(node, 'interface-name')
    yang.gdata.maybe_add(children, 'interface-name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_name, child_interface_name)
    child_interface_ref = yang.gdata.from_xml_opt_cnt(node, 'interface-ref')
    yang.gdata.maybe_add(children, 'interface-ref', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__interface_ref, child_interface_ref)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__admin_state, child_admin_state)
    child_circuit_type = yang.gdata.from_xml_opt_str(node, 'circuit-type')
    yang.gdata.maybe_add(children, 'circuit-type', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__circuit_type, child_circuit_type)
    child_delay = yang.gdata.from_xml_opt_cnt(node, 'delay')
    yang.gdata.maybe_add(children, 'delay', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__delay, child_delay)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__hello_padding, child_hello_padding)
    child_passive = yang.gdata.from_xml_opt_bool(node, 'passive')
    yang.gdata.maybe_add(children, 'passive', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__passive, child_passive)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__ipv6_unicast, child_ipv6_unicast)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__level, child_level)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['interface-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(yang.adata.MNode):
    external: ?int
    internal: ?int

    mut def __init__(self, external: ?int, internal: ?int):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.external = external
        self.internal = internal

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _external = self.external
        if _external is not None:
            children['external'] = yang.gdata.Leaf('uint8', _external)
        _internal = self.internal
        if _internal is not None:
            children['internal'] = yang.gdata.Leaf('uint8', _internal)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(external=n.get_opt_int('external'), internal=n.get_opt_int('internal'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/route-preference')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()')
        leaves = []
        _external = self.external
        if _external is not None:
            leaves.append('{self_name}.external = {repr(_external)}')
        _internal = self.internal
        if _internal is not None:
            leaves.append('{self_name}.internal = {repr(_internal)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/route-preference'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_external = yang.gdata.from_xml_opt_int(node, 'external')
    yang.gdata.maybe_add(children, 'external', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__external, child_external)
    child_internal = yang.gdata.from_xml_opt_int(node, 'internal')
    yang.gdata.maybe_add(children, 'internal', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference__internal, child_internal)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/csnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/psnp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/hello-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/hello-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(yang.adata.MNode):
    generate: ?bool
    check_received: ?str

    mut def __init__(self, generate: ?bool, check_received: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.generate = generate
        self.check_received = check_received

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _generate = self.generate
        if _generate is not None:
            children['generate'] = yang.gdata.Leaf('boolean', _generate)
        _check_received = self.check_received
        if _check_received is not None:
            children['check-received'] = yang.gdata.Leaf('enumeration', _check_received)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(generate=n.get_opt_bool('generate'), check_received=n.get_opt_str('check-received'))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()')
        leaves = []
        _generate = self.generate
        if _generate is not None:
            leaves.append('{self_name}.generate = {repr(_generate)}')
        _check_received = self.check_received
        if _check_received is not None:
            leaves.append('{self_name}.check_received = {repr(_check_received)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/lsp-authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_generate = yang.gdata.from_xml_opt_bool(node, 'generate')
    yang.gdata.maybe_add(children, 'generate', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__generate, child_generate)
    child_check_received = yang.gdata.from_xml_opt_str(node, 'check-received')
    yang.gdata.maybe_add(children, 'check-received', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication__check_received, child_check_received)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(yang.adata.MNode):
    crypto_algorithm: ?str
    auth_password: ?str

    mut def __init__(self, crypto_algorithm: ?str, auth_password: ?str):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.crypto_algorithm = crypto_algorithm
        self.auth_password = auth_password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            children['crypto-algorithm'] = yang.gdata.Leaf('enumeration', _crypto_algorithm)
        _auth_password = self.auth_password
        if _auth_password is not None:
            children['auth-password'] = yang.gdata.Leaf('string', _auth_password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(crypto_algorithm=n.get_opt_str('crypto-algorithm'), auth_password=n.get_opt_str('auth-password'))
        raise ValueError('Missing required subtree srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication/key')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()')
        leaves = []
        _crypto_algorithm = self.crypto_algorithm
        if _crypto_algorithm is not None:
            leaves.append('{self_name}.crypto_algorithm = {repr(_crypto_algorithm)}')
        _auth_password = self.auth_password
        if _auth_password is not None:
            leaves.append('{self_name}.auth_password = {repr(_auth_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication/key'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_crypto_algorithm = yang.gdata.from_xml_opt_str(node, 'crypto-algorithm')
    yang.gdata.maybe_add(children, 'crypto-algorithm', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__crypto_algorithm, child_crypto_algorithm)
    child_auth_password = yang.gdata.from_xml_opt_str(node, 'auth-password')
    yang.gdata.maybe_add(children, 'auth-password', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key__auth_password, child_auth_password)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(yang.adata.MNode):
    csnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication
    psnp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication
    hello_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication
    lsp_authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication
    keychain: ?str
    key: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key

    mut def __init__(self, csnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication=None, psnp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication=None, hello_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication=None, lsp_authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication=None, keychain: ?str, key: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.csnp_authentication = csnp_authentication if csnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication()
        self.psnp_authentication = psnp_authentication if psnp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication()
        self.hello_authentication = hello_authentication if hello_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication()
        self.lsp_authentication = lsp_authentication if lsp_authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication()
        self.keychain = keychain
        self.key = key if key is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            children['csnp-authentication'] = _csnp_authentication.to_gdata()
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            children['psnp-authentication'] = _psnp_authentication.to_gdata()
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            children['hello-authentication'] = _hello_authentication.to_gdata()
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            children['lsp-authentication'] = _lsp_authentication.to_gdata()
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _key = self.key
        if _key is not None:
            children['key'] = _key.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(csnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication.from_gdata(n.get_opt_cnt('csnp-authentication')), psnp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication.from_gdata(n.get_opt_cnt('psnp-authentication')), hello_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication.from_gdata(n.get_opt_cnt('hello-authentication')), lsp_authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication.from_gdata(n.get_opt_cnt('lsp-authentication')), keychain=n.get_opt_str('keychain'), key=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key.from_gdata(n.get_opt_cnt('key')))
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()')
        leaves = []
        _csnp_authentication = self.csnp_authentication
        if _csnp_authentication is not None:
            res.extend(_csnp_authentication.prsrc('{self_name}.csnp_authentication', False).splitlines())
        _psnp_authentication = self.psnp_authentication
        if _psnp_authentication is not None:
            res.extend(_psnp_authentication.prsrc('{self_name}.psnp_authentication', False).splitlines())
        _hello_authentication = self.hello_authentication
        if _hello_authentication is not None:
            res.extend(_hello_authentication.prsrc('{self_name}.hello_authentication', False).splitlines())
        _lsp_authentication = self.lsp_authentication
        if _lsp_authentication is not None:
            res.extend(_lsp_authentication.prsrc('{self_name}.lsp_authentication', False).splitlines())
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _key = self.key
        if _key is not None:
            res.extend(_key.prsrc('{self_name}.key', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_csnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'csnp-authentication')
    yang.gdata.maybe_add(children, 'csnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__csnp_authentication, child_csnp_authentication)
    child_psnp_authentication = yang.gdata.from_xml_opt_cnt(node, 'psnp-authentication')
    yang.gdata.maybe_add(children, 'psnp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__psnp_authentication, child_psnp_authentication)
    child_hello_authentication = yang.gdata.from_xml_opt_cnt(node, 'hello-authentication')
    yang.gdata.maybe_add(children, 'hello-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__hello_authentication, child_hello_authentication)
    child_lsp_authentication = yang.gdata.from_xml_opt_cnt(node, 'lsp-authentication')
    yang.gdata.maybe_add(children, 'lsp-authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__lsp_authentication, child_lsp_authentication)
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__keychain, child_keychain)
    child_key = yang.gdata.from_xml_opt_cnt(node, 'key')
    yang.gdata.maybe_add(children, 'key', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication__key, child_key)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(yang.adata.MNode):
    level_number: int
    metric_style: ?str
    loopfree_alternate_exclude: ?bool
    route_preference: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication

    mut def __init__(self, level_number: int, metric_style: ?str, loopfree_alternate_exclude: ?bool, route_preference: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication=None):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.level_number = level_number
        self.metric_style = metric_style
        self.loopfree_alternate_exclude = loopfree_alternate_exclude
        self.route_preference = route_preference if route_preference is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _level_number = self.level_number
        if _level_number is not None:
            children['level-number'] = yang.gdata.Leaf('uint8', _level_number)
        _metric_style = self.metric_style
        if _metric_style is not None:
            children['metric-style'] = yang.gdata.Leaf('enumeration', _metric_style)
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            children['loopfree-alternate-exclude'] = yang.gdata.Leaf('boolean', _loopfree_alternate_exclude)
        _route_preference = self.route_preference
        if _route_preference is not None:
            children['route-preference'] = _route_preference.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number=n.get_int('level-number'), metric_style=n.get_opt_str('metric-style'), loopfree_alternate_exclude=n.get_opt_bool('loopfree-alternate-exclude'), route_preference=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference.from_gdata(n.get_opt_cnt('route-preference')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication.from_gdata(n.get_opt_cnt('authentication')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance/level')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance__level({repr(self.level_number)})')
        leaves = []
        _metric_style = self.metric_style
        if _metric_style is not None:
            leaves.append('{self_name}.metric_style = {repr(_metric_style)}')
        _loopfree_alternate_exclude = self.loopfree_alternate_exclude
        if _loopfree_alternate_exclude is not None:
            leaves.append('{self_name}.loopfree_alternate_exclude = {repr(_loopfree_alternate_exclude)}')
        _route_preference = self.route_preference
        if _route_preference is not None:
            res.extend(_route_preference.prsrc('{self_name}.route_preference', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance/level'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance__level(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'level'
        self.elements = elements

    mut def create(self, level_number):
        for e in self.elements:
            match = True
            if e.level_number != level_number:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry(level_number)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['level-number'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_level_number = yang.gdata.from_xml_int(node, 'level-number')
    yang.gdata.maybe_add(children, 'level-number', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__level_number, child_level_number)
    child_metric_style = yang.gdata.from_xml_opt_str(node, 'metric-style')
    yang.gdata.maybe_add(children, 'metric-style', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__metric_style, child_metric_style)
    child_loopfree_alternate_exclude = yang.gdata.from_xml_opt_bool(node, 'loopfree-alternate-exclude')
    yang.gdata.maybe_add(children, 'loopfree-alternate-exclude', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__loopfree_alternate_exclude, child_loopfree_alternate_exclude)
    child_route_preference = yang.gdata.from_xml_opt_cnt(node, 'route-preference')
    yang.gdata.maybe_add(children, 'route-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__route_preference, child_route_preference)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level__authentication, child_authentication)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_element(e) for e in nodes]
    return yang.gdata.List(keys=['level-number'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(yang.adata.MNode):
    name: str
    admin_state: ?str
    instance_id: ?int
    net: list[str]
    level_capability: ?str
    max_ecmp_paths: ?int
    poi_tlv: ?bool
    iid_tlv: ?bool
    advertise_router_capability: ?bool
    prefix_attributes_tlv: ?bool
    export_policy: ?str
    hello_padding: ?str
    enable_csnp_on_p2p_links: ?bool
    attached_bit: srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit
    transport: srl_nokia_network_instance__network_instance__protocols__isis__instance__transport
    ipv4_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast
    ipv6_unicast: srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast
    authentication: srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication
    interface: srl_nokia_network_instance__network_instance__protocols__isis__instance__interface
    level: srl_nokia_network_instance__network_instance__protocols__isis__instance__level

    mut def __init__(self, name: str, admin_state: ?str, instance_id: ?int, net: ?list[str]=None, level_capability: ?str, max_ecmp_paths: ?int, poi_tlv: ?bool, iid_tlv: ?bool, advertise_router_capability: ?bool, prefix_attributes_tlv: ?bool, export_policy: ?str, hello_padding: ?str, enable_csnp_on_p2p_links: ?bool, attached_bit: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit=None, transport: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__transport=None, ipv4_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast=None, ipv6_unicast: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication=None, interface: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__interface_entry]=[], level: list[srl_nokia_network_instance__network_instance__protocols__isis__instance__level_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.name = name
        self.admin_state = admin_state
        self.instance_id = instance_id
        self.net = net if net is not None else []
        self.level_capability = level_capability
        self.max_ecmp_paths = max_ecmp_paths
        self.poi_tlv = poi_tlv
        self.iid_tlv = iid_tlv
        self.advertise_router_capability = advertise_router_capability
        self.prefix_attributes_tlv = prefix_attributes_tlv
        self.export_policy = export_policy
        self.hello_padding = hello_padding
        self.enable_csnp_on_p2p_links = enable_csnp_on_p2p_links
        self.attached_bit = attached_bit if attached_bit is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__transport()
        self.ipv4_unicast = ipv4_unicast if ipv4_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast()
        self.ipv6_unicast = ipv6_unicast if ipv6_unicast is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication()
        self.interface = srl_nokia_network_instance__network_instance__protocols__isis__instance__interface(elements=interface)
        self.level = srl_nokia_network_instance__network_instance__protocols__isis__instance__level(elements=level)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _instance_id = self.instance_id
        if _instance_id is not None:
            children['instance-id'] = yang.gdata.Leaf('uint32', _instance_id)
        _net = self.net
        if _net is not None:
            children['net'] = yang.gdata.LeafList('string', _net)
        _level_capability = self.level_capability
        if _level_capability is not None:
            children['level-capability'] = yang.gdata.Leaf('enumeration', _level_capability)
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            children['max-ecmp-paths'] = yang.gdata.Leaf('uint8', _max_ecmp_paths)
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            children['poi-tlv'] = yang.gdata.Leaf('boolean', _poi_tlv)
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            children['iid-tlv'] = yang.gdata.Leaf('boolean', _iid_tlv)
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            children['advertise-router-capability'] = yang.gdata.Leaf('boolean', _advertise_router_capability)
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            children['prefix-attributes-tlv'] = yang.gdata.Leaf('boolean', _prefix_attributes_tlv)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            children['hello-padding'] = yang.gdata.Leaf('enumeration', _hello_padding)
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            children['enable-csnp-on-p2p-links'] = yang.gdata.Leaf('boolean', _enable_csnp_on_p2p_links)
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            children['attached-bit'] = _attached_bit.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = _ipv4_unicast.to_gdata()
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = _ipv6_unicast.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _level = self.level
        if _level is not None:
            children['level'] = _level.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__isis__instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name=n.get_str('name'), admin_state=n.get_opt_str('admin-state'), instance_id=n.get_opt_int('instance-id'), net=n.get_opt_strs('net'), level_capability=n.get_opt_str('level-capability'), max_ecmp_paths=n.get_opt_int('max-ecmp-paths'), poi_tlv=n.get_opt_bool('poi-tlv'), iid_tlv=n.get_opt_bool('iid-tlv'), advertise_router_capability=n.get_opt_bool('advertise-router-capability'), prefix_attributes_tlv=n.get_opt_bool('prefix-attributes-tlv'), export_policy=n.get_opt_str('export-policy'), hello_padding=n.get_opt_str('hello-padding'), enable_csnp_on_p2p_links=n.get_opt_bool('enable-csnp-on-p2p-links'), attached_bit=srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit.from_gdata(n.get_opt_cnt('attached-bit')), transport=srl_nokia_network_instance__network_instance__protocols__isis__instance__transport.from_gdata(n.get_opt_cnt('transport')), ipv4_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast.from_gdata(n.get_opt_cnt('ipv4-unicast')), ipv6_unicast=srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast.from_gdata(n.get_opt_cnt('ipv6-unicast')), authentication=srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication.from_gdata(n.get_opt_cnt('authentication')), interface=srl_nokia_network_instance__network_instance__protocols__isis__instance__interface.from_gdata(n.get_opt_list('interface')), level=srl_nokia_network_instance__network_instance__protocols__isis__instance__level.from_gdata(n.get_opt_list('level')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis/instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis__instance({repr(self.name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _instance_id = self.instance_id
        if _instance_id is not None:
            leaves.append('{self_name}.instance_id = {repr(_instance_id)}')
        _net = self.net
        if _net is not None:
            leaves.append('{self_name}.net = {repr(_net)}')
        _level_capability = self.level_capability
        if _level_capability is not None:
            leaves.append('{self_name}.level_capability = {repr(_level_capability)}')
        _max_ecmp_paths = self.max_ecmp_paths
        if _max_ecmp_paths is not None:
            leaves.append('{self_name}.max_ecmp_paths = {repr(_max_ecmp_paths)}')
        _poi_tlv = self.poi_tlv
        if _poi_tlv is not None:
            leaves.append('{self_name}.poi_tlv = {repr(_poi_tlv)}')
        _iid_tlv = self.iid_tlv
        if _iid_tlv is not None:
            leaves.append('{self_name}.iid_tlv = {repr(_iid_tlv)}')
        _advertise_router_capability = self.advertise_router_capability
        if _advertise_router_capability is not None:
            leaves.append('{self_name}.advertise_router_capability = {repr(_advertise_router_capability)}')
        _prefix_attributes_tlv = self.prefix_attributes_tlv
        if _prefix_attributes_tlv is not None:
            leaves.append('{self_name}.prefix_attributes_tlv = {repr(_prefix_attributes_tlv)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        _hello_padding = self.hello_padding
        if _hello_padding is not None:
            leaves.append('{self_name}.hello_padding = {repr(_hello_padding)}')
        _enable_csnp_on_p2p_links = self.enable_csnp_on_p2p_links
        if _enable_csnp_on_p2p_links is not None:
            leaves.append('{self_name}.enable_csnp_on_p2p_links = {repr(_enable_csnp_on_p2p_links)}')
        _attached_bit = self.attached_bit
        if _attached_bit is not None:
            res.extend(_attached_bit.prsrc('{self_name}.attached_bit', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            res.extend(_ipv4_unicast.prsrc('{self_name}.ipv4_unicast', False).splitlines())
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            res.extend(_ipv6_unicast.prsrc('{self_name}.ipv6_unicast', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/interface element: {_element.to_gdata().key_str(['interface-name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.interface_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _level = self.level
        for _element in _level.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance/level element: {_element.to_gdata().key_str(['level-number'])}")
            list_elem = 'level_element = {self_name}.level.create({repr(_element.level_number)})'
            res.append(list_elem)
            res.extend(_element.prsrc('level_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis/instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__isis__instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self._name = 'instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__isis__instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__isis__instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__name, child_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__admin_state, child_admin_state)
    child_instance_id = yang.gdata.from_xml_opt_int(node, 'instance-id')
    yang.gdata.maybe_add(children, 'instance-id', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__instance_id, child_instance_id)
    child_net = yang.gdata.from_xml_opt_strs(node, 'net')
    yang.gdata.maybe_add(children, 'net', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__net, child_net)
    child_level_capability = yang.gdata.from_xml_opt_str(node, 'level-capability')
    yang.gdata.maybe_add(children, 'level-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level_capability, child_level_capability)
    child_max_ecmp_paths = yang.gdata.from_xml_opt_int(node, 'max-ecmp-paths')
    yang.gdata.maybe_add(children, 'max-ecmp-paths', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__max_ecmp_paths, child_max_ecmp_paths)
    child_poi_tlv = yang.gdata.from_xml_opt_bool(node, 'poi-tlv')
    yang.gdata.maybe_add(children, 'poi-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__poi_tlv, child_poi_tlv)
    child_iid_tlv = yang.gdata.from_xml_opt_bool(node, 'iid-tlv')
    yang.gdata.maybe_add(children, 'iid-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__iid_tlv, child_iid_tlv)
    child_advertise_router_capability = yang.gdata.from_xml_opt_bool(node, 'advertise-router-capability')
    yang.gdata.maybe_add(children, 'advertise-router-capability', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__advertise_router_capability, child_advertise_router_capability)
    child_prefix_attributes_tlv = yang.gdata.from_xml_opt_bool(node, 'prefix-attributes-tlv')
    yang.gdata.maybe_add(children, 'prefix-attributes-tlv', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__prefix_attributes_tlv, child_prefix_attributes_tlv)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__export_policy, child_export_policy)
    child_hello_padding = yang.gdata.from_xml_opt_str(node, 'hello-padding')
    yang.gdata.maybe_add(children, 'hello-padding', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__hello_padding, child_hello_padding)
    child_enable_csnp_on_p2p_links = yang.gdata.from_xml_opt_bool(node, 'enable-csnp-on-p2p-links')
    yang.gdata.maybe_add(children, 'enable-csnp-on-p2p-links', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__enable_csnp_on_p2p_links, child_enable_csnp_on_p2p_links)
    child_attached_bit = yang.gdata.from_xml_opt_cnt(node, 'attached-bit')
    yang.gdata.maybe_add(children, 'attached-bit', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__attached_bit, child_attached_bit)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__transport, child_transport)
    child_ipv4_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_cnt(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__ipv6_unicast, child_ipv6_unicast)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__authentication, child_authentication)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__interface, child_interface)
    child_level = yang.gdata.from_xml_opt_list(node, 'level')
    yang.gdata.maybe_add(children, 'level', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance__level, child_level)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__isis(yang.adata.MNode):
    instance: srl_nokia_network_instance__network_instance__protocols__isis__instance

    mut def __init__(self, instance: list[srl_nokia_network_instance__network_instance__protocols__isis__instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:isis:isis'
        self.instance = srl_nokia_network_instance__network_instance__protocols__isis__instance(elements=instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _instance = self.instance
        if _instance is not None:
            children['instance'] = _instance.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__isis:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__isis(instance=srl_nokia_network_instance__network_instance__protocols__isis__instance.from_gdata(n.get_opt_list('instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/isis')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__isis()')
        leaves = []
        _instance = self.instance
        for _element in _instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/isis/instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'instance_element = {self_name}.instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/isis'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__isis(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_instance = yang.gdata.from_xml_opt_list(node, 'instance')
    yang.gdata.maybe_add(children, 'instance', from_xml_srl_nokia_network_instance__network_instance__protocols__isis__instance, child_instance)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:isis:isis', module='srl_nokia-isis')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__autonomous_system(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__router_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as if remove_private_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.extend(_remove_private_as.prsrc('{self_name}.remove_private_as', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options__remove_private_as, child_remove_private_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__import_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__export_reject_all(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(yang.adata.MNode):
    import_reject_all: ?bool
    export_reject_all: ?bool

    mut def __init__(self, import_reject_all: ?bool, export_reject_all: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.import_reject_all = import_reject_all
        self.export_reject_all = export_reject_all

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _import_reject_all = self.import_reject_all
        if _import_reject_all is not None:
            children['import-reject-all'] = yang.gdata.Leaf('boolean', _import_reject_all)
        _export_reject_all = self.export_reject_all
        if _export_reject_all is not None:
            children['export-reject-all'] = yang.gdata.Leaf('boolean', _export_reject_all)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(import_reject_all=n.get_opt_bool('import-reject-all'), export_reject_all=n.get_opt_bool('export-reject-all'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/ebgp-default-policy')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()')
        leaves = []
        _import_reject_all = self.import_reject_all
        if _import_reject_all is not None:
            leaves.append('{self_name}.import_reject_all = {repr(_import_reject_all)}')
        _export_reject_all = self.export_reject_all
        if _export_reject_all is not None:
            leaves.append('{self_name}.export_reject_all = {repr(_export_reject_all)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/ebgp-default-policy'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_import_reject_all = yang.gdata.from_xml_opt_bool(node, 'import-reject-all')
    yang.gdata.maybe_add(children, 'import-reject-all', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__import_reject_all, child_import_reject_all)
    child_export_reject_all = yang.gdata.from_xml_opt_bool(node, 'export-reject-all')
    yang.gdata.maybe_add(children, 'export-reject-all', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy__export_reject_all, child_export_reject_all)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__afi_safi_name(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: Identityref
    admin_state: ?str

    mut def __init__(self, afi_safi_name: Identityref, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            _identityref_afi_safi_name, error = complete_and_validate_identityref(_afi_safi_name, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
            if _identityref_afi_safi_name is not None:
                _afi_safi_name = _identityref_afi_safi_name
            else:
                raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name=n.get_Identityref('afi-safi-name'), admin_state=n.get_opt_str('admin-state'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_Identityref(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ebgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ibgp(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__preference(yang.adata.MNode):
    ebgp: ?int
    ibgp: ?int

    mut def __init__(self, ebgp: ?int, ibgp: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ebgp = ebgp
        self.ibgp = ibgp

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ebgp = self.ebgp
        if _ebgp is not None:
            children['ebgp'] = yang.gdata.Leaf('uint8', _ebgp)
        _ibgp = self.ibgp
        if _ibgp is not None:
            children['ibgp'] = yang.gdata.Leaf('uint8', _ibgp)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__preference:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__preference(ebgp=n.get_opt_int('ebgp'), ibgp=n.get_opt_int('ibgp'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__preference()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/preference')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__preference()')
        leaves = []
        _ebgp = self.ebgp
        if _ebgp is not None:
            leaves.append('{self_name}.ebgp = {repr(_ebgp)}')
        _ibgp = self.ibgp
        if _ibgp is not None:
            leaves.append('{self_name}.ibgp = {repr(_ibgp)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/preference'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ebgp = yang.gdata.from_xml_opt_int(node, 'ebgp')
    yang.gdata.maybe_add(children, 'ebgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ebgp, child_ebgp)
    child_ibgp = yang.gdata.from_xml_opt_int(node, 'ibgp')
    yang.gdata.maybe_add(children, 'ibgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference__ibgp, child_ibgp)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__address_family(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf address-family: {error}')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__route_table_import(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(yang.adata.MNode):
    address_family: Identityref
    route_table_import: ?str

    mut def __init__(self, address_family: Identityref, route_table_import: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.address_family = address_family
        self.route_table_import = route_table_import

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _address_family = self.address_family
        if _address_family is not None:
            _identityref_address_family, error = complete_and_validate_identityref(_address_family, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
            if _identityref_address_family is not None:
                _address_family = _identityref_address_family
            else:
                raise ValueError('Invalid value for identityref leaf address-family: {error}')
            children['address-family'] = yang.gdata.Leaf('identityref', _address_family)
        _route_table_import = self.route_table_import
        if _route_table_import is not None:
            children['route-table-import'] = yang.gdata.Leaf('leafref', _route_table_import)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family=n.get_Identityref('address-family'), route_table_import=n.get_opt_str('route-table-import'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/rib-management/table')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table({repr(self.address_family)})')
        leaves = []
        _route_table_import = self.route_table_import
        if _route_table_import is not None:
            leaves.append('{self_name}.route_table_import = {repr(_route_table_import)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/rib-management/table'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'table'
        self.elements = elements

    mut def create(self, address_family):
        for e in self.elements:
            match = True
            if e.address_family != address_family:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry(address_family)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['address-family'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_address_family = yang.gdata.from_xml_Identityref(node, 'address-family')
    yang.gdata.maybe_add(children, 'address-family', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__address_family, child_address_family)
    child_route_table_import = yang.gdata.from_xml_opt_str(node, 'route-table-import')
    yang.gdata.maybe_add(children, 'route-table-import', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table__route_table_import, child_route_table_import)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_element(e) for e in nodes]
    return yang.gdata.List(keys=['address-family'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(yang.adata.MNode):
    table: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table

    mut def __init__(self, table: list[srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.table = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table(elements=table)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _table = self.table
        if _table is not None:
            children['table'] = _table.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__rib_management:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(table=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table.from_gdata(n.get_opt_list('table')))
        return srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/rib-management')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()')
        leaves = []
        _table = self.table
        for _element in _table.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/rib-management/table element: {_element.to_gdata().key_str(['address-family'])}")
            list_elem = 'table_element = {self_name}.table.create({repr(_element.address_family)})'
            res.append(list_elem)
            res.extend(_element.prsrc('table_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/rib-management'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_table = yang.gdata.from_xml_opt_list(node, 'table')
    yang.gdata.maybe_add(children, 'table', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management__table, child_table)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__rapid_withdrawal(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__wait_for_fib_install(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(yang.adata.MNode):
    rapid_withdrawal: ?bool
    wait_for_fib_install: ?bool

    mut def __init__(self, rapid_withdrawal: ?bool, wait_for_fib_install: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.rapid_withdrawal = rapid_withdrawal
        self.wait_for_fib_install = wait_for_fib_install

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rapid_withdrawal = self.rapid_withdrawal
        if _rapid_withdrawal is not None:
            children['rapid-withdrawal'] = yang.gdata.Leaf('boolean', _rapid_withdrawal)
        _wait_for_fib_install = self.wait_for_fib_install
        if _wait_for_fib_install is not None:
            children['wait-for-fib-install'] = yang.gdata.Leaf('boolean', _wait_for_fib_install)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(rapid_withdrawal=n.get_opt_bool('rapid-withdrawal'), wait_for_fib_install=n.get_opt_bool('wait-for-fib-install'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-advertisement')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()')
        leaves = []
        _rapid_withdrawal = self.rapid_withdrawal
        if _rapid_withdrawal is not None:
            leaves.append('{self_name}.rapid_withdrawal = {repr(_rapid_withdrawal)}')
        _wait_for_fib_install = self.wait_for_fib_install
        if _wait_for_fib_install is not None:
            leaves.append('{self_name}.wait_for_fib_install = {repr(_wait_for_fib_install)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-advertisement'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rapid_withdrawal = yang.gdata.from_xml_opt_bool(node, 'rapid-withdrawal')
    yang.gdata.maybe_add(children, 'rapid-withdrawal', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__rapid_withdrawal, child_rapid_withdrawal)
    child_wait_for_fib_install = yang.gdata.from_xml_opt_bool(node, 'wait-for-fib-install')
    yang.gdata.maybe_add(children, 'wait-for-fib-install', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement__wait_for_fib_install, child_wait_for_fib_install)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__half_life(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__max_suppress_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__reuse_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__suppress_threshold(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(yang.adata.MNode):
    half_life: ?int
    max_suppress_time: ?int
    reuse_threshold: ?int
    suppress_threshold: ?int

    mut def __init__(self, half_life: ?int, max_suppress_time: ?int, reuse_threshold: ?int, suppress_threshold: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.half_life = half_life
        self.max_suppress_time = max_suppress_time
        self.reuse_threshold = reuse_threshold
        self.suppress_threshold = suppress_threshold

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _half_life = self.half_life
        if _half_life is not None:
            children['half-life'] = yang.gdata.Leaf('uint16', _half_life)
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            children['max-suppress-time'] = yang.gdata.Leaf('uint16', _max_suppress_time)
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            children['reuse-threshold'] = yang.gdata.Leaf('uint16', _reuse_threshold)
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            children['suppress-threshold'] = yang.gdata.Leaf('uint16', _suppress_threshold)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(half_life=n.get_opt_int('half-life'), max_suppress_time=n.get_opt_int('max-suppress-time'), reuse_threshold=n.get_opt_int('reuse-threshold'), suppress_threshold=n.get_opt_int('suppress-threshold'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-flap-damping')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()')
        leaves = []
        _half_life = self.half_life
        if _half_life is not None:
            leaves.append('{self_name}.half_life = {repr(_half_life)}')
        _max_suppress_time = self.max_suppress_time
        if _max_suppress_time is not None:
            leaves.append('{self_name}.max_suppress_time = {repr(_max_suppress_time)}')
        _reuse_threshold = self.reuse_threshold
        if _reuse_threshold is not None:
            leaves.append('{self_name}.reuse_threshold = {repr(_reuse_threshold)}')
        _suppress_threshold = self.suppress_threshold
        if _suppress_threshold is not None:
            leaves.append('{self_name}.suppress_threshold = {repr(_suppress_threshold)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-flap-damping'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_half_life = yang.gdata.from_xml_opt_int(node, 'half-life')
    yang.gdata.maybe_add(children, 'half-life', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__half_life, child_half_life)
    child_max_suppress_time = yang.gdata.from_xml_opt_int(node, 'max-suppress-time')
    yang.gdata.maybe_add(children, 'max-suppress-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__max_suppress_time, child_max_suppress_time)
    child_reuse_threshold = yang.gdata.from_xml_opt_int(node, 'reuse-threshold')
    yang.gdata.maybe_add(children, 'reuse-threshold', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__reuse_threshold, child_reuse_threshold)
    child_suppress_threshold = yang.gdata.from_xml_opt_int(node, 'suppress-threshold')
    yang.gdata.maybe_add(children, 'suppress-threshold', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping__suppress_threshold, child_suppress_threshold)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(yang.adata.MNode):
    admin_state: ?str

    mut def __init__(self, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(admin_state=n.get_opt_str('admin-state'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/segment-routing-mpls')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/segment-routing-mpls'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__send_community:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__single_hop_connected_check(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__transport(yang.adata.MNode):
    single_hop_connected_check: ?bool
    mtu_discovery: ?bool
    tcp_mss: ?int

    mut def __init__(self, single_hop_connected_check: ?bool, mtu_discovery: ?bool, tcp_mss: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.single_hop_connected_check = single_hop_connected_check
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _single_hop_connected_check = self.single_hop_connected_check
        if _single_hop_connected_check is not None:
            children['single-hop-connected-check'] = yang.gdata.Leaf('boolean', _single_hop_connected_check)
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__transport:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__transport(single_hop_connected_check=n.get_opt_bool('single-hop-connected-check'), mtu_discovery=n.get_opt_bool('mtu-discovery'), tcp_mss=n.get_opt_int('tcp-mss'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__transport()')
        leaves = []
        _single_hop_connected_check = self.single_hop_connected_check
        if _single_hop_connected_check is not None:
            leaves.append('{self_name}.single_hop_connected_check = {repr(_single_hop_connected_check)}')
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            leaves.append('{self_name}.mtu_discovery = {repr(_mtu_discovery)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_single_hop_connected_check = yang.gdata.from_xml_opt_bool(node, 'single-hop-connected-check')
    yang.gdata.maybe_add(children, 'single-hop-connected-check', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__single_hop_connected_check, child_single_hop_connected_check)
    child_mtu_discovery = yang.gdata.from_xml_opt_bool(node, 'mtu-discovery')
    yang.gdata.maybe_add(children, 'mtu-discovery', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__mtu_discovery, child_mtu_discovery)
    child_tcp_mss = yang.gdata.from_xml_opt_int(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport__tcp_mss, child_tcp_mss)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__group_name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')), replace_peer_as=n.get_opt_bool('replace-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/group/as-path-options/remove-private-as')
            res.append('remove_private_as = {self_name}.create_remove_private_as()')
            res.extend(_remove_private_as.prsrc('remove_private_as', False).splitlines())
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            leaves.append('{self_name}.replace_peer_as = {repr(_replace_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__remove_private_as, child_remove_private_as)
    child_replace_peer_as = yang.gdata.from_xml_opt_bool(node, 'replace-peer-as')
    yang.gdata.maybe_add(children, 'replace-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options__replace_peer_as, child_replace_peer_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(enable_bfd=n.get_opt_bool('enable-bfd'), fast_failover=n.get_opt_bool('fast-failover'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/failure-detection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()')
        leaves = []
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            leaves.append('{self_name}.fast_failover = {repr(_fast_failover)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/failure-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__enable_bfd, child_enable_bfd)
    child_fast_failover = yang.gdata.from_xml_opt_bool(node, 'fast-failover')
    yang.gdata.maybe_add(children, 'fast-failover', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection__fast_failover, child_fast_failover)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(admin_state=n.get_opt_str('admin-state'), maximum_hops=n.get_opt_int('maximum-hops'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/multihop')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            leaves.append('{self_name}.maximum_hops = {repr(_maximum_hops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__admin_state, child_admin_state)
    child_maximum_hops = yang.gdata.from_xml_opt_int(node, 'maximum-hops')
    yang.gdata.maybe_add(children, 'maximum-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop__maximum_hops, child_maximum_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__afi_safi_name(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: Identityref
    admin_state: ?str

    mut def __init__(self, afi_safi_name: Identityref, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            _identityref_afi_safi_name, error = complete_and_validate_identityref(_afi_safi_name, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
            if _identityref_afi_safi_name is not None:
                _afi_safi_name = _identityref_afi_safi_name
            else:
                raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name=n.get_Identityref('afi-safi-name'), admin_state=n.get_opt_str('admin-state'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_Identityref(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(as_number=n.get_opt_int('as-number'), prepend_global_as=n.get_opt_bool('prepend-global-as'), prepend_local_as=n.get_opt_bool('prepend-local-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/local-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            leaves.append('{self_name}.prepend_global_as = {repr(_prepend_global_as)}')
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            leaves.append('{self_name}.prepend_local_as = {repr(_prepend_local_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/local-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__as_number, child_as_number)
    child_prepend_global_as = yang.gdata.from_xml_opt_bool(node, 'prepend-global-as')
    yang.gdata.maybe_add(children, 'prepend-global-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_global_as, child_prepend_global_as)
    child_prepend_local_as = yang.gdata.from_xml_opt_bool(node, 'prepend-local-as')
    yang.gdata.maybe_add(children, 'prepend-local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as__prepend_local_as, child_prepend_local_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(yang.adata.MNode):
    ipv4_unicast: ?bool
    ipv6_unicast: ?bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool, ipv6_unicast: ?bool, export_policy: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_unicast = ipv4_unicast
        self.ipv6_unicast = ipv6_unicast
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(ipv4_unicast=n.get_opt_bool('ipv4-unicast'), ipv6_unicast=n.get_opt_bool('ipv6-unicast'), export_policy=n.get_opt_str('export-policy'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group/send-default-route')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()')
        leaves = []
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            leaves.append('{self_name}.ipv4_unicast = {repr(_ipv4_unicast)}')
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            leaves.append('{self_name}.ipv6_unicast = {repr(_ipv6_unicast)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group/send-default-route'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__ipv6_unicast, child_ipv6_unicast)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route__export_policy, child_export_policy)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(yang.adata.MNode):
    group_name: str
    admin_state: ?str
    description: ?str
    local_preference: ?int
    next_hop_self: ?bool
    peer_as: ?int
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as
    route_flap_damping: ?bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route

    mut def __init__(self, group_name: str, admin_state: ?str, description: ?str, local_preference: ?int, next_hop_self: ?bool, peer_as: ?int, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as=None, route_flap_damping: ?bool, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.group_name = group_name
        self.admin_state = admin_state
        self.description = description
        self.local_preference = local_preference
        self.next_hop_self = next_hop_self
        self.peer_as = peer_as
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication()
        self.failure_detection = failure_detection if failure_detection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection()
        self.multihop = multihop if multihop is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop()
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi(elements=afi_safi)
        self.local_as = local_as if local_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as()
        self.route_flap_damping = route_flap_damping
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community()
        self.send_default_route = send_default_route if send_default_route is not None else srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _group_name = self.group_name
        if _group_name is not None:
            children['group-name'] = yang.gdata.Leaf('string', _group_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _local_as = self.local_as
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__group_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name=n.get_str('group-name'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), local_preference=n.get_opt_int('local-preference'), next_hop_self=n.get_opt_bool('next-hop-self'), peer_as=n.get_opt_int('peer-as'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication.from_gdata(n.get_opt_cnt('authentication')), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection.from_gdata(n.get_opt_cnt('failure-detection')), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop.from_gdata(n.get_opt_cnt('multihop')), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi.from_gdata(n.get_opt_list('afi-safi')), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as.from_gdata(n.get_opt_cnt('local-as')), route_flap_damping=n.get_opt_bool('route-flap-damping'), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community.from_gdata(n.get_opt_cnt('send-community')), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route.from_gdata(n.get_opt_cnt('send-default-route')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/group')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__group({repr(self.group_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            leaves.append('{self_name}.next_hop_self = {repr(_next_hop_self)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            res.extend(_failure_detection.prsrc('{self_name}.failure_detection', False).splitlines())
        _multihop = self.multihop
        if _multihop is not None:
            res.extend(_multihop.prsrc('{self_name}.multihop', False).splitlines())
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/group/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _local_as = self.local_as
        if _local_as is not None:
            res.extend(_local_as.prsrc('{self_name}.local_as', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            leaves.append('{self_name}.route_flap_damping = {repr(_route_flap_damping)}')
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            res.extend(_send_default_route.prsrc('{self_name}.send_default_route', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/group'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__group(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'group'
        self.elements = elements

    mut def create(self, group_name):
        for e in self.elements:
            match = True
            if e.group_name != group_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__group_entry(group_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['group-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__group_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_group_name = yang.gdata.from_xml_str(node, 'group-name')
    yang.gdata.maybe_add(children, 'group-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__group_name, child_group_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__description, child_description)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_preference, child_local_preference)
    child_next_hop_self = yang.gdata.from_xml_opt_bool(node, 'next-hop-self')
    yang.gdata.maybe_add(children, 'next-hop-self', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__next_hop_self, child_next_hop_self)
    child_peer_as = yang.gdata.from_xml_opt_int(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__peer_as, child_peer_as)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__authentication, child_authentication)
    child_failure_detection = yang.gdata.from_xml_opt_cnt(node, 'failure-detection')
    yang.gdata.maybe_add(children, 'failure-detection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__failure_detection, child_failure_detection)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__multihop, child_multihop)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__afi_safi, child_afi_safi)
    child_local_as = yang.gdata.from_xml_opt_cnt(node, 'local-as')
    yang.gdata.maybe_add(children, 'local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__local_as, child_local_as)
    child_route_flap_damping = yang.gdata.from_xml_opt_bool(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__route_reflector, child_route_reflector)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_community, child_send_community)
    child_send_default_route = yang.gdata.from_xml_opt_cnt(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group__send_default_route, child_send_default_route)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group_element(e) for e in nodes]
    return yang.gdata.List(keys=['group-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__description(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_preference(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__next_hop_self(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_group(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__allow_own_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__leading_only(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__ignore_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(yang.adata.MNode):
    mode: ?str
    leading_only: ?bool
    ignore_peer_as: ?bool

    mut def __init__(self, mode: ?str, leading_only: ?bool, ignore_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mode = mode
        self.leading_only = leading_only
        self.ignore_peer_as = ignore_peer_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mode = self.mode
        if _mode is not None:
            children['mode'] = yang.gdata.Leaf('enumeration', _mode)
        _leading_only = self.leading_only
        if _leading_only is not None:
            children['leading-only'] = yang.gdata.Leaf('boolean', _leading_only)
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            children['ignore-peer-as'] = yang.gdata.Leaf('boolean', _ignore_peer_as)
        return yang.gdata.Container(children, presence=True)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode=n.get_opt_str('mode'), leading_only=n.get_opt_bool('leading-only'), ignore_peer_as=n.get_opt_bool('ignore-peer-as'))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as()')
        leaves = []
        _mode = self.mode
        if _mode is not None:
            leaves.append('{self_name}.mode = {repr(_mode)}')
        _leading_only = self.leading_only
        if _leading_only is not None:
            leaves.append('{self_name}.leading_only = {repr(_leading_only)}')
        _ignore_peer_as = self.ignore_peer_as
        if _ignore_peer_as is not None:
            leaves.append('{self_name}.ignore_peer_as = {repr(_ignore_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mode = yang.gdata.from_xml_opt_str(node, 'mode')
    yang.gdata.maybe_add(children, 'mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__mode, child_mode)
    child_leading_only = yang.gdata.from_xml_opt_bool(node, 'leading-only')
    yang.gdata.maybe_add(children, 'leading-only', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__leading_only, child_leading_only)
    child_ignore_peer_as = yang.gdata.from_xml_opt_bool(node, 'ignore-peer-as')
    yang.gdata.maybe_add(children, 'ignore-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as__ignore_peer_as, child_ignore_peer_as)
    return yang.gdata.Container(children, presence=True)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__replace_peer_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(yang.adata.MNode):
    allow_own_as: ?int
    remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as
    replace_peer_as: ?bool

    mut def __init__(self, allow_own_as: ?int, remove_private_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as=None, replace_peer_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.allow_own_as = allow_own_as
        self.remove_private_as = remove_private_as
        self.replace_peer_as = replace_peer_as

    mut def create_remove_private_as(self, mode):
        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as(mode)
        self.remove_private_as = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            children['allow-own-as'] = yang.gdata.Leaf('uint8', _allow_own_as)
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            children['remove-private-as'] = _remove_private_as.to_gdata()
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            children['replace-peer-as'] = yang.gdata.Leaf('boolean', _replace_peer_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(allow_own_as=n.get_opt_int('allow-own-as'), remove_private_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as.from_gdata(n.get_opt_cnt('remove-private-as')), replace_peer_as=n.get_opt_bool('replace-peer-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/as-path-options')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()')
        leaves = []
        _allow_own_as = self.allow_own_as
        if _allow_own_as is not None:
            leaves.append('{self_name}.allow_own_as = {repr(_allow_own_as)}')
        _remove_private_as = self.remove_private_as
        if _remove_private_as is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp/neighbor/as-path-options/remove-private-as')
            res.append('remove_private_as = {self_name}.create_remove_private_as()')
            res.extend(_remove_private_as.prsrc('remove_private_as', False).splitlines())
        _replace_peer_as = self.replace_peer_as
        if _replace_peer_as is not None:
            leaves.append('{self_name}.replace_peer_as = {repr(_replace_peer_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/as-path-options'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_allow_own_as = yang.gdata.from_xml_opt_int(node, 'allow-own-as')
    yang.gdata.maybe_add(children, 'allow-own-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__allow_own_as, child_allow_own_as)
    child_remove_private_as = yang.gdata.from_xml_opt_cnt(node, 'remove-private-as')
    yang.gdata.maybe_add(children, 'remove-private-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__remove_private_as, child_remove_private_as)
    child_replace_peer_as = yang.gdata.from_xml_opt_bool(node, 'replace-peer-as')
    yang.gdata.maybe_add(children, 'replace-peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options__replace_peer_as, child_replace_peer_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__keychain(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__password(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(yang.adata.MNode):
    keychain: ?str
    password: ?str

    mut def __init__(self, keychain: ?str, password: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.keychain = keychain
        self.password = password

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _keychain = self.keychain
        if _keychain is not None:
            children['keychain'] = yang.gdata.Leaf('leafref', _keychain)
        _password = self.password
        if _password is not None:
            children['password'] = yang.gdata.Leaf('string', _password)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(keychain=n.get_opt_str('keychain'), password=n.get_opt_str('password'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/authentication')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()')
        leaves = []
        _keychain = self.keychain
        if _keychain is not None:
            leaves.append('{self_name}.keychain = {repr(_keychain)}')
        _password = self.password
        if _password is not None:
            leaves.append('{self_name}.password = {repr(_password)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/authentication'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_keychain = yang.gdata.from_xml_opt_str(node, 'keychain')
    yang.gdata.maybe_add(children, 'keychain', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__keychain, child_keychain)
    child_password = yang.gdata.from_xml_opt_str(node, 'password')
    yang.gdata.maybe_add(children, 'password', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication__password, child_password)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__enable_bfd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__fast_failover(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(yang.adata.MNode):
    enable_bfd: ?bool
    fast_failover: ?bool

    mut def __init__(self, enable_bfd: ?bool, fast_failover: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.enable_bfd = enable_bfd
        self.fast_failover = fast_failover

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            children['enable-bfd'] = yang.gdata.Leaf('boolean', _enable_bfd)
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            children['fast-failover'] = yang.gdata.Leaf('boolean', _fast_failover)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(enable_bfd=n.get_opt_bool('enable-bfd'), fast_failover=n.get_opt_bool('fast-failover'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/failure-detection')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()')
        leaves = []
        _enable_bfd = self.enable_bfd
        if _enable_bfd is not None:
            leaves.append('{self_name}.enable_bfd = {repr(_enable_bfd)}')
        _fast_failover = self.fast_failover
        if _fast_failover is not None:
            leaves.append('{self_name}.fast_failover = {repr(_fast_failover)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/failure-detection'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_enable_bfd = yang.gdata.from_xml_opt_bool(node, 'enable-bfd')
    yang.gdata.maybe_add(children, 'enable-bfd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__enable_bfd, child_enable_bfd)
    child_fast_failover = yang.gdata.from_xml_opt_bool(node, 'fast-failover')
    yang.gdata.maybe_add(children, 'fast-failover', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection__fast_failover, child_fast_failover)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__stale_routes_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__requested_restart_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(yang.adata.MNode):
    admin_state: ?str
    stale_routes_time: ?int
    requested_restart_time: ?int

    mut def __init__(self, admin_state: ?str, stale_routes_time: ?int, requested_restart_time: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.stale_routes_time = stale_routes_time
        self.requested_restart_time = requested_restart_time

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            children['stale-routes-time'] = yang.gdata.Leaf('uint16', _stale_routes_time)
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            children['requested-restart-time'] = yang.gdata.Leaf('uint16', _requested_restart_time)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(admin_state=n.get_opt_str('admin-state'), stale_routes_time=n.get_opt_int('stale-routes-time'), requested_restart_time=n.get_opt_int('requested-restart-time'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/graceful-restart')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _stale_routes_time = self.stale_routes_time
        if _stale_routes_time is not None:
            leaves.append('{self_name}.stale_routes_time = {repr(_stale_routes_time)}')
        _requested_restart_time = self.requested_restart_time
        if _requested_restart_time is not None:
            leaves.append('{self_name}.requested_restart_time = {repr(_requested_restart_time)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/graceful-restart'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__admin_state, child_admin_state)
    child_stale_routes_time = yang.gdata.from_xml_opt_int(node, 'stale-routes-time')
    yang.gdata.maybe_add(children, 'stale-routes-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__stale_routes_time, child_stale_routes_time)
    child_requested_restart_time = yang.gdata.from_xml_opt_int(node, 'requested-restart-time')
    yang.gdata.maybe_add(children, 'requested-restart-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart__requested_restart_time, child_requested_restart_time)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__maximum_hops(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(yang.adata.MNode):
    admin_state: ?str
    maximum_hops: ?int

    mut def __init__(self, admin_state: ?str, maximum_hops: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.maximum_hops = maximum_hops

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            children['maximum-hops'] = yang.gdata.Leaf('uint8', _maximum_hops)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(admin_state=n.get_opt_str('admin-state'), maximum_hops=n.get_opt_int('maximum-hops'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/multihop')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _maximum_hops = self.maximum_hops
        if _maximum_hops is not None:
            leaves.append('{self_name}.maximum_hops = {repr(_maximum_hops)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/multihop'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__admin_state, child_admin_state)
    child_maximum_hops = yang.gdata.from_xml_opt_int(node, 'maximum-hops')
    yang.gdata.maybe_add(children, 'maximum-hops', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop__maximum_hops, child_maximum_hops)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__afi_safi_name(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__admin_state(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('enumeration', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(yang.adata.MNode):
    afi_safi_name: Identityref
    admin_state: ?str

    mut def __init__(self, afi_safi_name: Identityref, admin_state: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.afi_safi_name = afi_safi_name
        self.admin_state = admin_state

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _afi_safi_name = self.afi_safi_name
        if _afi_safi_name is not None:
            _identityref_afi_safi_name, error = complete_and_validate_identityref(_afi_safi_name, _identities, ['srl_nokia-comm:bgp-address-family'], 'srl_nokia-bgp')
            if _identityref_afi_safi_name is not None:
                _afi_safi_name = _identityref_afi_safi_name
            else:
                raise ValueError('Invalid value for identityref leaf afi-safi-name: {error}')
            children['afi-safi-name'] = yang.gdata.Leaf('identityref', _afi_safi_name)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name=n.get_Identityref('afi-safi-name'), admin_state=n.get_opt_str('admin-state'))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/afi-safi')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi({repr(self.afi_safi_name)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/afi-safi'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'afi-safi'
        self.elements = elements

    mut def create(self, afi_safi_name):
        for e in self.elements:
            match = True
            if e.afi_safi_name != afi_safi_name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry(afi_safi_name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['afi-safi-name'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_afi_safi_name = yang.gdata.from_xml_Identityref(node, 'afi-safi-name')
    yang.gdata.maybe_add(children, 'afi-safi-name', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__afi_safi_name, child_afi_safi_name)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi__admin_state, child_admin_state)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_element(e) for e in nodes]
    return yang.gdata.List(keys=['afi-safi-name'], elements=elements)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__as_number(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_global_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_local_as(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(yang.adata.MNode):
    as_number: ?int
    prepend_global_as: ?bool
    prepend_local_as: ?bool

    mut def __init__(self, as_number: ?int, prepend_global_as: ?bool, prepend_local_as: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.as_number = as_number
        self.prepend_global_as = prepend_global_as
        self.prepend_local_as = prepend_local_as

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _as_number = self.as_number
        if _as_number is not None:
            children['as-number'] = yang.gdata.Leaf('uint32', _as_number)
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            children['prepend-global-as'] = yang.gdata.Leaf('boolean', _prepend_global_as)
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            children['prepend-local-as'] = yang.gdata.Leaf('boolean', _prepend_local_as)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(as_number=n.get_opt_int('as-number'), prepend_global_as=n.get_opt_bool('prepend-global-as'), prepend_local_as=n.get_opt_bool('prepend-local-as'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/local-as')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()')
        leaves = []
        _as_number = self.as_number
        if _as_number is not None:
            leaves.append('{self_name}.as_number = {repr(_as_number)}')
        _prepend_global_as = self.prepend_global_as
        if _prepend_global_as is not None:
            leaves.append('{self_name}.prepend_global_as = {repr(_prepend_global_as)}')
        _prepend_local_as = self.prepend_local_as
        if _prepend_local_as is not None:
            leaves.append('{self_name}.prepend_local_as = {repr(_prepend_local_as)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/local-as'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_as_number = yang.gdata.from_xml_opt_int(node, 'as-number')
    yang.gdata.maybe_add(children, 'as-number', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__as_number, child_as_number)
    child_prepend_global_as = yang.gdata.from_xml_opt_bool(node, 'prepend-global-as')
    yang.gdata.maybe_add(children, 'prepend-global-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_global_as, child_prepend_global_as)
    child_prepend_local_as = yang.gdata.from_xml_opt_bool(node, 'prepend-local-as')
    yang.gdata.maybe_add(children, 'prepend-local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as__prepend_local_as, child_prepend_local_as)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_flap_damping(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__client(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__cluster_id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(yang.adata.MNode):
    client: ?bool
    cluster_id: ?value

    mut def __init__(self, client: ?bool, cluster_id: ?value):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.client = client
        self.cluster_id = cluster_id

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _client = self.client
        if _client is not None:
            children['client'] = yang.gdata.Leaf('boolean', _client)
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            children['cluster-id'] = yang.gdata.Leaf('union', _cluster_id)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(client=n.get_opt_bool('client'), cluster_id=n.get_opt_value('cluster-id'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/route-reflector')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()')
        leaves = []
        _client = self.client
        if _client is not None:
            leaves.append('{self_name}.client = {repr(_client)}')
        _cluster_id = self.cluster_id
        if _cluster_id is not None:
            leaves.append('{self_name}.cluster_id = {repr(_cluster_id)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/route-reflector'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_client = yang.gdata.from_xml_opt_bool(node, 'client')
    yang.gdata.maybe_add(children, 'client', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__client, child_client)
    child_cluster_id = yang.gdata.from_xml_opt_value(node, 'cluster-id')
    yang.gdata.maybe_add(children, 'cluster-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector__cluster_id, child_cluster_id)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__standard(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__large(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(yang.adata.MNode):
    standard: ?bool
    large: ?bool

    mut def __init__(self, standard: ?bool, large: ?bool):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.standard = standard
        self.large = large

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _standard = self.standard
        if _standard is not None:
            children['standard'] = yang.gdata.Leaf('boolean', _standard)
        _large = self.large
        if _large is not None:
            children['large'] = yang.gdata.Leaf('boolean', _large)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(standard=n.get_opt_bool('standard'), large=n.get_opt_bool('large'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/send-community')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()')
        leaves = []
        _standard = self.standard
        if _standard is not None:
            leaves.append('{self_name}.standard = {repr(_standard)}')
        _large = self.large
        if _large is not None:
            leaves.append('{self_name}.large = {repr(_large)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/send-community'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_standard = yang.gdata.from_xml_opt_bool(node, 'standard')
    yang.gdata.maybe_add(children, 'standard', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__standard, child_standard)
    child_large = yang.gdata.from_xml_opt_bool(node, 'large')
    yang.gdata.maybe_add(children, 'large', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community__large, child_large)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv4_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv6_unicast(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__export_policy(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('leafref', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(yang.adata.MNode):
    ipv4_unicast: ?bool
    ipv6_unicast: ?bool
    export_policy: ?str

    mut def __init__(self, ipv4_unicast: ?bool, ipv6_unicast: ?bool, export_policy: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.ipv4_unicast = ipv4_unicast
        self.ipv6_unicast = ipv6_unicast
        self.export_policy = export_policy

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            children['ipv4-unicast'] = yang.gdata.Leaf('boolean', _ipv4_unicast)
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            children['ipv6-unicast'] = yang.gdata.Leaf('boolean', _ipv6_unicast)
        _export_policy = self.export_policy
        if _export_policy is not None:
            children['export-policy'] = yang.gdata.Leaf('leafref', _export_policy)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(ipv4_unicast=n.get_opt_bool('ipv4-unicast'), ipv6_unicast=n.get_opt_bool('ipv6-unicast'), export_policy=n.get_opt_str('export-policy'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/send-default-route')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()')
        leaves = []
        _ipv4_unicast = self.ipv4_unicast
        if _ipv4_unicast is not None:
            leaves.append('{self_name}.ipv4_unicast = {repr(_ipv4_unicast)}')
        _ipv6_unicast = self.ipv6_unicast
        if _ipv6_unicast is not None:
            leaves.append('{self_name}.ipv6_unicast = {repr(_ipv6_unicast)}')
        _export_policy = self.export_policy
        if _export_policy is not None:
            leaves.append('{self_name}.export_policy = {repr(_export_policy)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/send-default-route'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_ipv4_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv4-unicast')
    yang.gdata.maybe_add(children, 'ipv4-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv4_unicast, child_ipv4_unicast)
    child_ipv6_unicast = yang.gdata.from_xml_opt_bool(node, 'ipv6-unicast')
    yang.gdata.maybe_add(children, 'ipv6-unicast', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__ipv6_unicast, child_ipv6_unicast)
    child_export_policy = yang.gdata.from_xml_opt_str(node, 'export-policy')
    yang.gdata.maybe_add(children, 'export-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route__export_policy, child_export_policy)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__connect_retry(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__hold_time(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__keepalive_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__minimum_advertisement_interval(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__prefix_limit_restart_timer(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(yang.adata.MNode):
    connect_retry: ?int
    hold_time: ?int
    keepalive_interval: ?int
    minimum_advertisement_interval: ?int
    prefix_limit_restart_timer: ?int

    mut def __init__(self, connect_retry: ?int, hold_time: ?int, keepalive_interval: ?int, minimum_advertisement_interval: ?int, prefix_limit_restart_timer: ?int):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.connect_retry = connect_retry
        self.hold_time = hold_time
        self.keepalive_interval = keepalive_interval
        self.minimum_advertisement_interval = minimum_advertisement_interval
        self.prefix_limit_restart_timer = prefix_limit_restart_timer

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            children['connect-retry'] = yang.gdata.Leaf('uint16', _connect_retry)
        _hold_time = self.hold_time
        if _hold_time is not None:
            children['hold-time'] = yang.gdata.Leaf('uint16', _hold_time)
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            children['keepalive-interval'] = yang.gdata.Leaf('uint16', _keepalive_interval)
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            children['minimum-advertisement-interval'] = yang.gdata.Leaf('uint16', _minimum_advertisement_interval)
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            children['prefix-limit-restart-timer'] = yang.gdata.Leaf('uint16', _prefix_limit_restart_timer)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(connect_retry=n.get_opt_int('connect-retry'), hold_time=n.get_opt_int('hold-time'), keepalive_interval=n.get_opt_int('keepalive-interval'), minimum_advertisement_interval=n.get_opt_int('minimum-advertisement-interval'), prefix_limit_restart_timer=n.get_opt_int('prefix-limit-restart-timer'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/timers')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()')
        leaves = []
        _connect_retry = self.connect_retry
        if _connect_retry is not None:
            leaves.append('{self_name}.connect_retry = {repr(_connect_retry)}')
        _hold_time = self.hold_time
        if _hold_time is not None:
            leaves.append('{self_name}.hold_time = {repr(_hold_time)}')
        _keepalive_interval = self.keepalive_interval
        if _keepalive_interval is not None:
            leaves.append('{self_name}.keepalive_interval = {repr(_keepalive_interval)}')
        _minimum_advertisement_interval = self.minimum_advertisement_interval
        if _minimum_advertisement_interval is not None:
            leaves.append('{self_name}.minimum_advertisement_interval = {repr(_minimum_advertisement_interval)}')
        _prefix_limit_restart_timer = self.prefix_limit_restart_timer
        if _prefix_limit_restart_timer is not None:
            leaves.append('{self_name}.prefix_limit_restart_timer = {repr(_prefix_limit_restart_timer)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/timers'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_connect_retry = yang.gdata.from_xml_opt_int(node, 'connect-retry')
    yang.gdata.maybe_add(children, 'connect-retry', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__connect_retry, child_connect_retry)
    child_hold_time = yang.gdata.from_xml_opt_int(node, 'hold-time')
    yang.gdata.maybe_add(children, 'hold-time', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__hold_time, child_hold_time)
    child_keepalive_interval = yang.gdata.from_xml_opt_int(node, 'keepalive-interval')
    yang.gdata.maybe_add(children, 'keepalive-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__keepalive_interval, child_keepalive_interval)
    child_minimum_advertisement_interval = yang.gdata.from_xml_opt_int(node, 'minimum-advertisement-interval')
    yang.gdata.maybe_add(children, 'minimum-advertisement-interval', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__minimum_advertisement_interval, child_minimum_advertisement_interval)
    child_prefix_limit_restart_timer = yang.gdata.from_xml_opt_int(node, 'prefix-limit-restart-timer')
    yang.gdata.maybe_add(children, 'prefix-limit-restart-timer', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers__prefix_limit_restart_timer, child_prefix_limit_restart_timer)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__mtu_discovery(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__tcp_mss(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint16', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__passive_mode(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('boolean', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_address(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(yang.adata.MNode):
    mtu_discovery: ?bool
    tcp_mss: ?int
    passive_mode: ?bool
    local_address: ?str

    mut def __init__(self, mtu_discovery: ?bool, tcp_mss: ?int, passive_mode: ?bool, local_address: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.mtu_discovery = mtu_discovery
        self.tcp_mss = tcp_mss
        self.passive_mode = passive_mode
        self.local_address = local_address

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            children['mtu-discovery'] = yang.gdata.Leaf('boolean', _mtu_discovery)
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            children['tcp-mss'] = yang.gdata.Leaf('uint16', _tcp_mss)
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            children['passive-mode'] = yang.gdata.Leaf('boolean', _passive_mode)
        _local_address = self.local_address
        if _local_address is not None:
            children['local-address'] = yang.gdata.Leaf('union', _local_address)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(mtu_discovery=n.get_opt_bool('mtu-discovery'), tcp_mss=n.get_opt_int('tcp-mss'), passive_mode=n.get_opt_bool('passive-mode'), local_address=n.get_opt_str('local-address'))
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor/transport')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()')
        leaves = []
        _mtu_discovery = self.mtu_discovery
        if _mtu_discovery is not None:
            leaves.append('{self_name}.mtu_discovery = {repr(_mtu_discovery)}')
        _tcp_mss = self.tcp_mss
        if _tcp_mss is not None:
            leaves.append('{self_name}.tcp_mss = {repr(_tcp_mss)}')
        _passive_mode = self.passive_mode
        if _passive_mode is not None:
            leaves.append('{self_name}.passive_mode = {repr(_passive_mode)}')
        _local_address = self.local_address
        if _local_address is not None:
            leaves.append('{self_name}.local_address = {repr(_local_address)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor/transport'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_mtu_discovery = yang.gdata.from_xml_opt_bool(node, 'mtu-discovery')
    yang.gdata.maybe_add(children, 'mtu-discovery', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__mtu_discovery, child_mtu_discovery)
    child_tcp_mss = yang.gdata.from_xml_opt_int(node, 'tcp-mss')
    yang.gdata.maybe_add(children, 'tcp-mss', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__tcp_mss, child_tcp_mss)
    child_passive_mode = yang.gdata.from_xml_opt_bool(node, 'passive-mode')
    yang.gdata.maybe_add(children, 'passive-mode', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__passive_mode, child_passive_mode)
    child_local_address = yang.gdata.from_xml_opt_str(node, 'local-address')
    yang.gdata.maybe_add(children, 'local-address', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport__local_address, child_local_address)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(yang.adata.MNode):
    peer_address: str
    admin_state: ?str
    description: ?str
    local_preference: ?int
    next_hop_self: ?bool
    peer_as: ?int
    peer_group: ?str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication
    failure_detection: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection
    graceful_restart: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart
    multihop: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi
    local_as: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as
    route_flap_damping: ?bool
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community
    send_default_route: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route
    timers: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport

    mut def __init__(self, peer_address: str, admin_state: ?str, description: ?str, local_preference: ?int, next_hop_self: ?bool, peer_as: ?int, peer_group: ?str, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication=None, failure_detection: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection=None, graceful_restart: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart=None, multihop: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi_entry]=[], local_as: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as=None, route_flap_damping: ?bool, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community=None, send_default_route: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route=None, timers: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.peer_address = peer_address
        self.admin_state = admin_state
        self.description = description
        self.local_preference = local_preference
        self.next_hop_self = next_hop_self
        self.peer_as = peer_as
        self.peer_group = peer_group
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication()
        self.failure_detection = failure_detection if failure_detection is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection()
        self.graceful_restart = graceful_restart if graceful_restart is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart()
        self.multihop = multihop if multihop is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop()
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi(elements=afi_safi)
        self.local_as = local_as if local_as is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as()
        self.route_flap_damping = route_flap_damping
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community()
        self.send_default_route = send_default_route if send_default_route is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route()
        self.timers = timers if timers is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _peer_address = self.peer_address
        if _peer_address is not None:
            children['peer-address'] = yang.gdata.Leaf('union', _peer_address)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            children['next-hop-self'] = yang.gdata.Leaf('boolean', _next_hop_self)
        _peer_as = self.peer_as
        if _peer_as is not None:
            children['peer-as'] = yang.gdata.Leaf('uint32', _peer_as)
        _peer_group = self.peer_group
        if _peer_group is not None:
            children['peer-group'] = yang.gdata.Leaf('leafref', _peer_group)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            children['failure-detection'] = _failure_detection.to_gdata()
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            children['graceful-restart'] = _graceful_restart.to_gdata()
        _multihop = self.multihop
        if _multihop is not None:
            children['multihop'] = _multihop.to_gdata()
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _local_as = self.local_as
        if _local_as is not None:
            children['local-as'] = _local_as.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = yang.gdata.Leaf('boolean', _route_flap_damping)
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            children['send-default-route'] = _send_default_route.to_gdata()
        _timers = self.timers
        if _timers is not None:
            children['timers'] = _timers.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address=n.get_str('peer-address'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), local_preference=n.get_opt_int('local-preference'), next_hop_self=n.get_opt_bool('next-hop-self'), peer_as=n.get_opt_int('peer-as'), peer_group=n.get_opt_str('peer-group'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication.from_gdata(n.get_opt_cnt('authentication')), failure_detection=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection.from_gdata(n.get_opt_cnt('failure-detection')), graceful_restart=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart.from_gdata(n.get_opt_cnt('graceful-restart')), multihop=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop.from_gdata(n.get_opt_cnt('multihop')), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi.from_gdata(n.get_opt_list('afi-safi')), local_as=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as.from_gdata(n.get_opt_cnt('local-as')), route_flap_damping=n.get_opt_bool('route-flap-damping'), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community.from_gdata(n.get_opt_cnt('send-community')), send_default_route=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route.from_gdata(n.get_opt_cnt('send-default-route')), timers=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers.from_gdata(n.get_opt_cnt('timers')), transport=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport.from_gdata(n.get_opt_cnt('transport')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp/neighbor')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor({repr(self.peer_address)})')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _next_hop_self = self.next_hop_self
        if _next_hop_self is not None:
            leaves.append('{self_name}.next_hop_self = {repr(_next_hop_self)}')
        _peer_as = self.peer_as
        if _peer_as is not None:
            leaves.append('{self_name}.peer_as = {repr(_peer_as)}')
        _peer_group = self.peer_group
        if _peer_group is not None:
            leaves.append('{self_name}.peer_group = {repr(_peer_group)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _failure_detection = self.failure_detection
        if _failure_detection is not None:
            res.extend(_failure_detection.prsrc('{self_name}.failure_detection', False).splitlines())
        _graceful_restart = self.graceful_restart
        if _graceful_restart is not None:
            res.extend(_graceful_restart.prsrc('{self_name}.graceful_restart', False).splitlines())
        _multihop = self.multihop
        if _multihop is not None:
            res.extend(_multihop.prsrc('{self_name}.multihop', False).splitlines())
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/neighbor/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _local_as = self.local_as
        if _local_as is not None:
            res.extend(_local_as.prsrc('{self_name}.local_as', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            leaves.append('{self_name}.route_flap_damping = {repr(_route_flap_damping)}')
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _send_default_route = self.send_default_route
        if _send_default_route is not None:
            res.extend(_send_default_route.prsrc('{self_name}.send_default_route', False).splitlines())
        _timers = self.timers
        if _timers is not None:
            res.extend(_timers.prsrc('{self_name}.timers', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp/neighbor'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self._name = 'neighbor'
        self.elements = elements

    mut def create(self, peer_address, peer_group):
        for e in self.elements:
            match = True
            if e.peer_address != peer_address:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry(peer_address, peer_group)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['peer-address'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_peer_address = yang.gdata.from_xml_str(node, 'peer-address')
    yang.gdata.maybe_add(children, 'peer-address', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_address, child_peer_address)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__description, child_description)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_preference, child_local_preference)
    child_next_hop_self = yang.gdata.from_xml_opt_bool(node, 'next-hop-self')
    yang.gdata.maybe_add(children, 'next-hop-self', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__next_hop_self, child_next_hop_self)
    child_peer_as = yang.gdata.from_xml_opt_int(node, 'peer-as')
    yang.gdata.maybe_add(children, 'peer-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_as, child_peer_as)
    child_peer_group = yang.gdata.from_xml_opt_str(node, 'peer-group')
    yang.gdata.maybe_add(children, 'peer-group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__peer_group, child_peer_group)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__authentication, child_authentication)
    child_failure_detection = yang.gdata.from_xml_opt_cnt(node, 'failure-detection')
    yang.gdata.maybe_add(children, 'failure-detection', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__failure_detection, child_failure_detection)
    child_graceful_restart = yang.gdata.from_xml_opt_cnt(node, 'graceful-restart')
    yang.gdata.maybe_add(children, 'graceful-restart', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__graceful_restart, child_graceful_restart)
    child_multihop = yang.gdata.from_xml_opt_cnt(node, 'multihop')
    yang.gdata.maybe_add(children, 'multihop', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__multihop, child_multihop)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__afi_safi, child_afi_safi)
    child_local_as = yang.gdata.from_xml_opt_cnt(node, 'local-as')
    yang.gdata.maybe_add(children, 'local-as', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__local_as, child_local_as)
    child_route_flap_damping = yang.gdata.from_xml_opt_bool(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__route_reflector, child_route_reflector)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_community, child_send_community)
    child_send_default_route = yang.gdata.from_xml_opt_cnt(node, 'send-default-route')
    yang.gdata.maybe_add(children, 'send-default-route', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__send_default_route, child_send_default_route)
    child_timers = yang.gdata.from_xml_opt_cnt(node, 'timers')
    yang.gdata.maybe_add(children, 'timers', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__timers, child_timers)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor__transport, child_transport)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_element(e) for e in nodes]
    return yang.gdata.List(keys=['peer-address'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp(yang.adata.MNode):
    admin_state: ?str
    autonomous_system: ?int
    local_preference: ?int
    router_id: ?str
    as_path_options: srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options
    authentication: srl_nokia_network_instance__network_instance__protocols__bgp__authentication
    ebgp_default_policy: srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy
    afi_safi: srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi
    preference: srl_nokia_network_instance__network_instance__protocols__bgp__preference
    rib_management: srl_nokia_network_instance__network_instance__protocols__bgp__rib_management
    route_advertisement: srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement
    route_flap_damping: srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping
    route_reflector: srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector
    segment_routing_mpls: srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls
    send_community: srl_nokia_network_instance__network_instance__protocols__bgp__send_community
    transport: srl_nokia_network_instance__network_instance__protocols__bgp__transport
    group: srl_nokia_network_instance__network_instance__protocols__bgp__group
    neighbor: srl_nokia_network_instance__network_instance__protocols__bgp__neighbor

    mut def __init__(self, admin_state: ?str, autonomous_system: ?int, local_preference: ?int, router_id: ?str, as_path_options: ?srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options=None, authentication: ?srl_nokia_network_instance__network_instance__protocols__bgp__authentication=None, ebgp_default_policy: ?srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy=None, afi_safi: list[srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi_entry]=[], preference: ?srl_nokia_network_instance__network_instance__protocols__bgp__preference=None, rib_management: ?srl_nokia_network_instance__network_instance__protocols__bgp__rib_management=None, route_advertisement: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement=None, route_flap_damping: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping=None, route_reflector: ?srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector=None, segment_routing_mpls: ?srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls=None, send_community: ?srl_nokia_network_instance__network_instance__protocols__bgp__send_community=None, transport: ?srl_nokia_network_instance__network_instance__protocols__bgp__transport=None, group: list[srl_nokia_network_instance__network_instance__protocols__bgp__group_entry]=[], neighbor: list[srl_nokia_network_instance__network_instance__protocols__bgp__neighbor_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp'
        self.admin_state = admin_state
        self.autonomous_system = autonomous_system
        self.local_preference = local_preference
        self.router_id = router_id
        self.as_path_options = as_path_options if as_path_options is not None else srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options()
        self.authentication = authentication if authentication is not None else srl_nokia_network_instance__network_instance__protocols__bgp__authentication()
        self.ebgp_default_policy = ebgp_default_policy if ebgp_default_policy is not None else srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy()
        self.afi_safi = srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi(elements=afi_safi)
        self.preference = preference if preference is not None else srl_nokia_network_instance__network_instance__protocols__bgp__preference()
        self.rib_management = rib_management if rib_management is not None else srl_nokia_network_instance__network_instance__protocols__bgp__rib_management()
        self.route_advertisement = route_advertisement if route_advertisement is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement()
        self.route_flap_damping = route_flap_damping if route_flap_damping is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping()
        self.route_reflector = route_reflector if route_reflector is not None else srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector()
        self.segment_routing_mpls = segment_routing_mpls if segment_routing_mpls is not None else srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls()
        self.send_community = send_community if send_community is not None else srl_nokia_network_instance__network_instance__protocols__bgp__send_community()
        self.transport = transport if transport is not None else srl_nokia_network_instance__network_instance__protocols__bgp__transport()
        self.group = srl_nokia_network_instance__network_instance__protocols__bgp__group(elements=group)
        self.neighbor = srl_nokia_network_instance__network_instance__protocols__bgp__neighbor(elements=neighbor)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            children['autonomous-system'] = yang.gdata.Leaf('uint32', _autonomous_system)
        _local_preference = self.local_preference
        if _local_preference is not None:
            children['local-preference'] = yang.gdata.Leaf('uint32', _local_preference)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('union', _router_id)
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            children['as-path-options'] = _as_path_options.to_gdata()
        _authentication = self.authentication
        if _authentication is not None:
            children['authentication'] = _authentication.to_gdata()
        _ebgp_default_policy = self.ebgp_default_policy
        if _ebgp_default_policy is not None:
            children['ebgp-default-policy'] = _ebgp_default_policy.to_gdata()
        _afi_safi = self.afi_safi
        if _afi_safi is not None:
            children['afi-safi'] = _afi_safi.to_gdata()
        _preference = self.preference
        if _preference is not None:
            children['preference'] = _preference.to_gdata()
        _rib_management = self.rib_management
        if _rib_management is not None:
            children['rib-management'] = _rib_management.to_gdata()
        _route_advertisement = self.route_advertisement
        if _route_advertisement is not None:
            children['route-advertisement'] = _route_advertisement.to_gdata()
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            children['route-flap-damping'] = _route_flap_damping.to_gdata()
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            children['route-reflector'] = _route_reflector.to_gdata()
        _segment_routing_mpls = self.segment_routing_mpls
        if _segment_routing_mpls is not None:
            children['segment-routing-mpls'] = _segment_routing_mpls.to_gdata()
        _send_community = self.send_community
        if _send_community is not None:
            children['send-community'] = _send_community.to_gdata()
        _transport = self.transport
        if _transport is not None:
            children['transport'] = _transport.to_gdata()
        _group = self.group
        if _group is not None:
            children['group'] = _group.to_gdata()
        _neighbor = self.neighbor
        if _neighbor is not None:
            children['neighbor'] = _neighbor.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp(admin_state=n.get_opt_str('admin-state'), autonomous_system=n.get_opt_int('autonomous-system'), local_preference=n.get_opt_int('local-preference'), router_id=n.get_opt_str('router-id'), as_path_options=srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options.from_gdata(n.get_opt_cnt('as-path-options')), authentication=srl_nokia_network_instance__network_instance__protocols__bgp__authentication.from_gdata(n.get_opt_cnt('authentication')), ebgp_default_policy=srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy.from_gdata(n.get_opt_cnt('ebgp-default-policy')), afi_safi=srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi.from_gdata(n.get_opt_list('afi-safi')), preference=srl_nokia_network_instance__network_instance__protocols__bgp__preference.from_gdata(n.get_opt_cnt('preference')), rib_management=srl_nokia_network_instance__network_instance__protocols__bgp__rib_management.from_gdata(n.get_opt_cnt('rib-management')), route_advertisement=srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement.from_gdata(n.get_opt_cnt('route-advertisement')), route_flap_damping=srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping.from_gdata(n.get_opt_cnt('route-flap-damping')), route_reflector=srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector.from_gdata(n.get_opt_cnt('route-reflector')), segment_routing_mpls=srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls.from_gdata(n.get_opt_cnt('segment-routing-mpls')), send_community=srl_nokia_network_instance__network_instance__protocols__bgp__send_community.from_gdata(n.get_opt_cnt('send-community')), transport=srl_nokia_network_instance__network_instance__protocols__bgp__transport.from_gdata(n.get_opt_cnt('transport')), group=srl_nokia_network_instance__network_instance__protocols__bgp__group.from_gdata(n.get_opt_list('group')), neighbor=srl_nokia_network_instance__network_instance__protocols__bgp__neighbor.from_gdata(n.get_opt_list('neighbor')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp()')
        leaves = []
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _autonomous_system = self.autonomous_system
        if _autonomous_system is not None:
            leaves.append('{self_name}.autonomous_system = {repr(_autonomous_system)}')
        _local_preference = self.local_preference
        if _local_preference is not None:
            leaves.append('{self_name}.local_preference = {repr(_local_preference)}')
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _as_path_options = self.as_path_options
        if _as_path_options is not None:
            res.extend(_as_path_options.prsrc('{self_name}.as_path_options', False).splitlines())
        _authentication = self.authentication
        if _authentication is not None:
            res.extend(_authentication.prsrc('{self_name}.authentication', False).splitlines())
        _ebgp_default_policy = self.ebgp_default_policy
        if _ebgp_default_policy is not None:
            res.extend(_ebgp_default_policy.prsrc('{self_name}.ebgp_default_policy', False).splitlines())
        _afi_safi = self.afi_safi
        for _element in _afi_safi.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/afi-safi element: {_element.to_gdata().key_str(['afi-safi-name'])}")
            list_elem = 'afi_safi_element = {self_name}.afi_safi.create({repr(_element.afi_safi_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('afi_safi_element', False, list_element=True).splitlines())
        _preference = self.preference
        if _preference is not None:
            res.extend(_preference.prsrc('{self_name}.preference', False).splitlines())
        _rib_management = self.rib_management
        if _rib_management is not None:
            res.extend(_rib_management.prsrc('{self_name}.rib_management', False).splitlines())
        _route_advertisement = self.route_advertisement
        if _route_advertisement is not None:
            res.extend(_route_advertisement.prsrc('{self_name}.route_advertisement', False).splitlines())
        _route_flap_damping = self.route_flap_damping
        if _route_flap_damping is not None:
            res.extend(_route_flap_damping.prsrc('{self_name}.route_flap_damping', False).splitlines())
        _route_reflector = self.route_reflector
        if _route_reflector is not None:
            res.extend(_route_reflector.prsrc('{self_name}.route_reflector', False).splitlines())
        _segment_routing_mpls = self.segment_routing_mpls
        if _segment_routing_mpls is not None:
            res.extend(_segment_routing_mpls.prsrc('{self_name}.segment_routing_mpls', False).splitlines())
        _send_community = self.send_community
        if _send_community is not None:
            res.extend(_send_community.prsrc('{self_name}.send_community', False).splitlines())
        _transport = self.transport
        if _transport is not None:
            res.extend(_transport.prsrc('{self_name}.transport', False).splitlines())
        _group = self.group
        for _element in _group.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/group element: {_element.to_gdata().key_str(['group-name'])}")
            list_elem = 'group_element = {self_name}.group.create({repr(_element.group_name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('group_element', False, list_element=True).splitlines())
        _neighbor = self.neighbor
        for _element in _neighbor.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp/neighbor element: {_element.to_gdata().key_str(['peer-address'])}")
            list_elem = 'neighbor_element = {self_name}.neighbor.create({repr(_element.peer_address)})'
            res.append(list_elem)
            res.extend(_element.prsrc('neighbor_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__admin_state, child_admin_state)
    child_autonomous_system = yang.gdata.from_xml_opt_int(node, 'autonomous-system')
    yang.gdata.maybe_add(children, 'autonomous-system', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__autonomous_system, child_autonomous_system)
    child_local_preference = yang.gdata.from_xml_opt_int(node, 'local-preference')
    yang.gdata.maybe_add(children, 'local-preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__local_preference, child_local_preference)
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__router_id, child_router_id)
    child_as_path_options = yang.gdata.from_xml_opt_cnt(node, 'as-path-options')
    yang.gdata.maybe_add(children, 'as-path-options', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__as_path_options, child_as_path_options)
    child_authentication = yang.gdata.from_xml_opt_cnt(node, 'authentication')
    yang.gdata.maybe_add(children, 'authentication', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__authentication, child_authentication)
    child_ebgp_default_policy = yang.gdata.from_xml_opt_cnt(node, 'ebgp-default-policy')
    yang.gdata.maybe_add(children, 'ebgp-default-policy', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__ebgp_default_policy, child_ebgp_default_policy)
    child_afi_safi = yang.gdata.from_xml_opt_list(node, 'afi-safi')
    yang.gdata.maybe_add(children, 'afi-safi', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__afi_safi, child_afi_safi)
    child_preference = yang.gdata.from_xml_opt_cnt(node, 'preference')
    yang.gdata.maybe_add(children, 'preference', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__preference, child_preference)
    child_rib_management = yang.gdata.from_xml_opt_cnt(node, 'rib-management')
    yang.gdata.maybe_add(children, 'rib-management', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__rib_management, child_rib_management)
    child_route_advertisement = yang.gdata.from_xml_opt_cnt(node, 'route-advertisement')
    yang.gdata.maybe_add(children, 'route-advertisement', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_advertisement, child_route_advertisement)
    child_route_flap_damping = yang.gdata.from_xml_opt_cnt(node, 'route-flap-damping')
    yang.gdata.maybe_add(children, 'route-flap-damping', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_flap_damping, child_route_flap_damping)
    child_route_reflector = yang.gdata.from_xml_opt_cnt(node, 'route-reflector')
    yang.gdata.maybe_add(children, 'route-reflector', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__route_reflector, child_route_reflector)
    child_segment_routing_mpls = yang.gdata.from_xml_opt_cnt(node, 'segment-routing-mpls')
    yang.gdata.maybe_add(children, 'segment-routing-mpls', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__segment_routing_mpls, child_segment_routing_mpls)
    child_send_community = yang.gdata.from_xml_opt_cnt(node, 'send-community')
    yang.gdata.maybe_add(children, 'send-community', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__send_community, child_send_community)
    child_transport = yang.gdata.from_xml_opt_cnt(node, 'transport')
    yang.gdata.maybe_add(children, 'transport', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__transport, child_transport)
    child_group = yang.gdata.from_xml_opt_list(node, 'group')
    yang.gdata.maybe_add(children, 'group', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__group, child_group)
    child_neighbor = yang.gdata.from_xml_opt_list(node, 'neighbor')
    yang.gdata.maybe_add(children, 'neighbor', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp__neighbor, child_neighbor)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp', module='srl_nokia-bgp')

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__id(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint8', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher__rd(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(yang.adata.MNode):
    rd: ?str

    mut def __init__(self, rd: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.rd = rd

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _rd = self.rd
        if _rd is not None:
            children['rd'] = yang.gdata.Leaf('union', _rd)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(rd=n.get_opt_str('rd'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()')
        leaves = []
        _rd = self.rd
        if _rd is not None:
            leaves.append('{self_name}.rd = {repr(_rd)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance/route-distinguisher'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_rd = yang.gdata.from_xml_opt_str(node, 'rd')
    yang.gdata.maybe_add(children, 'rd', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher__rd, child_rd)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__export_rt(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__import_rt(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('union', val)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(yang.adata.MNode):
    export_rt: ?str
    import_rt: ?str

    mut def __init__(self, export_rt: ?str, import_rt: ?str):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.export_rt = export_rt
        self.import_rt = import_rt

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _export_rt = self.export_rt
        if _export_rt is not None:
            children['export-rt'] = yang.gdata.Leaf('union', _export_rt)
        _import_rt = self.import_rt
        if _import_rt is not None:
            children['import-rt'] = yang.gdata.Leaf('union', _import_rt)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(export_rt=n.get_opt_str('export-rt'), import_rt=n.get_opt_str('import-rt'))
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance/route-target')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()')
        leaves = []
        _export_rt = self.export_rt
        if _export_rt is not None:
            leaves.append('{self_name}.export_rt = {repr(_export_rt)}')
        _import_rt = self.import_rt
        if _import_rt is not None:
            leaves.append('{self_name}.import_rt = {repr(_import_rt)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance/route-target'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_export_rt = yang.gdata.from_xml_opt_str(node, 'export-rt')
    yang.gdata.maybe_add(children, 'export-rt', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__export_rt, child_export_rt)
    child_import_rt = yang.gdata.from_xml_opt_str(node, 'import-rt')
    yang.gdata.maybe_add(children, 'import-rt', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target__import_rt, child_import_rt)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(yang.adata.MNode):
    id: int
    route_distinguisher: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher
    route_target: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target

    mut def __init__(self, id: int, route_distinguisher: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher=None, route_target: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target=None):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.id = id
        self.route_distinguisher = route_distinguisher if route_distinguisher is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher()
        self.route_target = route_target if route_target is not None else srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _id = self.id
        if _id is not None:
            children['id'] = yang.gdata.Leaf('uint8', _id)
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            children['route-distinguisher'] = _route_distinguisher.to_gdata()
        _route_target = self.route_target
        if _route_target is not None:
            children['route-target'] = _route_target.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry:
        return srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(id=n.get_int('id'), route_distinguisher=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher.from_gdata(n.get_opt_cnt('route-distinguisher')), route_target=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target.from_gdata(n.get_opt_cnt('route-target')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn/bgp-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance({repr(self.id)})')
        leaves = []
        _route_distinguisher = self.route_distinguisher
        if _route_distinguisher is not None:
            res.extend(_route_distinguisher.prsrc('{self_name}.route_distinguisher', False).splitlines())
        _route_target = self.route_target
        if _route_target is not None:
            res.extend(_route_target.prsrc('{self_name}.route_target', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn/bgp-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self._name = 'bgp-instance'
        self.elements = elements

    mut def create(self, id):
        for e in self.elements:
            match = True
            if e.id != id:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry(id)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['id'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_id = yang.gdata.from_xml_int(node, 'id')
    yang.gdata.maybe_add(children, 'id', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__id, child_id)
    child_route_distinguisher = yang.gdata.from_xml_opt_cnt(node, 'route-distinguisher')
    yang.gdata.maybe_add(children, 'route-distinguisher', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_distinguisher, child_route_distinguisher)
    child_route_target = yang.gdata.from_xml_opt_cnt(node, 'route-target')
    yang.gdata.maybe_add(children, 'route-target', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance__route_target, child_route_target)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['id'], elements=elements)

class srl_nokia_network_instance__network_instance__protocols__bgp_vpn(yang.adata.MNode):
    bgp_instance: srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance

    mut def __init__(self, bgp_instance: list[srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:bgp:bgp-vpn'
        self.bgp_instance = srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance(elements=bgp_instance)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_instance = self.bgp_instance
        if _bgp_instance is not None:
            children['bgp-instance'] = _bgp_instance.to_gdata()
        return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp-vpn', module='srl_nokia-bgp-vpn')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols__bgp_vpn(bgp_instance=srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance.from_gdata(n.get_opt_list('bgp-instance')))
        return None

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols/bgp-vpn')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols__bgp_vpn()')
        leaves = []
        _bgp_instance = self.bgp_instance
        for _element in _bgp_instance.elements:
            res.append('')
            res.append("# List /network-instance/protocols/bgp-vpn/bgp-instance element: {_element.to_gdata().key_str(['id'])}")
            list_elem = 'bgp_instance_element = {self_name}.bgp_instance.create({repr(_element.id)})'
            res.append(list_elem)
            res.extend(_element.prsrc('bgp_instance_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols/bgp-vpn'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_instance = yang.gdata.from_xml_opt_list(node, 'bgp-instance')
    yang.gdata.maybe_add(children, 'bgp-instance', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn__bgp_instance, child_bgp_instance)
    return yang.gdata.Container(children, presence=True, ns='urn:nokia.com:srlinux:bgp:bgp-vpn', module='srl_nokia-bgp-vpn')

class srl_nokia_network_instance__network_instance__protocols(yang.adata.MNode):
    bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn
    bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn
    directly_connected: srl_nokia_network_instance__network_instance__protocols__directly_connected
    isis: ?srl_nokia_network_instance__network_instance__protocols__isis
    bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp
    bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn

    mut def __init__(self, bgp_evpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_evpn=None, bgp_ipvpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn=None, directly_connected: ?srl_nokia_network_instance__network_instance__protocols__directly_connected=None, isis: ?srl_nokia_network_instance__network_instance__protocols__isis=None, bgp: ?srl_nokia_network_instance__network_instance__protocols__bgp=None, bgp_vpn: ?srl_nokia_network_instance__network_instance__protocols__bgp_vpn=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.bgp_evpn = bgp_evpn
        self.bgp_ipvpn = bgp_ipvpn
        self.directly_connected = directly_connected if directly_connected is not None else srl_nokia_network_instance__network_instance__protocols__directly_connected()
        self.isis = isis
        self.bgp = bgp
        self.bgp_vpn = bgp_vpn

    mut def create_bgp_evpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_evpn()
        self.bgp_evpn = res
        return res

    mut def create_bgp_ipvpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn()
        self.bgp_ipvpn = res
        return res

    mut def create_isis(self):
        res = srl_nokia_network_instance__network_instance__protocols__isis()
        self.isis = res
        return res

    mut def create_bgp(self, autonomous_system, router_id):
        res = srl_nokia_network_instance__network_instance__protocols__bgp(autonomous_system, router_id)
        self.bgp = res
        return res

    mut def create_bgp_vpn(self):
        res = srl_nokia_network_instance__network_instance__protocols__bgp_vpn()
        self.bgp_vpn = res
        return res

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            children['bgp-evpn'] = _bgp_evpn.to_gdata()
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            children['bgp-ipvpn'] = _bgp_ipvpn.to_gdata()
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            children['directly-connected'] = _directly_connected.to_gdata()
        _isis = self.isis
        if _isis is not None:
            children['isis'] = _isis.to_gdata()
        _bgp = self.bgp
        if _bgp is not None:
            children['bgp'] = _bgp.to_gdata()
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            children['bgp-vpn'] = _bgp_vpn.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_network_instance__network_instance__protocols:
        if n is not None:
            return srl_nokia_network_instance__network_instance__protocols(bgp_evpn=srl_nokia_network_instance__network_instance__protocols__bgp_evpn.from_gdata(n.get_opt_cnt('bgp-evpn')), bgp_ipvpn=srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn.from_gdata(n.get_opt_cnt('bgp-ipvpn')), directly_connected=srl_nokia_network_instance__network_instance__protocols__directly_connected.from_gdata(n.get_opt_cnt('directly-connected')), isis=srl_nokia_network_instance__network_instance__protocols__isis.from_gdata(n.get_opt_cnt('isis')), bgp=srl_nokia_network_instance__network_instance__protocols__bgp.from_gdata(n.get_opt_cnt('bgp')), bgp_vpn=srl_nokia_network_instance__network_instance__protocols__bgp_vpn.from_gdata(n.get_opt_cnt('bgp-vpn')))
        return srl_nokia_network_instance__network_instance__protocols()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance/protocols')
            res.append('{self_name} = srl_nokia_network_instance__network_instance__protocols()')
        leaves = []
        _bgp_evpn = self.bgp_evpn
        if _bgp_evpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-evpn')
            res.append('bgp_evpn = {self_name}.create_bgp_evpn()')
            res.extend(_bgp_evpn.prsrc('bgp_evpn', False).splitlines())
        _bgp_ipvpn = self.bgp_ipvpn
        if _bgp_ipvpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-ipvpn')
            res.append('bgp_ipvpn = {self_name}.create_bgp_ipvpn()')
            res.extend(_bgp_ipvpn.prsrc('bgp_ipvpn', False).splitlines())
        _directly_connected = self.directly_connected
        if _directly_connected is not None:
            res.extend(_directly_connected.prsrc('{self_name}.directly_connected', False).splitlines())
        _isis = self.isis
        if _isis is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/isis')
            res.append('isis = {self_name}.create_isis()')
            res.extend(_isis.prsrc('isis', False).splitlines())
        _bgp = self.bgp
        if _bgp is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp')
            res.append('bgp = {self_name}.create_bgp()')
            res.extend(_bgp.prsrc('bgp', False).splitlines())
        _bgp_vpn = self.bgp_vpn
        if _bgp_vpn is not None:
            res.append('')
            res.append('# P-container: /network-instance/protocols/bgp-vpn')
            res.append('bgp_vpn = {self_name}.create_bgp_vpn()')
            res.extend(_bgp_vpn.prsrc('bgp_vpn', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance/protocols'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_network_instance__network_instance__protocols(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_bgp_evpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-evpn')
    yang.gdata.maybe_add(children, 'bgp-evpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_evpn, child_bgp_evpn)
    child_bgp_ipvpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-ipvpn')
    yang.gdata.maybe_add(children, 'bgp-ipvpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_ipvpn, child_bgp_ipvpn)
    child_directly_connected = yang.gdata.from_xml_opt_cnt(node, 'directly-connected')
    yang.gdata.maybe_add(children, 'directly-connected', from_xml_srl_nokia_network_instance__network_instance__protocols__directly_connected, child_directly_connected)
    child_isis = yang.gdata.from_xml_opt_cnt(node, 'isis', 'urn:nokia.com:srlinux:isis:isis')
    yang.gdata.maybe_add(children, 'isis', from_xml_srl_nokia_network_instance__network_instance__protocols__isis, child_isis)
    child_bgp = yang.gdata.from_xml_opt_cnt(node, 'bgp', 'urn:nokia.com:srlinux:bgp:bgp')
    yang.gdata.maybe_add(children, 'bgp', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp, child_bgp)
    child_bgp_vpn = yang.gdata.from_xml_opt_cnt(node, 'bgp-vpn', 'urn:nokia.com:srlinux:bgp:bgp-vpn')
    yang.gdata.maybe_add(children, 'bgp-vpn', from_xml_srl_nokia_network_instance__network_instance__protocols__bgp_vpn, child_bgp_vpn)
    return yang.gdata.Container(children)

class srl_nokia_network_instance__network_instance_entry(yang.adata.MNode):
    name: str
    type: ?Identityref
    admin_state: ?str
    description: ?str
    router_id: ?str
    interface: srl_nokia_network_instance__network_instance__interface
    vxlan_interface: srl_nokia_network_instance__network_instance__vxlan_interface
    protocols: srl_nokia_network_instance__network_instance__protocols

    mut def __init__(self, name: str, type: ?Identityref, admin_state: ?str, description: ?str, router_id: ?str, interface: list[srl_nokia_network_instance__network_instance__interface_entry]=[], vxlan_interface: list[srl_nokia_network_instance__network_instance__vxlan_interface_entry]=[], protocols: ?srl_nokia_network_instance__network_instance__protocols=None):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self.name = name
        self.type = type
        self.admin_state = admin_state
        self.description = description
        self.router_id = router_id
        self.interface = srl_nokia_network_instance__network_instance__interface(elements=interface)
        self.vxlan_interface = srl_nokia_network_instance__network_instance__vxlan_interface(elements=vxlan_interface)
        self.protocols = protocols if protocols is not None else srl_nokia_network_instance__network_instance__protocols()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _type = self.type
        if _type is not None:
            _identityref_type, error = complete_and_validate_identityref(_type, _identities, ['srl_nokia-netinst:ni-type'], 'srl_nokia-network-instance')
            if _identityref_type is not None:
                _type = _identityref_type
            else:
                raise ValueError('Invalid value for identityref leaf type: {error}')
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _admin_state = self.admin_state
        if _admin_state is not None:
            children['admin-state'] = yang.gdata.Leaf('enumeration', _admin_state)
        _description = self.description
        if _description is not None:
            children['description'] = yang.gdata.Leaf('string', _description)
        _router_id = self.router_id
        if _router_id is not None:
            children['router-id'] = yang.gdata.Leaf('string', _router_id)
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        _protocols = self.protocols
        if _protocols is not None:
            children['protocols'] = _protocols.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_network_instance__network_instance_entry:
        return srl_nokia_network_instance__network_instance_entry(name=n.get_str('name'), type=n.get_opt_Identityref('type'), admin_state=n.get_opt_str('admin-state'), description=n.get_opt_str('description'), router_id=n.get_opt_str('router-id'), interface=srl_nokia_network_instance__network_instance__interface.from_gdata(n.get_opt_list('interface')), vxlan_interface=srl_nokia_network_instance__network_instance__vxlan_interface.from_gdata(n.get_opt_list('vxlan-interface')), protocols=srl_nokia_network_instance__network_instance__protocols.from_gdata(n.get_opt_cnt('protocols')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /network-instance')
            res.append('{self_name} = srl_nokia_network_instance__network_instance({repr(self.name)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _admin_state = self.admin_state
        if _admin_state is not None:
            leaves.append('{self_name}.admin_state = {repr(_admin_state)}')
        _description = self.description
        if _description is not None:
            leaves.append('{self_name}.description = {repr(_description)}')
        _router_id = self.router_id
        if _router_id is not None:
            leaves.append('{self_name}.router_id = {repr(_router_id)}')
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /network-instance/interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _vxlan_interface = self.vxlan_interface
        for _element in _vxlan_interface.elements:
            res.append('')
            res.append("# List /network-instance/vxlan-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'vxlan_interface_element = {self_name}.vxlan_interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vxlan_interface_element', False, list_element=True).splitlines())
        _protocols = self.protocols
        if _protocols is not None:
            res.extend(_protocols.prsrc('{self_name}.protocols', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /network-instance'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_network_instance__network_instance(yang.adata.MNode):
    elements: list[srl_nokia_network_instance__network_instance_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:net-inst:network-instance'
        self._name = 'network-instance'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_network_instance__network_instance_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_network_instance__network_instance_entry]:
        if n is not None:
            return [srl_nokia_network_instance__network_instance_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_network_instance__network_instance_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_network_instance__network_instance__name, child_name)
    child_type = yang.gdata.from_xml_opt_Identityref(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_network_instance__network_instance__type, child_type)
    child_admin_state = yang.gdata.from_xml_opt_str(node, 'admin-state')
    yang.gdata.maybe_add(children, 'admin-state', from_xml_srl_nokia_network_instance__network_instance__admin_state, child_admin_state)
    child_description = yang.gdata.from_xml_opt_str(node, 'description')
    yang.gdata.maybe_add(children, 'description', from_xml_srl_nokia_network_instance__network_instance__description, child_description)
    child_router_id = yang.gdata.from_xml_opt_str(node, 'router-id')
    yang.gdata.maybe_add(children, 'router-id', from_xml_srl_nokia_network_instance__network_instance__router_id, child_router_id)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_network_instance__network_instance__interface, child_interface)
    child_vxlan_interface = yang.gdata.from_xml_opt_list(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_network_instance__network_instance__vxlan_interface, child_vxlan_interface)
    child_protocols = yang.gdata.from_xml_opt_cnt(node, 'protocols')
    yang.gdata.maybe_add(children, 'protocols', from_xml_srl_nokia_network_instance__network_instance__protocols, child_protocols)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_network_instance__network_instance(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_network_instance__network_instance_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:net-inst:network-instance', module='srl_nokia-network-instance')

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__name(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('string', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__index(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__type(val: PartialIdentityref) -> yang.gdata.Leaf:
    new_val, error = complete_and_validate_identityref(val, _identities, ['srl_nokia-if:si-type'], 'srl_nokia-tunnel-interfaces')
    if new_val is not None:
        return yang.gdata.Leaf('identityref', new_val)
    else:
        raise ValueError('Invalid value for identityref leaf type: {error}')

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress__vni(val: value) -> yang.gdata.Leaf:
    return yang.gdata.Leaf('uint32', val)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(yang.adata.MNode):
    vni: ?int

    mut def __init__(self, vni: ?int):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.vni = vni

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _vni = self.vni
        if _vni is not None:
            children['vni'] = yang.gdata.Leaf('uint32', _vni)
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress:
        if n is not None:
            return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(vni=n.get_opt_int('vni'))
        raise ValueError('Missing required subtree srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress')

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface/ingress')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress()')
        leaves = []
        _vni = self.vni
        if _vni is not None:
            leaves.append('{self_name}.vni = {repr(_vni)}')
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface/ingress'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_vni = yang.gdata.from_xml_opt_int(node, 'vni')
    yang.gdata.maybe_add(children, 'vni', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress__vni, child_vni)
    return yang.gdata.Container(children)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(yang.adata.MNode):
    index: int
    type: ?Identityref
    ingress: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress

    mut def __init__(self, index: int, type: ?Identityref, ingress: ?srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress=None):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.index = index
        self.type = type
        self.ingress = ingress if ingress is not None else srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress()

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _index = self.index
        if _index is not None:
            children['index'] = yang.gdata.Leaf('uint32', _index)
        _type = self.type
        if _type is not None:
            _identityref_type, error = complete_and_validate_identityref(_type, _identities, ['srl_nokia-if:si-type'], 'srl_nokia-tunnel-interfaces')
            if _identityref_type is not None:
                _type = _identityref_type
            else:
                raise ValueError('Invalid value for identityref leaf type: {error}')
            children['type'] = yang.gdata.Leaf('identityref', _type)
        _ingress = self.ingress
        if _ingress is not None:
            children['ingress'] = _ingress.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(index=n.get_int('index'), type=n.get_opt_Identityref('type'), ingress=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress.from_gdata(n.get_opt_cnt('ingress')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface/vxlan-interface')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface({repr(self.index)})')
        leaves = []
        _type = self.type
        if _type is not None:
            leaves.append('{self_name}.type = {repr(_type)}')
        _ingress = self.ingress
        if _ingress is not None:
            res.extend(_ingress.prsrc('{self_name}.ingress', False).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface/vxlan-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'vxlan-interface'
        self.elements = elements

    mut def create(self, index, type):
        for e in self.elements:
            match = True
            if e.index != index:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry(index, type)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['index'], elements)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_index = yang.gdata.from_xml_int(node, 'index')
    yang.gdata.maybe_add(children, 'index', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__index, child_index)
    child_type = yang.gdata.from_xml_opt_Identityref(node, 'type')
    yang.gdata.maybe_add(children, 'type', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__type, child_type)
    child_ingress = yang.gdata.from_xml_opt_cnt(node, 'ingress')
    yang.gdata.maybe_add(children, 'ingress', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface__ingress, child_ingress)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['index'], elements=elements)

class srl_nokia_tunnel_interfaces__tunnel_interface_entry(yang.adata.MNode):
    name: str
    vxlan_interface: srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface

    mut def __init__(self, name: str, vxlan_interface: list[srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface_entry]=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self.name = name
        self.vxlan_interface = srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface(elements=vxlan_interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _name = self.name
        if _name is not None:
            children['name'] = yang.gdata.Leaf('string', _name)
        _vxlan_interface = self.vxlan_interface
        if _vxlan_interface is not None:
            children['vxlan-interface'] = _vxlan_interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: yang.gdata.Node) -> srl_nokia_tunnel_interfaces__tunnel_interface_entry:
        return srl_nokia_tunnel_interfaces__tunnel_interface_entry(name=n.get_str('name'), vxlan_interface=srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface.from_gdata(n.get_opt_list('vxlan-interface')))

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /tunnel-interface')
            res.append('{self_name} = srl_nokia_tunnel_interfaces__tunnel_interface({repr(self.name)})')
        leaves = []
        _vxlan_interface = self.vxlan_interface
        for _element in _vxlan_interface.elements:
            res.append('')
            res.append("# List /tunnel-interface/vxlan-interface element: {_element.to_gdata().key_str(['index'])}")
            list_elem = 'vxlan_interface_element = {self_name}.vxlan_interface.create({repr(_element.index)})'
            res.append(list_elem)
            res.extend(_element.prsrc('vxlan_interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /tunnel-interface'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)

class srl_nokia_tunnel_interfaces__tunnel_interface(yang.adata.MNode):
    elements: list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]
    mut def __init__(self, elements=[]):
        self._ns = 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces'
        self._name = 'tunnel-interface'
        self.elements = elements

    mut def create(self, name):
        for e in self.elements:
            match = True
            if e.name != name:
                match = False
                continue
            if match:
                return e

        res = srl_nokia_tunnel_interfaces__tunnel_interface_entry(name)
        self.elements.append(res)
        return res

    mut def to_gdata(self):
        elements = []
        for e in self.elements:
            e_gdata = e.to_gdata()
            if isinstance(e_gdata, yang.gdata.Container):
                elements.append(e_gdata)
        return yang.gdata.List(['name'], elements, ns='urn:nokia.com:srlinux:vxlan:tunnel-interfaces', module='srl_nokia-tunnel-interfaces')

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.List) -> list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]:
        if n is not None:
            return [srl_nokia_tunnel_interfaces__tunnel_interface_entry.from_gdata(e) for e in n.elements]
        return []


mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface_element(node: xml.Node) -> yang.gdata.Node:
    children = {}
    child_name = yang.gdata.from_xml_str(node, 'name')
    yang.gdata.maybe_add(children, 'name', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__name, child_name)
    child_vxlan_interface = yang.gdata.from_xml_opt_list(node, 'vxlan-interface')
    yang.gdata.maybe_add(children, 'vxlan-interface', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface__vxlan_interface, child_vxlan_interface)
    return yang.gdata.Container(children)

mut def from_xml_srl_nokia_tunnel_interfaces__tunnel_interface(nodes: list[xml.Node]) -> yang.gdata.List:
    elements = [from_xml_srl_nokia_tunnel_interfaces__tunnel_interface_element(e) for e in nodes]
    return yang.gdata.List(keys=['name'], elements=elements, ns='urn:nokia.com:srlinux:vxlan:tunnel-interfaces', module='srl_nokia-tunnel-interfaces')

class root(yang.adata.MNode):
    tunnel: srl_nokia_tunnel__tunnel
    system: srl_nokia_system__system
    interface: srl_nokia_interfaces__interface
    network_instance: srl_nokia_network_instance__network_instance
    tunnel_interface: srl_nokia_tunnel_interfaces__tunnel_interface

    mut def __init__(self, tunnel: ?srl_nokia_tunnel__tunnel=None, system: ?srl_nokia_system__system=None, interface: list[srl_nokia_interfaces__interface_entry]=[], network_instance: list[srl_nokia_network_instance__network_instance_entry]=[], tunnel_interface: list[srl_nokia_tunnel_interfaces__tunnel_interface_entry]=[]):
        self._ns = ''
        self.tunnel = tunnel if tunnel is not None else srl_nokia_tunnel__tunnel()
        self.system = system if system is not None else srl_nokia_system__system()
        self.interface = srl_nokia_interfaces__interface(elements=interface)
        self.network_instance = srl_nokia_network_instance__network_instance(elements=network_instance)
        self.tunnel_interface = srl_nokia_tunnel_interfaces__tunnel_interface(elements=tunnel_interface)

    mut def to_gdata(self) -> yang.gdata.Node:
        children = {}
        _tunnel = self.tunnel
        if _tunnel is not None:
            children['tunnel'] = _tunnel.to_gdata()
        _system = self.system
        if _system is not None:
            children['system'] = _system.to_gdata()
        _interface = self.interface
        if _interface is not None:
            children['interface'] = _interface.to_gdata()
        _network_instance = self.network_instance
        if _network_instance is not None:
            children['network-instance'] = _network_instance.to_gdata()
        _tunnel_interface = self.tunnel_interface
        if _tunnel_interface is not None:
            children['tunnel-interface'] = _tunnel_interface.to_gdata()
        return yang.gdata.Container(children)

    @staticmethod
    mut def from_gdata(n: ?yang.gdata.Node) -> root:
        if n is not None:
            return root(tunnel=srl_nokia_tunnel__tunnel.from_gdata(n.get_opt_cnt('tunnel')), system=srl_nokia_system__system.from_gdata(n.get_opt_cnt('system')), interface=srl_nokia_interfaces__interface.from_gdata(n.get_opt_list('interface')), network_instance=srl_nokia_network_instance__network_instance.from_gdata(n.get_opt_list('network-instance')), tunnel_interface=srl_nokia_tunnel_interfaces__tunnel_interface.from_gdata(n.get_opt_list('tunnel-interface')))
        return root()

    def prsrc(self, self_name='ad', top=True, list_element=False):
        res = []
        if top:
            res.append('# Top node: /root')
            res.append('{self_name} = root()')
        leaves = []
        _tunnel = self.tunnel
        if _tunnel is not None:
            res.extend(_tunnel.prsrc('{self_name}.tunnel', False).splitlines())
        _system = self.system
        if _system is not None:
            res.extend(_system.prsrc('{self_name}.system', False).splitlines())
        _interface = self.interface
        for _element in _interface.elements:
            res.append('')
            res.append("# List /interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'interface_element = {self_name}.interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('interface_element', False, list_element=True).splitlines())
        _network_instance = self.network_instance
        for _element in _network_instance.elements:
            res.append('')
            res.append("# List /network-instance element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'network_instance_element = {self_name}.network_instance.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('network_instance_element', False, list_element=True).splitlines())
        _tunnel_interface = self.tunnel_interface
        for _element in _tunnel_interface.elements:
            res.append('')
            res.append("# List /tunnel-interface element: {_element.to_gdata().key_str(['name'])}")
            list_elem = 'tunnel_interface_element = {self_name}.tunnel_interface.create({repr(_element.name)})'
            res.append(list_elem)
            res.extend(_element.prsrc('tunnel_interface_element', False, list_element=True).splitlines())
        if leaves:
            if not list_element:
               res = ['', '# Container: /root'] + leaves + res
            else:
                res = leaves + res
        return '\n'.join(res)


mut def from_xml(node: xml.Node) -> yang.gdata.Container:
    children = {}
    child_tunnel = yang.gdata.from_xml_opt_cnt(node, 'tunnel', 'urn:nokia.com:srlinux:vxlan:tunnel')
    yang.gdata.maybe_add(children, 'tunnel', from_xml_srl_nokia_tunnel__tunnel, child_tunnel)
    child_system = yang.gdata.from_xml_opt_cnt(node, 'system', 'urn:nokia.com:srlinux:general:system')
    yang.gdata.maybe_add(children, 'system', from_xml_srl_nokia_system__system, child_system)
    child_interface = yang.gdata.from_xml_opt_list(node, 'interface', 'urn:nokia.com:srlinux:chassis:interfaces')
    yang.gdata.maybe_add(children, 'interface', from_xml_srl_nokia_interfaces__interface, child_interface)
    child_network_instance = yang.gdata.from_xml_opt_list(node, 'network-instance', 'urn:nokia.com:srlinux:net-inst:network-instance')
    yang.gdata.maybe_add(children, 'network-instance', from_xml_srl_nokia_network_instance__network_instance, child_network_instance)
    child_tunnel_interface = yang.gdata.from_xml_opt_list(node, 'tunnel-interface', 'urn:nokia.com:srlinux:vxlan:tunnel-interfaces')
    yang.gdata.maybe_add(children, 'tunnel-interface', from_xml_srl_nokia_tunnel_interfaces__tunnel_interface, child_tunnel_interface)
    return yang.gdata.Container(children)

schema_namespaces: set[str] = {
    'urn:nokia.com:srlinux:bgp:bgp',
    'urn:nokia.com:srlinux:bgp:bgp-vpn',
    'urn:nokia.com:srlinux:chassis:interfaces',
    'urn:nokia.com:srlinux:chassis:interfaces-vlans',
    'urn:nokia.com:srlinux:chassis:system-name',
    'urn:nokia.com:srlinux:general:system',
    'urn:nokia.com:srlinux:general:system-protocols',
    'urn:nokia.com:srlinux:isis:isis',
    'urn:nokia.com:srlinux:net-inst:bgp-evpn',
    'urn:nokia.com:srlinux:net-inst:network-instance',
    'urn:nokia.com:srlinux:vxlan:tunnel',
    'urn:nokia.com:srlinux:vxlan:tunnel-interfaces',
}
