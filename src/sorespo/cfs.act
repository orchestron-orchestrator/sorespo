import yang.adata
import orchestron.ttt

from sorespo.conf import IGBP_AUTHENTICATION_KEY
import sorespo.layers.base_0 as base
import sorespo.layers.y_1_loose
import sorespo.layers.y_0 as y_0
# TODO: this import is required by the compiler, maybe related to
# https://github.com/actonlang/acton/issues/2390
import yang.identityref

class Router(base.Router):
    def transform(self, i):
        o = base.o_root()
        print("CFS router transform running", i.name, i.id)
        o_router = o.netinfra.router.create(i.name)
        o_router.type = i.type
        o_router.id = i.id
        o_router.role = i.role
        o_router.mock = i.mock

        # Assign the loopback interface addresses
        bc = o_router.base_config
        bc.ipv4_address = "10.0.0.%d" % i.id
        bc.ipv6_address = "2001:db8:0:0::%d" % i.id
        bc.asn = i.asn

        fm = o.netinfra.ibgp_fullmesh.create(i.asn, IGBP_AUTHENTICATION_KEY)
        fmr = fm.router.create(i.name, bc.ipv4_address)

        return o


class BBLink(base.BBLink):
    def transform(self, i):
        print("CFS backbonelink transform running %s [%s] <-> %s [%s]" % (i.left_router, i.left_interface, i.right_router, i.right_interface))
        o = base.o_root()
        bbl = o.netinfra.backbone_link.create(i.left_router, i.left_interface, i.right_router, i.right_interface)
        bbl.monitor_health = i.monitor_health
        return o


class L3VpnVpnService(base.L3VpnVpnService):
    def transform(self, i):
        print("CFS L3VPN VPN Service transform running %s" % (i.vpn_id))
        customer_name = i.customer_name
        o = base.o_root()
        o_vpn = o.l3vpns.l3vpn.create(i.vpn_id)
        o_vpn.description = "Customer VPN for %s" % customer_name if customer_name is not None else ""
        return o


class L3VpnSite(base.L3VpnSite):
    def transform(self, i):
        print("CFS L3VPN Site transform running %s" % (i.site_id))
        o = base.o_root()
        for sna in i.site_network_accesses.site_network_access.elements:
            vpn_id = sna.vpn_attachment.vpn_id
            bearer_ref = sna.bearer.bearer_reference
            if bearer_ref is not None:
                parts = bearer_ref.split(",")
                device = parts[0]
                interface = parts[1]
            else:
                device, interface = None, None
            provider_ipv4_address = sna.ip_connection.ipv4.addresses.provider_address
            customer_ipv4_address = sna.ip_connection.ipv4.addresses.customer_address
            ipv4_len = sna.ip_connection.ipv4.addresses.prefix_length
            if vpn_id is not None and device is not None and interface is not None and provider_ipv4_address is not None and ipv4_len is not None:
                o_vpn = o.l3vpns.l3vpn.create(vpn_id)
                o_ep = o_vpn.endpoint.create(device, interface)
                o_ep.site = i.site_id
                o_ep.site_network_access = sna.site_network_access_id
                o_ep.provider_ipv4_address = provider_ipv4_address
                o_ep.ipv4_prefix_length = ipv4_len

                for rp in sna.routing_protocols.routing_protocol.elements:
                    if rp.type == y_0.ietf_l3vpn_svc_bgp:
                        bgp = rp.bgp
                        if bgp is not None:
                            o_bgp = o_ep.create_bgp()
                            o_bgp.as_number = bgp.autonomous_system
                if customer_ipv4_address is not None:
                    o_ep.customer_ipv4_address = customer_ipv4_address

                # TODO: do the VRF ID split here too?! vpn-id acme-65501 -> 65501
                inter_l3vpn = o.netinfra.router.create(device).l3vpn_vrf.create(vpn_id)
                if customer_ipv4_address is not None:
                    inter_l3vpn.ebgp_customer_address.append(customer_ipv4_address)

        return o
