import argparse
import file
import json
import logging
import http
import net
import xml

import orchestron.device as odev
import orchestron.ttt as ttt
import yang.adata
import yang.gdata

import tmf.tmf641
import respnet.tmf

import respnet.layers
import respnet.layers.y_0_loose as cfs_layer
import respnet.layers.y_0
import respnet.layers.y_1
import respnet.layers.y_2
import respnet.layers.y_3

import respnet.layers.y_0_loose
import respnet.layers.y_1_loose
import respnet.layers.y_2_loose
import respnet.layers.y_3_loose

import respnet.sysspec

import testing

def optional_str[T](v: ?T, default: str = "None") -> str:
    return str(v) if v is not None else default

def rfs_for_device(dev):
    return yang.gdata.Container({
        'rfs': yang.gdata.List(["name"], [
            yang.gdata.Container({
                "name": yang.gdata.Leaf("string", dev)
            })
        ])
    })

def adata_for_layer(layer, gdata):
    if layer == 0:
        return respnet.layers.y_0_loose.root.from_gdata(gdata)
    elif layer == 1:
        return respnet.layers.y_1_loose.root.from_gdata(gdata)
    elif layer == 2:
        return respnet.layers.y_2_loose.root.from_gdata(gdata)
    elif layer == 3:
        # Layer 3 (device) is a bit special, in that there is more than one adata tree:
        # 1. The device manager, defined in orchestron-device.yang
        # 2. The device configuration, defined in the device's own YANG model
        # The contents of layer 3 (gdata) is a combination of both, but to
        # reconstruct adata, we must pick whether we want the internal device
        # manager or the device configuration. Here we return the device manager tree.
        return respnet.layers.y_3_loose.root.from_gdata(gdata)
    else:
        raise ValueError("Invalid layer: %d" % layer)

actor main(env):
    rfcap = file.ReadFileCap(file.FileCap(env.cap))

    logh = logging.Handler("Otron")
    logh.add_sink(logging.StdoutSink())
    logh.set_output_level(logging.TRACE)

    logh_http = logging.Handler("HTTP")
    logh_http.set_handler(logh)
    logh_http.set_output_level(logging.DEBUG)

    logh_ttt = logging.Handler("TTT")
    logh_ttt.set_handler(logh)
    logh_ttt.set_output_level(logging.INFO)

    logh_dev = logging.Handler("Dev")
    logh_dev.set_handler(logh)

    log = logging.Logger(logh)

    dev_mgr = odev.DeviceManager(env.cap, logh_dev)
    cfs = respnet.layers.get_layers(dev_mgr, logh_ttt)
    rfs = cfs.below().below()
    dev_mgr.on_reconf(lambda dev: rfs.edit_config(rfs_for_device(dev), force=True))

    tcpl_cap = net.TCPListenCap(net.TCPCap(net.NetCap(env.cap)))

    tmf_store = respnet.tmf.SOStore()

    def _on_http_accept(server):
        server.cb_install(_on_http_server_request, _on_http_server_error)

    def _on_http_server_request(server, request, respond):

        def config_done(result):
            if isinstance(result, Exception):
                respond(400, {}, str(result))
            else:
                respond(200, {}, "OK")

        path_elements = request.path.split("/")
        if len(path_elements) > 1 and path_elements[1] == "tmf-api":
            # GET /tmf-api/serviceOrdering/v4/serviceOrder/{id}
            if request.method == "GET":
                if len(path_elements) == 5 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    res = [so.to_json() for so in tmf_store.get_service_orders()]
                    respond(200, {}, json.encode({"items": res}))
                    return

                elif len(path_elements) == 6 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    try:
                        so_id = path_elements[5]
                        sr = tmf_store.get_service_order(so_id)
                        if sr is not None:
                            respond(200, {}, json.encode(sr.to_json()))
                            return
                        else:
                            respond(404, {}, "Not found")
                            return
                    except Exception as e:
                        respond(400, {}, "Error getting service order: %s" % str(e))
                        return

            # POST /tmf-api/serviceOrdering/v4/serviceOrder
            if request.method == "POST":
                if len(path_elements) > 3 and path_elements[2] == "serviceOrdering" and path_elements[3] == "v4" and path_elements[4] == "serviceOrder":
                    so_in = json.decode(request.body.decode())
                    try:
                        sr = tmf_store.create_service_order(so_in)
                        sr_diff = sr.diff
                        if sr_diff is not None:
                            session = cfs.newsession()
                            session.edit_config(sr_diff, config_done)
                        return
                    except Exception as e:
                        respond(400, {}, "Error creating service order: %s" % str(e))
                        return

            # no more tmf-api
            respond(404, {}, "Not found")
            return

        if request.method == "GET":
            if len(path_elements) > 3 and path_elements[1] == "device":
                try:
                    # We use upper case for device names in our configs
                    # TODO: maybe we should somehow normalize that?!
                    dev_name = path_elements[2].upper()
                    dev = dev_mgr.get(dev_name)
                    if path_elements[3] == "capabilities":
                        respond(200, {}, str(dev.get_capabilities()))
                        return
                    if path_elements[3] == "modules":
                        txt = r"{"
                        modset, modset_id = dev.get_modules()
                        for mod in modset.values():
                            txt += r'{"name": %s, "namespace": %s, "revision": %s, "feature": %s}, ' % (mod.name, mod.namespace, optional_str(mod.revision), optional_str(mod.feature))
                        txt += r"}"
                        respond(200, {}, txt)
                        return
                    if path_elements[3] == 'target':
                        modset, _ = dev.get_modules()
                        device_type = None
                        if "Cisco-IOS-XR-um-hostname-cfg" in modset:
                            device_type = respnet.sysspec.device_types["CiscoIosXr_24_1_ncs55a1"]
                        elif "http://xml.juniper.net/netconf/junos/1.0" in modset or "junos-conf-root" in modset:
                            device_type = respnet.sysspec.device_types["JuniperCRPD_23_4R1_9"]
                        if device_type is not None:
                            session = cfs.newsession()
                            device_layer = session.below().below().below().get()
                            device_entry = device_layer.get_cnt("devices").get_list("device").get_list_entry(dev_name)
                            config_gd = device_entry.get_cnt("config")
                            if request.headers.get("accept") == "application/adata+text":
                                config_ad = device_type.from_gdata(config_gd)
                                response = config_ad.prsrc()
                            else:
                                response = config_gd.to_xmlstr()
                            respond(200, {"Content-type": request.headers.get_def("accept", "application/xml+text")}, response)
                            return
                    if path_elements[3] == 'running':
                        modset, _ = dev.get_modules()
                        device_type = None
                        if "Cisco-IOS-XR-um-hostname-cfg" in modset:
                            device_type = respnet.sysspec.device_types["CiscoIosXr_24_1_ncs55a1"]
                        elif "http://xml.juniper.net/netconf/junos/1.0" in modset or "junos-conf-root" in modset:
                            device_type = respnet.sysspec.device_types["JuniperCRPD_23_4R1_9"]
                        if device_type is not None:
                            config_xml = dev.get_running_config()
                            if config_xml is not None:
                                config_gd = device_type.from_xml(config_xml)
                                if request.headers.get("accept") == "application/adata+text":
                                    config_ad = device_type.from_gdata(config_gd)
                                    response = config_ad.prsrc()
                                else:
                                    response = config_gd.to_xmlstr()
                                respond(200, {"Content-type": request.headers.get_def("accept", "application/xml+text")}, response)
                                return
                            else:
                                respond(500, {}, "no config")

                    respond(404, {}, "Not found")
                    return
                except Exception as e:
                    log.error(str(e))
                    respond(404, {}, "Not found")
                    return
            elif len(path_elements) == 3 and path_elements[1] == "layer":
                try:
                    session = cfs.newsession()
                    layer_idx = int(path_elements[2])
                except ValueError:
                    respond(400, {}, "Bad request, layer index must be an integer")
                    return
                else:
                    if layer_idx > 3:
                        respond(404, {}, "Unknown layer")
                        return
                    for _ in range(layer_idx):
                        session = session.below()
                    layer_config: yang.gdata.Node = session.get()
                    content = ""
                    if request.headers.get("accept") == "application/yang-data+json":
                        content = layer_config.to_json()
                    if request.headers.get("accept") == "application/yang-data+xml":
                        content = layer_config.to_xmlstr()
                    if request.headers.get("accept") == "application/adata+text":
                        adata = adata_for_layer(layer_idx, layer_config)
                        content = adata.prsrc()
                    respond(200, {}, content)
                    return
            else:
                respond(404, {}, "Not found")
                return
        elif request.method == "DELETE":
            p = split_restconf_path(request.path)
            if p[0] == "restconf":
                input_config = respnet.layers.y_0.from_json_path({}, p[1:], "remove")
                session = cfs.newsession()
                session.edit_config(input_config, config_done)
                return
            respond(404, {}, "")
            return
        elif request.method in {"POST", "PUT"}:
            path_segments = request.path.split("/")
            if len(path_segments) >= 1 and path_segments[1] == "restconf":
                if request.headers.get("content-type") == "application/yang-data+json":
                    json_in = json.decode(request.body.decode())
                    p = split_restconf_path(request.path)[1:]
                    input_config = respnet.layers.y_0.from_json_path(json_in, p)
                    session = cfs.newsession()
                    session.edit_config(input_config, config_done)
                    return
                elif request.headers.get("content-type") == "application/yang-data+xml":
                    try:
                        xml_in = xml.decode(request.body.decode())
                        input_config = cfs_layer.from_xml(xml_in)
                        session = cfs.newsession()
                        session.edit_config(input_config, config_done)
                        return
                    except Exception as e:
                        respond(400, {}, "Error parsing XML: %s" % str(e))
                        return
                else:
                    respond(415, {}, "Unsupported media type")
                    return
            respond(404, {}, "")
            return
        else:
            respond(405, {}, "Method not allowed")
            return

    def _on_http_server_error(server, error):
        print("Error: %s" % error)

    server = http.Listener(tcpl_cap, "0.0.0.0", 80, _on_http_accept, log_handler=logh_http)

    configs = []
    env_exit_on_done = env.getenv("EXIT_ON_DONE")
    exit_on_done = env_exit_on_done if env_exit_on_done is not None else ""

    def _conf_file(session):

        def _conf_file_done(result):
            if isinstance(result, str):
                print("Config file applied, waiting 3 seconds before applying the next..")
                after 3: _conf_file(session)
            else:
                print("Config file error", )

        # Grab te first config
        print("Applying config file..")
        try:
            xml_in = configs.pop(0)
            input_config = cfs_layer.from_xml(xml_in)
            session.edit_config(input_config, _conf_file_done)
        except IndexError:
            print("All config files applied")
            # TODO: exit_on_done.lower() once Acton bug is fixed!?
            if exit_on_done in ["1", "true", "yes"]:
                print("No more config files to apply, exiting..")
                after 3: _exit()

    def _exit():
        env.exit(0)

    if len(env.argv) > 1:
        # Read and apply config files, but paced
        for i in range(1, len(env.argv)):
            if i > 0:
                filename = env.argv[i]
                f = file.ReadFile(rfcap, filename)
                nb_input = await async f.read()
                f.close()
                try:
                    configs.append(xml.decode(nb_input.decode()))
                except Exception as e:
                    print("Error reading config file %s: %s" % (filename, str(e)))
                    env.exit(1)

        # start to apply..
        after 0.5: _conf_file(cfs.newsession())

    print("Orchestron/respnet running..")



def split_restconf_path(text: str) -> list[str]:
    # First split by slash
    parts = text.split('/')
    # Create a new list to store all elements
    result = []
    # For each part, split by equals if it exists
    for part in parts:
        if '=' in part:
            result.extend(part.split('=', 1))
        elif part != '':
            result.append(part)
    return result
