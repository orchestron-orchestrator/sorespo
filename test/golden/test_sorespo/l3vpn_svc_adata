def adata_AMS_CORE_1():
    # Top node: /root
    ad = root()
    
    # List /vrfs/vrf element: acme-65501
    vrf_element = ad.vrfs.vrf.create('acme-65501')
    vrf_element.description = 'Customer VPN for CUSTOMER-1'
    
    # P-container: /vrfs/vrf/address-family/ipv4/unicast
    unicast = vrf_element.address_family.ipv4.create_unicast()
    
    # List /vrfs/vrf/address-family/ipv4/unicast/import/route-target/two-byte-as-rts/two-byte-as-rt element: 65001,65501,False
    two_byte_as_rt_element = unicast.import_.route_target.two_byte_as_rts.two_byte_as_rt.create(65001, 65501, False)
    
    # List /vrfs/vrf/address-family/ipv4/unicast/export/route-target/two-byte-as-rts/two-byte-as-rt element: 65001,65501,False
    two_byte_as_rt_element = unicast.export.route_target.two_byte_as_rts.two_byte_as_rt.create(65001, 65501, False)
    
    # List /router/isis/processes/process element: 1
    process_element = ad.um_router_isis_cfg_router.isis.processes.process.create('1')
    process_element.is_type = 'level-2-only'
    
    # List /router/isis/processes/process/nets/net element: 49.0001.0100.0000.0001.00
    net_element = process_element.nets.net.create('49.0001.0100.0000.0001.00')
    
    # List /router/isis/processes/process/address-families/address-family element: ipv4,unicast
    address_family_element = process_element.address_families.address_family.create('ipv4', 'unicast')
    
    # P-container: /router/isis/processes/process/address-families/address-family/metric-style/wide
    wide = address_family_element.metric_style.create_wide()
    
    # List /router/isis/processes/process/interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = process_element.interfaces.interface.create('GigabitEthernet0/0/0/0')
    interface_element.circuit_type = 'level-2-only'
    
    # P-container: /router/isis/processes/process/interfaces/interface/point-to-point
    point_to_point = interface_element.create_point_to_point()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family/metric/levels/level element: 2
    level_element = address_family_element.metric.levels.level.create(2)
    level_element.default_metric = 5000
    
    # List /router/isis/processes/process/interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = process_element.interfaces.interface.create('GigabitEthernet0/0/0/1')
    interface_element.circuit_type = 'level-2-only'
    
    # P-container: /router/isis/processes/process/interfaces/interface/point-to-point
    point_to_point = interface_element.create_point_to_point()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family/metric/levels/level element: 2
    level_element = address_family_element.metric.levels.level.create(2)
    level_element.default_metric = 5000
    
    # List /router/isis/processes/process/interfaces/interface element: Loopback0
    interface_element = process_element.interfaces.interface.create('Loopback0')
    
    # P-container: /router/isis/processes/process/interfaces/interface/passive
    passive = interface_element.create_passive()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/bgp/as element: 65001
    as__element = ad.um_router_bgp_cfg_router.bgp.as_.create('65001')
    
    # List /router/bgp/as/address-families/address-family element: vpnv4-unicast
    address_family_element = as__element.address_families.address_family.create('vpnv4-unicast')
    
    # List /router/bgp/as/address-families/address-family element: vpnv6-unicast
    address_family_element = as__element.address_families.address_family.create('vpnv6-unicast')
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.2
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.2')
    neighbor_element.description = 'FRA-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.3
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.3')
    neighbor_element.description = 'STO-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.4
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.4')
    neighbor_element.description = 'LJU-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbor-groups/neighbor-group element: IPV4-IBGP
    neighbor_group_element = as__element.neighbor_groups.neighbor_group.create('IPV4-IBGP')
    neighbor_group_element.remote_as = '65001'
    neighbor_group_element.update_source = 'Loopback0'
    
    # List /router/bgp/as/neighbor-groups/neighbor-group/address-families/address-family element: vpnv4-unicast
    address_family_element = neighbor_group_element.address_families.address_family.create('vpnv4-unicast')
    
    # List /router/bgp/as/neighbor-groups/neighbor-group/address-families/address-family element: vpnv6-unicast
    address_family_element = neighbor_group_element.address_families.address_family.create('vpnv6-unicast')
    
    # P-container: /router/bgp/as/neighbor-groups/neighbor-group/password
    password = neighbor_group_element.create_password()
    
    # Container: /router/bgp/as/neighbor-groups/neighbor-group/password
    password.encrypted = '045209011F6C4D5B1D11001906020F053E222B267E3E270A'
    
    # Container: /router/bgp/as/bgp
    as__element.bgp.router_id = '10.0.0.1'
    
    # List /router/bgp/as/vrfs/vrf element: acme-65501
    vrf_element = as__element.vrfs.vrf.create('acme-65501')
    
    # List /router/bgp/as/vrfs/vrf/address-families/address-family element: ipv4-unicast
    address_family_element = vrf_element.address_families.address_family.create('ipv4-unicast')
    
    # List /router/bgp/as/vrfs/vrf/neighbors/neighbor element: 10.201.1.2
    neighbor_element = vrf_element.neighbors.neighbor.create('10.201.1.2')
    neighbor_element.remote_as = '65501'
    neighbor_element.description = 'Customer eBGP SITE-1 [SNA-1-1] in VPN acme-65501 to 10.201.1.2'
    
    # List /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family element: ipv4-unicast
    address_family_element = neighbor_element.address_families.address_family.create('ipv4-unicast')
    
    # Container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family/route-policy
    address_family_element.route_policy.in_ = 'ACCEPT'
    address_family_element.route_policy.out = 'ACCEPT'
    
    # P-container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family/as-override
    as_override = address_family_element.create_as_override()
    
    # P-container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/password
    password = neighbor_element.create_password()
    
    # Container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/password
    password.encrypted = '045A080B0A6C1A1B5C4954'
    
    # P-container: /router/bgp/as/vrfs/vrf/rd
    rd = vrf_element.create_rd()
    
    # P-container: /router/bgp/as/vrfs/vrf/rd/two-byte-as
    two_byte_as = rd.create_two_byte_as()
    
    # Container: /router/bgp/as/vrfs/vrf/rd/two-byte-as
    two_byte_as.as_number = '65001'
    two_byte_as.index = 655011
    
    # P-container: /mpls/ldp
    ldp = ad.mpls.create_ldp()
    
    # List /mpls/ldp/address-families/address-family element: ipv4
    address_family_element = ldp.address_families.address_family.create('ipv4')
    
    # List /mpls/ldp/interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = ldp.interfaces.interface.create('GigabitEthernet0/0/0/0')
    
    # List /mpls/ldp/interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = ldp.interfaces.interface.create('GigabitEthernet0/0/0/1')
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/0')
    interface_element.shutdown = False
    interface_element.description = 'Link to FRA-CORE-1 [GigabitEthernet0/0/0/0]'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.7.1'
    address.netmask = '255.255.255.252'
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/1')
    interface_element.shutdown = False
    interface_element.description = 'Link to STO-CORE-1 [eth1]'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.20.1'
    address.netmask = '255.255.255.252'
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/2
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/2')
    interface_element.shutdown = False
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/2.100
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/2.100')
    interface_element.shutdown = False
    interface_element.description = 'Customer VPN access SITE-1 [SNA-1-1] in VPN acme-65501'
    interface_element.vrf = 'acme-65501'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.201.1.1'
    address.netmask = '255.255.255.252'
    
    # Container: /interfaces/interface/um-l2-ethernet-cfg:encapsulation/dot1q
    interface_element.um_l2_ethernet_cfg_encapsulation.dot1q.vlan_id = 100
    
    # List /interfaces/interface element: Loopback0
    interface_element = ad.interfaces.interface.create('Loopback0')
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.0.1'
    address.netmask = '255.255.255.255'
    
    # Container: /hostname
    ad.hostname.system_network_name = 'AMS-CORE-1'
    
    # List /routing-policy/route-policies/route-policy element: ACCEPT
    route_policy_element = ad.routing_policy.route_policies.route_policy.create('ACCEPT')
    route_policy_element.rpl_route_policy = 'route-policy ACCEPT\n  done\nend-policy'

def adata_FRA_CORE_1():
    # Top node: /root
    ad = root()
    
    # List /vrfs/vrf element: acme-65501
    vrf_element = ad.vrfs.vrf.create('acme-65501')
    vrf_element.description = 'Customer VPN for CUSTOMER-1'
    
    # P-container: /vrfs/vrf/address-family/ipv4/unicast
    unicast = vrf_element.address_family.ipv4.create_unicast()
    
    # List /vrfs/vrf/address-family/ipv4/unicast/import/route-target/two-byte-as-rts/two-byte-as-rt element: 65001,65501,False
    two_byte_as_rt_element = unicast.import_.route_target.two_byte_as_rts.two_byte_as_rt.create(65001, 65501, False)
    
    # List /vrfs/vrf/address-family/ipv4/unicast/export/route-target/two-byte-as-rts/two-byte-as-rt element: 65001,65501,False
    two_byte_as_rt_element = unicast.export.route_target.two_byte_as_rts.two_byte_as_rt.create(65001, 65501, False)
    
    # List /router/isis/processes/process element: 1
    process_element = ad.um_router_isis_cfg_router.isis.processes.process.create('1')
    process_element.is_type = 'level-2-only'
    
    # List /router/isis/processes/process/nets/net element: 49.0001.0100.0000.0002.00
    net_element = process_element.nets.net.create('49.0001.0100.0000.0002.00')
    
    # List /router/isis/processes/process/address-families/address-family element: ipv4,unicast
    address_family_element = process_element.address_families.address_family.create('ipv4', 'unicast')
    
    # P-container: /router/isis/processes/process/address-families/address-family/metric-style/wide
    wide = address_family_element.metric_style.create_wide()
    
    # List /router/isis/processes/process/interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = process_element.interfaces.interface.create('GigabitEthernet0/0/0/0')
    interface_element.circuit_type = 'level-2-only'
    
    # P-container: /router/isis/processes/process/interfaces/interface/point-to-point
    point_to_point = interface_element.create_point_to_point()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family/metric/levels/level element: 2
    level_element = address_family_element.metric.levels.level.create(2)
    level_element.default_metric = 5000
    
    # List /router/isis/processes/process/interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = process_element.interfaces.interface.create('GigabitEthernet0/0/0/1')
    interface_element.circuit_type = 'level-2-only'
    
    # P-container: /router/isis/processes/process/interfaces/interface/point-to-point
    point_to_point = interface_element.create_point_to_point()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family/metric/levels/level element: 2
    level_element = address_family_element.metric.levels.level.create(2)
    level_element.default_metric = 5000
    
    # List /router/isis/processes/process/interfaces/interface element: GigabitEthernet0/0/0/2
    interface_element = process_element.interfaces.interface.create('GigabitEthernet0/0/0/2')
    interface_element.circuit_type = 'level-2-only'
    
    # P-container: /router/isis/processes/process/interfaces/interface/point-to-point
    point_to_point = interface_element.create_point_to_point()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family/metric/levels/level element: 2
    level_element = address_family_element.metric.levels.level.create(2)
    level_element.default_metric = 5000
    
    # List /router/isis/processes/process/interfaces/interface element: Loopback0
    interface_element = process_element.interfaces.interface.create('Loopback0')
    
    # P-container: /router/isis/processes/process/interfaces/interface/passive
    passive = interface_element.create_passive()
    
    # List /router/isis/processes/process/interfaces/interface/address-families/address-family element: ipv4,unicast
    address_family_element = interface_element.address_families.address_family.create('ipv4', 'unicast')
    
    # List /router/bgp/as element: 65001
    as__element = ad.um_router_bgp_cfg_router.bgp.as_.create('65001')
    
    # List /router/bgp/as/address-families/address-family element: vpnv4-unicast
    address_family_element = as__element.address_families.address_family.create('vpnv4-unicast')
    
    # List /router/bgp/as/address-families/address-family element: vpnv6-unicast
    address_family_element = as__element.address_families.address_family.create('vpnv6-unicast')
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.1
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.1')
    neighbor_element.description = 'AMS-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.3
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.3')
    neighbor_element.description = 'STO-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbors/neighbor element: 10.0.0.4
    neighbor_element = as__element.neighbors.neighbor.create('10.0.0.4')
    neighbor_element.description = 'LJU-CORE-1'
    
    # Container: /router/bgp/as/neighbors/neighbor/use
    neighbor_element.use.neighbor_group = 'IPV4-IBGP'
    
    # List /router/bgp/as/neighbor-groups/neighbor-group element: IPV4-IBGP
    neighbor_group_element = as__element.neighbor_groups.neighbor_group.create('IPV4-IBGP')
    neighbor_group_element.remote_as = '65001'
    neighbor_group_element.update_source = 'Loopback0'
    
    # List /router/bgp/as/neighbor-groups/neighbor-group/address-families/address-family element: vpnv4-unicast
    address_family_element = neighbor_group_element.address_families.address_family.create('vpnv4-unicast')
    
    # List /router/bgp/as/neighbor-groups/neighbor-group/address-families/address-family element: vpnv6-unicast
    address_family_element = neighbor_group_element.address_families.address_family.create('vpnv6-unicast')
    
    # P-container: /router/bgp/as/neighbor-groups/neighbor-group/password
    password = neighbor_group_element.create_password()
    
    # Container: /router/bgp/as/neighbor-groups/neighbor-group/password
    password.encrypted = '045209011F6C4D5B1D11001906020F053E222B267E3E270A'
    
    # Container: /router/bgp/as/bgp
    as__element.bgp.router_id = '10.0.0.2'
    
    # List /router/bgp/as/vrfs/vrf element: acme-65501
    vrf_element = as__element.vrfs.vrf.create('acme-65501')
    
    # List /router/bgp/as/vrfs/vrf/address-families/address-family element: ipv4-unicast
    address_family_element = vrf_element.address_families.address_family.create('ipv4-unicast')
    
    # List /router/bgp/as/vrfs/vrf/neighbors/neighbor element: 10.202.1.2
    neighbor_element = vrf_element.neighbors.neighbor.create('10.202.1.2')
    neighbor_element.remote_as = '65501'
    neighbor_element.description = 'Customer eBGP SITE-2 [SNA-2-1] in VPN acme-65501 to 10.202.1.2'
    
    # List /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family element: ipv4-unicast
    address_family_element = neighbor_element.address_families.address_family.create('ipv4-unicast')
    
    # Container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family/route-policy
    address_family_element.route_policy.in_ = 'ACCEPT'
    address_family_element.route_policy.out = 'ACCEPT'
    
    # P-container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/address-families/address-family/as-override
    as_override = address_family_element.create_as_override()
    
    # P-container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/password
    password = neighbor_element.create_password()
    
    # Container: /router/bgp/as/vrfs/vrf/neighbors/neighbor/password
    password.encrypted = '045A080B0A6C1A1B5C4954'
    
    # P-container: /router/bgp/as/vrfs/vrf/rd
    rd = vrf_element.create_rd()
    
    # P-container: /router/bgp/as/vrfs/vrf/rd/two-byte-as
    two_byte_as = rd.create_two_byte_as()
    
    # Container: /router/bgp/as/vrfs/vrf/rd/two-byte-as
    two_byte_as.as_number = '65001'
    two_byte_as.index = 655012
    
    # P-container: /mpls/ldp
    ldp = ad.mpls.create_ldp()
    
    # List /mpls/ldp/address-families/address-family element: ipv4
    address_family_element = ldp.address_families.address_family.create('ipv4')
    
    # List /mpls/ldp/interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = ldp.interfaces.interface.create('GigabitEthernet0/0/0/0')
    
    # List /mpls/ldp/interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = ldp.interfaces.interface.create('GigabitEthernet0/0/0/1')
    
    # List /mpls/ldp/interfaces/interface element: GigabitEthernet0/0/0/2
    interface_element = ldp.interfaces.interface.create('GigabitEthernet0/0/0/2')
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/0
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/0')
    interface_element.shutdown = False
    interface_element.description = 'Link to AMS-CORE-1 [GigabitEthernet0/0/0/0]'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.7.2'
    address.netmask = '255.255.255.252'
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/1
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/1')
    interface_element.shutdown = False
    interface_element.description = 'Link to STO-CORE-1 [eth2]'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.25.1'
    address.netmask = '255.255.255.252'
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/2
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/2')
    interface_element.shutdown = False
    interface_element.description = 'Link to LJU-CORE-1 [eth1]'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.18.1'
    address.netmask = '255.255.255.252'
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/3
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/3')
    interface_element.shutdown = False
    
    # List /interfaces/interface element: GigabitEthernet0/0/0/3.100
    interface_element = ad.interfaces.interface.create('GigabitEthernet0/0/0/3.100')
    interface_element.shutdown = False
    interface_element.description = 'Customer VPN access SITE-2 [SNA-2-1] in VPN acme-65501'
    interface_element.vrf = 'acme-65501'
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.202.1.1'
    address.netmask = '255.255.255.252'
    
    # Container: /interfaces/interface/um-l2-ethernet-cfg:encapsulation/dot1q
    interface_element.um_l2_ethernet_cfg_encapsulation.dot1q.vlan_id = 100
    
    # List /interfaces/interface element: Loopback0
    interface_element = ad.interfaces.interface.create('Loopback0')
    
    # P-container: /interfaces/interface/ipv4/addresses/address
    address = interface_element.ipv4.addresses.create_address()
    
    # Container: /interfaces/interface/ipv4/addresses/address
    address.address = '10.0.0.2'
    address.netmask = '255.255.255.255'
    
    # Container: /hostname
    ad.hostname.system_network_name = 'FRA-CORE-1'
    
    # List /routing-policy/route-policies/route-policy element: ACCEPT
    route_policy_element = ad.routing_policy.route_policies.route_policy.create('ACCEPT')
    route_policy_element.rpl_route_policy = 'route-policy ACCEPT\n  done\nend-policy'

def adata_LJU_CORE_1():
    # Top node: /root
    ad = root()
    
    # Container: /configuration/system
    ad.configuration.system.host_name = 'LJU-CORE-1'
    
    # List /configuration/interfaces/interface element: eth1
    interface_element = ad.configuration.interfaces.interface.create('eth1')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    unit_element.description = 'Link to FRA-CORE-1 [GigabitEthernet0/0/0/2]'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.18.2/30
    address_element = inet.address.create('10.0.18.2/30')
    
    # List /configuration/interfaces/interface element: eth2
    interface_element = ad.configuration.interfaces.interface.create('eth2')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    unit_element.description = 'Link to STO-CORE-1 [eth3]'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.31.2/30
    address_element = inet.address.create('10.0.31.2/30')
    
    # List /configuration/interfaces/interface element: eth3
    interface_element = ad.configuration.interfaces.interface.create('eth3')
    interface_element.description = 'Customer VPN access SITE-4 [SNA-4-1] in VPN acme-65501'
    interface_element.encapsulation = 'flexible-ethernet-services'
    interface_element.flexible_vlan_tagging = True
    
    # List /configuration/interfaces/interface/unit element: 100
    unit_element = interface_element.unit.create('100')
    unit_element.description = 'Customer VPN access SITE-4 [SNA-4-1] in VPN acme-65501'
    unit_element.vlan_id = '100'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.204.1.1/30
    address_element = inet.address.create('10.204.1.1/30')
    
    # List /configuration/interfaces/interface element: lo0
    interface_element = ad.configuration.interfaces.interface.create('lo0')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.0.4/32
    address_element = inet.address.create('10.0.0.4/32')
    
    # P-container: /configuration/interfaces/interface/unit/family/iso
    iso = unit_element.family.create_iso()
    
    # List /configuration/interfaces/interface/unit/family/iso/address element: 49.0001.0100.0000.0004.00
    address_element = iso.address.create('49.0001.0100.0000.0004.00')
    
    # List /configuration/routing-instances/instance element: acme-65501
    instance_element = ad.configuration.routing_instances.instance.create('acme-65501')
    instance_element.apply_groups = []
    instance_element.apply_groups_except = []
    instance_element.instance_type = 'vrf'
    
    # List /configuration/routing-instances/instance/interface element: eth3.100
    interface_element = instance_element.interface.create('eth3.100')
    
    # Container: /configuration/routing-instances/instance/route-distinguisher
    instance_element.route_distinguisher.rd_type = '65001:655014'
    
    # Container: /configuration/routing-instances/instance/vrf-target
    instance_element.vrf_target.community = 'target:65001:65501'
    
    # P-container: /configuration/routing-instances/instance/vrf-table-label
    vrf_table_label = instance_element.create_vrf_table_label()
    
    # List /configuration/routing-instances/instance/protocols/bgp/group element: customer
    group_element = instance_element.protocols.bgp.group.create('customer')
    group_element.passive = True
    group_element.import_ = []
    group_element.export = []
    
    # List /configuration/routing-instances/instance/protocols/bgp/group/neighbor element: 10.204.1.2
    neighbor_element = group_element.neighbor.create('10.204.1.2')
    neighbor_element.description = 'Customer eBGP SITE-4 [SNA-4-1] in VPN acme-65501 to 10.204.1.2'
    neighbor_element.peer_as = '65501'
    neighbor_element.authentication_key = 'acme-65501'
    neighbor_element.as_override = True
    
    # Container: /configuration/routing-options/autonomous-system
    ad.configuration.routing_options.autonomous_system.as_number = '65001'
    
    # Container: /configuration/protocols/bgp
    ad.configuration.protocols.bgp.log_updown = True
    
    # List /configuration/protocols/bgp/group element: IPV4-IBGP
    group_element = ad.configuration.protocols.bgp.group.create('IPV4-IBGP')
    group_element.type = 'internal'
    group_element.local_address = '10.0.0.4'
    group_element.hold_time = 90
    group_element.authentication_key = 'ibgp-authentication-key'
    group_element.export = []
    
    # P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast
    unicast = group_element.family.inet_vpn.create_unicast()
    
    # Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/extended-route-retention
    unicast.graceful_restart.long_lived.extended_route_retention.retention_policy = []
    
    # P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast
    unicast = group_element.family.inet6_vpn.create_unicast()
    
    # Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/extended-route-retention
    unicast.graceful_restart.long_lived.extended_route_retention.retention_policy = []
    
    # P-container: /configuration/protocols/bgp/group/family/route-target
    route_target = group_element.family.create_route_target()
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.1
    neighbor_element = group_element.neighbor.create('10.0.0.1')
    neighbor_element.description = 'AMS-CORE-1'
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.2
    neighbor_element = group_element.neighbor.create('10.0.0.2')
    neighbor_element.description = 'FRA-CORE-1'
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.3
    neighbor_element = group_element.neighbor.create('10.0.0.3')
    neighbor_element.description = 'STO-CORE-1'
    
    # Container: /configuration/protocols/isis
    ad.configuration.protocols.isis.lsp_lifetime = 65535
    
    # List /configuration/protocols/isis/interface element: eth1
    interface_element = ad.configuration.protocols.isis.interface.create('eth1')
    interface_element.point_to_point = True
    
    # List /configuration/protocols/isis/interface/level element: 1
    level_element = interface_element.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/interface/level element: 2
    level_element = interface_element.level.create(2)
    level_element.metric = 5000
    
    # List /configuration/protocols/isis/interface element: eth2
    interface_element = ad.configuration.protocols.isis.interface.create('eth2')
    interface_element.point_to_point = True
    
    # List /configuration/protocols/isis/interface/level element: 1
    level_element = interface_element.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/interface/level element: 2
    level_element = interface_element.level.create(2)
    level_element.metric = 5000
    
    # List /configuration/protocols/isis/interface element: lo0.0
    interface_element = ad.configuration.protocols.isis.interface.create('lo0.0')
    
    # P-container: /configuration/protocols/isis/interface/passive
    passive = interface_element.create_passive()
    
    # List /configuration/protocols/isis/level element: 1
    level_element = ad.configuration.protocols.isis.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/level element: 2
    level_element = ad.configuration.protocols.isis.level.create(2)
    level_element.wide_metrics_only = True
    
    # List /configuration/protocols/ldp/interface element: eth1
    interface_element = ad.configuration.protocols.ldp.interface.create('eth1')
    
    # List /configuration/protocols/ldp/interface element: eth2
    interface_element = ad.configuration.protocols.ldp.interface.create('eth2')
    
    # List /configuration/protocols/mpls/interface element: eth1
    interface_element = ad.configuration.protocols.mpls.interface.create('eth1')
    interface_element.srlg = []
    interface_element.admin_group = []
    interface_element.admin_group_extended = []
    
    # List /configuration/protocols/mpls/interface element: eth2
    interface_element = ad.configuration.protocols.mpls.interface.create('eth2')
    interface_element.srlg = []
    interface_element.admin_group = []
    interface_element.admin_group_extended = []

def adata_STO_CORE_1():
    # Top node: /root
    ad = root()
    
    # Container: /configuration/system
    ad.configuration.system.host_name = 'STO-CORE-1'
    
    # List /configuration/interfaces/interface element: eth1
    interface_element = ad.configuration.interfaces.interface.create('eth1')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    unit_element.description = 'Link to AMS-CORE-1 [GigabitEthernet0/0/0/1]'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.20.2/30
    address_element = inet.address.create('10.0.20.2/30')
    
    # List /configuration/interfaces/interface element: eth2
    interface_element = ad.configuration.interfaces.interface.create('eth2')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    unit_element.description = 'Link to FRA-CORE-1 [GigabitEthernet0/0/0/1]'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.25.2/30
    address_element = inet.address.create('10.0.25.2/30')
    
    # List /configuration/interfaces/interface element: eth3
    interface_element = ad.configuration.interfaces.interface.create('eth3')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    unit_element.description = 'Link to LJU-CORE-1 [eth2]'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.31.1/30
    address_element = inet.address.create('10.0.31.1/30')
    
    # List /configuration/interfaces/interface element: eth4
    interface_element = ad.configuration.interfaces.interface.create('eth4')
    interface_element.description = 'Customer VPN access SITE-3 [SNA-3-1] in VPN acme-65501'
    interface_element.encapsulation = 'flexible-ethernet-services'
    interface_element.flexible_vlan_tagging = True
    
    # List /configuration/interfaces/interface/unit element: 100
    unit_element = interface_element.unit.create('100')
    unit_element.description = 'Customer VPN access SITE-3 [SNA-3-1] in VPN acme-65501'
    unit_element.vlan_id = '100'
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.203.1.1/30
    address_element = inet.address.create('10.203.1.1/30')
    
    # List /configuration/interfaces/interface element: lo0
    interface_element = ad.configuration.interfaces.interface.create('lo0')
    
    # List /configuration/interfaces/interface/unit element: 0
    unit_element = interface_element.unit.create('0')
    
    # P-container: /configuration/interfaces/interface/unit/family/inet
    inet = unit_element.family.create_inet()
    
    # List /configuration/interfaces/interface/unit/family/inet/address element: 10.0.0.3/32
    address_element = inet.address.create('10.0.0.3/32')
    
    # P-container: /configuration/interfaces/interface/unit/family/iso
    iso = unit_element.family.create_iso()
    
    # List /configuration/interfaces/interface/unit/family/iso/address element: 49.0001.0100.0000.0003.00
    address_element = iso.address.create('49.0001.0100.0000.0003.00')
    
    # List /configuration/routing-instances/instance element: acme-65501
    instance_element = ad.configuration.routing_instances.instance.create('acme-65501')
    instance_element.apply_groups = []
    instance_element.apply_groups_except = []
    instance_element.instance_type = 'vrf'
    
    # List /configuration/routing-instances/instance/interface element: eth4.100
    interface_element = instance_element.interface.create('eth4.100')
    
    # Container: /configuration/routing-instances/instance/route-distinguisher
    instance_element.route_distinguisher.rd_type = '65001:655013'
    
    # Container: /configuration/routing-instances/instance/vrf-target
    instance_element.vrf_target.community = 'target:65001:65501'
    
    # P-container: /configuration/routing-instances/instance/vrf-table-label
    vrf_table_label = instance_element.create_vrf_table_label()
    
    # List /configuration/routing-instances/instance/protocols/bgp/group element: customer
    group_element = instance_element.protocols.bgp.group.create('customer')
    group_element.passive = True
    group_element.import_ = []
    group_element.export = []
    
    # List /configuration/routing-instances/instance/protocols/bgp/group/neighbor element: 10.203.1.2
    neighbor_element = group_element.neighbor.create('10.203.1.2')
    neighbor_element.description = 'Customer eBGP SITE-3 [SNA-3-1] in VPN acme-65501 to 10.203.1.2'
    neighbor_element.peer_as = '65501'
    neighbor_element.authentication_key = 'acme-65501'
    neighbor_element.as_override = True
    
    # Container: /configuration/routing-options/autonomous-system
    ad.configuration.routing_options.autonomous_system.as_number = '65001'
    
    # Container: /configuration/protocols/bgp
    ad.configuration.protocols.bgp.log_updown = True
    
    # List /configuration/protocols/bgp/group element: IPV4-IBGP
    group_element = ad.configuration.protocols.bgp.group.create('IPV4-IBGP')
    group_element.type = 'internal'
    group_element.local_address = '10.0.0.3'
    group_element.hold_time = 90
    group_element.authentication_key = 'ibgp-authentication-key'
    group_element.export = []
    
    # P-container: /configuration/protocols/bgp/group/family/inet-vpn/unicast
    unicast = group_element.family.inet_vpn.create_unicast()
    
    # Container: /configuration/protocols/bgp/group/family/inet-vpn/unicast/graceful-restart/long-lived/extended-route-retention
    unicast.graceful_restart.long_lived.extended_route_retention.retention_policy = []
    
    # P-container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast
    unicast = group_element.family.inet6_vpn.create_unicast()
    
    # Container: /configuration/protocols/bgp/group/family/inet6-vpn/unicast/graceful-restart/long-lived/extended-route-retention
    unicast.graceful_restart.long_lived.extended_route_retention.retention_policy = []
    
    # P-container: /configuration/protocols/bgp/group/family/route-target
    route_target = group_element.family.create_route_target()
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.1
    neighbor_element = group_element.neighbor.create('10.0.0.1')
    neighbor_element.description = 'AMS-CORE-1'
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.2
    neighbor_element = group_element.neighbor.create('10.0.0.2')
    neighbor_element.description = 'FRA-CORE-1'
    
    # List /configuration/protocols/bgp/group/neighbor element: 10.0.0.4
    neighbor_element = group_element.neighbor.create('10.0.0.4')
    neighbor_element.description = 'LJU-CORE-1'
    
    # Container: /configuration/protocols/isis
    ad.configuration.protocols.isis.lsp_lifetime = 65535
    
    # List /configuration/protocols/isis/interface element: eth1
    interface_element = ad.configuration.protocols.isis.interface.create('eth1')
    interface_element.point_to_point = True
    
    # List /configuration/protocols/isis/interface/level element: 1
    level_element = interface_element.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/interface/level element: 2
    level_element = interface_element.level.create(2)
    level_element.metric = 5000
    
    # List /configuration/protocols/isis/interface element: eth2
    interface_element = ad.configuration.protocols.isis.interface.create('eth2')
    interface_element.point_to_point = True
    
    # List /configuration/protocols/isis/interface/level element: 1
    level_element = interface_element.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/interface/level element: 2
    level_element = interface_element.level.create(2)
    level_element.metric = 5000
    
    # List /configuration/protocols/isis/interface element: eth3
    interface_element = ad.configuration.protocols.isis.interface.create('eth3')
    interface_element.point_to_point = True
    
    # List /configuration/protocols/isis/interface/level element: 1
    level_element = interface_element.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/interface/level element: 2
    level_element = interface_element.level.create(2)
    level_element.metric = 5000
    
    # List /configuration/protocols/isis/interface element: lo0.0
    interface_element = ad.configuration.protocols.isis.interface.create('lo0.0')
    
    # P-container: /configuration/protocols/isis/interface/passive
    passive = interface_element.create_passive()
    
    # List /configuration/protocols/isis/level element: 1
    level_element = ad.configuration.protocols.isis.level.create(1)
    level_element.disable = True
    
    # List /configuration/protocols/isis/level element: 2
    level_element = ad.configuration.protocols.isis.level.create(2)
    level_element.wide_metrics_only = True
    
    # List /configuration/protocols/ldp/interface element: eth1
    interface_element = ad.configuration.protocols.ldp.interface.create('eth1')
    
    # List /configuration/protocols/ldp/interface element: eth2
    interface_element = ad.configuration.protocols.ldp.interface.create('eth2')
    
    # List /configuration/protocols/ldp/interface element: eth3
    interface_element = ad.configuration.protocols.ldp.interface.create('eth3')
    
    # List /configuration/protocols/mpls/interface element: eth1
    interface_element = ad.configuration.protocols.mpls.interface.create('eth1')
    interface_element.srlg = []
    interface_element.admin_group = []
    interface_element.admin_group_extended = []
    
    # List /configuration/protocols/mpls/interface element: eth2
    interface_element = ad.configuration.protocols.mpls.interface.create('eth2')
    interface_element.srlg = []
    interface_element.admin_group = []
    interface_element.admin_group_extended = []
    
    # List /configuration/protocols/mpls/interface element: eth3
    interface_element = ad.configuration.protocols.mpls.interface.create('eth3')
    interface_element.srlg = []
    interface_element.admin_group = []
    interface_element.admin_group_extended = []

